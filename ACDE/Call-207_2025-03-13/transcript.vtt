WEBVTT

1
00:01:01.120 --> 00:01:01.950
Matthew Whitehead: You tell it.

2
00:03:37.260 --> 00:03:39.670
Tim Beiko: Wow! Perry, Marius and Guillaume.

3
00:03:41.930 --> 00:03:43.170
pari,marius&gballet: Hello! Hello!

4
00:03:46.830 --> 00:03:49.419
pari,marius&gballet: Still trying to convince the rest of Geth to show up.

5
00:03:49.730 --> 00:03:50.790
pari,marius&gballet: Oh.

6
00:03:51.710 --> 00:03:54.589
Tim Beiko: Is portal? Is portal done.

7
00:03:55.500 --> 00:03:58.150
pari,marius&gballet: Or shipping it on May first, st yeah.

8
00:03:59.470 --> 00:04:00.110
Tim Beiko: Nice.

9
00:04:09.860 --> 00:04:13.629
pari,marius&gballet: I'm only here, cause I'm hoping Perry can help me debug your ptosis

10
00:04:16.790 --> 00:04:20.742
pari,marius&gballet: also. I don't think anyone is shipping it on May first, st in case I wasn't here.

11
00:04:21.524 --> 00:04:22.170
pari,marius&gballet: It's all too.

12
00:04:22.170 --> 00:04:24.229
Tim Beiko: Oh, no, I I've already tweeted it.

13
00:05:42.190 --> 00:05:43.020
Barnabas: Hello!

14
00:06:32.910 --> 00:06:37.379
Tim Beiko: Okay, let's wait one more minute or so, and then we'll get started.

15
00:07:36.530 --> 00:07:38.750
Tim Beiko: Okay, Josh, do you wanna move us over.

16
00:07:40.200 --> 00:07:41.330
Josh Davis: You are alive.

17
00:07:42.290 --> 00:07:42.990
Tim Beiko: Thank you.

18
00:07:43.776 --> 00:08:02.060
Tim Beiko: Welcome everyone to acde number 2, 0, 7 bunch of things on the agenda today. 1st and foremost, talking about Holeski, how we move that forward? And how we want to approach testing Petra. Given the issues we've seen on the network.

19
00:08:02.933 --> 00:08:19.140
Tim Beiko: Then there were some Fusaka topics. We didn't quite get to last time around the the transaction formatting for the blobs and some eof and pure dos testing interactions.

20
00:08:19.903 --> 00:08:43.229
Tim Beiko: If we get through all this, then we should discuss, how we want to approach deadlines. For, like the proposals for Fusaka, in addition to what's already there. And then we get through all of that. Some updates on 4 fours. And there are a couple eips that wanted to be presented, as well as some discussion around stateless.

21
00:08:45.170 --> 00:08:56.399
Tim Beiko: to kick us off, Perry, do you want to give an overview of your document for Holesky and the outreach that's been happening in the past week or so to figure out the right path forward.

22
00:08:57.290 --> 00:09:06.280
pari,marius&gballet: Yeah. So maybe a bit of context. So Holski was suffering from non finality for about 2, a little less than 2 weeks.

23
00:09:06.400 --> 00:09:18.299
pari,marius&gballet: On Monday we were able to get it to finalize again. And that helps a lot with client stability nodes. Being able to sync the network for map builders being able to test their stuff, and so on.

24
00:09:18.690 --> 00:09:30.149
pari,marius&gballet: However, a side effect of the long duration of non-finality as well as the invalid justification is that we have a lot of slashings as well as exits due to going below the ejecture balance.

25
00:09:30.300 --> 00:09:40.570
pari,marius&gballet: And just as a note, the ejection balance on holds Case 28 Eth. Whereas on Mainnet it's 16 eth. It's another one of these discrepancies we probably will standardize in the future.

26
00:09:40.880 --> 00:10:05.039
pari,marius&gballet: So as a result, the exit queue on hold. Ski is about a million validators, and the downside of this is that it would take over a year for these validators to fully exit. So while Holeski is still useful for a lot of things, we won't be able to realistically test Petra exits on it. This is, of course, limiting for

27
00:10:05.270 --> 00:10:12.960
pari,marius&gballet: for a lot of staking providers, etc, especially because a few of the Petra features rely on on exits.

28
00:10:13.290 --> 00:10:35.760
pari,marius&gballet: So we had a document outlined. Maybe someone could post it in the chat. If not, I will try to quickly grab it. So we had a document outlined with 4 options. So the 4 options being plan A, which is, we just set up a new testnet. So this would be the 3rd line of test nets. None of the options

29
00:10:36.080 --> 00:11:02.689
pari,marius&gballet: eliminate holes. Key, because there's still enough to learn from it, especially with having such a full exit queue for so long. But instead, another testnet that we maintain there was a minor modification to this proposal proposed by Jim. That's essentially let's not do 5 year test nets anymore. Let's do 3 year test nets makes it a bit more predictable. There's plan B, which is, use Devnet 6 as a testnet until June.

30
00:11:02.930 --> 00:11:06.029
pari,marius&gballet: The benefit is that this network is already up and live.

31
00:11:06.300 --> 00:11:25.080
pari,marius&gballet: Plan C is to set up a shadow fork. So this would happen for span of, let's say, a month or so until Petra is live on Mainnet and Plan D is using a hacky solution. So a new fork that we introduce on the Cl or whatever that empties the exit. Queue

32
00:11:25.640 --> 00:11:33.820
pari,marius&gballet: so these are the 4 options proposed? Maybe I pause here to hear initial feedback, or should I? Already?

33
00:11:36.190 --> 00:11:38.049
pari,marius&gballet: Maybe I pause here for initial feedback.

34
00:11:41.470 --> 00:11:58.509
Tim Beiko: Yeah. And I guess maybe yeah, for more context, it seems like the feedback that we've received mostly leans towards option a. And there was some, some minor support for the different ones. But overall that feels like the one that would make the most people happy. So

35
00:11:59.190 --> 00:12:03.210
Tim Beiko: does anyone have different perspectives on this. Yvonne.

36
00:12:05.390 --> 00:12:19.146
Ivan Metrikin: Yeah. Thanks. Yeah. So 1st of all, thanks for the doc. It's really clear. from Lido side. The best option would be option d, because we already have all our tooling

37
00:12:20.145 --> 00:12:34.370
Ivan Metrikin: kind of tailored to to the existing deployment. And if we go for option a, which is essentially a new test net. We would need to probably spend 3 to 4 weeks to redeploy the contracts, all the

38
00:12:34.430 --> 00:12:57.999
Ivan Metrikin: off chain tools around it, including Oracle's monitoring and interfaces, and also make sure that we have all the integrations on top of Lido. Also there, so ideally for us. It would be option d if we go for option a, we will probably need a little bit more time.

39
00:13:03.110 --> 00:13:04.040
Tim Beiko: Thank you.

40
00:13:05.790 --> 00:13:16.394
Tim Beiko: And yeah, I think that. So the main concern around option d was, that we don't really want to implement code paths that mess with the exit queue

41
00:13:17.960 --> 00:13:26.889
Tim Beiko: for just Holeski. And then, you know, risk that being triggered on Mainnet or having even more help issues on Holeski.

42
00:13:39.080 --> 00:13:40.910
Tim Beiko: okay, Matt.

43
00:13:41.680 --> 00:14:01.609
Matt Nelson: Yeah, I mean, across the you know the landscape. I think that most of the protocols that are built on on that are not core devs are gonna prefer. D, this is just a hunch. It's the same for eigen layer protocol. The reason being is that you know all of the other options require a full

44
00:14:01.610 --> 00:14:12.888
Matt Nelson: deploy of integrations and infrastructure like not just, you know it. It's Lido, but it's also Lido, plus everything built on top of Lido, and it's Eigenlayer and everything built on top of Eigenlayer.

45
00:14:13.290 --> 00:14:24.080
Matt Nelson: we yeah. Again, we prefer D simply because of the experience and the the ability to not, let's say, make mistakes or miss things in our testing in general.

46
00:14:24.548 --> 00:14:33.399
Matt Nelson: I know that there's philosophical argument to be made here. Having worked on a client team. So I just kind of understand the the.

47
00:14:33.620 --> 00:14:43.579
Matt Nelson: the, the context in which this exists. But D is definitely preferred for us just from the sake of experience and the fact that even the New Testnet solutions or the Devnet solutions

48
00:14:43.580 --> 00:15:06.659
Matt Nelson: we'll still take time to test in General Prior, like, if we're if we're thinking about the mainnet timeline, we have to push back in that sense because we wouldn't be able to test any of this functionality regardless using a through C with a short timeline. So if, again, if our if if we're looking at like the expedience of the mainnet, release as our timing, and we want to make sure that the large protocols are tested

49
00:15:07.229 --> 00:15:20.450
Matt Nelson: it. It. That's the kind of trade off that I I think will happen. And yeah, d is d is is our approach. And if there's something that we could do on the this like like you said, there's hacks, of course, if we can make those hacks

50
00:15:20.570 --> 00:15:21.840
Matt Nelson: kind of.

51
00:15:22.130 --> 00:15:29.160
Matt Nelson: let's say, a rip and replace, let's I think that that would be something worthwhile considering or just code pass that we can straight up delete.

52
00:15:31.640 --> 00:15:39.177
Tim Beiko: Thanks. Yeah, I don't know if anyone on the Cl side can share like, what the minimal implementation for D would be.

53
00:15:56.630 --> 00:16:00.660
Tim Beiko: there, anyone from the Cl. Side who can give an overview.

54
00:16:13.040 --> 00:16:13.890
Ramana: Yes.

55
00:16:19.680 --> 00:16:27.340
Tim Beiko: Okay? I guess until someone steps up. One. Yeah. Another.

56
00:16:27.780 --> 00:16:46.739
Tim Beiko: Another consideration is, if we if we do option, d you know, do we have this as like a short term version. So it's kind of it's kind of a weird variant of option. C, almost. So instead of having it be a shadow fork. We say that we empty the exit. Queue

57
00:16:47.343 --> 00:17:00.340
Tim Beiko: we. We say that we empty the exit queue, and then, we also coordinate launching a new testnet so that we don't consider so that we don't consider yeah, having this be a long live fix.

58
00:17:12.849 --> 00:17:17.769
pari,marius&gballet: Proposal there is that we essentially do d for the short term

59
00:17:18.263 --> 00:17:31.709
pari,marius&gballet: get whole ski to a usable testing state, and then, shortly after sunset. It and parallelly spin up a new testnet that replaces whole ski. Longer term is that sort of the concrete proposal of a plus d.

60
00:17:32.430 --> 00:17:45.270
Tim Beiko: Yeah, that's what I would propose. So that. And then to the extent that we can isolate that implementation on the Cl side, and you know. Consider Holeski as deprecated afterwards. We can make sure that like

61
00:17:46.188 --> 00:17:55.170
Tim Beiko: we, we don't have this custom execute week as the like, yeah. As part of like the longer test that

62
00:17:59.730 --> 00:18:02.109
pari,marius&gballet: Is there any Cl dev who

63
00:18:02.280 --> 00:18:08.430
pari,marius&gballet: can maybe enumerate like what this would imply like? Is this a new custom fork where we just

64
00:18:08.690 --> 00:18:12.830
pari,marius&gballet: set the validator State to be whatever we want it to be? Or is the

65
00:18:13.487 --> 00:18:15.630
pari,marius&gballet: conflict change we're talking about and.

66
00:18:16.300 --> 00:18:18.970
Nishant: Yeah, it it would be. It would be a hard fork.

67
00:18:19.180 --> 00:18:25.479
Nishant: So basically, we have a really long exit exit queue. And we just need to like flush it out

68
00:18:26.220 --> 00:18:30.580
Nishant: on how exactly to do that we would need more time.

69
00:18:30.830 --> 00:18:32.709
Nishant: cause they're like a lot of

70
00:18:32.890 --> 00:18:36.099
Nishant: moving pieces to how it's all interrelated.

71
00:18:42.460 --> 00:18:44.699
Tim Beiko: Let's do. Yeah, Daniel.

72
00:18:45.560 --> 00:18:55.969
Daniel Lehrner (Besu): Yeah, just wanted to say, I'm not really sure if the would really be faster, because if we are talking about setting or like creating a new hard fork

73
00:18:56.180 --> 00:19:00.740
Daniel Lehrner (Besu): implementing the feature. Then we have to test the feature before we run it on Holeski.

74
00:19:01.080 --> 00:19:01.980
Daniel Lehrner (Besu): So

75
00:19:03.230 --> 00:19:13.179
Daniel Lehrner (Besu): I don't know this. This sounds like several weeks that it would take anyways until we can do it. So it's not really much, maybe faster, than doing a and setting up

76
00:19:13.640 --> 00:19:16.019
Daniel Lehrner (Besu): all the dependency. Is there.

77
00:19:16.550 --> 00:19:27.130
Tim Beiko: Well, it's like, okay, so a will be quicker for quarters to do, obviously. But the question is, how long will define the exit queue be for quarter.

78
00:19:27.630 --> 00:19:30.780
Daniel Lehrner (Besu): Yeah, but that's that's what I mean. It might even take longer.

79
00:19:31.540 --> 00:19:35.670
Daniel Lehrner (Besu): you know, than than doing a and setting everything up there.

80
00:19:39.564 --> 00:19:41.140
Tim Beiko: And flags are, yeah.

81
00:19:42.040 --> 00:19:45.970
nflaig: Yeah. So I haven't checked in detail how the implementation would look. But

82
00:19:46.408 --> 00:19:55.010
nflaig: I don't think there's a way to only do it via config change. So you would need a code path like that modifies production code. I guess

83
00:19:55.190 --> 00:20:05.779
nflaig: so would the idea be that we have a separate, like polesky version of our code. So we don't introduce a regression in like our production code, or.

84
00:20:06.770 --> 00:20:12.870
pari,marius&gballet: Couldn't we add a new fork? And at that fork change the churn limit to something insanely large?

85
00:20:13.820 --> 00:20:20.539
nflaig: But you still need like in in your condition you still need. Is it this fork? And then you apply the new limit right? And you would.

86
00:20:20.540 --> 00:20:23.420
pari,marius&gballet: I think in any scenario we'd need a new fork.

87
00:20:23.550 --> 00:20:27.000
pari,marius&gballet: But if it's a config value change

88
00:20:27.450 --> 00:20:30.650
pari,marius&gballet: that doesn't feel like it needs much other code.

89
00:20:33.630 --> 00:20:34.029
nflaig: But any.

90
00:20:34.030 --> 00:20:34.889
Barnabas: This could really.

91
00:20:34.890 --> 00:20:37.800
nflaig: Talk to a client is really expensive.

92
00:20:38.400 --> 00:20:44.090
Barnabas: But this could live on a separate branch. It doesn't need to ever go back to master or anything.

93
00:20:45.750 --> 00:20:50.349
Tim Beiko: I think the issue is, is like a high fixed cost. The hard forks on the consensus layer.

94
00:20:57.340 --> 00:21:01.229
nflaig: So I think if we have just a Oh, sorry. Yeah. Go ahead.

95
00:21:01.230 --> 00:21:02.110
Tim Beiko: No go ahead!

96
00:21:02.110 --> 00:21:11.109
nflaig: So I think, yeah, if we have, like a custom build where we maybe even suggest the epoch like how the idea previously was with peerless.

97
00:21:11.430 --> 00:21:14.479
nflaig: I think then this could be fine. Yes.

98
00:21:20.540 --> 00:21:21.500
Tim Beiko: Yeah. Mikhail.

99
00:21:22.310 --> 00:21:32.350
Mikhail Kalinin: We will have to reset the earliest exit epoch in the State. This is a new arrival introduced

100
00:21:32.920 --> 00:21:42.010
Mikhail Kalinin: in Electra, so we will have to reset it to whatever epoch we choose for this hard work, and

101
00:21:42.200 --> 00:21:48.320
Mikhail Kalinin: because simply changing the size of the churn, will not help much.

102
00:21:49.240 --> 00:22:12.010
Mikhail Kalinin: because we already have this parameter. We have this, your list exit epoch somewhere in year after now. And yeah, so it will for any next exit or for any next partial withdrawal that is submitted. This variable will be used as like a basement to compute the exit ebook.

103
00:22:12.190 --> 00:22:21.750
Mikhail Kalinin: So the hard fork would look like resetting this variable. And yeah, maybe increasing the churn because we still see some

104
00:22:21.860 --> 00:22:27.960
Mikhail Kalinin: slashings there. So the exit queue will be reduced by slashings, anyway.

105
00:22:28.530 --> 00:22:40.910
Mikhail Kalinin: But I don't. I have checked. And I don't. I don't see that those slashings are really a big issue, at least now, because, yeah, there are few.

106
00:22:41.250 --> 00:22:43.049
Mikhail Kalinin: maybe a few, per ebook.

107
00:22:43.650 --> 00:22:50.289
Mikhail Kalinin: So yeah, might be just resetting this where I will in the state, be

108
00:22:50.430 --> 00:22:53.389
Mikhail Kalinin: what we want to do if we want to. Option d.

109
00:22:54.930 --> 00:22:56.619
Tim Beiko: Got it Barnabas.

110
00:22:56.980 --> 00:23:02.279
Barnabas: I think the recent slashing were not related to the non finality. By the way.

111
00:23:02.720 --> 00:23:05.791
Barnabas: there, there's those keys were just run

112
00:23:06.450 --> 00:23:08.689
Barnabas: by 2 different people at the same time.

113
00:23:16.860 --> 00:23:17.430
pari,marius&gballet: Okay, so.

114
00:23:17.430 --> 00:23:19.350
Tim Beiko: Is it? Oh, yeah, please.

115
00:23:19.560 --> 00:23:31.979
pari,marius&gballet: How about this? It seems like in any scenario a is required a new testnet. So let's just decouple that a bit we will be. Then we already have a proposal for what a could look like, and maybe we can talk about what that is.

116
00:23:32.190 --> 00:23:35.399
pari,marius&gballet: But we go ahead with setting up a new testnet.

117
00:23:35.650 --> 00:23:45.839
pari,marius&gballet: and D is something it feels like we don't have enough information on the approach today. So how about we just do a quick breakup room breakout room tomorrow.

118
00:23:46.460 --> 00:24:00.029
pari,marius&gballet: Where Cl. Devs can show up. We have some time to think about potential options, and then on that call we decide if D is viable or not, so either D happens or D doesn't happen. But a can happen irrespective.

119
00:24:04.820 --> 00:24:08.347
Tim Beiko: It seems reasonable to like. Yeah, move forward with a

120
00:24:09.190 --> 00:24:17.320
Tim Beiko: agreed. It seems like the Cl side needs to look a bit more into what it would take for for D to happen. Is it realistic to have that

121
00:24:17.420 --> 00:24:22.730
Tim Beiko: tomorrow, like say, after the Epbs call at 15 utc, or

122
00:24:23.010 --> 00:24:28.750
Tim Beiko: do people think we need a bit more time to review this? And then we should just do the testing call on Monday.

123
00:24:30.230 --> 00:24:40.310
pari,marius&gballet: Yeah. And I think D in any option would imply that Holski is basically sunset once we've gotten its purpose for testing pector.

124
00:24:40.470 --> 00:24:46.210
pari,marius&gballet: So if clients do need to make a hacky fix, if clients do need to make releases whatever that

125
00:24:46.350 --> 00:24:52.240
pari,marius&gballet: it can be done in a branch that they can basically delete once Petron's life.

126
00:24:57.990 --> 00:25:04.239
Barnabas: I think, without enough Cl. Devs on the call. It's gonna be very hard to make any kind of decision about the.

127
00:25:04.420 --> 00:25:04.960
Tim Beiko: Yeah.

128
00:25:05.100 --> 00:25:13.342
Tim Beiko: Yeah. So that's why I would kind of lean towards the testing call on Monday to at least give people a couple of days heads up, especially like the folks in Australia.

129
00:25:16.500 --> 00:25:19.080
Tim Beiko: unless, like, yeah, I don't know. Is there?

130
00:25:20.410 --> 00:25:26.050
Tim Beiko: Is there something we gain by deciding tomorrow, or like versus Monday.

131
00:25:27.290 --> 00:25:35.900
Tim Beiko: I assume that setting up the new test net is some amount of work, and so we on the devops side, we can like prioritize that over the next couple of days.

132
00:25:36.711 --> 00:25:40.580
pari,marius&gballet: Yeah, it seems like we're going forward with a anyway. So.

133
00:25:40.580 --> 00:25:41.130
Tim Beiko: Yeah.

134
00:25:41.130 --> 00:25:42.630
pari,marius&gballet: I think we're unblocked.

135
00:25:43.461 --> 00:25:45.430
pari,marius&gballet: So yeah, it should be fun today.

136
00:25:46.530 --> 00:26:00.870
Tim Beiko: Okay. So then I would lead to it. Okay, let's let's ask the Cls to show up on Monday, or to at least articulate like their preference around. If and how we could do d by Monday and make a final call about that on the testing call.

137
00:26:11.850 --> 00:26:17.325
Tim Beiko: Okay, and then, do you want to walk us? So you posted a doc about

138
00:26:18.117 --> 00:26:25.490
Tim Beiko: about how to set up the new test net, Perry as well, and I think there were 2 different options there. So do you want to walk us through it?

139
00:26:30.650 --> 00:26:38.011
pari,marius&gballet: Yeah, it was fetching the the link. So the test that we want to propose is called Hoodie.

140
00:26:38.640 --> 00:26:39.720
pari,marius&gballet: The

141
00:26:40.500 --> 00:26:51.169
pari,marius&gballet: idea is that since it replaces whole ski, it needs to be relatively similar from a testing perspective. So public valid data set, we'll use all the mainnet variables that we can.

142
00:26:51.170 --> 00:27:13.660
pari,marius&gballet: I think there's 2 options. One is that it's slightly smaller than Mainnet and B is like Plan A is that it's slightly smaller than Mainnet and Plan B is that it's slightly larger. Slash on par with mainnet, and in both options we can either do stake distribution similar to Mainnet so 32 eth per validator.

143
00:27:13.680 --> 00:27:21.649
pari,marius&gballet: Or if that's going to be expensive for client teams to run, we do 2048 Eth. Validators.

144
00:27:21.780 --> 00:27:33.466
pari,marius&gballet: We have a few ideas on how we can put that in the Genesis state with our Petra live and still. You know. Do the transition quickly. If we coordinate it at least. And

145
00:27:33.970 --> 00:27:46.239
pari,marius&gballet: yeah, in either situations, we'd proposed that client teams plus each band Ops together does something like 67, 70% of the valid data set. So in the future it would be relatively easy to coordinate upgrades, and so on.

146
00:27:48.410 --> 00:27:55.969
pari,marius&gballet: yeah, any any thoughts on. If people would prefer 2048 eth. Or 32 Eth. And similar to Mainnet.

147
00:27:59.190 --> 00:28:09.440
Tim Beiko: So I guess there there was a a comment by Paul in the agenda talking about like the different roles of test nets. And and you know what we want from them. I think

148
00:28:10.350 --> 00:28:28.579
Tim Beiko: one question here is like, What is the purpose of Hoodie? Do we want it to be like a a performance. You know, like a performance Maxing, test nets. Do we want it to be just like a stable staging environment for people? Because you could imagine

149
00:28:28.720 --> 00:28:49.532
Tim Beiko: if we wanted to be more on the stable side in the place where, say, Lido and others just can reliably test stuff, we should probably do the lowest kind of the lowest overhead which is B. But if we wanted it to be a test net, where, like, say we push them out of their account beyond Mainnet. Then maybe we do things like push the gas limit beyond Mainnet as well.

150
00:28:50.220 --> 00:28:59.149
Tim Beiko: we should probably do a but that raises the question of okay, should there be somewhere else that we expect projects to test, and that's more of a staging environment for maintenance.

151
00:29:00.870 --> 00:29:02.150
Tim Beiko: Celsius.

152
00:29:02.880 --> 00:29:12.920
saulius: Yes. So so one thing that I I raised on this agenda issue. I'm I'm thinking that we could have 2

153
00:29:13.030 --> 00:29:23.838
saulius: networks, 2 2 networks something like the the current holistic. And then one would be the network that that has

154
00:29:24.630 --> 00:29:31.189
saulius: regular non finalities. So it's a kind of battlefield network where

155
00:29:31.300 --> 00:29:57.694
saulius: we could, I mean, the the client teams could regularly test their clients, and even the community could test their setups, applications, or whatever they use in in a close to Mainnet type network, where there is a battle mode, and then we would have another one. Let's say, a new network, which is also a large network

156
00:29:58.150 --> 00:30:21.810
saulius: close to Mainnet in terms of for the data counter or stake teeth and that that would be dedicated for like steady performance. Something like you know, like, like we experience currently on the network on the mainnet. And hopefully it will. It will proceed like that on on the mainnet. So

157
00:30:22.710 --> 00:30:27.889
saulius: I would like to hear what what our opinions on on this idea.

158
00:30:32.627 --> 00:30:34.120
Tim Beiko: Yeah. Ivan, maybe.

159
00:30:34.580 --> 00:30:35.679
Ivan Metrikin: Yeah. So

160
00:30:36.400 --> 00:30:51.659
Ivan Metrikin: generally for us, having a test net means that we need to deploy all the off chain tooling around it, and also have 3rd parties, for example, those running the oracles and the Council demon, and

161
00:30:52.154 --> 00:31:10.420
Ivan Metrikin: other of critical off chain parts of the protocol to be involved, including not operators. And also have things like Dvt from both Mobile and Ssv deployed and run and maintained which essentially doubles the coordination workload for

162
00:31:10.530 --> 00:31:14.610
Ivan Metrikin: yeah, for us and for everyone involved with Lido.

163
00:31:14.810 --> 00:31:20.540
Ivan Metrikin: So it probably okay, like in the short term. But I'm not sure it will be

164
00:31:20.740 --> 00:31:24.039
Ivan Metrikin: sustainable for us in in the long term to have 2.

165
00:31:26.630 --> 00:31:42.699
pari,marius&gballet: Yeah. So maybe that's where Paul's point about the staging environment makes sense. So the Hoodie network could be smaller than main net, but still large where everyone external can test. So Lido can stake test here, and so on. And the idea is that it's quite stable.

166
00:31:42.850 --> 00:32:03.989
pari,marius&gballet: We can either repurpose whole ski, or we can have another network that pushes the gas limit that pushes validator account and so on. And that can purely be client devs. And opt in for anyone in the community who prefers that sort of test. But the understanding is this sort of non finality network will always be breaking will always be pushing the edge.

167
00:32:04.110 --> 00:32:09.370
pari,marius&gballet: and if you're interested in testing the edge of your protocol you can deploy there. But if not, it's up to you.

168
00:32:14.430 --> 00:32:21.280
Tim Beiko: Yeah. The way I would think about it is almost like Lidl. Lidel is a very weird app, because there's a sense in which it's just a contract.

169
00:32:21.440 --> 00:32:40.310
Tim Beiko: it's similar to say uniswap. But then there's a sense of which it's like much more complicated infrastructure. But I think maybe in in the like medium term. We need like 3 test nets, one for just vanilla contracts, which sepulia is is fine for, and whatever sepulia successor is, so if you're just building something that's purely on chain.

170
00:32:40.330 --> 00:33:04.577
Tim Beiko: maybe one for like infrastructure, which is kind of what 2D could aim to be which has, like similar parameters to Mainnet, but is, is hopefully, relatively stable. I think we probably also need one that's like focused on what core Devs wants. And this is where things like say, having, like a higher validator account than Mainnet, or potentially having, like a higher gas limit than Mainnet could help, because we see what actually breaks at the protocol level.

171
00:33:06.970 --> 00:33:09.739
Tim Beiko: would that generally make sense to people? So it's like we have

172
00:33:10.320 --> 00:33:13.430
Tim Beiko: the least stable kind of core dev oriented

173
00:33:13.630 --> 00:33:29.029
Tim Beiko: test net which doesn't exist today, one that's more for intra providers. That would be hoodie, and then one that's purely for just like vanilla apps that don't have many complex dependency, especially on the validator set. And that's a Polia.

174
00:33:36.790 --> 00:34:00.069
Ivan Metrikin: maybe I can start from light of side. I really like this idea with this multiple test nets. I think it's it's really good the only risk I see here is that if something is tested on one of these test nets, and then it goes to Mainnet, and some part parties are not present on the testnet. For example, if we test something on the client team

175
00:34:00.070 --> 00:34:12.190
Ivan Metrikin: testnet and then push it to Mainnet bypassing the testnet where we have Lido, then it might like break Lido unintentionally. So then perhaps we should also have a free.

176
00:34:12.199 --> 00:34:13.209
Tim Beiko: Oh, to be clear!

177
00:34:13.279 --> 00:34:21.749
Tim Beiko: Yes, yes, yes, to be clear, every hard fork should go through all of the test nets. But the the way I would order them.

178
00:34:21.749 --> 00:34:45.419
Tim Beiko: you know, had we? If we had these 3 test nets like, first, st you go into core depth test nets. If that one breaks, only client teams are affected. Then, assuming that's well, you go on the infra test net, and if that one breaks well, it's kind of a similar situation that we're in now, so we should really not want to break it. And then the last one is sepulia, and by there, you know, we should expect absolutely nothing to break. And you know that's and and if you're a new developer

179
00:34:45.429 --> 00:34:47.389
Tim Beiko: coming into the ecosystem

180
00:34:47.939 --> 00:34:56.046
Tim Beiko: it means that you, you know, we? We kind of maybe point you towards the Polia first, st because you don't care about the close validator set if you're like a more

181
00:34:57.019 --> 00:35:09.879
Tim Beiko: yeah, if if you're like, I don't know like a more infra, or like complicated project that maybe you are testing on on. But most, and then most people don't quite test on on the core dev testnet the one

182
00:35:10.589 --> 00:35:22.246
Tim Beiko: the one risk I could see there, though, is that we, if we want to create like a high like a high performance test net for core devs. How do you actually get transactions?

183
00:35:23.369 --> 00:35:28.089
Tim Beiko: yeah. And then, if no one's using it like, and all the blocks are empty. That's that's perhaps not ideal.

184
00:35:39.560 --> 00:35:45.469
Kamil Chodoła: So for this high performance testnet I I would see, and I already discussed, that

185
00:35:45.490 --> 00:36:11.899
Kamil Chodoła: internally in undermine, was discussing yesterday with Paritosh would be great also to consider it, to have some very big state. I don't know how to achieve that yet, but would be great to have something which will not start from empty state, but something which will be at least twice bigger than Mainnet. So we can test much more edge cases and test everything under bigger load than on the increased gas limit, or something

186
00:36:12.020 --> 00:36:14.170
Kamil Chodoła: that would be also somehow beneficial.

187
00:36:20.047 --> 00:36:29.690
pari,marius&gballet: How should we? How should we distribute twice the main state? That seems pretty difficult to me.

188
00:36:30.830 --> 00:36:45.929
pari,marius&gballet: I think he means just by using tools that increase the state regularly. Oh, yeah, well, yeah, we can. We can. We can just fuss all the time. That that's fine, I think, or using, like a shadow fork or something along those.

189
00:36:48.580 --> 00:37:10.129
Kamil Chodoła: Yeah, so ultimately, we'll have something which will allow us to test under those worst conditions which we always consider with, for example, increasing gas limit which will start increasing the state size, and how we will behave under such conditions. Right? So would be great to have a fuzzing tools which will really pump up to the limits that the testnet.

190
00:37:10.250 --> 00:37:14.890
Kamil Chodoła: and make it at some at some point bigger for sure than main.

191
00:37:19.120 --> 00:37:22.960
Kamil Chodoła: And also one thing to consider for such one would be great to maybe.

192
00:37:23.260 --> 00:37:35.580
Kamil Chodoła: as Team already said, in in terms of development and hard fork schedule, it should be always before the other test. That's more more official and more stable ones. But maybe it could even

193
00:37:35.990 --> 00:37:38.119
Kamil Chodoła: I don't know to consider.

194
00:37:38.590 --> 00:37:49.399
Kamil Chodoła: Push some changes from upcoming hard forks earlier, when we will be after a few devnets, and already start testing those on bigger chains rather than only in devnets.

195
00:37:50.560 --> 00:38:09.240
pari,marius&gballet: Yeah, I think part of the issue has been our test. Nets did have like different configs from Mainnet. So that's something we already said we would stop doing so. Hoodie would just basically have contracts, live in the same location, have the same ejection balances, have the same values that mainnet has. So that should also go a long way to

196
00:38:09.825 --> 00:38:12.499
pari,marius&gballet: make for an easier fork. Basically.

197
00:38:20.400 --> 00:38:30.340
Tim Beiko: Okay? And yeah, we obviously already have a ton of work on our plate. So we probably shouldn't spin up like a another test net just for fun right now. But I think

198
00:38:30.900 --> 00:38:37.863
Tim Beiko: framing Hoodie as the place where we get infra providers to test feels reasonable.

199
00:38:41.090 --> 00:38:43.819
Tim Beiko: if we go that route? Do we?

200
00:38:44.050 --> 00:38:51.130
Tim Beiko: Do? We want to have a smaller than mainnet validator set size?

201
00:39:02.590 --> 00:39:08.409
Tim Beiko: Okay, does anyone disagree with a smaller than main net set size. So basically plan A and Perry's document.

202
00:39:08.410 --> 00:39:17.960
saulius: And why do you want to make a smaller reset? Because, after consolidations, it should be easier to run a large number of validators.

203
00:39:20.780 --> 00:39:34.335
saulius: So, so I would prefer the the similar size of Staked Eth, and preferably even consolidations that are quite close to to Mainnet.

204
00:39:36.140 --> 00:39:41.930
Tim Beiko: So basically, you'd want option. B, using as many, 2048 east validators as we can.

205
00:39:42.270 --> 00:39:53.299
saulius: Well, not as many, because that's a very large number. Theoretically, I mean something close to to Mainnet distribution.

206
00:39:53.880 --> 00:39:54.580
pari,marius&gballet: Of course.

207
00:39:54.580 --> 00:39:57.590
saulius: Validated recess and consolidations.

208
00:39:58.160 --> 00:40:13.600
pari,marius&gballet: I think, to Dustin's point, we essentially want to keep it as similar to possible as Mainnet, for now, if there's a lot of consolidations that happen on Mainnet, then we can also do so on Hoodie. But if not, then we basically leave it as a mirror of mainnet.

209
00:40:18.600 --> 00:40:24.249
Tim Beiko: Okay. So that means we launch it with mostly 32, each file, or or exclusively 32. Each validators.

210
00:40:24.250 --> 00:40:32.139
pari,marius&gballet: Exactly. And if we notice that there's a lot of consolidations happening on Mainnet, we can just proportionally so on the on the Hoodie testnet.

211
00:40:36.370 --> 00:40:39.649
Tim Beiko: Okay, does that seem reasonable to everyone?

212
00:40:48.980 --> 00:40:51.763
Tim Beiko: Yeah. So to the doc

213
00:40:53.810 --> 00:41:03.099
Tim Beiko: plan. Well, Plan B says, bigger than Mainnet. But I guess here we just say about the same as Mainnet, and then start with, non consolidated validators consolidate them over time.

214
00:41:08.130 --> 00:41:12.020
Tim Beiko: Okay, anything else on the test nets?

215
00:41:15.460 --> 00:41:34.519
Tim Beiko: And again, yeah. So this is still what we do about the new network. For Holusky. If people want to review the different options and check in on Monday. That would be ideal. So we may be able to get a quicker a quicker turnaround there. But then

216
00:41:35.190 --> 00:41:47.624
Tim Beiko: there's no world, I guess, where we do keep Olesky as the main place for info providers long term so once. Who d is live applications should start thinking about migrating to this

217
00:41:48.400 --> 00:41:54.249
Tim Beiko: and maybe this will be after Petra if we manage to keep Poleski around.

218
00:42:01.810 --> 00:42:07.149
Tim Beiko: okay. And then Barnabas says, when do we want to launch it? How long the client teams need to integrate a new network?

219
00:42:10.690 --> 00:42:26.069
Tim Beiko: I guess this might depend on what we do for Holeski. So let's maybe discuss that on the testing call Monday. Because if teams are gonna prioritize doing some weird fix for Holeski, I assume that'll delay. Yeah, that'll delay launching the new network.

220
00:42:27.580 --> 00:42:29.519
Tim Beiko: Unless anyone has a strong opinion. Now.

221
00:42:30.290 --> 00:42:33.640
Barnabas: Shouldn't be the other way around. Prioritize a then.

222
00:42:41.050 --> 00:42:42.889
Tim Beiko: Well, if we are doing detail.

223
00:42:43.260 --> 00:42:44.719
Tim Beiko: Oh, sorry! Go ahead.

224
00:42:44.720 --> 00:43:01.539
Matt Nelson: I was just gonna say, if we want to go to Mainnet faster d than A is sounds right correct, because then we can test the things that need to get tested. As far as you know, app and validator set level integrations can go quickly. But A doesn't really get us anywhere. It just means we have to deploy a bunch of new infrastructure which will delay the timeline.

225
00:43:02.850 --> 00:43:13.790
pari,marius&gballet: Yeah, I think D just needs a bit more information. So up until Monday, when client teams are having their are all there. There won't really be a location to discuss how d looks.

226
00:43:14.340 --> 00:43:19.159
pari,marius&gballet: But yeah, I think, d if a fast would be the fastest way.

227
00:43:20.420 --> 00:43:25.161
Tim Beiko: Yeah. So okay, so let's figure out the launch timing on Monday when we

228
00:43:26.080 --> 00:43:28.139
Tim Beiko: yeah, when we have a better idea for D,

229
00:43:33.760 --> 00:43:37.540
Tim Beiko: and then, yeah, last question, maybe on on Juli is.

230
00:43:38.010 --> 00:43:43.499
Tim Beiko: what would be the plan to fork it to? To Petra. So I assume we would want to launch it.

231
00:43:43.650 --> 00:43:50.159
Tim Beiko: pre fork and get people upgraded on it? Or would we want to do work at Genesis?

232
00:43:52.598 --> 00:43:54.749
pari,marius&gballet: I would go through the upgrade on it

233
00:43:55.010 --> 00:44:04.449
pari,marius&gballet: and give people maybe a week to deploy contract whatever before the upgrade. Yeah, we can basically schedule it at launch. We don't need to.

234
00:44:05.140 --> 00:44:05.830
pari,marius&gballet: to the fault.

235
00:44:05.830 --> 00:44:06.430
Tim Beiko: Okay.

236
00:44:07.770 --> 00:44:15.309
pari,marius&gballet: As in it would be Denkun Genesis, and then there will be a Petra fork, and the Petra fork is shipped along with the.

237
00:44:15.950 --> 00:44:16.340
Tim Beiko: Yeah.

238
00:44:16.340 --> 00:44:17.490
pari,marius&gballet: Network configs.

239
00:44:17.680 --> 00:44:18.880
Tim Beiko: Yeah, we can.

240
00:44:20.630 --> 00:44:28.309
pari,marius&gballet: Yeah, okay, maybe we can create an issue on Github to discuss Genesis validator keys as well as timeline.

241
00:44:28.917 --> 00:44:34.379
pari,marius&gballet: Because I doubt I doubt we're going to be able to do that in a short duration today.

242
00:44:35.670 --> 00:44:36.100
Tim Beiko: I think that.

243
00:44:36.100 --> 00:44:44.570
Barnabas: I would. Yeah, honestly, I wouldn't worry about the should just do the same as otherwise we would spend too much time on

244
00:44:45.260 --> 00:44:55.700
Barnabas: deciding whether we want to give or not the to those people. So we already did this whole big list. So I think we can just do the

245
00:44:56.257 --> 00:45:00.312
Barnabas: it distribution there and then the Genesis validator set would be just

246
00:45:01.350 --> 00:45:04.060
Barnabas: a bit smaller amount of validators.

247
00:45:07.530 --> 00:45:12.529
Barnabas: Are there any client teams that would not want to run validator for Hoodie.

248
00:45:25.180 --> 00:45:26.860
Tim Beiko: Okay, doesn't seem like it.

249
00:45:30.740 --> 00:45:33.520
Tim Beiko: Okay? So yeah, let's create an issue to the

250
00:45:34.070 --> 00:45:42.228
Tim Beiko: to at least coordinate on this, and then figure out the right timing for the fork. But hopefully we can get this sorted in the next few days.

251
00:45:42.750 --> 00:45:47.440
Tim Beiko: I don't have something we can share Monday or Tuesday with with the community.

252
00:45:47.690 --> 00:45:56.940
pari,marius&gballet: And maybe for everyone listening who's interested. All the updates will be posted in the Testnets channel on ether and D discord. So

253
00:45:57.280 --> 00:46:00.150
pari,marius&gballet: coordination about valid data sets

254
00:46:00.610 --> 00:46:05.189
pari,marius&gballet: timing all of that stuff. You can expect to listen there and get the info.

255
00:46:13.220 --> 00:46:16.260
Tim Beiko: Okay, yeah, thanks a lot to the the Devops team for

256
00:46:16.520 --> 00:46:22.850
Tim Beiko: yeah. Putting this together so quickly. Next up, I.

257
00:46:23.030 --> 00:46:23.810
Tim Beiko: So

258
00:46:24.910 --> 00:46:39.889
Tim Beiko: I think it's it's probably worth having a conversation around. What do we want the path to Mainnet to be in terms of testing at this point? There's some couple of small spec changes as well to review for perpetra. But I think at a higher level, discussing like.

259
00:46:40.250 --> 00:46:52.188
Tim Beiko: what do people want to see to be comfortable before a choosing a maintenance time, and then be actually seeing the fork to play. Deploy on magnet.

260
00:46:52.800 --> 00:47:09.070
Tim Beiko: obviously a lot of the testing kind of got sidetracked, because because the whole issues there was a minor issue on sepolia as well around the log parsing. So yeah, I guess, from the client team side or testing teams like.

261
00:47:09.960 --> 00:47:13.770
Tim Beiko: what would you like to see before you feel comfortable? Scheduling a minute block

262
00:47:24.830 --> 00:47:26.050
Tim Beiko: Barnabas.

263
00:47:26.600 --> 00:47:30.400
Barnabas: I would like to see Hoodie forked without any pain.

264
00:47:31.120 --> 00:47:33.590
Barnabas: Then we can probably discuss minute.

265
00:47:38.410 --> 00:47:46.349
Tim Beiko: Okay. So seeing Hoodie forked, is there anything beyond that? People would like to see.

266
00:47:49.570 --> 00:48:18.570
lightclient: I think I would like to see the like all of the staking protocols that are sort of waiting for Hoodie now to go live to have their testing done. I don't think that needs to be. I don't think that needs to happen before we choose a main updates. I think we definitely need to see we definitely need to see Hoodie Fork without issue before we choose a main net date. But from there, I think, like within one week we can choose a main update, and that main update should be 3 weeks, 4 weeks in the future.

267
00:48:18.610 --> 00:48:32.990
lightclient: and we should just continue having expectation that people will be testing and preparing throughout that time and be ready if there's like something else that goes wrong to push the main update. But yeah, I think the 1st thing to do is just fork the new testnet.

268
00:48:37.270 --> 00:48:38.660
Tim Beiko: Thanks, Enrico.

269
00:48:39.760 --> 00:48:49.840
Enrico Del Fante (tbenr): I want to see a big network like Holeski finalizing with participation more than 95%. So we can check

270
00:48:50.230 --> 00:48:56.720
Enrico Del Fante (tbenr): the aggregation and all the votes from validators fully on chain.

271
00:48:57.570 --> 00:49:01.559
Enrico Del Fante (tbenr): because now we were just running small test nets and

272
00:49:02.100 --> 00:49:05.629
Enrico Del Fante (tbenr): Olsky. So a big one network

273
00:49:06.520 --> 00:49:12.109
Enrico Del Fante (tbenr): with the good participation will be a good confirmation for the attestation stuff.

274
00:49:17.720 --> 00:49:18.360
Tim Beiko: Yvonne.

275
00:49:20.530 --> 00:49:33.649
Ivan Metrikin: Yeah, for us. It depends on whether we go with the option d or option a New Testnet. So with option d, since we already have all the tooling deployed once. Everything is stable and works. We'll need

276
00:49:33.760 --> 00:49:46.829
Ivan Metrikin: a few few weeks, probably 3 to 4 weeks to test everything and to prepare for mainnet. But if we go with option a like new testnet, then we will need to also redeploy all the tooling, which will probably add.

277
00:49:47.400 --> 00:49:51.400
Ivan Metrikin: perhaps at least a month, maybe month and a half on our end.

278
00:49:58.160 --> 00:50:05.579
Tim Beiko: And so, okay, so you're saying, if we don't have option d, then there's no way you can have the tooling set up in less than a month and a half

279
00:50:05.710 --> 00:50:08.450
Tim Beiko: post Hoodie launch.

280
00:50:09.250 --> 00:50:20.946
Ivan Metrikin: Yeah, yeah, cause we'll need essentially, there are 4 components. First, st it's the contracts that can be done relatively quickly, probably like a week, or or even less. Then we'll have all the

281
00:50:21.520 --> 00:50:44.890
Ivan Metrikin: tools for monitoring and alerting that we'll need to test. That's also around a week. We have lots of them. Now. We'll have dependencies for off chain guardians, oracles, and council demons, so so can be started in in parallel. But it depends on the previously deployed things. So add roughly a week to that as well. And finally, we have

282
00:50:45.532 --> 00:50:49.960
Ivan Metrikin: node operators running Dvt that will need to

283
00:50:50.480 --> 00:50:53.330
Ivan Metrikin: be integrated with all those other tools.

284
00:50:53.760 --> 00:51:15.550
Ivan Metrikin: So there, it's like a waterfall. Full process. I think also our end. We probably would need to rethink how we structure the development going forward with maybe aiming for a possibility to support more frequent changes in the test nets, because so far we've been doing it very seldom, maybe once once a year, or or even less seldom. So not

285
00:51:15.550 --> 00:51:27.170
Ivan Metrikin: everything is automated. And I think if we invest into more automated process, we would be able to do it faster next time we need to adopt a new testnet. But for now it's still a lot of manual steps. Therefore it takes time.

286
00:51:29.710 --> 00:51:31.720
Tim Beiko: Got it? Potus.

287
00:51:32.520 --> 00:51:48.089
potuz: Yeah, I just want to mention, want to stress what Enrico said. We really want to measure attestation packing. This has been a pain in the butt for us. For this we need a stable, definite, stable testnet. But also I'd like to make sure that the Slasher is actually working

288
00:51:48.190 --> 00:52:02.920
potuz: when we were expecting to see mass slashings. The Slasher was only taking just one index, and it'd be nice to know that the Slasher actually can go back, grab the blocks from Holeski's back fork, and actually slash all the testers together.

289
00:52:08.420 --> 00:52:14.440
Tim Beiko: Okay. And this is something that's like, yeah, I assume we'll need to do on Hoodie.

290
00:52:15.280 --> 00:52:19.329
potuz: No, it's it's all I mean. I'm worried that

291
00:52:19.500 --> 00:52:24.239
potuz: validators in Koleski did not get slashed, and all of them at the same time

292
00:52:24.430 --> 00:52:35.950
potuz: we have the blocks, these blocks included at the stations. The slashers should be able to go back, grab those blocks and slash everyone, and we do want this on Mainnet.

293
00:52:39.650 --> 00:52:47.289
pari,marius&gballet: Yeah, we can set something up for you. Parallelly next week. So different from Hoodie, different from wherever where we can just do the slashing test.

294
00:52:47.290 --> 00:52:54.259
potuz: Oh, no, but I really mean Holeski in Holeski. We can slash everyone. We already have everything there.

295
00:52:55.560 --> 00:52:59.280
Tim Beiko: And so what's missing to run like? What's missing to actually do this.

296
00:52:59.280 --> 00:53:07.829
potuz: Slasher might not be running. Well, I haven't looked into any Slasher, but there's no reason for the Slasher not to be able to slash everyone at the same time.

297
00:53:08.150 --> 00:53:13.070
potuz: I don't think we want to fork into Petra without having a working Slasher.

298
00:53:16.330 --> 00:53:20.780
Barnabas: Wasn't the problem that nobody seemed to be still on the old chain.

299
00:53:20.930 --> 00:53:23.730
Barnabas: or nobody seemed to be running a Slasher that.

300
00:53:23.730 --> 00:53:24.940
potuz: No, I think there is.

301
00:53:24.940 --> 00:53:25.260
Barnabas: Not sure.

302
00:53:25.260 --> 00:53:36.299
potuz: Because because validators are including slashings. I think just the Slasher is not packing all of the slash, aggregating the slashers, the slashings, as Per Electra.

303
00:53:42.830 --> 00:53:43.250
Tim Beiko: See.

304
00:53:43.250 --> 00:53:47.350
Barnabas: I don't think there was any recent slashings. By the way.

305
00:53:50.530 --> 00:54:12.309
potuz: That's even worse, because that probably means that the validators that just restarted like remove the slashing from the pool. And then there's no broadcasting of the slashing now. But we can discuss this later. But the point the point I'm trying to make is that there were clear problems with the Slasher on Holesky, and we want to make sure that the slashers are working correctly before forking Mainnet.

306
00:54:20.880 --> 00:54:23.440
Tim Beiko: Okay, so

307
00:54:27.580 --> 00:54:31.090
Tim Beiko: okay. And then Spencer added, some, some

308
00:54:31.670 --> 00:54:45.699
Tim Beiko: east testing. So all the tests pass reviewing tests we have for all the eips, adding some missing edge cases. Updating the old hive simulator hive engine simulator

309
00:54:46.080 --> 00:54:52.140
Tim Beiko: and then nice to have a line coverage reviews for spec tests on all the clients.

310
00:54:52.260 --> 00:54:54.670
Tim Beiko: I guess, as well. On the

311
00:54:55.010 --> 00:54:59.490
Tim Beiko: on the El side. We can probably test all of the

312
00:54:59.630 --> 00:55:02.999
Tim Beiko: El only eips on sepulia at this point.

313
00:55:03.524 --> 00:55:09.779
Tim Beiko: Is there a reason why we could not do this like, should we be just trying to?

314
00:55:10.550 --> 00:55:17.329
Tim Beiko: Yeah, make sure all the edge cases are tested. Live on Sepholia, and that there's no consensus issue there.

315
00:55:27.930 --> 00:55:34.629
pari,marius&gballet: I don't know. Like we have the test cases as test cases. If they would hit any consensus issues

316
00:55:34.790 --> 00:55:38.580
pari,marius&gballet: they would have shown up in the in the normal test, so I don't know.

317
00:55:38.580 --> 00:55:39.080
Tim Beiko: Okay.

318
00:55:39.210 --> 00:55:46.063
pari,marius&gballet: Like, we don't really need them on the network. If clients are not running those tests. And

319
00:55:47.140 --> 00:55:50.660
pari,marius&gballet: but then have, like some open consensus issues.

320
00:55:50.830 --> 00:55:53.909
pari,marius&gballet: then it's kind of on them. In my opinion.

321
00:55:54.350 --> 00:56:00.339
Tim Beiko: And then, so okay, so the issue we ran into, though on whole, asking support, yeah, that the configs were different than Mainnet. So

322
00:56:00.760 --> 00:56:05.899
Tim Beiko: should we have all the configs on? Who d be the same as Mainnet, or like.

323
00:56:07.030 --> 00:56:11.550
pari,marius&gballet: Yeah, I think we're definitely choosing basically everything the same as Mainnet for holy.

324
00:56:11.770 --> 00:56:16.789
Tim Beiko: Okay, this includes the deposit contract address.

325
00:56:16.980 --> 00:56:17.590
pari,marius&gballet: Yep.

326
00:56:18.200 --> 00:56:18.760
Tim Beiko: Okay.

327
00:56:22.360 --> 00:56:31.180
Tim Beiko: okay. And how sorry? How does the deposit contract work on Hoodie? Is it gonna be like some just like vanilla East? Or will there be a.

328
00:56:31.568 --> 00:56:38.540
pari,marius&gballet: Yeah, we just do the vanilla eth deposit contract. And then we put it in the same location that the main net deposit contract exists in.

329
00:56:39.050 --> 00:56:39.870
Tim Beiko: Okay, great.

330
00:56:45.910 --> 00:56:59.806
Tim Beiko: Okay? So from what I understood here, what we want to see. So we want to see who the fork we want to see the test net finalizing at the stations being packed in blocks sufficiently, or following the electric specs.

331
00:57:00.380 --> 00:57:05.209
Tim Beiko: we want to see that the Slasher is actually working.

332
00:57:06.430 --> 00:57:12.239
Tim Beiko: and obviously that all the tests pass before we pick an main network block.

333
00:57:12.640 --> 00:57:14.610
Tim Beiko: Once we see all of that, we would

334
00:57:14.750 --> 00:57:40.432
Tim Beiko: at least some of us would feel comfortable picking a maintenance fork block. The question is, then, can all of the applications that are deployed or on Mainnet do proper testing specifically. Lsts. And there's a concern that if we only deploy, you know who the next week and fork say a week after that it doesn't give enough time for teams like Lido to actually run through the entire testing cycle.

335
00:57:43.250 --> 00:57:50.670
Tim Beiko: so I think you know, here, there's 2 options. One is either we either we

336
00:57:50.830 --> 00:57:56.239
Tim Beiko: do this holesky custom fork, which we still need to discuss.

337
00:57:57.030 --> 00:58:05.972
Tim Beiko: or we effectively wait until Lido. And potentially. Others have finished their testing which might delay mainnet deployment

338
00:58:06.890 --> 00:58:16.480
Tim Beiko: or we find a way to speed up by those deployment. And or we'll have to move to Mainnet, or very close to Mainnet before. There's like a full testing run.

339
00:58:19.140 --> 00:58:19.810
Tim Beiko: yeah.

340
00:58:22.490 --> 00:58:30.051
Tim Beiko: And yes, it seems it seems a bit reckless to deploy without not only Lido, but other like large sinking pools testing

341
00:58:31.330 --> 00:58:51.366
Tim Beiko: And so I think, if that is a hard requirement, and that their speed of deploying and testing is also set. The 2 options are either we have to do the Holesky revival, or we have to effectively. Just wait a bit longer, and that's probably going to be like 6 to 8 weeks after. Who these launch before we can build a mainnet?

342
00:58:51.890 --> 00:58:58.879
Tim Beiko: which means we'd probably be going to Mainnet, you know. Call it like early May, or something like that. They're mid. May.

343
00:59:06.740 --> 00:59:07.809
Tim Beiko: Yeah, Carl.

344
00:59:08.920 --> 00:59:15.470
Carl Beekhuizen: I personally feel like we're optimizing for the wrong thing here, and that's to get to Mainnet as soon as possible, which obviously is great.

345
00:59:15.750 --> 00:59:33.210
Carl Beekhuizen: But I think another very important resource. Here is client dev time and attention. If we are having to wait for Lido, etc. To deploy things, client devs can be working on

346
00:59:33.710 --> 00:59:40.640
Carl Beekhuizen: on upcoming forks, and more more specifically pure Das, which brings much bigger gains further down the line.

347
00:59:40.800 --> 00:59:43.669
Carl Beekhuizen: And like we can pipeline this a little bit, so

348
00:59:44.090 --> 00:59:50.229
Carl Beekhuizen: achieve some parallelization there, and and and get more to Mainnet sooner in the long run.

349
00:59:50.600 --> 01:00:05.339
Carl Beekhuizen: I'm worried that if we, if if we have to do this thing where we start having all this bespoke code that needs to now be tested, and whatever the coordination cost is extremely high, and we end up spending a lot of time on something that allows us just to ship one fork a little bit earlier. But I don't think that much

350
01:00:05.450 --> 01:00:09.020
Carl Beekhuizen: by the time we account for for all this client dev time and attention.

351
01:00:11.980 --> 01:00:18.760
Tim Beiko: Yup, right? So, yeah. And and so if we just quote like, Wait, we.

352
01:00:18.910 --> 01:00:38.870
Tim Beiko: that means that yeah, client teams are effectively done with the fork more or less, and then we deploy it on Hoodie and after that, you know, we're waiting for app layer or infrastructure providers to test on it. But yeah, ostensibly by that point. Hopefully, the client teams don't feel like there's more work to do on Petra.

353
01:00:40.740 --> 01:01:03.140
Carl Beekhuizen: Yeah, that's pretty much the proposal here, I think, in relation to the other thing is Potus's concerns about the slashes which I do here. I mean, it would give us some time to think about and work on that. The second thing is like that's not really fork specific. We can work on that at any time, and we don't need to coordinate to release

354
01:01:03.290 --> 01:01:04.280
Carl Beekhuizen: updates.

355
01:01:05.267 --> 01:01:07.842
Carl Beekhuizen: Etcetera. So yeah, I don't know. I

356
01:01:08.520 --> 01:01:12.280
Carl Beekhuizen: I'm not sure we should worry too much about implementing that before

357
01:01:12.640 --> 01:01:26.959
Carl Beekhuizen: the next upgrade, because that is something we're concerned about and need to fix anyway on on separate timelines. But yeah, basically, I'm arguing primarily that we should we? We shouldn't be doing a hacky fix to try, save for Lisky to ship something one week earlier. But

358
01:01:27.370 --> 01:01:32.940
Carl Beekhuizen: maybe delay. Pere Das, by whatever another 2 months or something.

359
01:01:34.700 --> 01:01:40.057
Tim Beiko: Yes, or have a bug on Mainnet when we actually ship Fussaka.

360
01:01:45.300 --> 01:02:02.165
Tim Beiko: yeah. The argument is that we should just do a forget about d that it's better off to not waste any clients time on figuring out D, and that we'd rather wait for intro providers and others to just use the new testnet.

361
01:02:15.710 --> 01:02:34.375
Tim Beiko: and like, yeah, and to be clear, like the quote cost that we pay here is, we ostensibly will get extra on maintenance later. Because, you know, there's there's not as much upfront work that's done for info providers. But we will.

362
01:02:35.330 --> 01:02:40.864
Tim Beiko: we? But we will not have that bottleneck on client teams as much.

363
01:02:47.910 --> 01:02:59.590
Tim Beiko: And yet, to Chris's comment, like the info providers, would need to move to the new, long, live test nets. But there's a question of you know. They probably weren't planning to do this 2 weeks from now, and so it does shift a lot of it there.

364
01:02:59.930 --> 01:03:01.840
Tim Beiko: Their timelines.

365
01:03:13.430 --> 01:03:21.909
Tim Beiko: I know we didn't have. It didn't seem like we had sufficient Cl. Devs on the call earlier to make a call about like whether we want to do option. D but

366
01:03:24.070 --> 01:03:28.833
Tim Beiko: If the rough consensus is like, we don't want to do it.

367
01:03:29.380 --> 01:03:34.919
Tim Beiko: Should we just decide that now, so that we can kind of move on and not spend more cycles on it.

368
01:03:41.070 --> 01:03:44.139
Tim Beiko: Or worst case, we can still discuss this on Monday. But yeah.

369
01:03:44.560 --> 01:03:53.689
pari,marius&gballet: I think we should. We should just do a and get on with it, and do it as quickly as possible, and not not waste another week debating this.

370
01:03:57.120 --> 01:04:03.510
pari,marius&gballet: Yeah, I think at this point it also makes sense. Let's just do a we can leave D alone.

371
01:04:03.820 --> 01:04:11.779
pari,marius&gballet: and also just want to bring up the point that Holski can still be used for almost all testing except exits.

372
01:04:15.940 --> 01:04:30.129
pari,marius&gballet: And also my document was wrong. Mikhail pointed out that you can also do consolidation. Testing the exit epoch in consolidations is not reliant on the exit queue. So that was a type that was a mistake in my original document, too.

373
01:04:30.650 --> 01:04:36.759
pari,marius&gballet: Lido, etc. Can test consolidations on whole scale as well. They just can't test partial exits and exits.

374
01:04:44.630 --> 01:04:51.019
Tim Beiko: Okay? And then, okay, so let's move forward with that. Option. 8

375
01:04:51.420 --> 01:05:06.280
Tim Beiko: in terms of actually scheduling the fork and the deployment there. It does seem like there's some stuff that client teams want to have in a release, especially on the cl side before we we do that. So I

376
01:05:07.210 --> 01:05:17.998
Tim Beiko: I would maybe defer to like either Monday or next Thursday to discuss like when Cl. Teams feel like they can have a client release.

377
01:05:18.620 --> 01:05:24.359
Tim Beiko: that that supports all of the fixes, and and that they're comfortable using for Hoodie.

378
01:05:30.840 --> 01:05:34.930
Tim Beiko: I know Potus. Do you mean shorter than that? Or longer than that?

379
01:05:35.450 --> 01:05:38.290
potuz: Oh, no, it was a question for Yvonne. They seem to.

380
01:05:38.290 --> 01:05:38.640
Tim Beiko: Okay.

381
01:05:38.640 --> 01:05:41.270
potuz: It's in several weeks, as in plural.

382
01:05:42.690 --> 01:05:43.220
Tim Beiko: But.

383
01:05:43.860 --> 01:05:44.720
Ivan Metrikin: Yes.

384
01:05:56.030 --> 01:05:57.920
Tim Beiko: Okay, so let. And yeah, I think

385
01:06:00.080 --> 01:06:14.289
Tim Beiko: I think, regardless of like, you know what we do with option. A like, the timelines are kind of somewhat out of court of hands. We should obviously stress that like the quicker we get everything tested on. Who did the quicker we can ship

386
01:06:14.666 --> 01:06:21.059
Tim Beiko: picture at the main net. But this is kind of the best that we take if we take option a is that we have

387
01:06:21.340 --> 01:06:29.160
Tim Beiko: a clearer path for for core devs. But then we are dependent on, like the community, for some of the testing infra and potus.

388
01:06:29.930 --> 01:06:56.179
potuz: Yeah. So ocean from from above was asking about whether or not we could just replicate the State. Can we just not fork and take the execution state of Holeski, and deploy a New Testament already Bootstrap, with that execution state, so that we could just start with contracts already present, or if we can't do this with Holesky, can we just talk to this team so that at Genesis they have already the contracts deployed.

389
01:06:58.710 --> 01:07:09.469
Barnabas: It's not the contract deployment that takes a long time. And we already had this discussion about doing a shadow for option. C. If I recall correctly.

390
01:07:09.470 --> 01:07:13.469
potuz: Not a shadow for what I want. I just want to bootstrap a full

391
01:07:14.010 --> 01:07:19.770
potuz: definite if you want, but have already the contracts of, and all of the structure of these people

392
01:07:20.150 --> 01:07:25.569
potuz: in in presence, so that they only need to change the id, the chain id in their in their tooling.

393
01:07:25.940 --> 01:07:26.937
pari,marius&gballet: So go to

394
01:07:27.470 --> 01:07:36.555
pari,marius&gballet: the problem with this is, that the clients do not have the ability to import, like multiple gigabytes of

395
01:07:37.180 --> 01:07:43.205
pari,marius&gballet: of Genesis state, like the Genesis State, is usually pretty small, and

396
01:07:43.890 --> 01:07:47.779
pari,marius&gballet: I don't know if you if you want to download Guest with like

397
01:07:48.230 --> 01:08:04.939
pari,marius&gballet: 40 GB of state or something. So the like. What we can do is we if we have specific contracts that they want to have in the Genesis block, we can. We can add them just like we add the the deposit contract.

398
01:08:05.790 --> 01:08:11.140
pari,marius&gballet: but they can also just deploy it, like, I think it's it's quite bad if

399
01:08:12.100 --> 01:08:23.170
pari,marius&gballet: these large entities cannot spend the money to deploy deploy a bunch of contract tracks and set up a bunch of infrastructure within a couple of weeks like

400
01:08:23.470 --> 01:08:36.919
pari,marius&gballet: we are not going to go to Mainnet before they've they've tested their stuff. But I also don't think we like we need to spin up another network or spin up a shadow fork for them to to test this and spend like

401
01:08:37.210 --> 01:08:40.120
pari,marius&gballet: hundreds of thousands of of dollars. For that

402
01:08:40.470 --> 01:08:43.169
pari,marius&gballet: we should just do this network.

403
01:08:43.439 --> 01:08:58.709
pari,marius&gballet: Everyone can maybe chill for a bit, maybe work on their client. I think there's a lot of client improvements that can be done, that this Oleshke incident kind of showed, especially in Guest. We have a bunch of

404
01:08:58.960 --> 01:09:08.289
pari,marius&gballet: things that we would like to do, that we don't have the time, for if we we are always going after the next hard fog. And so we should just

405
01:09:08.550 --> 01:09:12.230
pari,marius&gballet: schedule Hoodie, and then,

406
01:09:14.160 --> 01:09:18.830
pari,marius&gballet: work on the other stuff. Okay, Roman says, no chilling Fusaka. Next.

407
01:09:19.229 --> 01:09:19.989
Tim Beiko: So I guess.

408
01:09:20.300 --> 01:09:22.270
pari,marius&gballet: Everything for Fusaka already.

409
01:09:22.449 --> 01:09:26.619
Tim Beiko: On the on the topic of like clients, improvements like, when

410
01:09:27.299 --> 01:09:35.859
Tim Beiko: do clients have stuff that they want to test for Hoodie Genesis? Because if we are saying we want to see a stable fork on Hoodie.

411
01:09:36.219 --> 01:09:44.629
Tim Beiko: I assume this implies we want to test some stuff that are that has been found since the Holesky and Sepulia incidents. So

412
01:09:44.729 --> 01:09:46.889
Tim Beiko: should the path be that, like, you know.

413
01:09:47.319 --> 01:10:07.279
Tim Beiko: in one or 2 weeks clients put out a who the release and we schedule a hard fork, you know. Maybe like a week or 2 after that we don't need. We don't necessarily need like that much time in terms of heads up, because, client teams will be running most of the validators, at least at Genesis, or and it'll be a pretty small group to coordinate. But do we?

414
01:10:08.099 --> 01:10:13.939
Tim Beiko: Yeah, like, yeah, should we plan for a client? Release cycle before the electro fork on on Hoodie?

415
01:10:30.079 --> 01:10:31.509
Tim Beiko: Yeah. Ahmad.

416
01:10:33.030 --> 01:10:47.949
Ahmad Bitar: Yeah, super quickly. I'd just like to like, point out that just copying the State, whether with the Shadow Fork or without a or with any other mechanism. The Al State, that is, does not really

417
01:10:49.650 --> 01:10:59.429
Ahmad Bitar: just work for for a lot of protocols like rocket pool, like even L. Two's will

418
01:10:59.540 --> 01:11:18.390
Ahmad Bitar: will struggle. If if there's any. L 2 that is deployed on holy ski, etcetera, there is a lot of dependency on blocks call data, sometimes blobs, etcetera. All of this will not be supported.

419
01:11:19.030 --> 01:11:22.359
Ahmad Bitar: With the Shadow Fork or copying the Al State.

420
01:11:22.530 --> 01:11:28.410
Ahmad Bitar: So El State is copying El State or the execution state

421
01:11:28.530 --> 01:11:31.179
Ahmad Bitar: does is not a magical solution.

422
01:11:31.440 --> 01:11:32.750
Ahmad Bitar: Unfortunately.

423
01:11:40.840 --> 01:11:46.401
Tim Beiko: Okay, yeah. So we yeah. So we are starting with a clean slate, a clean state. Sorry for Hoodie.

424
01:11:48.080 --> 01:11:53.500
Tim Beiko: And then, yeah. So the question is, when we deploy Hoodie.

425
01:11:53.930 --> 01:12:01.490
Tim Beiko: how long do we want before electric goes live? Do we want full client releases or our clients

426
01:12:01.850 --> 01:12:03.870
Tim Beiko: fine going live with

427
01:12:05.170 --> 01:12:15.390
Tim Beiko: whatever they have now on the hoodie. My sense is, if we are going to get node operators and others to actually use this, we should point them towards a specific release.

428
01:12:16.010 --> 01:12:16.750
Tim Beiko: yeah.

429
01:12:34.810 --> 01:12:37.367
Tim Beiko: okay, no strong opinions.

430
01:12:40.440 --> 01:12:47.259
Tim Beiko: okay, we can and don't need releases out by Genesis. Yes. My question is, do we need releases out by the electro fork.

431
01:12:48.827 --> 01:12:49.989
pari,marius&gballet: Yeah, I think

432
01:12:50.250 --> 01:12:56.480
pari,marius&gballet: well, depends on when we schedule the lecture folk. But I think we should have releases out

433
01:12:57.010 --> 01:12:59.570
pari,marius&gballet: like we can. We can. We can start the network

434
01:13:00.290 --> 01:13:09.320
pari,marius&gballet: early next week and have releases out late, like next week or early the week after. So I think that is, that would be fine.

435
01:13:11.270 --> 01:13:12.360
Tim Beiko: I'm polis.

436
01:13:12.870 --> 01:13:34.210
potuz: I would prefer. This kind of decisions are made by a smaller group, say Parry and company, just like, inform us what is the deadline that they are planning the network. And then we need to adjust to have the release by then we need to start like moving to something like this. Otherwise we're gonna be blocking on a bunch of teams, having releases to have these.

437
01:13:39.260 --> 01:13:40.010
Dustin: I,

438
01:13:40.530 --> 01:13:52.510
Dustin: there's a broader question. I I don't think it's that intrinsic that that for very testing oriented networks run by ultimately, relatively few people. This is this is not

439
01:13:52.740 --> 01:14:05.900
Dustin: thousands and thousands of of end user home stakers that are initially being primarily targeted here in terms of bottlenecking any kind of mainnet petra, etc, etc. I

440
01:14:06.400 --> 01:14:32.420
Dustin: all, I mean, I believe, all these clients, because they have to for devnets and the like, but for sure, for Nimbus and and I know for sure of a couple others can can and do today support custom networks. And of course this is less convenient in a number of ways. I understand the Ux. The ergonomics is just not as good, but I want to. I would like it to at least be very explicit that there is no intrinsic connection between

441
01:14:32.660 --> 01:14:37.259
Dustin: launching a new network of of any sort

442
01:14:37.796 --> 01:14:46.980
Dustin: Hoodie, anything else and getting releases out that this is strictly a convenience feature. Now it may be a convenience feature we want or we like, but that's a distinction.

443
01:14:46.980 --> 01:15:13.559
Tim Beiko: Yeah. And to be clear, I, yeah, I'm less concerned about launching Hoodie. I'm more concerned about Electra activating on Hoodie. Because a bunch of people have said. They want to implement some fixes, and they want to test those. I assume those fixes relate to Electra to some extent. And so do we want to have enough time for clients to put out a release that that has their Electra fixes prior to that fork happening on Hoodie.

444
01:15:14.403 --> 01:15:15.690
Tim Beiko: Yeah, Barnabas.

445
01:15:16.540 --> 01:15:21.379
Barnabas: I think we should set the Electra Fork already a Genesis.

446
01:15:22.700 --> 01:15:23.690
Tim Beiko: At Genesis.

447
01:15:23.970 --> 01:15:27.699
Barnabas: Yes, not like. Set the flag not to be.

448
01:15:27.700 --> 01:15:38.529
Tim Beiko: Oh, okay, sorry. Okay, not activated. Yes, yes. And I guess maybe my question is, then, how long do we need like? Do we set it genesis plus 2 weeks genesis plus one week, genesis plus 3 weeks.

449
01:15:38.920 --> 01:15:48.519
Barnabas: I think that's that's detail we can discuss that later on. But but we shouldn't probably have 2 separate releases for Woody.

450
01:15:49.150 --> 01:15:55.050
Tim Beiko: No, okay, I agree. But then clients should be able to run their Electra version

451
01:15:55.220 --> 01:16:04.529
Tim Beiko: before it goes live. I'm happy to defer whether it's a couple of days or 10 days to the testing call on Monday, and and we could make a final call there.

452
01:16:06.210 --> 01:16:11.469
Tim Beiko: or actually should do you need this. If you're gonna launch a network, are you gonna launch a network before this? And do you need that number now?

453
01:16:16.660 --> 01:16:20.300
Tim Beiko: Oh, yeah, Barnabas is is Hoodie gonna be live before Monday.

454
01:16:20.560 --> 01:16:31.485
pari,marius&gballet: I think I think we should launch the network on Monday somewhere during during working times, and we should just default to 10 days so the fog is

455
01:16:32.160 --> 01:16:35.380
pari,marius&gballet: 2 weeks afterwards on Wednesday.

456
01:16:35.930 --> 01:16:36.650
pari,marius&gballet: That's.

457
01:16:36.650 --> 01:16:39.360
Tim Beiko: The so Petra would be on the 26th of March.

458
01:16:41.930 --> 01:16:51.329
Barnabas: The thing is, Lido mentioned that they would need a lot more time to do their deployment, and they would probably want to deploy before spectra is active.

459
01:16:52.370 --> 01:16:56.909
Tim Beiko: Is that- is that true? Ivan? Does it matter if you deployed before picture.

460
01:16:56.910 --> 01:16:59.999
Ivan Metrikin: Not necessarily. We can deploy after as well.

461
01:17:00.830 --> 01:17:04.580
Ivan Metrikin: Well. Sorry we can deploy before Petra when the.

462
01:17:04.580 --> 01:17:15.369
Tim Beiko: So, yeah, you have 10 days for, like the contracts, I assume you can deploy the contracts in 10 days. But, like, if some of the infrastructure is only set up after Petro's gone. Live. Is that okay?

463
01:17:15.760 --> 01:17:17.480
Ivan Metrikin: Yeah, I think it's okay.

464
01:17:18.110 --> 01:17:24.450
Tim Beiko: Okay, okay, great. So then, yeah, maybe we should just do genesis plus 10 days.

465
01:17:24.730 --> 01:17:36.439
pari,marius&gballet: Yeah. And I think just to keep it a bit simpler for the 1st week or so, depend us and also run the keys. So whenever client devs have their machines ready, whatever we can transfer the mnemonic and turn off our keys.

466
01:17:37.860 --> 01:17:42.999
pari,marius&gballet: so that would allow us to hit like aggressive timelines, like the Devnet, is up by Monday, basically.

467
01:17:49.820 --> 01:17:51.100
Tim Beiko: Yeah, I, Botus.

468
01:17:51.800 --> 01:18:04.289
potuz: Perhaps I'm the only one here, but I think 10 days is a lot. We would rather have more time testing Electra. Our code base is more or less stable. I would rather have that 10 days being a shorter time.

469
01:18:06.230 --> 01:18:14.730
Tim Beiko: So it already seems like we're gonna have a long time after the 10 days, if we're waiting, you know, say, like a month or so for info providers. So I

470
01:18:16.220 --> 01:18:27.711
Tim Beiko: it it. It kind of feels like doing like, you know, a quarter ish of the time upfront before Petra giving teams some time to ship fixes if they need to, is isn't too crazy.

471
01:18:31.650 --> 01:18:32.340
Tim Beiko: Yeah.

472
01:18:33.800 --> 01:18:49.579
Ivan Metrikin: Yeah. I just want to understand, does it mean that we are effectively decided that we go with testing Petra on the new testnet, or we still have okay. So that means that option d is kind of off of the table right

473
01:18:49.930 --> 01:19:06.849
Tim Beiko: Correct. Yeah, I think we prefer we prefer to wait on. Say, you guys and others to test on Hoodie, then have core devs. Spend a couple of weeks trying to do this hacky fix for Holesky. Because if core Devs are quotes, you know.

474
01:19:06.870 --> 01:19:21.139
Tim Beiko: just waiting and not doing much else which kind of a simplification. But you know, they can either work on their code bases. Take a vacation or start working on Fusaka. So we're not like bottlenecked on core devs as much. And then

475
01:19:21.450 --> 01:19:22.170
Ivan Metrikin: Like to.

476
01:19:22.170 --> 01:19:26.725
Tim Beiko: Yeah, we can. We can. We can just like this means that Petra will probably ship

477
01:19:27.330 --> 01:19:40.630
Tim Beiko: later on Mainnet than if we did option d. But the bottleneck is not the same. And so, you know, ostensibly Fusaka ships earlier on Mainnet, because we didn't waste those 2 weeks dealing with with option D.

478
01:19:41.230 --> 01:19:46.036
Ivan Metrikin: Yeah, yeah, makes sense. Okay? And then if on Monday we have the new

479
01:19:46.400 --> 01:20:11.789
Ivan Metrikin: testnet, even if it doesn't have Petra yet, we can already start working with it, deploying our contracts and and the tools so we can hit the ground running and do doing some testing as well. And I agree with Potus. We can also test things on Koleski. We also have a bunch of devnets where we've tested actually, almost everything already. The only thing we haven't tested yet, is Dvt.

480
01:20:11.820 --> 01:20:14.890
Ivan Metrikin: and that requires us to coordinate with

481
01:20:14.940 --> 01:20:22.490
Ivan Metrikin: Ssv and Obl. So yeah, I guess I'll I'll just coordinate with them so that they also get ready for

482
01:20:23.190 --> 01:20:26.579
Ivan Metrikin: the Monday's deployment of of the New Testnet.

483
01:20:28.250 --> 01:20:29.389
Tim Beiko: Got it. Thank you.

484
01:20:31.655 --> 01:20:32.250
Tim Beiko: Andrew.

485
01:20:33.529 --> 01:20:50.990
andrew (erigon): So if we start the test net on Monday I don't think like like who who run the validators, because to set up a validate. It will take some time. Is it? You spend the devops who are going to run the validators initially, or do you have clients.

486
01:20:51.300 --> 01:20:58.530
pari,marius&gballet: We can run the validator keys short term, and then, as an team spin up the instances, we can transfer the keys to you.

487
01:20:59.247 --> 01:21:00.380
andrew (erigon): Okay. Fine. Fine.

488
01:21:02.140 --> 01:21:03.629
Tim Beiko: Thank you better. Ops,

489
01:21:06.810 --> 01:21:13.029
Tim Beiko: okay? And then there's a question in the chat asking, what does this mean for main updates? So like, at the very least.

490
01:21:13.320 --> 01:21:22.300
Tim Beiko: We're not gonna Fork Mainnet until 30 days after Co. Who the fork successfully.

491
01:21:22.620 --> 01:21:43.077
Tim Beiko: If we have who the fork on the 26.th There's an awkward ends on like the 27.th Imagine that we chose the main update there to be one month out. That would be like the last week of April or the 1st week of May. So I think, like, yes, applications can assume. The fork is not gonna happen before the last week of April. I do think at that point, though, like

492
01:21:43.420 --> 01:21:57.380
Tim Beiko: in general, awkward, is already pretty slow process, and we adding more and more like external inputs in terms of setting the dates would mean we never ship. So I think people should assume like.

493
01:21:57.870 --> 01:22:06.565
Tim Beiko: if the Hoodie fork is successful. There's like around a month before the fork, and they should plan accordingly.

494
01:22:07.700 --> 01:22:08.390
Tim Beiko: yeah.

495
01:22:10.250 --> 01:22:15.220
Tim Beiko: and even Andrew, I don't know if your hand is still up from previously? Or do you have something like that.

496
01:22:15.490 --> 01:22:16.910
Ivan Metrikin: Yeah, I think Andrew was first.st

497
01:22:21.190 --> 01:22:24.090
Tim Beiko: Yeah, I think Andrew might have just had his hand up before. Yeah.

498
01:22:24.090 --> 01:22:31.349
Ivan Metrikin: Yeah. Okay. Yeah. Just wanted to clarify when we go live on Monday, will it be without Petra? Initially? Right?

499
01:22:31.350 --> 01:22:31.960
Tim Beiko: Yes.

500
01:22:32.260 --> 01:22:45.439
Tim Beiko: yes, and we'll schedule Petra for 10 days after that. So we go live, say we go live! On Monday, March 17, th Petra will be scheduled to go. Live on Hoodie on Wednesday, March 26.th

501
01:22:46.020 --> 01:22:49.090
Ivan Metrikin: Okay, perfect. That that's great for us. Thanks.

502
01:22:50.490 --> 01:22:51.190
Tim Beiko: Yeah.

503
01:22:51.340 --> 01:23:02.840
Tim Beiko: And so, yeah, so anyone who wants to test pre, pre, petra stuff has about 10 days to do it, and then we'll have at least a month after Petra to on, who need to to do further testing

504
01:23:09.079 --> 01:23:16.859
Tim Beiko: and yeah, in terms of like faucets and whatnot, we can figure this off. Figure this out, Async, and and just have some instructions. Yeah.

505
01:23:19.810 --> 01:23:25.220
Tim Beiko: okay, I think we have a path from here to Mainnet.

506
01:23:27.570 --> 01:23:31.512
Tim Beiko: Very last important question. HOOD. I.

507
01:23:33.110 --> 01:23:37.810
Tim Beiko: anything else on? Just like, yeah. The path to Mainnet.

508
01:23:50.950 --> 01:23:51.725
Tim Beiko: Okay?

509
01:23:52.770 --> 01:23:56.033
Tim Beiko: Then next up, continuing on our agenda.

510
01:23:56.610 --> 01:24:08.719
Tim Beiko: Andrew, you had a point around error handling for system contracts. What happens if there's like all the gas and it seems like the eips are under specified. There.

511
01:24:10.794 --> 01:24:23.550
andrew (erigon): Right? Yeah, exactly. So. The difference in the contact got us thinking. And we are considering at er to like to

512
01:24:23.870 --> 01:24:28.620
andrew (erigon): to to define what to do in case a a system contract fails

513
01:24:28.760 --> 01:24:41.280
andrew (erigon): so like May and we. So we should probably specify it. And like by failure, I mean, we can run out of gas, and in one of the it says that the gas is 30 million. But

514
01:24:41.470 --> 01:24:45.909
andrew (erigon): I don't think that other apps mention it, and also it can.

515
01:24:46.578 --> 01:24:55.100
andrew (erigon): That just fail. So the issue might fail or revert. And I guess 1 1 possibility is to

516
01:24:55.588 --> 01:25:02.899
andrew (erigon): but that that can happen like theoretically, it can happen for some transactions or for some system calls, but not others.

517
01:25:03.040 --> 01:25:11.569
andrew (erigon): So maybe we should mark blocks in which this. This system contract calls fail as invalid.

518
01:25:11.820 --> 01:25:12.610
andrew (erigon): Right?

519
01:25:12.940 --> 01:25:15.100
andrew (erigon): So. But he

520
01:25:16.370 --> 01:25:25.939
andrew (erigon): yeah. So I think we should specify it and test it and then we'll we'll be. We'll be because potentially, it's a consensus issue.

521
01:25:26.380 --> 01:25:27.290
andrew (erigon): right?

522
01:25:27.290 --> 01:25:30.790
Tim Beiko: Right? And do we already have tests around this? These edge cases.

523
01:25:36.840 --> 01:25:39.537
andrew (erigon): Oh, probably not. But

524
01:25:40.730 --> 01:25:48.830
andrew (erigon): yeah, I'd love to add those as well. I mean I I'm not sure whether I'll be able to add them myself, but if somebody adds them, it would be great.

525
01:25:49.130 --> 01:25:54.739
andrew (erigon): but that we also need an a need for some clarification to the existing use.

526
01:25:54.950 --> 01:26:00.080
andrew (erigon): So to to have this back so that we are on the same

527
01:26:00.620 --> 01:26:05.669
andrew (erigon): page. But even if if we, if it just says that that's also fine.

528
01:26:07.420 --> 01:26:36.177
Felix: I just wanna quickly mention here that I asked the testing team to add tests around this also. On the day of the support accident, because I thought, it's also kind of an underspecified situation. It's also like we keep coming back to these things like what should happen. For example, if the contract returns an invalid encoding or something. And from the get perspective, we think that the correct solution is just to fail. The block in this case. So basically, if any system contract fails, then just

529
01:26:37.870 --> 01:26:39.550
Felix: treat the block as invalid.

530
01:26:40.230 --> 01:26:43.020
andrew (erigon): Yeah, I think, yeah, I'm fine with that.

531
01:26:52.020 --> 01:27:13.960
Felix: Okay. So I guess in this case we should codify it. And we noticed that actually, there's a bit of an issue, because especially for the deposit contract locks. Not all of the clients treated exactly the same way. So, for example, as far as I understand, in rest, maybe they actually collect the deposit contract locks during the execution of sorry.

532
01:27:18.150 --> 01:27:24.879
Tim Beiko: Yeah, so this definitely feels like something we should harmonize across all the different system contracts.

533
01:27:27.790 --> 01:27:40.569
Tim Beiko: I don't know if there's anyone from the testing team on who has more context on this. Otherwise I would maybe push this conversation to Monday and make sure that we we we can. Yeah, have a clear solution there by Monday.

534
01:27:48.290 --> 01:27:51.130
spencer-tb: Yeah, we we still have a Mario's Pr up.

535
01:27:52.329 --> 01:27:55.649
spencer-tb: And the test we have right now assumes that.

536
01:27:56.750 --> 01:27:59.849
spencer-tb: And the decoding is hard coded.

537
01:28:00.540 --> 01:28:03.490
spencer-tb: And so I guess, yeah, we want to

538
01:28:03.620 --> 01:28:06.929
spencer-tb: check if people or what the consensus on

539
01:28:07.620 --> 01:28:12.690
spencer-tb: and the decoding is essentially before updating the tests.

540
01:28:16.890 --> 01:28:20.840
Tim Beiko: Okay, so let's yeah, let's maybe move this to Monday's call. Does that make sense?

541
01:28:27.510 --> 01:28:38.232
Tim Beiko: And then next up there was some there was a Pr around this that yokem wanted to. Yeah, move? I think so. People can review this as well.

542
01:28:39.090 --> 01:28:41.300
Tim Beiko: yeah, that'll help us move forward.

543
01:28:42.430 --> 01:28:46.040
Tim Beiko: I think that was everything on Petra. Anything else

544
01:28:46.360 --> 01:28:49.680
Tim Beiko: before we spend maybe the last 8 min on Fusaka.

545
01:28:55.230 --> 01:29:16.140
Tim Beiko: Okay, so on Frusaka. We have had this pr by Francesco around the the wrappers for the blob transactions. I believe we were almost ready to merge it. I don't know if Francesco is on, or I know. Felix. Yeah, you had made a proposal that I think

546
01:29:16.280 --> 01:29:17.580
Tim Beiko: we we were.

547
01:29:18.010 --> 01:29:19.490
Tim Beiko: We're actually gonna go with.

548
01:29:23.710 --> 01:29:28.300
Felix: Yeah, like, I mean, you go with my proposal. It's great, so I don't have anything to add.

549
01:29:35.810 --> 01:29:39.009
Tim Beiko: Okay, has anyone. Does anyone have a strong opinion on this? Or

550
01:29:39.240 --> 01:29:44.199
Tim Beiko: I'm not sure if people have had much time to review. But if it seems like the threat, the Pr

551
01:29:44.840 --> 01:29:50.040
Tim Beiko: has had a fair bit of reviews. So yeah, hopefully, we can just

552
01:29:50.320 --> 01:29:52.750
Tim Beiko: go with Felix's proposal and merge this Async.

553
01:29:53.520 --> 01:29:57.300
Tim Beiko: If not, we can discuss it next week on the Cl. Call.

554
01:30:00.710 --> 01:30:01.675
Tim Beiko: Okay,

555
01:30:03.230 --> 01:30:18.789
Tim Beiko: And then oh, and then Alex Alex couldn't make the call, but he said, There's a corresponding execution, Apis, Pr. That we should we should merge if we are merging Felix's proposal. So yeah. Should just make sure to do this as well.

556
01:30:23.040 --> 01:30:38.469
Tim Beiko: okay. Next up. There were some discussions. This is a few weeks back. Now about how we want to test Fusaka, and if and how we should be able to disable eof to allow for like pure das testing I don't know if anyone has an update on this.

557
01:30:41.060 --> 01:30:54.050
Danno Ferrin | Ipsilon: We haven't pushed it out to the clients yet, but it's a fairly simple thing to make sure that you have contracts. Don't get in you just put a flag in the creation contract, or what's gonna be happening with Tx not deploying the Tx deployment contract.

558
01:30:54.150 --> 01:31:14.309
Danno Ferrin | Ipsilon: And then Eof went under the system. So there's a very well positioned place to to bottleneck and keep eof out from running, and we would use the same client code and still have the same stable code out there, and then, when the off is ready, we just put the contracts back in place, or everyone turns off their flag. So this is something that's very achievable if it's valuable.

559
01:31:14.740 --> 01:31:20.149
Danno Ferrin | Ipsilon: So we just need to get the clients to implement it as part of devnet one, if that's what's needed.

560
01:31:28.490 --> 01:31:31.299
Tim Beiko: Does anyone else have thoughts or opinions on this?

561
01:31:36.750 --> 01:31:42.670
Tim Beiko: If not, is there a specific? Do you have a specific like a description of this that people can look at. I know.

562
01:31:43.472 --> 01:31:52.550
Danno Ferrin | Ipsilon: Not yet. We've been working at working on Devnet one features finalizing those so this we could. I'll make sure it's part of this. What's next? Wednesday call.

563
01:31:53.330 --> 01:31:59.531
Tim Beiko: Okay, sounds good. And yeah, I think it's fine to table this for a couple of weeks, though. Given everything we have to do

564
01:32:00.730 --> 01:32:19.043
Tim Beiko: Okay? And then next up. So we had a few weeks ago, also agreed to try and finalize the Fussaka scope. By the time Petra goes live. So we had all these dates that now we'll obviously push back

565
01:32:19.940 --> 01:32:36.660
Tim Beiko: do so. So I think I had 2 small questions. One. We set all those dates for like proposals and and teams sharing their preferences on like Thursdays. 1st of all, I think we should move them all to Mondays of like whatever week we choose, so that it gives people a few days to actually review things before all core devs.

566
01:32:37.660 --> 01:32:43.463
Tim Beiko: second of all like you know, based on our current plans. Now.

567
01:32:44.160 --> 01:32:55.700
Tim Beiko: When is like a reasonable time to have, like a deadline for people to propose the Ips for the fork and for teams to share their views on what should go in or out. So we'll have

568
01:32:56.000 --> 01:33:01.229
Tim Beiko: what is hopefully the last testnet fork on March 26.th

569
01:33:01.530 --> 01:33:09.719
Tim Beiko: if we keep the same schedule, it means that 3 days ago was the deadline for new proposals for Fusaka. And that.

570
01:33:11.050 --> 01:33:20.960
Tim Beiko: yeah, and that a week from now would, or 10 days from now would be when we when we want to have client teams put out their like preferences for the fork.

571
01:33:21.310 --> 01:33:22.469
Tim Beiko: My sense is.

572
01:33:22.710 --> 01:33:28.979
Tim Beiko: teams have been pretty focused on Helesky, so I don't want to like add another thing on people's plates for the next week, so I would.

573
01:33:29.690 --> 01:33:33.892
Tim Beiko: I would at least wait until I think the

574
01:33:34.580 --> 01:33:46.623
Tim Beiko: the Hoodie Electra Petra Fork before teams have to like put out their their preferences. But I don't know. Is that too long? Do people already know what they want?

575
01:33:48.260 --> 01:33:49.490
Tim Beiko: yeah, Justin.

576
01:33:50.490 --> 01:34:06.710
Justin Florentine (Besu): Yeah, thanks, Tim, that's actually good for us waiting for what you just suggested. We have positions that we're still refining. We wanted to hit East Denver and talk to some folks, and have a couple of conversations before committing to anything. So I think that timing works great for us.

577
01:34:08.930 --> 01:34:30.369
Tim Beiko: Okay. So if we did this, what I would say then, is, March 31st would be the deadline for client teams to submit their proposals, which is a week or a bit less than a week after the hoodie fork. Obviously, if everything goes 40 on hoodie we can. We can revisit and then what I would do is then push 2 weeks

578
01:34:31.270 --> 01:34:33.020
Tim Beiko: or maybe like, yeah. Have

579
01:34:33.720 --> 01:34:39.920
Tim Beiko: March 24th to be the deadline for people to propose new eips, which is about 10 days from now.

580
01:34:40.360 --> 01:34:49.690
Tim Beiko: and yeah, this will give teams a bit over a week to to this will take exactly a week to like finalize their views after that.

581
01:34:50.850 --> 01:35:06.160
Tim Beiko: So to recap it would be March 24. Deadline for eips to be proposed by anyone. March 31st deadlines for teams to share their views, and then hopefully, this means on the awkward ebbs of like April 3rd and 10, th we're able to finalize the scope.

582
01:35:16.430 --> 01:35:18.490
Tim Beiko: okay, any concerns with this.

583
01:35:21.920 --> 01:35:27.350
Tim Beiko: And actually, April 10th was also our deadline to finalize the scope. Yeah,

584
01:35:28.320 --> 01:35:40.840
Tim Beiko: okay? And then, okay, so on the topic of eips being presented so obviously, we skipped a a bunch of weeks. I think we should find a way to do this better. Async. I don't know that we can actually get, like.

585
01:35:41.130 --> 01:35:57.950
Tim Beiko: you know, 1020, different eips to all come and present. So I think, for people who want to actually propose an eip to the fork. The way to do this is by opening a Pr to the Meta eip, which is Eip 7, 6, 0 7

586
01:35:58.090 --> 01:36:12.799
Tim Beiko: And so client Devs would have to review all of those. We can try, I think, on the next core devs to have some of the some of the eip presentations. But I also would like to move more of this Async and

587
01:36:13.000 --> 01:36:22.491
Tim Beiko: and I think, yeah, one breakout calls or another option. For this William also had shared slides on the previous awkward as agenda, which people could review

588
01:36:23.100 --> 01:36:49.470
Tim Beiko: so at the very least. Yeah, at the very least, we should try and have Prs for those proposals to the Meta eip. We'll try to get as many presentations as we can. But realistically we may not have time to get through all of them, and and I think it's it's better to move some of this more Async. And if if client teams feel like there is an eip that needs like a deeper dive, and that we actually want to bring up on the call. We can prioritize that. But I would.

589
01:36:49.570 --> 01:36:53.270
Tim Beiko: I would prefer to. Yeah, to move more of this Async.

590
01:36:56.050 --> 01:37:23.867
Tim Beiko: and I know we're oh, actually that sorry one last thing before we move on from this. So I think when client teams also propose what they want in. We also have. We now have this new status the client for inclusion. You know things we don't want in this current fork. So if there are things that teams feel strongly should not be in. I think it's also worth trying to signal this because if there is an eip that you know, every single client team feels we should not be spending time talking about. Then we can just avoid this.

591
01:37:25.834 --> 01:37:40.810
Tim Beiko: Dfi means not now, so I don't think we can make a commitment beyond like the next fork, so Dfi means we don't think this should go in the next fork, so if there is an eip that people feel like, you know, it's been proposed, and they really don't think should go in the next fork. I think it's fine to include that.

592
01:37:40.810 --> 01:37:56.936
Tim Beiko: I think it's also fine to say that you know the priority for the next fork is already peered us, and eof those are huge, and if client teams feel like, you know, there's 7 different eips that they've never heard of, and they don't have time to actually look into very deeply, and that they don't feel like

593
01:37:57.410 --> 01:38:03.089
Tim Beiko: you know, doing like that. They feel like the odds of doing more than what you've already committed to are low, and

594
01:38:03.300 --> 01:38:22.619
Tim Beiko: they can just deify those like. I don't think it should be taken as this eip is bad, or there's something wrong with it. But just this is not something we want to prioritize for the next fork, and so, hopefully, having the signal helps us move a bit quicker in terms of like not spending time on stuff that people think is just not a priority for now.

595
01:38:25.210 --> 01:38:28.792
Tim Beiko: And okay, I know we're already at time. But

596
01:38:29.540 --> 01:38:43.260
Tim Beiko: there is, I believe, a portal workshop going on this week, and there was a rpc. Request or Rpc. Change by light client. So I don't know if life science. You want to say something real quick about it before we wrap up.

597
01:38:49.470 --> 01:39:01.069
lightclient: I'm I'm not in at the portal meetup, but I think there is kind of agreement that they wanted to have this error in the Rpc. To return when someone is requesting.

598
01:39:01.400 --> 01:39:13.699
lightclient: you know, any kind of block data that has been pruned due to the history expiry. So this is basically just that error, the code and the message that should be returned when those circumstances happen.

599
01:39:16.080 --> 01:39:16.420
Tim Beiko: Right.

600
01:39:16.420 --> 01:39:17.730
Felix: Yeah, I can give more context.

601
01:39:17.920 --> 01:39:47.340
Felix: I can give a little bit more context. We want to add the error because, the Rpc Api has a defined signal for like saying that something doesn't exist. But it is a distinct case from basically the history expiry, because we don't want the usually the expectation is that the data will exist all the way back to the genesis. So we want to add the special condition that if if a client is trying to access a block data that isn't.

602
01:39:48.130 --> 01:39:54.890
Felix: we know. Basically, the client cannot make a good statement about then we want to signal it to the, to, the.

603
01:39:55.370 --> 01:39:56.400
Felix: to the caller.

604
01:40:01.080 --> 01:40:09.749
Tim Beiko: Yeah, that seems reasonable. Yeah. So I guess if people want to review this in the next

605
01:40:10.320 --> 01:40:12.119
Tim Beiko: week or 2, and then we can

606
01:40:12.450 --> 01:40:17.294
Tim Beiko: we can merge it? Yeah, we can bike shed the actual error code.

607
01:40:19.710 --> 01:40:23.459
Felix: Yeah, we're pretty set on this call, though, like we've already.

608
01:40:23.460 --> 01:40:28.150
Tim Beiko: Okay. So they've got this set. Okay.

609
01:40:28.800 --> 01:40:33.952
Tim Beiko: great. So we'll let people review that. And then hopefully, we can get it merged in the next few days.

610
01:40:35.300 --> 01:40:58.790
Tim Beiko: again. Yeah. Apologies we couldn't get to. There were 2 eips people want to discuss today. And then Kev had some stuff around stateless clients for mpts. Hopefully. Next call. We have time for it. The eips. People should review it, Async. And then, Kev, I don't know if you're still on. But if so, is there somewhere people can discuss the stateless Mpt stuff. Async.

611
01:41:05.190 --> 01:41:11.149
Tim Beiko: Okay, I will. I will ask Kev to share something on the discord. About the stateless conversation.

612
01:41:12.140 --> 01:41:27.239
Tim Beiko: But yeah, thanks everyone. I know there's a lot going on right now. Appreciate people working to get this this fork this work wrapped up? Yeah, hopefully, we we manage to do this in the next couple of weeks.

613
01:41:27.640 --> 01:41:31.520
Tim Beiko: I'm yeah. That's all for today. Talk to you soon.

614
01:41:33.370 --> 01:41:34.270
potuz: Bye.

615
01:41:34.730 --> 01:41:35.180
Carl Beekhuizen: Thanks a lot.

616
01:41:35.180 --> 01:41:36.010
Justin Traglia: Hi! Everyone.

617
01:41:36.010 --> 01:41:36.550
Pooja Ranjan: Thank you.

618
01:41:36.550 --> 01:41:37.460
Justin Florentine (Besu): Everybody.

619
01:41:39.550 --> 01:41:40.450
Ahmad Wilson: Thanks, but.

620
01:41:40.700 --> 01:41:41.930
Danno Ferrin | Ipsilon: Thanks, bye.

