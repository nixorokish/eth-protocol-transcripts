WEBVTT

1
00:02:08.850 --> 00:02:10.110
Marius: Hello!

2
00:02:12.720 --> 00:02:13.840
Nicolas Consigny: Lower, loop.

3
00:02:47.150 --> 00:02:48.220
Tim Beiko: Hello.

4
00:03:33.670 --> 00:03:37.650
Tim Beiko: okay, wait another minute, and then it's started.

5
00:03:46.773 --> 00:03:52.630
Tim Beiko: And yeah, Marius, your comment we can chat about those

6
00:03:58.350 --> 00:04:03.190
Tim Beiko: do you mean and sorry. Did you mean Pablo's pr Marius.

7
00:04:04.840 --> 00:04:08.150
Marius: No, I mean the heaps that we have on definite one.

8
00:04:08.370 --> 00:04:12.160
Tim Beiko: Yeah. But do you mean the is it

9
00:04:12.400 --> 00:04:14.549
Tim Beiko: related to this? Pr, I just posted?

10
00:04:21.149 --> 00:04:25.110
Tim Beiko: If not, it's it's fine as well, if not, but I just wanted to make sure.

11
00:04:28.270 --> 00:04:30.140
Marius: It's not related to this.

12
00:04:30.550 --> 00:04:34.680
Tim Beiko: Okay? So okay, let me tweak the agenda.

13
00:05:10.120 --> 00:05:14.190
Tim Beiko: Okay? Josh, you want to move us over to the live stream.

14
00:05:17.900 --> 00:05:19.519
Josh Davis: Here you are, live.

15
00:05:20.730 --> 00:05:27.330
Tim Beiko: Okay, thank you. Welcome to acde number 2 13.

16
00:05:27.980 --> 00:05:31.225
Tim Beiko: I've posted a link to the agenda in the chat here.

17
00:05:31.910 --> 00:05:41.408
Tim Beiko: couple of things to discuss today. So on the Fussaka front. There are a few things that came out of the testing call that

18
00:05:41.970 --> 00:05:53.090
Tim Beiko: we should touch on so around the gas limit, and then some bon xp questions. Then for the finalization of the scope we discussed

19
00:05:53.659 --> 00:06:06.170
Tim Beiko: making some changes to rip 7, 2, 1, 2, last call which are in progress, and then wanted to finalize the set of list. The set of eips for that 2. So do those. And then

20
00:06:06.976 --> 00:06:16.889
Tim Beiko: continuing from last week we started discussing potential headliners for Amsterdam. So there were a few El related ones that had been proposed

21
00:06:16.990 --> 00:06:24.509
Tim Beiko: that we we should cover there are also other eips that have started to be proposed, I think.

22
00:06:25.073 --> 00:06:26.769
Tim Beiko: We probably shouldn't take

23
00:06:26.880 --> 00:06:38.701
Tim Beiko: time on the call to discuss them unless anyone feels very strongly about it. But it's probably best to to stay focused on the the actual fork headliners for now

24
00:06:39.410 --> 00:06:54.180
Tim Beiko: And then, just as a heads up as well the next week, because of the in person meetings we'll cancel the calls, and I will be out in 2 weeks, and Onstar will be taking over for Acbe

25
00:06:55.820 --> 00:07:04.573
Tim Beiko: but just to kick things off. So on acd Monday there was a discussion about raising the gas limit,

26
00:07:05.320 --> 00:07:27.159
Tim Beiko: and and kind of testing it on 60 million on Hoodie, and then moving to Mainnet and after that I know there's some follow up conversations about like what the right approach should be to actually increase it? And are there things we want to see or or like potential blockers there? So if someone might want to recap kind of the

27
00:07:27.990 --> 00:07:33.860
Tim Beiko: the outcome. That discussion, and what the open questions were about, like actually moving forward with this on Mainnet.

28
00:07:37.820 --> 00:07:49.787
Parithosh Jayanthi: Yeah, I can give a brief update. So on Monday, on Acd, we asked client teams if they saw any other blockers before we started to signal raising the gas limit on

29
00:07:50.280 --> 00:07:52.330
Parithosh Jayanthi: on Mainnet for 60 million.

30
00:07:52.590 --> 00:08:20.150
Parithosh Jayanthi: However, I mean in the last couple of days. I think once we started planning for Bell interrupt. We realized that we're going to be doing a lot of work on gas limit performance testing, anyway. So in in my opinion, we probably should wait to make a decision until that track is done, and by the end of next week we'll have a better idea about what our scaling limits are what? We? We would have a few more eyes from from

31
00:08:20.250 --> 00:08:29.239
Parithosh Jayanthi: on the gas limit, from a security perspective, and so on, and then probably the acdt. The week after we can make a call on how we want to increase the gas limit.

32
00:08:32.836 --> 00:08:35.503
Tim Beiko: And there's a question in the chat. Yeah, about

33
00:08:36.019 --> 00:08:43.169
Tim Beiko: the intention around either jumping to 60 million straights or having some intermediate steps so I don't know if

34
00:08:44.029 --> 00:08:48.779
Tim Beiko: yeah, is that basically what we're hoping to figure out in the next week or so.

35
00:08:50.820 --> 00:09:03.610
Parithosh Jayanthi: Yeah, I think that would be one of the discussion points. I don't really see any problem with doing intermediate steps other than coordination overhead. I think it takes us quite a bit of time to

36
00:09:03.730 --> 00:09:14.220
Parithosh Jayanthi: go through the gas limit increase process. So yeah, I think we should try to prevent as many steps as possible, but at the same time not have the steps too granular.

37
00:09:18.530 --> 00:09:19.130
Tim Beiko: Thanks.

38
00:09:23.570 --> 00:09:27.460
Tim Beiko: Anyone else. Have thoughts, comments on this.

39
00:09:29.893 --> 00:09:30.820
Tim Beiko: Yeah, Micah.

40
00:09:31.720 --> 00:09:41.729
Micah Zoltu: So the testing team appears to have done a great job of digging into digging very deeply into whether or not stakers will run into problems with the high gas limit which I think again, I want to

41
00:09:41.860 --> 00:10:02.720
Micah Zoltu: acknowledge that excellent work. But I still haven't seen any research or discussion into how the gas limit affects other participants in the ethereum network. It seems everybody's focused on stakers and builders, and no one has even talked about Rpc. Providers, or, even more importantly, in my opinion, people who are running their own local Rpc. Clients, and how this affects them. I think

42
00:10:02.910 --> 00:10:03.820
Micah Zoltu: the

43
00:10:04.310 --> 00:10:19.949
Micah Zoltu: storage issue affects those people far more than affects people who are paid providers, and these are end users who, you know, hopefully, are running ethereum on their home computers. I've talked to a handful of people just ethereum developers across the ecosystem over the last few weeks.

44
00:10:19.950 --> 00:10:34.639
Micah Zoltu: and there seems to be a lot of divergence in whether or not. We care whether people can run ethereum at home. There's some people, you know. Dankratt is very forward with this, and I very much appreciate how candid he is where he says, you know, he doesn't think that

45
00:10:34.800 --> 00:10:48.450
Micah Zoltu: ethereum needs to be a tool that people can run on their computers at home, and that's acceptable. And there are other people in the developer community who seem to think that they should be able to run clients on home computers. And so it seems like there is a

46
00:10:50.230 --> 00:10:59.479
Micah Zoltu: a mismatch between. Whether who we're targeting? Do we care? The question I would like to see answered very clearly is, does do the ethereum core devs. And as a group

47
00:11:00.090 --> 00:11:07.820
Micah Zoltu: want people to be able to run ethereum at home on their just home computers? Or is that something that we're no longer targeting. It used to be a target back in the day.

48
00:11:07.940 --> 00:11:21.159
Micah Zoltu: And there's again some subset that don't think it's a target anymore. And these gas limit changes will affect that. And so I would just like to see more discussion and research into how this affects people. Besides stakers and block builders.

49
00:11:21.780 --> 00:11:27.380
Tim Beiko: So I guess like, yes, there's a there's a difference between

50
00:11:27.520 --> 00:11:41.722
Tim Beiko: stakers. Block builders are just like node operators who want to validate the chain running at home versus running a full on Rpc service, which is by definition, like resource, more resource, intensive.

51
00:11:42.650 --> 00:12:01.334
Tim Beiko: we had, I don't know. Like, yeah, I was gonna post in the chat. We have this eip that attempted to define some of these constraints eip 7, 8 70 and I think throughout this discussion, like A did not come up, that, like we should optimize for home. Rpc providers,

52
00:12:03.010 --> 00:12:08.070
Tim Beiko: and so I I feel like this is probably the right

53
00:12:08.250 --> 00:12:24.649
Tim Beiko: like I don't know distillation in a way of the opinion like we should serve like people running their local node. Obviously, you need to be able to make local Rpc calls to that node. But I think when you start to go into like running a kind of high usage

54
00:12:24.910 --> 00:12:29.320
Tim Beiko: endpoints that's potentially used by others that feels like

55
00:12:30.690 --> 00:12:35.954
Tim Beiko: like like that that feels like a comp like a qualitatively different thing.

56
00:12:36.718 --> 00:12:38.869
Micah Zoltu: Yes, it definitely does the we.

57
00:12:39.130 --> 00:12:44.409
Micah Zoltu: the there's there's 3 or 4 different demographics, right? You've got the block builders you've got, which.

58
00:12:44.480 --> 00:13:10.740
Micah Zoltu: based on the research roadmap sounds like block builders are expecting to be super high end data center type hardware, you know, doing zk proofs. Yada, Yada, Yada, you have validators. Who are. We still want to support home quote unquote home stakers. These are people who, you know, can put a lot of money into building machines and whatnot. And they have hardware, but maybe not a data center. And then you have Rpc providers again, probably data centers. And the the last group is the group. Again. It used to be a group of people who

59
00:13:10.740 --> 00:13:21.249
Micah Zoltu: existed and dominated the ethereum ecosystem and have basically disappeared as anchor had mentioned in chat here, which is people who just run ethereum on their home computers. They do not buy extra hardware. They do not go to the store. They do not.

60
00:13:21.250 --> 00:13:21.630
Tim Beiko: Right.

61
00:13:21.630 --> 00:13:43.679
Micah Zoltu: Spend a lot of time thinking about ethereum. They just double, click an installer, run it and it runs in the background. Baysu has a thing in their client where you can run a flat database. This is a somewhat trusted system, though it could be made trustless with some additional R&D, and this runs in, I think they said 50 or sorry. 80 GB ish right now for the full state.

62
00:13:43.680 --> 00:13:53.099
Micah Zoltu: and so in under 100 GB. You can run an ethereum node today, and with additional R&D work from ethereum core devs. We could make that possible in a trustless way

63
00:13:53.700 --> 00:14:14.029
Micah Zoltu: as we increase the gas limit that increases the rate at which that 80 GB grows. Now, we're not talking about 80 GB plus 3 GB a month. We're talking about 80 GB plus 6 GB a month, and that adds up real quick. And so yes, 3 GB a month of state growth. You're looking at one or 2 TB is not much. When you're looking at 80 GB, it's a very significant increase. And so that's the group that

64
00:14:14.220 --> 00:14:20.019
Micah Zoltu: yeah, I really feel like, you know, if we're going to just cut them out, we need to make that clear that we're doing that.

65
00:14:20.020 --> 00:14:29.209
Tim Beiko: I do think like, yes, I do think this is kind of clear in 78 70, like, basically, this is a effectively like, just like a non staking

66
00:14:29.380 --> 00:14:37.729
Tim Beiko: like node and like, or like a full node, basically like and I think it's been

67
00:14:38.180 --> 00:14:50.372
Tim Beiko: pretty clear in the past few years. That like, yeah, the the Median way to run this requires extra hardware. It should be consumer grade hardware. And it should be basically, you know, not

68
00:14:51.230 --> 00:14:57.740
Tim Beiko: like, like, I'm not out of reach for people to do this, but I don't think. I guess I think we've passed the point of saying.

69
00:14:58.000 --> 00:15:05.676
Tim Beiko: we can optimize this for effectively, you know, like a couple of 100 gigs of storage and nothing else.

70
00:15:06.450 --> 00:15:10.446
Tim Beiko: some client implementations might be able to help with this. But

71
00:15:11.100 --> 00:15:14.972
Tim Beiko: but yeah, like, it's, it's definitely not like the median.

72
00:15:15.650 --> 00:15:17.891
Tim Beiko: yeah, the the median approach.

73
00:15:23.350 --> 00:15:27.440
Tim Beiko: I guess. Yeah. Okay, odds are. And then, yeah, let's do that.

74
00:15:27.890 --> 00:15:55.179
Ansgar Dietrichs: Yeah, I just wanted to say that, like, I think one way in which maybe I think many people at least have expressed in the past. The intention to change a little bit. How we do things in ethereum is maybe that we want to still like continue to take these concerns very seriously, because obviously this is crucial to the core of ethereum that we actually get this right kind of this trade-off and really understand the costs of scaling, and when that is acceptable and when it isn't, but that we stop doing it. The way where we always basically 1st get blocked on like

75
00:15:55.450 --> 00:16:23.251
Ansgar Dietrichs: 7 rounds of conversations before we have exact agreement, and only then make any moves, because then, in the meantime, the experience for actual users is just really really bad. So I, personally would just say that the the basically the process here of saying over the next 2 weeks, with the in person, events and everything. We basically make initial decisions for the short term. And we're only talking about at most, 1 point, something X increase right? Like 60 million is not even double today's level

76
00:16:24.010 --> 00:16:44.990
Ansgar Dietrichs: and then going forward, we will have a process. And I think, Mike, I'm happy to to reach out and and have you been involved in this, where we we will also, over time, become more precise in the, in distinguishing between different types of nodes, including Rpc. Notes explicitly, so that we actually have a fundamental basis. And then we can still have the conversation

77
00:16:45.030 --> 00:16:54.640
Ansgar Dietrichs: which assumptions to use. There was not used there. But I think, basically, for now we should still move forward with this process and not be blocked for 6 months while we have that discussion.

78
00:16:58.590 --> 00:17:01.049
Tim Beiko: It's Dunker.

79
00:17:03.890 --> 00:17:13.199
Dankrad Feist: Yeah, I mean, I think, like, when I hear these discussions, I often just feel like it's really disconnected from reality, like, I mean, I think, like

80
00:17:13.339 --> 00:17:34.290
Dankrad Feist: the we're still thinking about ethereum as if it were 2050. And it's like people want to run like a home like this this node at home that has all these properties. But, like the Median ethereum user now, is so far away from that that's pretending that we still get the same

81
00:17:34.500 --> 00:17:39.880
Dankrad Feist: like we still operate in the same space and still get the same benefits, is like

82
00:17:40.560 --> 00:18:00.819
Dankrad Feist: not very reasonable to me, like, I think, like in practice, we, we know exactly like most of us know exactly what normal ethereum users do, and yet we keep designing for something completely different. And I think, like we need to move away from that and like, be like, well, this is what is really happening. And like.

83
00:18:01.160 --> 00:18:09.890
Dankrad Feist: we want to get the Median ethereum users. The best properties that we can, rather than like a small set of like people who like

84
00:18:10.390 --> 00:18:12.700
Dankrad Feist: do something very different from that.

85
00:18:19.120 --> 00:18:20.109
lightclient: Lukesh.

86
00:18:21.030 --> 00:18:31.569
Łukasz Rozmej: So I'm somewhere in the middle. So I agree with that we should be able to run ethereum nodes on standard consumer hardware, and we can.

87
00:18:31.800 --> 00:18:39.149
Łukasz Rozmej: And if you need to buy a SSD. If you want the full history from Genesis.

88
00:18:39.330 --> 00:18:56.499
Łukasz Rozmej: it's also fine, and if you need some decent connection to keep up with the network. And it's also fine. If as long as it's reasonable and available in a in a lot of locations, it's

89
00:18:56.560 --> 00:19:16.779
Łukasz Rozmej: so. Yeah, I don't see a problem. You can build blocks with Nevermind and not only Nevermind, probably a few 100 Megabogas blocks. You can process them. You can store them relatively easily with newer architectures like Arygon free. Even archive node

90
00:19:17.110 --> 00:19:39.279
Łukasz Rozmej: is somewhat reasonable, but it's also fine for us to say if you want that. By a SSD, right? It's technical limitation. We would love not to have that. But it's fine. I do agree that we should maybe focus a bit more on eap 4 force, and having it post merge pruning of that

91
00:19:39.420 --> 00:19:42.550
Łukasz Rozmej: to to help with that. But that's about it.

92
00:19:47.920 --> 00:19:49.511
Tim Beiko: Thanks. So I guess,

93
00:19:51.610 --> 00:20:00.509
Tim Beiko: like, yeah. The the main thing I wanted to revisit today was like, yeah, whether we were okay, just

94
00:20:02.210 --> 00:20:20.029
Tim Beiko: whether we were okay, just moving forward with 60 million on main net as of now, it does seem like there's more data that we wanna collect, at least in the next couple of weeks, we should we should figure out the like, yeah.

95
00:20:20.660 --> 00:20:31.709
Tim Beiko: what what? What like the the requirements are, whether we want to do a 1 off like bump to 60 million, or to be more gradual. And I expect in like

96
00:20:31.960 --> 00:20:36.390
Tim Beiko: 2 weeks or so we'll we'll have a bit better of a an answer there.

97
00:20:36.800 --> 00:20:40.870
Tim Beiko: And yeah, Marson.

98
00:20:41.990 --> 00:20:53.630
Marcin Sobczak: Yeah, I would like just to add that on recommended specification from 7, 8, 7 0.

99
00:20:54.085 --> 00:21:08.140
Marcin Sobczak: If we are running tests on it, and there are, like the the worst scenario is performing at about at about 20 megas per second. So we need to be conscious

100
00:21:08.140 --> 00:21:25.819
Marcin Sobczak: that there will be a possibility to craft a block which will take 3 seconds about 3 seconds to process on 60 megas or 60 mega cut limit. I'm not saying that it's a blocker, but we just need to be to be conscious about that.

101
00:21:30.580 --> 00:21:31.120
Tim Beiko: Yeah.

102
00:21:34.210 --> 00:21:36.729
Tim Beiko: okay, so I do, wanna

103
00:21:36.910 --> 00:21:42.944
Tim Beiko: move on for now, because, yeah, we could probably spend the next 90 min talking about this.

104
00:21:45.120 --> 00:21:48.655
Tim Beiko: But yes, let's follow up on this in the next 2 weeks.

105
00:21:49.630 --> 00:21:58.231
Tim Beiko: and then do we have. There is a discord channel gas limit testing. So we should use that to to actually talk about like,

106
00:21:59.190 --> 00:22:05.640
Tim Beiko: yeah, what what the constraints are and how we're addressing them, or next week's.

107
00:22:08.220 --> 00:22:12.969
Tim Beiko: I guess. Okay. So following up there were 2

108
00:22:13.610 --> 00:22:28.754
Tim Beiko: minor update or updates to at least some of the the fussaka eips 1st off Powell had a had an update to 7, 8, 8, 3 that he wanted to discuss.

109
00:22:31.270 --> 00:22:33.229
Tim Beiko: yeah, I don't know if you're on the call, Powell.

110
00:22:36.520 --> 00:22:39.529
Marcin Sobczak: Yeah. So I can give you some insights about that.

111
00:22:39.540 --> 00:22:51.889
Marcin Sobczak: because it was in touch with Pavel about that. This Apa is proposing. This Pl. Is proposing 2 changes. We already agreed with Pavel that one of them will be withdrawn.

112
00:22:51.890 --> 00:23:10.960
Marcin Sobczak: So it is proposing to to not increase the mean price from 200 to 500. But it's opening the doors for for some case scenarios which we don't want to have, so it will be. It will be reverted, so we'll be keep increasing it from 200 to 500.

113
00:23:10.960 --> 00:23:18.540
Marcin Sobczak: And like right now, in 7, 8, 8, 3, there are 3 small tenders in the code, and this will add the 4th one

114
00:23:19.088 --> 00:23:41.591
Marcin Sobczak: so for on on real network, base and model are always have 22 Byte or more, but in theoretical scenarios which we can like craft to to be worst case setup scenarios, etc. We can craft

115
00:23:42.340 --> 00:23:54.100
Marcin Sobczak: modex usages with with smaller amount of bytes for for base and modulla, and hmm

116
00:23:55.336 --> 00:24:14.810
Marcin Sobczak: it. The the spr is in increase increasing gas price like we we are. We are counting price. If it is 52 Byte, even if it's smaller, thanks to that. like, we will

117
00:24:14.840 --> 00:24:35.400
Marcin Sobczak: cover some at case scenario at case scenarios, and they will have 0 impact on on common cases on my net. So it's a clear win. And yes, I'm I'm I would like to to add this this 4th change to to this.

118
00:24:38.450 --> 00:24:45.140
Tim Beiko: Thanks. Has anyone else had the time to review this or or comments on it?

119
00:24:56.070 --> 00:25:02.289
Tim Beiko: Okay, otherwise. Yeah, let's have people review this Async and try to make a decision in the next week or so.

120
00:25:05.690 --> 00:25:31.519
Tim Beiko: next up so on the last call we discussed some issues with rip 7, 2, 1, 2 needed to be addressed and that led to kind of a a change in the spec. So we opted to effectively write a new eip that provides basically the same functionality. But that addresses these issues. Carl has been working on that. And I'll call, are you on the call.

121
00:25:31.750 --> 00:25:37.139
Carl Beekhuizen: Yeah, Hi, yeah. So I mean a few things. Basically, why do we want this?

122
00:25:37.570 --> 00:25:47.170
Carl Beekhuizen: It's like the most ubiquitous signature scheme across the web. And most modern tooling stacks like it's basically the sha-two 56 of the signature world.

123
00:25:47.953 --> 00:26:05.700
Carl Beekhuizen: Like defaults in Tls or Ssh for Vpns. It's like massive, but the main gain that we care about here is that, like it is the signatures that's used like embedded in most hardware, so like android key stores apple secure Enclave Ub keys.

124
00:26:06.182 --> 00:26:11.347
Carl Beekhuizen: Anyway, we can use a passkey you could. You would now be able to just sign

125
00:26:11.960 --> 00:26:18.939
Carl Beekhuizen: so that means we could like switch to a model where you just sign transactions with face id or fingerprints, or whatever works for you.

126
00:26:19.110 --> 00:26:22.840
Carl Beekhuizen: So I think really massive. Ux unlocks.

127
00:26:25.160 --> 00:26:42.159
Carl Beekhuizen: This exists in the form of Rip 7, 2, 1, 2, deployed across many of the L twos at the moment, as I mentioned previously on here before we had a small bug in 7, 2, 1, 2, which, like basically had undefined behavior and a degenerate edge case.

128
00:26:43.790 --> 00:26:47.759
Carl Beekhuizen: And so we kind of needed a a new spec for that. This

129
00:26:48.260 --> 00:27:01.619
Carl Beekhuizen: eip, 79, 51 is identical from an interface standpoint. So from within the Evm, you can't, you definitely won't be able to tell the difference. But we just patch this one edge case and have

130
00:27:02.050 --> 00:27:03.579
Carl Beekhuizen: extensive tests for it.

131
00:27:05.390 --> 00:27:10.541
Carl Beekhuizen: So that's I think, something we should really consider. Consider having in this fork.

132
00:27:11.640 --> 00:27:24.400
Carl Beekhuizen: we had bls in the previous fork, and I think everyone can. Everyone's a little jaded. After that I totally understand that this is a much simpler cryptographic eip.

133
00:27:25.030 --> 00:27:32.199
Carl Beekhuizen: so it only has one interface slash entry point versus bls, which had 9, I believe

134
00:27:34.120 --> 00:27:43.489
Carl Beekhuizen: And the there's only like internally, cryptographically, there's only like one group where the whole Bls thing has 3, and they all interrelate and weird in wonderful ways.

135
00:27:45.300 --> 00:27:50.470
Carl Beekhuizen: Because it is so ubiquitous. There are just many libraries that have it, and

136
00:27:50.900 --> 00:28:05.800
Carl Beekhuizen: this eip matches the interface of all those libraries. So we don't use Ec recover like we do for the k 1 curve we use just verify as the interface again, just because that matches all the existing libraries. So it should just be plug and play

137
00:28:08.020 --> 00:28:18.670
Carl Beekhuizen: and, unlike the Bls things, we already have extensive tests. Before we wanted to do this, I think there are 780 odd tests in this this new version of the Eip.

138
00:28:18.990 --> 00:28:25.570
Carl Beekhuizen: So I think it's in a really solid place and ready to ship, and something that from Ux standpoint would be fantastic if we can. We can just have in there.

139
00:28:26.128 --> 00:28:33.000
Carl Beekhuizen: As far as I'm concerned, the Major, unknown is just gas cost benchmarking. There's a

140
00:28:33.380 --> 00:28:37.370
Carl Beekhuizen: number in there now which matches rip 7, 2, 1, 2,

141
00:28:37.825 --> 00:28:41.730
Carl Beekhuizen: my intuition is, was probably a little on the cheaper side.

142
00:28:42.570 --> 00:28:43.550
Carl Beekhuizen: But

143
00:28:44.160 --> 00:28:51.299
Carl Beekhuizen: yeah, I think we should like we, we should basically just need to implement those in clients and see where that would would

144
00:28:51.410 --> 00:28:56.780
Carl Beekhuizen: see how much that costs relative to other things, and then we can we can get that.

145
00:28:57.530 --> 00:29:01.829
Tim Beiko: Right? Yeah. Thanks for for sharing. And so I guess yeah, there's 2

146
00:29:01.940 --> 00:29:07.760
Tim Beiko: like decisions here. The first, st it's just like, Are we okay, swapping out, rip 71, 2 for this.

147
00:29:07.940 --> 00:29:09.430
Tim Beiko: It seems like.

148
00:29:10.220 --> 00:29:25.713
Tim Beiko: yeah, we we obviously should. And then I think, next, item is just what do we want to include in definite, too? So I feel like we should make the decisions about the Devnet as a whole rather than just 7, 2, 1, 2, or not.

149
00:29:26.300 --> 00:29:27.160
Tim Beiko: so.

150
00:29:27.360 --> 00:29:34.120
Tim Beiko: But yeah, before we do that, just like, does anyone have any concerns swapping? 7, 2, 1, 2 with 7, 9, 5, 1.

151
00:29:34.610 --> 00:29:38.020
Tim Beiko: Otherwise we could just do this after the call.

152
00:29:45.900 --> 00:29:50.954
Tim Beiko: And then, okay, so assuming there's no concerns,

153
00:29:51.860 --> 00:30:12.506
Tim Beiko: basically on on the last call we had sfi, a bunch of vips for the definite one spec. Devnet one is not live yet. However, we did want to finalize the potential list for definite 2 today, meaning that like assuming that that one goes well, this is what we'd add in definit 2 and then finalize the scope for Fusaka

154
00:30:13.637 --> 00:30:18.540
Tim Beiko: finalize the scope for Fusaka so the 4 eips we still had.

155
00:30:19.277 --> 00:30:31.389
Tim Beiko: In the Cfi list, where the payoff code 7, 2, 1, 2, which is now being replaced by 7, 9, 5, 1 7, 9 0, 7 and 7, 9, 3, 4.

156
00:30:33.670 --> 00:30:54.220
Tim Beiko: I guess. Yes, I would like to hear from client teams. Like which of these should we prioritize for Devnet 2. And then, I think, what doesn't get included for definite 2, we would probably just decline for inclusion now and leave the rest. And Cfi once we've so once we've shipped that this one, we can move move the the rest.

157
00:30:54.520 --> 00:30:55.230
Tim Beiko: But

158
00:30:55.840 --> 00:31:02.350
Tim Beiko: and so, Gabriel, to your question, like so far nothing has been confirmed for Government 2 and we want to figure out of

159
00:31:03.060 --> 00:31:08.219
Tim Beiko: the set of vips we already have set for that. f 1. What do we want to

160
00:31:08.340 --> 00:31:10.606
Tim Beiko: add? In addition to this,

161
00:31:11.210 --> 00:31:15.220
Tim Beiko: and I can post. I'll post the full list of vips for devnet one in the chat.

162
00:31:15.938 --> 00:31:20.539
Tim Beiko: Now. So this is what we had in the event. One.

163
00:31:22.540 --> 00:31:26.109
Tim Beiko: Yeah, yeah, Ben.

164
00:31:28.700 --> 00:31:33.089
Ben Adams: So the 7, 7, 2, 1, 2 replacement.

165
00:31:34.157 --> 00:31:36.070
Ben Adams: Block execution size.

166
00:31:36.190 --> 00:31:39.059
Ben Adams: I'm living on pay fine with that.

167
00:31:40.570 --> 00:31:44.500
Ben Adams: The meter contract size still needs work.

168
00:31:45.335 --> 00:31:47.830
Ben Adams: So would be against that. But

169
00:31:48.110 --> 00:31:51.772
Ben Adams: potentially, we could just do in the interim,

170
00:31:52.820 --> 00:31:56.290
Ben Adams: like 50% on the on the contract sizes.

171
00:32:05.540 --> 00:32:10.709
Tim Beiko: Okay. So so sorry. That was 7, 2, 1, 2. And then what was the other one? Sorry you said I

172
00:32:11.350 --> 00:32:12.880
Tim Beiko: just wanna make sure I got it right.

173
00:32:13.130 --> 00:32:15.920
Ben Adams: 7, 9, 3, 4.

174
00:32:16.410 --> 00:32:17.660
Tim Beiko: Okay. The okay, yeah.

175
00:32:19.233 --> 00:32:22.029
Ben Adams: But yeah, but 7, 7, 9

176
00:32:22.310 --> 00:32:25.937
Ben Adams: o, 7 still needs a bit of work.

177
00:32:26.860 --> 00:32:32.199
Ben Adams: and would be willing to to swap that for Fusaka, for like a 50%

178
00:32:32.550 --> 00:32:38.909
Ben Adams: bump in size, and then look at doing the full eip for Amsterdam.

179
00:32:40.830 --> 00:32:41.779
Tim Beiko: Got it. Thanks.

180
00:32:45.460 --> 00:32:46.590
Tim Beiko: Andrew.

181
00:32:47.740 --> 00:32:59.029
Andrew Ashikhmin: So I agree with Ben. It's the should be the r 1 precompile and the rop execution block size limit.

182
00:33:00.460 --> 00:33:08.770
Andrew Ashikhmin: I I, personally don't have a strong view on on the increase limit, Eip. As to the pay OP. Code, I think

183
00:33:08.990 --> 00:33:24.799
Andrew Ashikhmin: it. It has some implications to the tooling, and it's it's not trivial. So if we decide to do it, I would rather do it early in in Glamsterdam, so we have more time to think about it and test it so I wouldn't do it this late in in Fussaka.

184
00:33:29.510 --> 00:33:30.180
Tim Beiko: Okay.

185
00:33:32.550 --> 00:33:35.549
Tim Beiko: Anyone from Beisu or Geth.

186
00:33:41.133 --> 00:33:48.550
Marius: I put my personal opinion on the chat already. I like 7, 2, 1, 2, and 7, 9, 3, 4.

187
00:33:49.100 --> 00:33:55.949
Marius: I don't mind the others, but I also don't really need to push for them at this moment.

188
00:34:02.110 --> 00:34:05.030
Marius: Okay, and.

189
00:34:05.130 --> 00:34:09.320
Tim Beiko: And then, yeah, Gabriel, you're being put on the spot for basic.

190
00:34:15.070 --> 00:34:19.120
Justin Florentine (Besu): If he's not near a mic, I think.

191
00:34:19.960 --> 00:34:26.839
Justin Florentine (Besu): we don't really have a strong opinion. We published our earlier things. I think the pay. OP. Code is good. We'd like to see that included.

192
00:34:29.860 --> 00:34:32.239
Tim Beiko: Oh, okay. Marius.

193
00:34:33.110 --> 00:34:39.809
Marius: And this is actually just thought maybe I should give, because, Mario said he has his personal opinion.

194
00:34:39.929 --> 00:34:50.979
Marius: So I do think that, like from my point of view, the 7, 2, 1, 2 is pretty important to ship like this has been sitting for so long, and it's kind of a small one. So we should just we should have this

195
00:34:51.219 --> 00:34:57.240
Marius: and the 7, 9, 3, 4 for me, also pretty important one, just to basically be able to

196
00:34:58.148 --> 00:35:05.700
Marius: constrained the other ones. I have less than a routine. But opinion about but I know that the 7, 7, 9 0, 7

197
00:35:06.550 --> 00:35:13.750
Marius: is pretty important for the community as well. So I would say, like, if we can pull off, then it's probably also something good.

198
00:35:16.260 --> 00:35:16.980
Tim Beiko: Thanks.

199
00:35:17.630 --> 00:35:19.029
Tim Beiko: Yeah. Roman.

200
00:35:21.370 --> 00:35:30.889
Roman: But this is a response to Felix. I would recommend to catch up on some manners and thread which I was unable to do. Yet

201
00:35:31.170 --> 00:35:35.950
Roman: there was basically a long discussion on on the implications.

202
00:35:36.170 --> 00:35:44.939
Roman: And I posted the comment earlier in the chat as well, that we're for 7, 2, 1, 2, and 7, 9, 3, 4,

203
00:35:45.160 --> 00:35:48.849
Roman: and we're generally supportive of 7, 9 0. 7.

204
00:35:49.330 --> 00:35:53.010
Roman: But given the extensive discussion, I cannot

205
00:35:53.130 --> 00:35:56.259
Roman: give opinion right now, because I have not caught up yet.

206
00:36:00.450 --> 00:36:10.139
Ben Adams: To to be effective. The 7 9 0, 7 really needs a change in the

207
00:36:10.540 --> 00:36:14.210
Ben Adams: database structures of the El client. And

208
00:36:14.340 --> 00:36:16.990
Ben Adams: it's a bit close to Fusaka.

209
00:36:17.656 --> 00:36:23.799
Ben Adams: In terms of you know where we are in the devnets and things. If it was like at the start, I I would say it's fine.

210
00:36:25.410 --> 00:36:28.100
Ben Adams: It seems a bit too much at this stage.

211
00:36:38.080 --> 00:36:44.900
Tim Beiko: Okay, so I guess if 7, 9 0 7 is gonna be too complicated. Then this is

212
00:36:45.370 --> 00:36:54.859
Tim Beiko: like, yeah, the last of net that we want. It seems like 7, 2, 1, 2, 7, 9, 3, 4 are pretty much supported by by everyone.

213
00:36:55.335 --> 00:36:59.320
Tim Beiko: So I would keep those, hey?

214
00:36:59.470 --> 00:37:01.850
Tim Beiko: And and then like yes, should we

215
00:37:02.280 --> 00:37:05.910
Tim Beiko: decline effectively? 7, 9, 0, 7.

216
00:37:06.290 --> 00:37:14.118
Tim Beiko: And I would also lean towards declining. 5, 9, 2. 0. Because it seems like it has pretty mixed support.

217
00:37:15.500 --> 00:37:23.660
Tim Beiko: and also like, had some unintuitive implications. Okay.

218
00:37:24.240 --> 00:37:24.970
Ben Adams: I wanted to.

219
00:37:24.970 --> 00:37:33.849
lightclient: People think about trying to do 7, 9 0, 7 for this devnet. And if we find the database, changes are just going to be too complex. We drop it

220
00:37:34.650 --> 00:37:39.560
lightclient: like, I know the database changes for us is only like one or 200 lines of code. It's not

221
00:37:39.690 --> 00:37:40.840
lightclient: substantial.

222
00:37:41.080 --> 00:37:43.389
lightclient: I don't know if that's pretty different for everyone else.

223
00:37:44.630 --> 00:37:44.990
Ben Adams: Yeah.

224
00:37:44.990 --> 00:37:46.440
lightclient: But it's 1 of those things.

225
00:37:47.020 --> 00:37:49.990
Ben Adams: Changing all that good and pricing.

226
00:37:50.676 --> 00:37:54.599
Ben Adams: I mean, I I think it would be better just to like

227
00:37:56.140 --> 00:38:02.380
Ben Adams: increase the contract sizes by like 50% for Fusaka, as like a

228
00:38:02.590 --> 00:38:07.360
Ben Adams: an interim, feel good, and then not not feel good. But

229
00:38:07.530 --> 00:38:10.669
Ben Adams: you know it would be useful for Dev. And then

230
00:38:11.020 --> 00:38:16.010
Ben Adams: in Glamsterdam we we do the the fuller, more complete thing.

231
00:38:16.320 --> 00:38:21.769
lightclient: Yeah. But it already has a lot of things that people really want to do that are gonna be super critical.

232
00:38:21.950 --> 00:38:22.900
lightclient: And

233
00:38:23.130 --> 00:38:32.310
lightclient: it feels like we can just focus some effort now over the next month, and really lock in 7, 9 0, 7. Now, when there's not so much going on in the year.

234
00:38:34.300 --> 00:38:42.590
lightclient: and then Glamsterdam is open for try to, the all the different yeah piece being proposed.

235
00:38:43.260 --> 00:38:46.950
lightclient: Yep, my like, I just see us having the same conversation again, and

236
00:38:47.200 --> 00:38:51.760
lightclient: 6 or 9 months, and then saying, You know, there's a lot of stuff going at this fork.

237
00:38:52.690 --> 00:38:54.460
lightclient: we should just wait till the next fork.

238
00:38:55.600 --> 00:39:01.300
Ben Adams: Yeah, but it's it's the fact. We're at the end of the 4 promise. That's that's the main part.

239
00:39:01.790 --> 00:39:03.980
lightclient: I don't think we're at the end of the fork almost.

240
00:39:07.200 --> 00:39:07.720
Roman: Okay,

241
00:39:08.160 --> 00:39:08.969
Tim Beiko: Robin. Yeah.

242
00:39:09.280 --> 00:39:16.400
Roman: Yeah. Quick comment. My understanding that the problem with 7, 9 0, 7 was not this additional index.

243
00:39:16.550 --> 00:39:27.530
Roman: but, like other explored implications of storing these huge contracts and and the database like. No, nobody just did the the analysis.

244
00:39:31.270 --> 00:39:38.090
lightclient: I mean, I think Julia did look into it, and sequential reads is extremely fast from disks. So it's not really

245
00:39:38.560 --> 00:39:44.989
lightclient: a major issue, but it's 1 of those things where we probably aren't going to get the best information until clients actually start to look at it.

246
00:39:45.460 --> 00:39:51.970
lightclient: And I don't think that it like. It's not a big lift to begin looking at it like the whole implementation of this is probably sub 500 lines of code.

247
00:39:52.730 --> 00:39:56.480
lightclient: and I think it's like a good stretch goal for us for the next devnet.

248
00:39:56.740 --> 00:40:02.479
lightclient: And if we start implementing and we learn that this is not going to work out. Then we drop it no worries, and we look at Amsterdam.

249
00:40:03.720 --> 00:40:08.470
Roman: Okay, I'm gonna Flip, I'm persuaded.

250
00:40:09.660 --> 00:40:15.479
Roman: Rep is also for including 7, 9, 0, 7, or at least trying to implement it.

251
00:40:15.640 --> 00:40:19.150
Roman: And if it's too difficult, we can always take it.

252
00:40:21.990 --> 00:40:23.059
Tim Beiko: I guess one thing.

253
00:40:23.060 --> 00:40:30.529
lightclient: Ultimately, the thing is that this is very important. IP for the community. They've been asking for this type of thing for many years, and we're close

254
00:40:30.770 --> 00:40:35.600
lightclient: like we're really close. We just need to push through a little bit over the next month, and I think we can give it to them.

255
00:40:38.910 --> 00:40:54.961
Tim Beiko: I think one thing to note about definite 2 is, even though Devnet one already has a bunch of things in it. The 2 other Ips we're considering are quite small. So 7, 2, 1, 2 is not trivial, but I believe most clients already have it implemented and would only need

256
00:40:55.440 --> 00:40:57.664
Tim Beiko: would would only need

257
00:40:58.420 --> 00:41:11.680
Tim Beiko: like to- to- to do the changes add from Vip 7, 9, 5, 1, 7, 9, 3, 4 is like also pretty straightforward. And it's like a a check on the size. So I guess.

258
00:41:11.910 --> 00:41:17.420
Tim Beiko: like, yeah, do we want to commit to have it in Devnet 2. If it doesn't work out in Devnet 2.

259
00:41:18.307 --> 00:41:34.480
Tim Beiko: We do that, and I get there's 2 comments about like tentatively including. This is why we call it scheduled for inclusion now, and not included, like, you know, if we learn something as we're working on it, that makes it no longer be a good fit, we should reevaluate that

260
00:41:34.782 --> 00:41:54.137
Tim Beiko: but if we want to, if we feel like we have to actually include it on the Devnet, then I think it makes sense to ship that one and then potentially have that be like the one slightly more complex feature of that the 2. And if it works out, then great, we ship it. If we find that the issues are too big and that it's gonna delay the fork.

261
00:41:54.820 --> 00:41:57.510
Tim Beiko: yeah, we we should just remove it.

262
00:42:08.150 --> 00:42:12.930
Tim Beiko: So I guess if yeah, I guess and rest are

263
00:42:13.680 --> 00:42:17.669
Tim Beiko: in favor. I know. Basically, never mind, Eric, on.

264
00:42:19.390 --> 00:42:20.120
Tim Beiko: Yeah.

265
00:42:21.120 --> 00:42:24.465
Tim Beiko: Do you have thoughts about this

266
00:42:25.000 --> 00:42:33.849
Tim Beiko: If we did this, I think we should probably not do pay off code, and then that too. So this means, I think, if we include 7, 9 0. 7, and and there's some concerns we should probably

267
00:42:34.200 --> 00:42:37.058
Tim Beiko: decline pay from this fork.

268
00:42:39.800 --> 00:42:42.079
Ben Adams: Happy to experiment.

269
00:42:43.020 --> 00:42:44.050
Ben Adams: Yeah, how it goes.

270
00:42:45.820 --> 00:42:46.770
Tim Beiko: You're what sorry.

271
00:42:48.000 --> 00:42:50.309
Ben Adams: Happy to experiment. See how it goes.

272
00:42:50.560 --> 00:42:51.180
Tim Beiko: Okay.

273
00:42:53.190 --> 00:42:54.999
Tim Beiko: Okay. Bay, Su. Argon.

274
00:43:02.800 --> 00:43:03.590
Tim Beiko: I don't.

275
00:43:09.125 --> 00:43:12.735
Andrew Ashikhmin: Andrew, we can try experimenting, implementing it.

276
00:43:13.840 --> 00:43:16.859
Andrew Ashikhmin: So I haven't thought about it in detail. But

277
00:43:17.360 --> 00:43:21.409
Andrew Ashikhmin: well, at least we can. Yeah, we can, we can start experimenting with it.

278
00:43:23.030 --> 00:43:46.070
Tim Beiko: Okay, so let's do that, then let's do so so this means we'll leave 7, 2, 1, 2, 7, 9, 3, 4, 7, 9 0, 7 in Cfi, for now move 5, 9, 2 0 to Dfi. And then once we have shipped Devnet one assuming things don't break there, and there's not like a bigger correction. We would default to move these 3 Ips to Sfi and depart. Devnet 2

279
00:43:46.530 --> 00:44:03.310
Tim Beiko: and then, if we find some issue with any of the Ips we should, we should reconsider whatever we want them in the fork, or just to remove them. And if there's some investigation that we can do on 7, 9 0, 7 in the meantime. Yeah, we should do that.

280
00:44:08.740 --> 00:44:09.450
Tim Beiko: Yeah.

281
00:44:10.160 --> 00:44:16.715
Tim Beiko: But I think we are set on the maximum possible scope for Fusaka. So as of this point

282
00:44:17.310 --> 00:44:25.005
Tim Beiko: anything that's not in this list effectively out of scope. And if everything goes well, then, what's in

283
00:44:25.580 --> 00:44:29.329
Tim Beiko: Sfi now? And the Devnet? 2 scope will be what ships.

284
00:44:31.260 --> 00:44:33.610
Justin Florentine (Besu): So that includes pay. OP. Code is what I'm hearing.

285
00:44:33.610 --> 00:44:36.589
Tim Beiko: No, I would say we, if we if we move forward with 7, 2

286
00:44:37.310 --> 00:44:42.600
Tim Beiko: sorry with 7, 9, 0, 7, I would move to not do pay, and Devnet 2,

287
00:44:42.720 --> 00:44:48.380
Tim Beiko: because it seems like most teams didn't support it. Then, if 7, 9 0 7 is already going to be complex.

288
00:44:48.690 --> 00:44:51.229
Tim Beiko: I try to limit complexity, but.

289
00:44:51.390 --> 00:44:52.150
Justin Florentine (Besu): Sure.

290
00:44:54.180 --> 00:44:55.140
Justin Florentine (Besu): Okay.

291
00:45:05.710 --> 00:45:06.310
Tim Beiko: Okay.

292
00:45:06.550 --> 00:45:09.840
soispoke: Yeah. Over here.

293
00:45:12.630 --> 00:45:16.859
Tim Beiko: Okay? Great. So, yeah, that's it for Fusaka.

294
00:45:17.060 --> 00:45:18.170
Tim Beiko: So

295
00:45:18.250 --> 00:45:47.001
Tim Beiko: looking ahead for Amsterdam, like, we discussed previous couple of calls, we want to start and consider headliners for the 4 1st line on that before we we we discuss other eips. So there were 3 headliners proposed already. I wanted to make the space if either of those proposals on the call to yeah, give a quick overview, and then I think it would be helpful. If

296
00:45:47.380 --> 00:46:10.060
Tim Beiko: people on this call have like questions or concerns that need to be investigated to raise them, so that the champions, for these headliners can go and look into that over the coming weeks. There were also a bunch of like smaller, more minor eips. I don't think we should start making decisions about those, but I wanted to at least flag them so people could start proactively reviewing them.

297
00:46:12.450 --> 00:46:19.699
Tim Beiko: But yes the 1st the 1st headliner candidate was fossil. I don't know if

298
00:46:20.846 --> 00:46:25.869
Tim Beiko: anyone anyone championing fossil is on the call.

299
00:46:32.300 --> 00:46:42.709
Tim Beiko: Okay, I linked the 3 threads in the chat so we can. We can follow up Async and discuss another call, and second was Evm. 64.

300
00:46:44.520 --> 00:46:56.068
Wei Tang: Yeah, but I'm I'm here. So I'm the champion for 64. So this is something that

301
00:46:56.880 --> 00:47:21.739
Wei Tang: I hope I'll probably give a formal introduction on this later. But at this moment I really want some more reviews. But the basic idea is quite simple. It's just we define a new group of codes that are only operating on the least significant of a stack value.

302
00:47:21.740 --> 00:47:42.129
Wei Tang: And the good thing about this is that we can then, I mean the the each operation is done significantly faster, because you only have to do one statement of 4 for the 2, 56 bits.

303
00:47:42.868 --> 00:47:47.440
Wei Tang: We currently have 2 different merchants.

304
00:47:47.700 --> 00:47:50.510
Wei Tang: The 1st version is

305
00:47:50.570 --> 00:48:15.910
Wei Tang: built directly on the legacy, or I, I would probably just use this name legacy Evm, which we define a prefix of code, and and the other set of the the opcode that follows it is is the 64 bits operation

306
00:48:15.910 --> 00:48:28.819
Wei Tang: and the good thing. The the advantage of doing this is the way is less complicated. And we we just have. I mean.

307
00:48:29.160 --> 00:48:41.410
Wei Tang: we have we? We can make the interrupt with 2, 56 bits really easily, because it's just a different set of codes. It can work with

308
00:48:41.890 --> 00:49:05.169
Wei Tang: other calls really easily, and the second option is built on top of Eof. In this case, what I, what you have 64 will need is a change to Evm format, which does. Yes, we have a question already?

309
00:49:07.320 --> 00:49:10.349
Wei Tang: No. So- so- so, yeah.

310
00:49:10.930 --> 00:49:17.179
stokes: Sorry. Yeah, after this I just wanted to circle back to fossil for a second. I was just raising my hand for that.

311
00:49:18.310 --> 00:49:27.580
Wei Tang: Okay, yeah, I will. Okay, I'll continue then. Then the second version, second option is built on top of Ui.

312
00:49:27.750 --> 00:49:38.260
Wei Tang: And in this case we do need to do a change to the evm format which add a type.

313
00:49:38.400 --> 00:50:05.930
Wei Tang: a type parameter into the code section. So the interpreter can can know, whether is running a code section of the the legacy evm or evm 64 and I think this this is the option I would prefer is it will be open up. A lot of organization

314
00:50:06.160 --> 00:50:18.150
Wei Tang: approaches for us. And we can, we can basically write really fast jits for 64, like building on top of existing ui format.

315
00:50:18.830 --> 00:50:37.979
Wei Tang: Quite well. And yeah, this, this is basically the the current proposal. And I will really looking for some reviews at this moment. If you have questions, I would really like to answer them. So

316
00:50:38.200 --> 00:50:38.920
Wei Tang: yeah.

317
00:50:43.090 --> 00:50:48.044
Tim Beiko: Okay, thanks any questions. Oh, there's a question by kev

318
00:50:49.150 --> 00:50:54.889
Tim Beiko: there, there's a question by Kev around whether this has been prototyped and

319
00:50:55.530 --> 00:50:59.739
Tim Beiko: and and whether we have a feeling of what the actual performance improvements are.

320
00:51:00.100 --> 00:51:22.800
Wei Tang: I have a I have a prototype in for the the option one which just directly build on top of the the legacy. Vm, I haven't really benchmark it yet, but I will hopefully do that soon. So, but but I mean, if we write a jit for that, it will be

321
00:51:22.880 --> 00:51:42.319
Wei Tang: faster because we are just not doing the actual work of of the actual extra 1 92 bits. So so for those, those computationally intensive operations functions that we only we can only use 64 bits. So this will be beneficial.

322
00:51:45.700 --> 00:51:52.540
Tim Beiko: Thanks. I think, like, yeah, having hard benchmarks would definitely be helpful here. Are there

323
00:51:52.800 --> 00:51:55.570
Tim Beiko: other questions, comments, concerns?

324
00:52:04.740 --> 00:52:13.185
Tim Beiko: Okay? Then. Otherwise, I think, yeah, we can continue this conversation on these positions. And then,

325
00:52:13.940 --> 00:52:18.358
Tim Beiko: yeah, move on to fossil so I think,

326
00:52:19.978 --> 00:52:31.670
Tim Beiko: was, yeah. Toba, I think, is on the call. Maybe if you want to start to give like a quick overview. But then there were already a few questions about fossil in the chat, so we could get to those as well.

327
00:52:32.290 --> 00:52:56.090
thomasthiery: Yeah, sure. So maybe first, st I can signal that I did give like a more sort of like fleshed out presentation on so like, everyone can sort of like refer to to the presentation, I guess if they want more details. But yeah, for so is Vip 7, 8, 0, 5 we

328
00:52:56.090 --> 00:53:20.709
thomasthiery: presented it as a potential headliner for Amsterdam. What it essentially does is basically really improving ethereum censorship resistance by enabling multiple validators to just make sure that any transaction that is valid according to the protocol rules is actually included in ethereum blocks, and basically does so by having, like the multiple validators.

329
00:53:20.710 --> 00:53:28.019
thomasthiery: build inclusion lists that are filled with transactions from the public main pool to impose some constraints on the

330
00:53:28.110 --> 00:53:56.299
thomasthiery: on the builder. It has, like a bunch of interesting properties. I think maybe highlighting. Why it matters. It's because I mean, today, we have, like more than 80% of all works that are produced by just like the 2 builders. And we can just like decide whether to include or exclude transactions sort of arbitrarily. So folks, basically, what foci does is like it fixes this

331
00:53:56.733 --> 00:54:01.930
thomasthiery: by empowering like the more like obviously decentralized set of validators to

332
00:54:02.170 --> 00:54:06.072
thomasthiery: enforce inclusion constraints and build those plugs.

333
00:54:07.610 --> 00:54:25.766
thomasthiery: for who it benefits it benefits basically everyone because it ensures. Like all the transactions are included on chain without sort of like any discrimination between different kinds of transactions that are just like arbitrarily decided by an external party instead of local.

334
00:54:26.540 --> 00:54:28.444
thomasthiery: yeah, it has some

335
00:54:29.080 --> 00:54:37.660
thomasthiery: benefits like you could like tie to scaling and improving ux. But of course, like the main, very big feature is improving censorship resistance.

336
00:54:38.404 --> 00:54:51.235
thomasthiery: And why not? I think, yeah, it's really a solution to basically mitigate the censorship risk we've been having since. Pbs was introduced.

337
00:54:52.220 --> 00:55:11.210
thomasthiery: and I don't know. Like the builder market is very, very centralized. It's like sort of inherent, because it's due to private. And I don't think it would change. And yeah, we have observed, like, sort of like increasing vertical integration across builders relays, and so forth over time and like, not the other way around. So

338
00:55:11.790 --> 00:55:26.374
thomasthiery: yeah, I think there is a question also of like the urgency of including it. We've so that's been discussed and proposed a lot like there was another think fossil is is much better in many sense. But, like.

339
00:55:26.960 --> 00:55:49.960
thomasthiery: yeah, there is a case for fossil, I think, because now we are like quite lucky that there's not much censorship on the network. I feel like in the future that can definitely change and make the inclusion of something like fossil or proposals to improve. I don't know censorship, resistance and privacy much

340
00:55:50.342 --> 00:56:02.569
thomasthiery: harder to get in in the 1st place. So yeah, I think there is some big urgency in taking care of this. In terms of technical readiness. It's also, like

341
00:56:02.840 --> 00:56:27.659
thomasthiery: like now fully implemented in 5 different clients and running on local, and get that are interrupting with each other soon. Lighthouse, I think. We've had 11 fossil breakouts. And we made sure, like, it's compatible with everything that's sort of like already in protocol, and also like other proposals. So

342
00:56:28.080 --> 00:56:28.590
thomasthiery: yeah.

343
00:56:28.590 --> 00:56:43.230
thomasthiery: I think there is a good case for fossil. I really want to. For for the for us to move this forward and not wait until things get back to get a proposal like fossil included.

344
00:56:46.400 --> 00:56:47.080
Tim Beiko: Thanks.

345
00:56:48.820 --> 00:57:02.279
Tim Beiko: One question that came up earlier in the chat was just the interaction of a fossil with delayed execution and block access lists. I don't know if you have like a some thoughts on that.

346
00:57:02.550 --> 00:57:03.260
Tim Beiko: Yeah.

347
00:57:03.971 --> 00:57:16.969
thomasthiery: Yeah. So there has been some recent progress on that front. It was mainly driven by Tony and Francisco. But there are like some very nice integrations between the 3 of them. So it basically works

348
00:57:17.050 --> 00:57:38.820
thomasthiery: with delayed execution. But like, there are like some tricks that you have to sort of like deal with. To make it work together and plug level access is actually sort of like, make that easier. So there is a write up by Tony that I can link. But there is a nice integration between the 3 which is very nice.

349
00:57:45.290 --> 00:57:50.909
Tim Beiko: Fixed any other questions. Thoughts about fossil.

350
00:58:02.980 --> 00:58:03.650
Zane Starr | OpenRPC: Oh!

351
00:58:10.110 --> 00:58:17.680
Tim Beiko: And okay, then, yeah, thanks a lot for jumping on a quick overview.

352
00:58:20.290 --> 00:58:31.320
Tim Beiko: next up, the other proposed headliner was available at the stations. It's the one I have the least context on. I'm not sure if the author is

353
00:58:31.630 --> 00:58:32.850
Tim Beiko: on the call.

354
00:58:34.870 --> 00:58:36.320
Mingfei Zhang: Yeah, I'm here.

355
00:58:36.490 --> 00:58:37.210
Tim Beiko: I hope.

356
00:58:37.210 --> 00:58:39.149
Tim Beiko: Do you want to give a quick overview.

357
00:58:39.770 --> 00:58:46.489
Mingfei Zhang: Oh, yeah, I will give us quick presentation for this.

358
00:58:46.770 --> 00:58:47.950
Mingfei Zhang: Hmm.

359
00:58:53.120 --> 00:58:57.489
Mingfei Zhang: oh, sorry. Wait wait a few minutes.

360
00:59:06.810 --> 00:59:08.560
Mingfei Zhang: Okay.

361
00:59:09.380 --> 00:59:10.359
Tim Beiko: Yeah. Thanks.

362
00:59:10.740 --> 00:59:12.680
Mingfei Zhang: Okay? So

363
00:59:14.890 --> 00:59:41.689
Mingfei Zhang: yeah, Hello, everyone. So today, I'm excited to present my eip 79, 79, 42 available attestation. So this is a proposal designed to make ethereum provostic fully reorg resilience. So first, st we are talking about what is real. So

364
00:59:42.070 --> 00:59:47.409
Mingfei Zhang: as we as we can see, is it

365
00:59:47.680 --> 00:59:52.450
Mingfei Zhang: table? So, despite money advancing ethereum approvals

366
00:59:53.020 --> 01:00:13.349
Mingfei Zhang: protocol. The system also feeds the many new attacks. So some of tech we have already know about, like the ex, the balancing attack. It's a Lebanese attack and other attacks about attacking the Gasper

367
01:00:13.470 --> 01:00:26.445
Mingfei Zhang: Cusper like the bouncing attack. So, and some of the attack, like the justification with holding. So these attacks they mainly focus on

368
01:00:27.400 --> 01:00:42.030
Mingfei Zhang: attacking ghost or attacking customer, and they call mainly cause reorganizations, kind of like so the balance attack is more powerful, and it cause the

369
01:00:42.030 --> 01:01:04.120
Mingfei Zhang: finalization. Stop also the Boston attack. So these attacks they have some mitigation by theorem. However, some of this mitigation has its limitations, like the proposal posting the.

370
01:01:06.630 --> 01:01:07.350
Som | Erigon: Mitigation.

371
01:01:08.460 --> 01:01:11.220
Mingfei Zhang: Oh, sorry I can't hear.

372
01:01:12.910 --> 01:01:34.560
Mingfei Zhang: Okay, so the proposal boosting was 1st proposed, and it is. It set a very high boosting, and it calls sandwich, and then it is degraded to 40%, and it cannot fully prevent, however, if we set the anniversary stack to more than 20.

373
01:01:34.820 --> 01:01:44.940
Mingfei Zhang: Also, the bouncing attack was 1st mitigated by the safe slot, so the justification cannot be

374
01:01:45.100 --> 01:01:54.399
Mingfei Zhang: update if if apple has processed it slots. However, this medication is now removed, so

375
01:01:54.520 --> 01:02:14.499
Mingfei Zhang: currently is now still facing the bouncing attacks. Vulnerability also, the justification withholding attack is not fully mitigated, and this cause, the staircase attack. This is one of kind of justification, withholding attacks

376
01:02:14.500 --> 01:02:29.229
Mingfei Zhang: warranty, and this attack has been fixed in the current, and it is not really be fully mitigation, and what we want to do is

377
01:02:29.730 --> 01:02:36.639
Mingfei Zhang: to keep the parent restriction. The idea is that

378
01:02:36.880 --> 01:03:04.240
Mingfei Zhang: so in the Vernida Protocol, so if there is no adversary, the honest validator can propose one block of another. So the idea is like that. So this is block, one by one, and oh, sorry. And if there are some proposals that want to do something harm like they just want to make the system

379
01:03:04.320 --> 01:03:26.490
Mingfei Zhang: very bad. So what they want to do is that they just build a block and dot point to the previous. They point to another block, and they may cause a chain fault, and there are 2 chains, and there are any other situation like this is

380
01:03:26.800 --> 01:03:35.170
Mingfei Zhang: so, it may withhold a block, and it may released after this block is proposed, and cause a

381
01:03:35.400 --> 01:03:39.770
Mingfei Zhang: cause. A fog like this. So this block, it will be fogged.

382
01:03:42.610 --> 01:03:43.680
Mingfei Zhang: So

383
01:03:45.070 --> 01:04:07.519
Mingfei Zhang: so this is why restricting the parent is very important. Our idea is that since the only validators always vote for the head. So if this is a chain and honest validator like the blue one, they always vote for this, and the adversary may vote for this and other blocks we don't know. So

384
01:04:07.680 --> 01:04:17.940
Mingfei Zhang: what we want to do is make the honest validators vote be the parent candidate. So

385
01:04:18.740 --> 01:04:29.370
Mingfei Zhang: so the idea is that. So if the adversary want to propose a block to this, this cannot be

386
01:04:29.520 --> 01:04:36.220
Mingfei Zhang: our valid parents, since this block, it does not receive enough

387
01:04:36.510 --> 01:04:57.680
Mingfei Zhang: attestations, because only 1 3rd of the State is controlled by the adversary, and we assume that we require that more than 1 3rd of attestation would for a block. This block can be the value, the parent so.

388
01:04:57.680 --> 01:04:58.350
Tim Beiko: Big Faye.

389
01:04:58.540 --> 01:04:59.700
Tim Beiko: Yeah, yeah.

390
01:05:00.750 --> 01:05:19.369
Tim Beiko: I guess. Like, yeah. 2 things. One is would it be possible to share these slides in the chat to get for people to be able to review Async. But also, yeah. Given the topic, I think. Apologies about this, we should probably yeah, we should probably discuss this more on the the Cl call.

391
01:05:20.250 --> 01:05:23.559
Tim Beiko: yeah. And this is my bad. I I think I I.

392
01:05:23.560 --> 01:05:26.490
Mingfei Zhang: Yeah, yeah, I see. I see. So I'm I'm.

393
01:05:27.209 --> 01:05:31.360
Tim Beiko: But if if you want to post the slides in the chat, I think we can.

394
01:05:31.840 --> 01:05:40.200
Tim Beiko: yeah, we can have conversations, I think, as well on the youth. Magicians threads. If there's anything really important you want to finish like the minute or so.

395
01:05:40.490 --> 01:05:41.149
Tim Beiko: go ahead.

396
01:05:41.150 --> 01:05:44.660
Mingfei Zhang: Yeah, I think we will talk about it later. So.

397
01:05:44.660 --> 01:05:52.449
Tim Beiko: Yeah. But yeah, I think, if yeah, if people can, if people can review the the actual slides that would be that'd be helpful.

398
01:05:52.660 --> 01:05:53.140
Tim Beiko: Okay.

399
01:05:53.140 --> 01:05:54.210
Mingfei Zhang: Okay. Okay.

400
01:05:56.260 --> 01:05:57.990
Tim Beiko: I'm thanks.

401
01:05:58.910 --> 01:06:05.582
Tim Beiko: I'm okay. And I think those were the

402
01:06:06.660 --> 01:06:11.015
Tim Beiko: headliners that have been proposed for Amsterdam so far.

403
01:06:11.870 --> 01:06:17.982
Tim Beiko: if people want to propose more. There is the East magicians thread for that.

404
01:06:21.570 --> 01:06:32.919
Tim Beiko: yeah. Any other Glamsterdam Level conversation people want to have. Otherwise. There's also like something about pay that we should get back to in the chat. But

405
01:06:33.200 --> 01:06:37.319
Tim Beiko: yeah want to wrap up the collapse of that headliner thread before

406
01:06:38.815 --> 01:06:43.820
Toni Wahrstaetter: I could quickly talk about blocks of accesses. Maybe we forgot that now.

407
01:06:47.220 --> 01:06:59.879
Tim Beiko: yeah. So yeah, I guess one question I would have for Bl is like, Do you think that's like a liner feature? And like should be the main thing of the fork, or, like, I know, we've talked about combining it potentially with fossil, potentially with delighted execution, so that might be

408
01:07:00.460 --> 01:07:01.960
Tim Beiko: also worth getting into.

409
01:07:02.410 --> 01:07:11.550
Toni Wahrstaetter: Yeah, I'm not sure about combining it with both of the 2, because it's more like block 5. Access list is a feature that helps delete execution, and possible to

410
01:07:11.770 --> 01:07:20.380
Toni Wahrstaetter: be more aligned and to work more smoothly together. I saw Justin's comments and the chat that it might not be a headline. I think we can discuss that

411
01:07:20.890 --> 01:07:24.670
Toni Wahrstaetter: right now. I would say. It's it has the size of a headliner.

412
01:07:25.283 --> 01:07:37.999
Toni Wahrstaetter: I did the specs already, and there. It definitely looks like it's more of a headliner size. But yeah, debatable. Just to give a brief context on the eap, it's 7, 8, 28

413
01:07:38.120 --> 01:07:42.369
Toni Wahrstaetter: and block level accesses, tries to introduce some parallelization.

414
01:07:43.023 --> 01:07:50.799
Toni Wahrstaetter: So we can do batch I/O plus parallelly, executing transactions or executing transaction and doing the state root calculation in parallel.

415
01:07:51.150 --> 01:07:55.840
Toni Wahrstaetter: So this is the primary goal there, and some secondary goals would be that.

416
01:07:56.170 --> 01:07:58.890
Toni Wahrstaetter: for example, imagine a Ck world.

417
01:08:00.530 --> 01:08:02.780
Toni Wahrstaetter: You get the proofs, and you want to up

418
01:08:03.130 --> 01:08:20.760
Toni Wahrstaetter: the your state, and for that you can use the block of access list, because it essentially contains a full state. So without executing. You could keep your state up to date. And this is also nice for syncing, because we could kind of take the healing phase and replace it with the block of access list.

419
01:08:21.260 --> 01:08:26.450
Toni Wahrstaetter: and then do the check. If if you are on the right chain at the end by comparing the headers

420
01:08:26.800 --> 01:08:49.340
Toni Wahrstaetter: and regarding helping fossil and delayed execution. So the thing there is that fossil comes with post execution checks. So you have to execute the whole block, and then you have to check. Was there any transaction that was on an inclusion list? But it was not in the block, so you would have to try to append that transaction to the block and see if it could have been appended. If so, then the block would be valid

421
01:08:49.460 --> 01:08:52.970
Toni Wahrstaetter: and Blocklet access list help there, because

422
01:08:53.520 --> 01:08:56.349
Toni Wahrstaetter: usually you would need the post state for that.

423
01:08:56.550 --> 01:09:02.339
Toni Wahrstaetter: and you only get the post state after execution. But with Blocklet access list you could have a function that looks like

424
01:09:02.973 --> 01:09:13.000
Toni Wahrstaetter: it takes the pre-state and the block level access list and outputs the post state so you could do any checks that you would normally do post execution. You could do pre-execution.

425
01:09:13.250 --> 01:09:18.610
Toni Wahrstaetter: and this is kind of where it aligns to that execution with puzzle a little bit.

426
01:09:24.340 --> 01:09:25.069
Tim Beiko: Thanks.

427
01:09:25.760 --> 01:09:27.699
Tim Beiko: Any questions.

428
01:09:28.040 --> 01:09:29.109
Tim Beiko: Comments.

429
01:09:31.580 --> 01:09:32.850
Tim Beiko: Yeah. Lucas.

430
01:09:32.859 --> 01:09:49.889
Łukasz Rozmej: So one comment of mine about like scheduling. And so if we decide we want to do block access list, I wouldn't. I'm a bit reluctant to include fossil before, because then, with block access list, we would have to rework fossil a lot. So

431
01:09:50.169 --> 01:10:00.089
Łukasz Rozmej: maybe it would be better to include them both, or actually block access list going before fossil just for

432
01:10:00.459 --> 01:10:06.759
Łukasz Rozmej: redundancy of the work. It kind of seems. But it needs 1st decision. If you want to include block Ssds. In the 1st place.

433
01:10:06.889 --> 01:10:07.719
Łukasz Rozmej: that's all.

434
01:10:10.900 --> 01:10:12.650
Tim Beiko: Thanks, anzago.

435
01:10:13.900 --> 01:10:35.410
Ansgar Dietrichs: Yeah, more on the process side around block level access lists and also discuss this a bunch with Tony. Basically the the way the structure of block level access works is that it's kind of it has 2 separate aspects to it. It's the the read side and the right side. And the count proposal, I think, for the for the reads basically only includes the location and for the rights, the location, and the values.

436
01:10:35.790 --> 01:11:00.879
Ansgar Dietrichs: each on a per transaction level. It makes a lot of sense, if we want to ship both of these aspects of it to actually combine the implementation, because you can get a lot of synergies out of this, so you shouldn't have this completely, separately specified. But in terms of governance we should decide on both of these things independently. So I think we should really. Maybe that means splitting the Ap. But either way, like we should decide on. Do we want the reads? Do we want the rights plus diffs.

437
01:11:00.930 --> 01:11:09.580
Ansgar Dietrichs: and then, if we want both, we ship them in a unified way. But if we only want to ship one of the 2. Then we should basically explicitly talk about that. So just on the process side.

438
01:11:11.900 --> 01:11:13.980
Tim Beiko: Thanks. Guillaume.

439
01:11:16.336 --> 01:11:39.830
Guillaume: Yeah, I mean, that's kind of building on what said, I am generally supportive of blocks access list, because I think it's it's a good 1st step to what I want to happen next the biggest issue I have with, you know, scheduling this right now is that there's actually 5 flavors of it. And I think, actually, there's a lot more. And we need to really really

440
01:11:39.960 --> 01:11:43.889
Guillaume: limit the amount of of moving parts

441
01:11:44.150 --> 01:12:08.400
Guillaume: so that we know what we ship. Because no, we're not gonna ship like we can't do it in 5 steps like it's it's completely useless if we? If we just move this in like many steps, because, you know, some of it might not be shipped. Some of it. You might change your mind and realize you took a wrong turn. So you need to get the final design. And I would say, the cip is.

442
01:12:08.740 --> 01:12:25.419
Guillaume: quote unquote, small enough that we could reach a design, but I think before we even talk about scheduling it, and Tony knows my opinion. So it's not a surprise to him. I think before we talk about scheduling him, we should really get this this designed and and properly understood.

443
01:12:29.250 --> 01:12:30.500
Tim Beiko: It's some.

444
01:12:33.860 --> 01:12:42.890
Som | Erigon: So on some level, one or more flavors are already there, and, like historically

445
01:12:43.770 --> 01:12:46.990
Som | Erigon: enabling parallel execution, and so on.

446
01:12:47.220 --> 01:12:51.889
Som | Erigon: We have had some eips in the past as well.

447
01:12:52.628 --> 01:12:56.571
Som | Erigon: Tony, do you know why we did not ship

448
01:12:57.630 --> 01:13:06.130
Som | Erigon: this, or a variation of this in the past. And what changed now that we're in the position to do it.

449
01:13:07.720 --> 01:13:14.559
Toni Wahrstaetter: Yeah, I think I think this is primarily because the community had some very clear stance on what the

450
01:13:14.880 --> 01:13:23.330
Toni Wahrstaetter: what we want to achieve in the next one or 2 years, and it feels like l. 1 scaling was definitely on that list, and I would even say, on the top of that list. So

451
01:13:23.670 --> 01:13:43.109
Toni Wahrstaetter: I would say, the focus shifted towards looking more into our one scaling and block of Access list. So parallelization was always a thing, and it. It is a thing today, right? All clients, almost all clients, have some prefetcher logic, some pre loading logic that already achieves that and is very good for that. In the average case.

452
01:13:43.240 --> 01:13:56.489
Toni Wahrstaetter: block level access list would now go one step further by making sure that every block is parallelizable. There is this other year. Pf, I think it's 7, 8, 25, with the capping the gas limit, which is also already a

453
01:13:56.530 --> 01:14:03.270
Toni Wahrstaetter: a step into the right direction, there to make sure that blocks are actually parallelizable, no matter if it's the worst case or the average case.

454
01:14:03.310 --> 01:14:17.460
Toni Wahrstaetter: And just one more comment. I totally agree with what Anska and Guam said. We have to kind of get to the final design as fast as possible the 5 designs that were mentioned. This was just the 1st post I had on design space exploration.

455
01:14:17.480 --> 01:14:46.029
Toni Wahrstaetter: But in the meantime I've been talking with some client teams. There was also a lot of great input in the discord channel, so check that out. And essentially it felt like. What clients wanted was the post transaction status, because this has many different advantages, not only for parallelization, but also parallel state route calculation or for execution by state updates. So the post transaction value seemed like something that clients really wanted.

456
01:14:46.060 --> 01:14:50.800
Toni Wahrstaetter: and the storage locations. This is then something where clients could

457
01:14:51.472 --> 01:14:56.829
Toni Wahrstaetter: replace Prefetcher code with the storage locations, because this is just a deterministic list

458
01:14:56.930 --> 01:15:00.129
Toni Wahrstaetter: that is 100% correct, and it always gives you the

459
01:15:00.430 --> 01:15:08.010
Toni Wahrstaetter: the right locations. And you're never yeah in the position where you run your prefetter. And it's actually incorrect.

460
01:15:09.179 --> 01:15:12.240
Toni Wahrstaetter: Yeah, I think that that's kind of.

461
01:15:13.630 --> 01:15:34.939
Łukasz Rozmej: I want to just add that I disagree that this wasn't the focus, because vertical trees and its witnesses carried a lot of these properties that we are now simplifying. Let's say with block access lists. So it was the focus of research for the last few years. It's just in a more complex form. And now it's being somewhat simplified with this proposal.

462
01:15:36.020 --> 01:15:45.150
Toni Wahrstaetter: Oh, yeah, totally agree. I was more me thinking of focusing on kind of how to make it best for l, 1 scaling.

463
01:15:53.690 --> 01:15:55.920
Som | Erigon: Are there going to be any?

464
01:15:56.300 --> 01:16:02.660
Som | Erigon: My apologies? Changes in the block size because of this? Let's say you've

465
01:16:02.950 --> 01:16:07.829
Som | Erigon: manage to scale the block nx of what it is. And then you have to ship

466
01:16:08.340 --> 01:16:14.870
Som | Erigon: a lot of extra data as well, because right now, that is not being.

467
01:16:15.850 --> 01:16:17.840
Som | Erigon: you know, taking place and like

468
01:16:17.960 --> 01:16:22.159
Som | Erigon: with higher block limits and more transactions.

469
01:16:22.360 --> 01:16:25.550
Som | Erigon: the bandwidth would be like a premium.

470
01:16:27.620 --> 01:16:33.139
Toni Wahrstaetter: Yes, this is correct. So block type access list would add some additional size to the current block size.

471
01:16:33.350 --> 01:17:00.979
Toni Wahrstaetter: And the worst case is not a problem here, because the worst case would be around 0 point 9 MB. So this is smaller than the worst case from call data, and the 2 are exclusive. So you cannot build a block that has a lot of call data and a big block level access list. But we should more focus on the average case here, anyway, and on average, the block of access list design, as it is in the Ap. Right now, would add on average, 40 kB per block.

472
01:17:01.510 --> 01:17:05.240
Toni Wahrstaetter: And this is definitely a non negligible

473
01:17:05.520 --> 01:17:22.500
Toni Wahrstaetter: increase. And we should, yeah, carefully analyze that. I think when we look at the pros and cons, I think it's worth it. But this is definitely, I would say, one of the most important points to to stress here that the block that access lists are not like

474
01:17:22.910 --> 01:17:35.879
Toni Wahrstaetter: a super small object compared to yeah, anything that requires witnesses. It's very small. But yeah, definitely. Some some block average block size increase.

475
01:17:41.483 --> 01:17:42.330
Tim Beiko: Odds are.

476
01:17:42.960 --> 01:18:12.019
Ansgar Dietrichs: Yeah, on this point, I just wanted to briefly add a kind of caveat, just that, indeed, as account throughput levels, and especially at current pricing levels, even if we were to increase throughput. And this kind of extra data consumption is indeed not a concern, because for the same gas that you otherwise would have spent on call data. You already like, spend it on state breeds or writes instead. And so you can't spend it on call data. So the worst case block size does not actually get worse. However, there's a big big caveat there, because

477
01:18:12.030 --> 01:18:18.760
Ansgar Dietrichs: going forward, we have more headroom to scale state accesses, reads or rights.

478
01:18:18.830 --> 01:18:32.830
Ansgar Dietrichs: And then we have to scale data. And so this could actually change in the future. So basically we are locking us potentially in and basically, as we would want to change that pricing, we would then hit that wall, that now, basically, there's this, this this limit.

479
01:18:33.272 --> 01:18:45.370
Ansgar Dietrichs: Same thing where we would. We are looking into these like multi dimensional pricing. Again, a bit of a scary term. But like, basically just like, make it so that you can consume call data and execution at the same time. Now, that would then also basically run into this bottleneck. And

480
01:18:45.440 --> 01:19:13.349
Ansgar Dietrichs: none of this again, this is just a qualitative argument, not a quantitative argument. So I think over the next few weeks we will look into quantitatively. What does it actually mean, and what kind of relative consumption levels gas limit levels that would actually start to be constraining start to become an issue. And then hopefully, we have an empirical basis to actually make that decision. But I just wanted to flag that this argument that when you just brought up holds at today's levels, but not necessarily in that future that we're aiming to enable here.

481
01:19:16.890 --> 01:19:17.590
Tim Beiko: Thanks.

482
01:19:18.840 --> 01:19:25.590
Tim Beiko: And okay, anything else on block level access list. For now

483
01:19:29.090 --> 01:19:33.913
Tim Beiko: otherwise, I do want to come back to this

484
01:19:35.080 --> 01:20:01.610
Tim Beiko: pay OP code and and devnet inclusion. So previously, we said we would remove pay from Fusaka. It seems like a bunch of people in the chat voice that they they would actually like to keep it. And some of the client team said they already have implementations or the implementations are trivial. So there was a an ask, or should we consider this for definite? 3 for Fusaka? So

485
01:20:01.910 --> 01:20:15.749
Tim Beiko: 2 min ago, we said we wanted definitely 2 to be the last definitely where we add things, I think, even if we want to add one more, for with definite 3 we should be clear that

486
01:20:15.920 --> 01:20:29.900
Tim Beiko: like, we need to ship what's in Devnet one, and then what's in Devnet 2. And then, if that all goes well we could potentially add pay to to defnet 3.

487
01:20:30.040 --> 01:20:31.915
Tim Beiko: But yeah, how

488
01:20:33.250 --> 01:20:48.490
Tim Beiko: how do people feel about that? Do we want to keep pay? Cfi, and then add it to Devnet 3. If everything goes wrong, everything goes correct, and we don't see major issues. And then that's 1 and 2.

489
01:20:49.880 --> 01:20:51.010
Tim Beiko: Yeah, Ben.

490
01:20:51.720 --> 01:20:59.379
Ben Adams: Yeah. So a very simple opcode in terms of it's just old that you delete 90% of the implementation.

491
01:21:01.670 --> 01:21:04.890
Ben Adams: The the main thing would be around testing it, I guess.

492
01:21:11.300 --> 01:21:19.860
Tim Beiko: Okay. Since base. You also wanted in Defnet 3 at the latest. 3 yeah. Lewis.

493
01:21:20.780 --> 01:21:30.579
Luis Pinto | Besu: Yeah. So this came about in Uf, well, it was mandatory to to, because of the to to include it because of the

494
01:21:32.057 --> 01:21:34.760
Luis Pinto | Besu: not passing the gas to the call anymore.

495
01:21:35.630 --> 01:21:45.730
Luis Pinto | Besu: I see it was still useful as a simplification for, and even security wise, wise for mitigating reentrancing calls.

496
01:21:45.890 --> 01:21:55.109
Luis Pinto | Besu: So I haven't seen that much pushback on arguments against it. So yeah, would like if there's any arguments against it.

497
01:21:55.280 --> 01:21:58.890
Luis Pinto | Besu: But it's it's a really simple one, as Ben said, to add.

498
01:22:00.080 --> 01:22:04.310
lightclient: I mean, I feel like I gave arguments against it last all quartz.

499
01:22:04.540 --> 01:22:10.810
lightclient: which is that it's a very simple thing to implement. But the implications of implementing it are not as simple.

500
01:22:11.140 --> 01:22:17.189
lightclient: And I don't know if people have thought really deeply about this, how we want people to use the epm going forward.

501
01:22:18.070 --> 01:22:28.629
lightclient: It seems like something that people just want to do, because it's easy, and we can just do it. And it might make some like people's lives easier. But have we thought about? Is this really what we want the Evm to look like? Because we can't undo this.

502
01:22:31.190 --> 01:22:44.259
Luis Pinto | Besu: As okay. So as I, I think the the use case is already available through self district. So it's not something new that we're gonna add, it's just making it explicit with the pay, with your code.

503
01:22:50.210 --> 01:23:08.299
Andrew Ashikhmin: Yeah, I I'd like to add to like like clients. Point is that it changes the tracer. And if you want to trace historical balances. It just adds a new mechanism to transfer. If, which is fine. My only worry is that

504
01:23:08.940 --> 01:23:14.799
Andrew Ashikhmin: it's maybe too late for Fusaka, and it's easy to implement in the Evm. But it has the

505
01:23:14.940 --> 01:23:18.669
Andrew Ashikhmin: non trivial implements in

506
01:23:18.900 --> 01:23:27.110
Andrew Ashikhmin: consequences. Down, down the stack, and we are disregarding that. We're only thinking, oh, it's easy to implement. Let's implement it.

507
01:23:31.500 --> 01:23:32.720
Tim Beiko: Okay. So I think,

508
01:23:35.990 --> 01:23:43.199
Tim Beiko: I'm fine, Le, leaving it. Cfi, if we want for the next 2 weeks. But I think we should definitely.

509
01:23:43.880 --> 01:23:48.669
Tim Beiko: like, yeah. Have a better grasp on the implication if we are to include it in the 3.

510
01:23:49.398 --> 01:23:50.550
Tim Beiko: But I would not.

511
01:23:50.550 --> 01:23:52.919
Tim Beiko: But we're not gonna get that in the next 2 weeks.

512
01:23:53.320 --> 01:23:58.780
Tim Beiko: So if we're not, then should be just remove it.

513
01:24:05.650 --> 01:24:09.790
Andrew Ashikhmin: Is it possible to move it to Cfi for Glamsterdam, or something.

514
01:24:09.790 --> 01:24:12.910
Tim Beiko: I would not do that yet. When we do this, it's like

515
01:24:13.110 --> 01:24:22.619
Tim Beiko: we. We can propose it again for Amsterdam. We can have that conversation again in a few months, but I think it would be a mistake to decide today, when we don't even know what the biggest feature

516
01:24:23.220 --> 01:24:23.600
Andrew Ashikhmin: Correct.

517
01:24:23.600 --> 01:24:30.670
Tim Beiko: That will be yeah. So like, not like nothing against considering it for Glamsterdam. But I I think we should make those decisions independently.

518
01:24:31.383 --> 01:24:32.410
Tim Beiko: Yeah, Daniel.

519
01:24:33.150 --> 01:24:50.760
Daniel Lehrner (Besu): Yeah, I just wanted to say we we should be careful not not to repeat a similar mistake as with Evf, and maybe ask smart contract developers why they they wanted, you know, to to get outside voices, because there are things, maybe, that that we are missing.

520
01:24:59.300 --> 01:25:07.910
Tim Beiko: Okay. So this makes me lean towards the word like, yeah, previous decisions removing it from Fusaka

521
01:25:08.790 --> 01:25:14.220
Tim Beiko: and reconsidering for Amsterdam. And if it's mostly a question of like

522
01:25:14.830 --> 01:25:23.046
Tim Beiko: design implications and community support. Then we have plenty of time to do that for Amsterdam, and if it's a trivial implementation,

523
01:25:23.580 --> 01:25:32.070
Tim Beiko: if it's a trivial implementation, then it shouldn't be too too big to add to the fork, regardless of what goes in. But

524
01:25:32.900 --> 01:25:47.390
Tim Beiko: yeah, given, we're already pretty full for Fuzaka. We've already stretched into this. In the 3rd definite I would lean towards removing it and just keeping your scope as is for basically what we had for def one, and then adding,

525
01:25:47.840 --> 01:25:53.869
Tim Beiko: 7, 9, 1, 2, 7, 9, 3, 4, 7, 9, 0, 7 2,

526
01:26:01.950 --> 01:26:02.670
Tim Beiko: okay.

527
01:26:04.998 --> 01:26:23.931
Tim Beiko: one more thing that I wanted to bring up on this call so there was an eip in the past about a versioning scheme for eips that the testing team had put together with, never mind they wanted to discuss it again on this call.

528
01:26:25.890 --> 01:26:26.590
Tim Beiko: yeah.

529
01:26:30.740 --> 01:26:31.230
Ahmad Bitar | Nethermind: See.

530
01:26:31.230 --> 01:26:32.369
Tim Beiko: Yeah, I'm on. Yeah.

531
01:26:33.310 --> 01:26:55.589
Ahmad Bitar | Nethermind: Yeah, hey? So I I won't take much of everyone's time. I just wanted to go quickly and suggest that we do the IP versioning scheme for all the Ips that we plan to include for Glamsterdam, which means that any IP that reaches the reviews. Date

532
01:26:56.692 --> 01:27:09.097
Ahmad Bitar | Nethermind: should have a version, and then any consequent changes should probably ha add a an a minimum

533
01:27:09.920 --> 01:27:15.000
Ahmad Bitar | Nethermind: at the end, saying, what was the change? If it was just a

534
01:27:15.150 --> 01:27:29.929
Ahmad Bitar | Nethermind: linguistic change or deeper change, etc. Based on the spec that is written in the aip. There were concerns from raised from Tim about the friction that this would add to the

535
01:27:30.100 --> 01:27:32.095
Ahmad Bitar | Nethermind: to the process.

536
01:27:33.010 --> 01:27:42.920
Ahmad Bitar | Nethermind: and I think that we, like all core devs, have had instances where tests

537
01:27:43.040 --> 01:28:10.489
Ahmad Bitar | Nethermind: and client implementations did not align just because we were not sure about the version of the aip that these tests were testing or the version of the implementation of that client that we are trying against these tests, or that even the version of the spec, like as an eels that we are using to generate these test

538
01:28:11.701 --> 01:28:13.117
Ahmad Bitar | Nethermind: what they're called.

539
01:28:15.020 --> 01:28:42.459
Ahmad Bitar | Nethermind: yeah, to generate like the test. So like a lot of a lot of things would benefit a lot of things in the process of the development and implementation of these Ips would benefit from this versioning scheme and this little friction that this adds, shouldn't account for should be like outweighed by the benefits that we get in testing, etc.

540
01:28:45.000 --> 01:29:03.540
Ahmad Bitar | Nethermind: And yeah, like, I'd like to hear from everyone their opinions and potentially, if if there is like if if no, if people haven't even haven't haven't started looking at the aip, please do. And like, we can decide on it later. Obviously.

541
01:29:04.690 --> 01:29:11.330
Tim Beiko: Yeah, I've I've looked at it in the past, and I frequently wrestle with the eip bot and get

542
01:29:11.450 --> 01:29:16.557
Tim Beiko: and harass people to go wrestle with the eip bot. So I think

543
01:29:17.540 --> 01:29:19.720
Tim Beiko: anything that's blocked on the eip.

544
01:29:19.860 --> 01:29:23.210
Tim Beiko: But then, like anything that's like a strict enforcement.

545
01:29:23.710 --> 01:29:51.346
Tim Beiko: it is something I would. I would have like pretty big concerns on like I would want us. I would basically want us to come up with like a proposal. For how do you actually automate this and and not add more friction to the process if you ship it? My counter proposal was like, let's just use the hash because we get it for free every time we do a commit to the eip. I think this gets you basically the value of clearly identifying the changes which

546
01:29:51.810 --> 01:29:52.660
Tim Beiko: which

547
01:29:54.730 --> 01:30:22.959
Tim Beiko: which is like half the battle. It doesn't get you. This idea of like, okay, the the magnitude of the change, and it doesn't quite couple it to the process. But I think if if that's kind of what we want like, then we should probably just have a much deeper rethink of eips around like, you know. What do we want statuses to mean? How do we want that to work with versions? How should that work with devnets and whatnot. And to me this feels like a much, much bigger can of worms that like we shouldn't just add a new

548
01:30:23.150 --> 01:30:52.780
Tim Beiko: versioning scheme about like the the updates to the eip without taking this consideration. So I would say, like, if we want to say that, like the hash, is like the official version, have a way to automatically add that to the eips with a bot or something strongly support it. But I I think, any sort of versioning scheme should be much more comprehensive, and and reflect, like the Eip, state, the Hard Fork state, and all of that, and we should make sure the automation is is set up supported.

549
01:30:55.570 --> 01:30:57.150
Tim Beiko: Yeah, I'm Andrew.

550
01:30:58.471 --> 01:31:14.818
Andrew Ashikhmin: Yeah, I agree with you, Tim. I think this is a bit unnecessary, this this extra version, and it introduces more friction, because, we can always check the history in Github, but I think what would be helpful is to be stricter about

551
01:31:15.770 --> 01:31:30.839
Andrew Ashikhmin: freezing eip commits on the devnet spec, because sometimes we do it and sometimes we don't. And I think that this is really helpful, because this gives us the level

552
01:31:30.900 --> 01:31:50.170
Andrew Ashikhmin: of that we should target. So we are targeting devnet, say, 5 versions. We are doing tests for Devnet 5 versions. We're doing implementations for Devnet 5 versions. Everything is frozen, and we should do it like reasonably well in advance, and like new commands, can be merged, and so on. So.

553
01:31:50.270 --> 01:32:00.009
Andrew Ashikhmin: But we'll have an explicit like for Devnet 6, we'll we can see the diffs between the commits and update everything to the Devnet. 6 version.

554
01:32:06.920 --> 01:32:07.600
danceratopz: I.

555
01:32:08.500 --> 01:32:09.600
Tim Beiko: Yeah, hey, Gavin?

556
01:32:09.600 --> 01:32:14.583
danceratopz: It's, hey? It's it's Dan here. From the testing team from East.

557
01:32:15.060 --> 01:32:22.159
danceratopz: thanks a lot Tim, for the input, about having a more sort of fully encompassed solution, and I completely agree.

558
01:32:22.420 --> 01:32:29.139
danceratopz: So I think my proposal would be as the Eip, 7,577 stands. Now.

559
01:32:29.390 --> 01:32:40.860
danceratopz: it's a little bit out of date, because that was written when we used the 1st available reference implementation from any client team in order to fill the test for any IP.

560
01:32:41.420 --> 01:32:49.760
danceratopz: And now we've moved since Prague 5, I think of September like last year or October. We actually

561
01:32:50.100 --> 01:32:59.950
danceratopz: generally, and I think we've managed to always use eels as the reference implementation as it should be, and

562
01:33:00.290 --> 01:33:04.410
danceratopz: if eels was more tightly coupled with the eip process.

563
01:33:04.710 --> 01:33:09.480
danceratopz: that if you propose an eip and you get

564
01:33:09.580 --> 01:33:16.630
danceratopz: like Cfid, then you should propose an implementation in eels, and the and the Eip

565
01:33:16.760 --> 01:33:20.889
danceratopz: document is tightly coupled to this eip implementation.

566
01:33:21.060 --> 01:33:26.030
danceratopz: then it becomes a bit more reasonable to start adding a versioning on top of that.

567
01:33:26.520 --> 01:33:31.840
danceratopz: I I don't want to take up much more time. It's just a thought that that we've had in the meantime.

568
01:33:32.900 --> 01:33:33.699
danceratopz: Thanks. Yeah. I.

569
01:33:33.700 --> 01:33:43.469
Tim Beiko: I think. And yeah, I think this is like an important discussion to have like I. But I do want to make sure that whatever process we have or whatever like scheme we use

570
01:33:43.620 --> 01:33:55.029
Tim Beiko: is both like semantically useful, like we, we know what they're getting out of it, but also not completely independent from from the other parts of the process.

571
01:33:55.680 --> 01:34:09.379
Tim Beiko: so my like, yeah. My again, my proposal, if we just want to track changes, then commits or or commit. Hashes are are kind of nice because you get them for free, and then, if we want to have a much more comprehensive thing. I think it should.

572
01:34:09.600 --> 01:34:12.042
Tim Beiko: it should encompass a bit more.

573
01:34:12.940 --> 01:34:22.450
Tim Beiko: yeah, we. I think it's worth continuing this conversation, I think, and happy to trial something for Glamsterdam as we as we work through the fork, which obviously we would, we would adjust.

574
01:34:24.120 --> 01:34:24.910
Tim Beiko: And

575
01:34:25.880 --> 01:34:31.160
Tim Beiko: we're already at time with this anything else people have to bring up quickly before we wrap up.

576
01:34:37.580 --> 01:34:40.290
Tim Beiko: Okay? Well, oh, yeah, Ben.

577
01:34:42.468 --> 01:34:50.389
Ben Adams: Just the issue. The blob, count Max per transaction that was just raised about.

578
01:34:50.950 --> 01:34:53.260
Ben Adams: So the paired pair Dash related.

579
01:34:53.510 --> 01:34:56.730
Ben Adams: It is, where is it?

580
01:35:00.800 --> 01:35:05.840
Ben Adams: Re. Forward this that Alexia raised.

581
01:35:08.490 --> 01:35:12.819
Tim Beiko: Okay, we're already past time. So let's have people review this. I think.

582
01:35:17.950 --> 01:35:20.675
Marius: Alright, thank you. See you bye.

583
01:35:22.980 --> 01:35:25.170
Gary Schulte: Bye Marius thanks Marius, Hi.

584
01:35:27.650 --> 01:35:28.289
Ameziane Hamlat: And I.

