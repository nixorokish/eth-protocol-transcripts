00:03:38	Dan Cline:	Gm!!
00:03:44	Trent:	Grand rising
00:04:01	Ansgar Dietrichs:	weekly mood boost seeing you all
00:04:03	Justin Florentine (Besu):	ooooooh grand rising, i like that
00:04:40	Ansgar Dietrichs:	Replying to "weekly mood boost se..."

I feel like I wrote “gm” too often here, need to get more creative with my openings
00:04:49	Pooja Ranjan:	Reacted to "I feel like I wrote ..." with 😃
00:04:57	Dan Cline:	Reacted to "I feel like I wrote ..." with 😃
00:04:58	Tim Beiko:	Reacted to "I feel like I wrote ..." with 🙌
00:05:00	Pooja Ranjan:	Reacted to "weekly mood boost se..." with 👍
00:05:02	Ben Edgington:	Replying to "weekly mood boost se..."

gm
00:05:07	Ansgar Dietrichs:	Reacted to "gm" with ❤️
00:05:12	Trent:	Replying to "weekly mood boost se..."

Ur making me blush
00:05:16	Justin Florentine (Besu):	Replying to "weekly mood boost se..."

gm is eternal ansgar
00:05:55	Ansgar Dietrichs:	Reacted to "Ur making me blush" with ❤️
00:05:57	Ansgar Dietrichs:	Reacted to "gm is eternal ansgar" with ❤️
00:06:25	Tim Beiko:	https://blog.ethereum.org/2025/04/23/pectra-mainnet
00:06:35	Pooja Ranjan:	Reacted to "https://blog.ethereu..." with 🔥
00:06:53	yiannisbot:	Reacted to "https://blog.ethereu..." with 🔥
00:07:01	Parithosh Jayanthi:	Reacted to "https://blog.ethereu..." with 🔥
00:07:09	Mario Vega:	Reacted to "https://blog.ethereu..." with 🔥
00:07:12	Iván | Lambda:	Reacted to "https://blog.ethereu..." with 🔥
00:07:25	Gajinder Singh:	Reacted to "https://blog.ethereu..." with 🔥
00:09:01	Gary Schulte:	sorry IDK why zoom is randomly unmuting me lately
00:09:18	Fredrik:	Reacted to "https://blog.ethereu..." with 🔥
00:09:49	Fredrik:	Replying to "sorry IDK why zoom i..."

have had the same when using airpods, quite annoying
00:09:55	danceratopz:	Reacted to "https://blog.ethereu..." with 🔥
00:10:13	Justin Traglia:	Reacted to "https://blog.ethereu..." with 🔥
00:11:06	stokes:	Maybe something like this?

"blobSchedule": {
  "cancun": {
    "timestamp": 1710338135,
    "target": 3,
    "max": 6,
    "baseFeeUpdateFraction": 3338477
  },
  "prague": {
    "timestamp": 1746612311,
    "target": 6,
    "max": 9,
    "baseFeeUpdateFraction": 5007716
  },
  "bpo1": {
    "timestamp": 1740693335,
    "target": 24,
    "max": 48,
    "baseFeeUpdateFraction": 5007716
  },
  "bpo2": {
    "timestamp": 1743285335,
    "target": 36,
    "max": 56,
    "baseFeeUpdateFraction": 5007716
  },
  ...
}
00:11:19	stokes:	https://discord.com/channels/595666850260713488/1360267444911865876/1360268491139190895
00:11:24	stokes:	^ thread here
00:12:16	Danno Ferrin | Ipsilon:	I like the code names of bpos being just numbers and not regular names.  We can give them fun names outside of the config files.
00:12:22	Tim Beiko:	Reacted to "I like the code name..." with 👍
00:12:43	MariusVanDerWijden:	Reacted to "I like the code na..." with 👍
00:12:47	Parithosh Jayanthi:	Reacted to "I like the code name..." with 👍
00:13:26	frangio:	Reacted to "have had the same wh..." with 😰
00:13:37	lightclient:	Reacted to "I like the code name..." with 👍
00:13:45	Mario Vega:	Reacted to "have had the same wh..." with 😰
00:13:47	Gajinder Singh:	Reacted to "I like the code name..." with 👍
00:14:05	Barnabas:	don’t worry about us lol, we just gotta hack together some json
00:14:16	Gajinder Singh:	yes makes sense
00:14:18	nixo:	Reacted to "don’t worry about us..." with 🐼
00:14:26	MariusVanDerWijden:	But we need the timestamp anyway in the fork schedule
00:14:29	Parithosh Jayanthi:	Reacted to "don’t worry about us..." with 🐼
00:14:30	felix (eest):	Reacted to "don’t worry about..." with 🐼
00:14:36	MariusVanDerWijden:	So this would duplicate it
00:14:43	Tim Beiko:	"blobSchedule": {
  "cancun": {
    "target": 3,
    "max": 6,
    "baseFeeUpdateFraction": 3338477
  },
  "prague": {
    "target": 6,
    "max": 9,
    "baseFeeUpdateFraction": 5007716
  },
  "1740693335": {
    "target": 24,
    "max": 48,
    "baseFeeUpdateFraction": 5007716
  },
  "1743285335": {
    "target": 36,
    "max": 56,
    "baseFeeUpdateFraction": 5007716
  }
}
00:14:44	MariusVanDerWijden:	(for us)
00:15:31	lightclient:	no fun names?
00:15:43	Ben Adams:	could find some small town names?
00:15:47	Barnabas:	Replying to "no fun names?"

bikeshed#1
00:15:48	lightclient:	Reacted to "could find some smal..." with 🚀
00:15:52	Barnabas:	Replying to "no fun names?"

bikeshed#2
00:15:57	nixo:	Reacted to "bikeshed#2" with 😂
00:15:58	Parithosh Jayanthi:	Reacted to "no fun names?" with 😂
00:15:58	Dan Cline:	Yes would be great to specify in the eip that for example the "normal" chainconfig would add a fork and timestamp. Timestamp in blob param config would also be redundant for us, but not really concerned about that tbh. Bpo1 etc or fun names seems fine to me
00:15:59	Josh Davis:	Reacted to "bikeshed#1" with 😅
00:16:00	Justin Traglia:	Reacted to "bikeshed#2" with 😂
00:16:00	Parithosh Jayanthi:	Reacted to "bikeshed#2" with 😂
00:16:01	Parithosh Jayanthi:	Reacted to "bikeshed#1" with 😅
00:16:02	nixo:	Reacted to "bikeshed#1" with 😅
00:16:02	lightclient:	Reacted to "bikeshed#2" with 😂
00:16:04	FLCL:	minecraft flowers
00:16:04	Ahmad Bitar | Nethermind:	Reacted to bikeshed#2 with "😂"
00:16:08	Josh Davis:	Reacted to "bikeshed#2" with 😂
00:16:09	Ben Adams:	Reacted to "bikeshed#2" with 🔥
00:16:10	lightclient:	Reacted to "minecraft flowers" with 🚀
00:16:15	Gajinder Singh:	bpo1 bpo2 is just fine
00:16:18	Felix (Geth):	Convert timestamp to mnemonics, done
00:16:48	Jihoon:	Reacted to "bikeshed#1" with 😅
00:16:50	Jihoon:	Reacted to "bikeshed#2" with 😂
00:17:11	Ben Adams:	Ethereum 4 hardforks a year? 🔥😉
00:17:27	Sophia Gold:	Reacted to "no fun names?" with 😂
00:17:57	Parithosh Jayanthi:	The idea behind staggering them is to give us time to halt a future BPO in case we notice degradation that’s unexecpted
00:18:25	Parithosh Jayanthi:	Replying to "Ethereum 4 hardforks..."

Hitting my KPIs for sure
00:18:35	yiannisbot:	Reacted to "Hitting my KPIs for ..." with 😂
00:18:36	Barnabas:	it wouldn’t be an emergency hard fork, thats wrong wording imo
00:18:37	Ahmad Bitar | Nethermind:	Reacted to Hitting my KPIs for ... with "😂"
00:18:37	Gary Schulte:	Reacted to "Hitting my KPIs for ..." with 😂
00:18:55	Łukasz Rozmej:	Reacted to "Hitting my KPIs for ..." with 😂
00:19:00	Kevaundray Wedderburn:	Reacted to "Hitting my KPIs for ..." with 😂
00:19:02	stokes:	BPO downshift
00:19:03	nixo:	BPO intervention
00:19:08	Gary Schulte:	Reacted to "BPO intervention" with 👍
00:19:13	Parithosh Jayanthi:	Reacted to "BPO intervention" with 😂
00:19:33	Carl Beekhuizen:	Reacted to "BPO intervention" with 👍
00:19:33	Barnabas:	Replying to "BPO downshift"

or upshift
00:19:42	Ansgar Dietrichs:	Replying to "BPO intervention"

BPOPO - BPO Parameter Only fork :-)
00:19:44	sacha:	Reacted to "Hitting my KPIs for ..." with 😂
00:19:44	Barnabas:	Replying to "BPO downshift"

we don’t know if we are too conservative…
00:19:50	sacha:	Reacted to "The idea behind stag..." with 👍
00:19:54	nixo:	Reacted to "BPOPO - BPO Paramete..." with 💙
00:20:00	Carl Beekhuizen:	Replying to "BPO downshift"
BPO rev-match
00:20:14	Carl Beekhuizen:	Replying to "BPO downshift"
gotta hit that perfect shift
00:20:27	Carl Beekhuizen:	Reacted to "BPOPO - BPO Paramete…" with 💙
00:20:32	Parithosh Jayanthi:	Reacted to "BPOPO - BPO Paramete..." with 💙
00:20:43	Carl Beekhuizen:	Reacted to "bikeshed#2" with 🔥
00:21:03	Danno Ferrin | Ipsilon:	I’ll start status.  Should ben take the compiler change?  RISK-V - TBD
00:21:05	Toni Wahrstätter:	Reacted to "BPOPO - BPO Paramete..." with 💙
00:21:11	MariusVanDerWijden:	I spent a week updating our implementation to eof-devnet-1 spec, now y'all want to switch again 😢
00:21:17	Ben Adams:	Reacted to "I’ll start status.  ..." with 👍
00:21:23	Justin Florentine (Besu):	doesn't EOF facilitate adopting new approaches like RISCV
00:21:32	Barnabas:	Replying to "I spent a week updat..."

typical EOF enjoyoor
00:21:46	Carl Beekhuizen:	Replying to "no fun names?"
I prefer 
bikeshed a
bikeshed b
00:21:55	Advaita | Nimbus:	Reacted to "typical EOF enjoyo..." with 😂
00:22:05	Parithosh Jayanthi:	Reacted to "I prefer 
bikeshed a..." with 😂
00:22:09	Tim Beiko:	We can call them BSO forks :-)
00:22:12	Parithosh Jayanthi:	Reacted to "typical EOF enjoyoor" with 😂
00:22:24	Carl Beekhuizen:	Reacted to "We can call them BSO…" with 😂
00:24:08	frangio:	what do you mean you can't compile? can you be more specific?
00:24:09	MariusVanDerWijden:	Will adding code/gas introspection not impact zk of eof?
00:24:22	Ansgar Dietrichs:	we can’t deprecate introspection though once we ship it
00:24:46	lightclient:	Replying to "Will adding code/gas..."

i figured the introspection is more about trying to make it so contracts dont break in the future when changes to the protocol happen?
00:24:49	Ansgar Dietrichs:	Replying to "we can’t deprecate i..."

so yes we could ship yet another version without it, but then we’d have to maintain both versions of EOF forever
00:24:52	Barnabas:	can any L2’s migrate to EOF?
00:25:09	Parithosh Jayanthi:	Replying to "can any L2’s migrate..."

Can, but likely won’t due to tooling support lacking
00:25:22	Ansgar Dietrichs:	isn’t it expected that legacy contracts will not be compiled for EOF? I assumed everything would have to be rewritten for EOF from scratch anyway, no?
00:25:25	Barnabas:	Replying to "can any L2’s migrate..."

assuming all tooling supports EOF day 0.
00:25:26	frangio:	is the proposal to enable EXTCODESIZE/COPY/HASH ?
00:25:30	Dustin:	there is no "for now", though
00:25:38	Dustin:	that's an illusion
00:25:41	frangio:	Replying to "we can’t deprecate i..."

EOF would still not be introspectable afict
00:25:41	Ansgar Dietrichs:	Replying to "isn’t it expected th..."

like, do we know whether audit results would carry over? seems dangerous to assume
00:25:47	lightclient:	Reacted to "there is no "for now..." with 😆
00:25:59	Danno Ferrin | Ipsilon:	I can speak to the “Option D” details
00:26:02	lightclient:	Replying to "is the proposal to e..."

and gas introspection
00:26:18	Alex (axic):	Contracts which rely on assembly-blocks usually need to be changed, as they escape the abstractions Solidity provides.
00:26:49	andrei:	Replying to "isn’t it expected th..."

not from scratch, solidity mostly compiles the same code fine to EOF. incompatibility is on assembly level
00:26:50	Alex (axic):	In Ipsilon we have rewritten some of the Solady features using EOF-specific features, and they are actually doable.
00:27:13	Richard Meissner:	but the opcodes are only disabled for EOF contracts, right?
00:27:23	Alex (axic):	Replying to "but the opcodes are ..."

yes
00:27:28	Richard Meissner:	Reacted to "yes" with 👍
00:29:04	Richard Meissner:	Replying to "but the opcodes are ..."

so the assumption is that the solc compiler supports compiling to the EOF format, but this requires that specific build in functions are not used, which is not the case for OZ, solady and so on. Do I understand this correctly?
00:29:06	Ansgar Dietrichs:	didn’t we make a final decision on EOF scope already? I feel like this discussion is violating process - I think we should only reconsider EOF scope for either of:
client implementation issues
security concerns
major strategic reconsiderations

seems like these arguments are below that threshold. I think we need to be better at sticking to prior decisions here
00:29:18	Ahmad Bitar | Nethermind:	Reacted to didn’t we make a fin... with "➕"
00:29:20	frangio:	this is not a new signal i raised this back in october 😭
00:29:22	Felix (Geth):	Introspecting EOF lfg
00:29:26	Piper Merriam:	Fixing the contracts seems like the path forward here
00:29:31	Charles C (vyper):	Reacted to "this is not a new ..." with 👍
00:29:36	stokes:	Replying to "didn’t we make a fin..."

I think the claim is around the last point
00:29:43	Alex (axic):	Replying to "but the opcodes are ..."

Solady and OZ inline-assembly blocks need changes, as they escape the abstraction Solidity provides.
00:29:53	stokes:	EOF as SFI’d now may imply a lot more work than we originally expected
00:30:07	Ansgar Dietrichs:	Replying to "didn’t we make a fin..."

I think the RISC-V would amount to that, but not some questions around developer experience
00:30:10	Charles C (vyper):	what about all the other concerns brought up whose implications weren't understood?
00:30:18	Ansgar Dietrichs:	Replying to "didn’t we make a fin..."

(not saying those are not important, it is just too late now)
00:30:22	Ben Adams:	Upstream hasn't moved far enough for us to drop them
00:30:28	lightclient:	we have a lead of devex, why do we need to create a python 2 -> 3 moment and risk that?
00:31:19	Richard Meissner:	Reacted to "Solady and OZ inline..." with 👍
00:31:30	Richard Meissner:	Replying to "but the opcodes are ..."

Cool thanks this makes it clear
00:31:47	lightclient:	Reacted to "what about all the o..." with 👍
00:31:52	andrei:	Reacted to "Fixing the contracts..." with 👍
00:31:52	frangio:	Reacted to "so the assumption is..." with 👍
00:32:00	andrei:	Reacted to "I think the RISC-V w..." with 👍
00:32:08	andrei:	Reacted to "didn’t we make a fin..." with 👍
00:32:10	Vitalik Buterin:	My view is the opposite 😄 

I think this attitude of "removing things is a no no, but it's ok if things are added on top" is exactly what's driving ethereum toward ever-increasing complexity
00:32:27	Ansgar Dietrichs:	the point is - if it really turns out we are making a mistake by not allowing introspection, we can determine this in due time, and ship a fix in glamsterdam. then worst case adoption was delayed by a few months.

if we make a mistake the other way around, we will be stuck with the consequences forever
00:32:37	Tim Beiko:	Reacted to "the point is - if it..." with 👍
00:32:57	Richard Meissner:	Reacted to "the point is - if it..." with 👍
00:33:06	frangio:	the language here seems wrong? introspection will remain unavailable! the opcodes are "neutered"
00:33:14	felix (eest):	Reacted to "the point is - if ..." with 👍
00:33:30	Ahmad Bitar | Nethermind:	Reacted to the point is - if it... with "👍"
00:33:31	Dustin:	Replying to "the point is - if ..."

I don't have strong views/basis for views on EOF, but I strongly agree with this -- adding things back is vastly easier than removing them
00:33:37	andrei:	Reacted to "the point is - if it..." with 👍
00:33:50	Charles C (vyper):	by the way, gas introspection is not even really banned, since you can trivially call a legacy contract "gas oracle"
00:33:59	lightclient:	Reacted to "by the way, gas intr..." with 👍
00:34:03	Parithosh Jayanthi:	Reacted to "the point is - if it..." with 👍
00:34:26	frangio:	Replying to "the point is - if it..."

we're already stuck with legacy. having these opcodes in eof will not make things any worse. the important bit is eof contracts will remain unintrospectable
00:34:34	MariusVanDerWijden:	Why can this asm -> eof not be done in the compiler?
00:35:02	MariusVanDerWijden:	Replying to "Why can this asm -..."

The way I understand it, a lot of the issues are because people are u gas() in asm
00:35:16	Alex (axic):	Replying to "Why can this asm -> ..."

You mean transform legacy assembly opcodes to new ones? The entire point of the assembly block in Solidity is to give full control to the contract author. This would violate it.
00:35:25	Ahmad Bitar | Nethermind:	Reacted to The way I understand... with "➕"
00:35:33	Alex (axic):	Replying to "Why can this asm -> ..."

However Ipsilon has already adjusted a lot of the features of Solady source code to work with EOF opcodes.
00:36:06	Alex (axic):	Replying to "Why can this asm -> ..."

As a way to validate the claim that no feature of Solady becomes unavailable.
00:36:08	gakonst:	Hey guys apologies I'm late. Dan i think shared our stance:
- no go w/o existing codebases compiling, remove the bans on things / remove txcreate bs
- if not feasible, given we have the Charles codesize EIP for codesize, consider the alternative proposals for stack too deep like swap17-32

The top mission is PeerDAS 2025. No compromises. Descoping things is fine.
00:36:18	lightclient:	but the bigger issue is that we can’t remove EOF later if we decide to switch to RISC-V
00:36:28	Charles C (vyper):	Reacted to "but the bigger iss..." with 👍
00:36:39	frangio:	is there a document about what is actually being proposed here? not clear what opcodes etc are at stake
00:36:52	Tim Beiko:	@frangio https://notes.ethereum.org/@ipsilon/eof_fusaka_options#D---Introspecting-EOF2
00:36:57	frangio:	Reacted to "@frangio https://not..." with 👍
00:37:15	Richard Meissner:	Reacted to "but the bigger issue..." with 👍
00:37:25	Danno Ferrin | Ipsilon:	I agree, peerdas deermines when the fork happens and what isn’t ready gets cut.
00:37:41	Carl Beekhuizen:	Reacted to "but the bigger issue…" with 👍
00:37:44	Ansgar Dietrichs:	@gakonst do you currently see a risk that EL client readiness will be the blocker for peerdas?
00:38:03	gakonst:	No
00:38:15	gakonst:	But if I have fixed resources and I cannot test peerdas
00:38:30	gakonst:	Bc people are testing things that should have been done on eof
00:38:36	gakonst:	And we are racing for resources
00:38:44	gakonst:	Then thats an issue
00:38:54	Ansgar Dietrichs:	I think we all agree peerdas always has priority on testing resources
00:38:58	Richard Meissner:	Replying to "I agree, peerdas dee..."

For EOF this means that one of the related EIPs is not ready, EOF should not be included at all, right?
00:38:58	gakonst:	10x devops + testing budget plz
00:39:28	lightclient:	even if it is easy, they need to audit it
00:39:48	Parithosh Jayanthi:	Replying to "10x devops + testing..."

Thankfully we have two testing teams, pandaops is fully testing peerDAS and EF testing is fully looking into EOF
00:40:37	danceratopz:	Reacted to "Thankfully we have t..." with 💙
00:40:42	Danno Ferrin | Ipsilon:	Replying to "10x devops + testing..."

And I will vouch that the skillsets of those teams are very well aligned for the features they are testing.
00:40:51	Tim Beiko:	Reacted to "Thankfully we have t..." with 💙
00:40:52	Mario Vega:	Reacted to "Thankfully we have t..." with 💙
00:40:53	felix (eest):	Reacted to "Thankfully we have..." with 💙
00:40:57	Tim Beiko:	Reacted to "And I will vouch tha..." with ➕
00:41:00	Ahmad Bitar | Nethermind:	Reacted to And I will vouch tha... with "➕"
00:41:01	Łukasz Rozmej:	@Alex (axic) how much effort was it?
00:41:03	Vitalik Buterin:	Replying to "And we are racing fo..."

I'd say the bigger argument is that EL effort competes not with peerdas, but with glamsterdam L1 gas increase EIPs, which we ideally should be starting to go full force on ~now
00:41:11	Tim Beiko:	Reacted to "I'd say the bigger a..." with 👍
00:41:12	lightclient:	changing the source code is the issue though right?
00:41:12	Francesco:	Reacted to "I'd say the bigger a..." with 👍
00:41:14	gakonst:	Reacted to "I'd say the bigger a…" with 👍
00:41:24	gakonst:	Reacted to "changing the source …" with 👍
00:41:27	Mario Vega:	Reacted to "I'd say the bigger a..." with 👍
00:41:35	sacha:	Reacted to "Thankfully we have t..." with 💙
00:41:38	CPerezz:	Reacted to "I'd say the bigger a..." with 👍
00:41:49	Toni Wahrstätter:	Reacted to "I'd say the bigger a..." with 👍
00:41:50	MariusVanDerWijden:	Charles chilling in the club rn
00:41:54	Tim Beiko:	Reacted to "Charles chilling in ..." with 😂
00:41:56	Akash | ECH:	Reacted to "Charles chilling in ..." with 😂
00:41:57	lightclient:	Reacted to "Charles chilling in ..." with 😂
00:41:58	felix (eest):	Reacted to "Charles chilling i..." with 😂
00:41:59	iPhone - Radek:	Reacted to "Charles chilling in …" with 😂
00:42:04	sacha:	Reacted to "I'd say the bigger a..." with 👍
00:42:07	felix (eest):	"they don't know im currently in ACD meeting"
00:42:10	nixo:	Reacted to "Charles chilling in ..." with 😂
00:42:12	Tim Beiko:	Reacted to ""they don't know im ..." with 😂
00:42:22	Mario Vega:	Reacted to ""they don't know im ..." with 😂
00:42:23	Łukasz Rozmej:	Reacted to ""they don't know im ..." with 😂
00:42:25	Charles C (vyper):	Reacted to "Charles chilling i..." with 😂
00:42:25	sacha:	Reacted to "I'd say the bigger a..." with ➕
00:42:27	milen:	Reacted to "Charles chilling in ..." with 😂
00:42:28	stokes:	Reacted to ""they don't know im ..." with 😂
00:42:31	danceratopz:	Reacted to ""they don't know im ..." with 😆
00:42:33	Danno Ferrin | Ipsilon:	The worst part about PUSH0 support is you don’t know it’s broken until you execute the relevant code path that triggers it.
00:42:35	Francis Li:	curious why won't L2s have EOF?
00:42:37	nixo:	Reacted to ""they don't know im ..." with 😆
00:42:38	Francesco:	Reacted to ""they don't know im ..." with 😂
00:42:38	Parithosh Jayanthi:	Reacted to ""they don't know im ..." with 😂
00:42:40	Francesco:	Reacted to ""they don't know im ..." with 😆
00:42:40	Barnabas:	Replying to "Charles chilling in ..."

EOF club
00:42:41	sacha:	Reacted to ""they don't know im ..." with 😂
00:42:42	Parithosh Jayanthi:	Reacted to "I'd say the bigger a..." with 👍
00:42:42	Akash | ECH:	Reacted to ""they don't know im ..." with 😂
00:42:45	Charles C (vyper):	Reacted to ""they don't know i..." with 😂
00:42:48	Parithosh Jayanthi:	Reacted to "Charles chilling in ..." with 😂
00:42:48	Charles C (vyper):	Reacted to "EOF club" with 😂
00:42:50	frangio:	Replying to "curious why won't L2..."

it will just take longer
00:42:51	Parithosh Jayanthi:	Reacted to "EOF club" with 😂
00:42:53	Mario Havel:	Reacted to "Charles chilling i..." with 😂
00:42:53	Richard Meissner:	Reacted to "it will just take lo..." with ➕
00:42:58	George Kadianakis:	Reacted to "they don't know im ... with "😂"
00:43:00	Mario Havel:	Reacted to ""they don't know i..." with 😆
00:43:08	milen:	Reacted to ""they don't know im ..." with 😂
00:43:11	lightclient:	while i think introspection is a major issue, we are hyper fixated on this EOF detail and not yet even discussing the fact that zk-vm teams would rather just have native RISC-V execution instead of dealing with EVM/EOF at all
00:43:16	Ahmad Bitar | Nethermind:	What about tx create. This will still require changes
00:43:17	Ansgar Dietrichs:	Would it be so bad if ecosystem adoption only really picks up after Glamsterdam? My feeling is we expect limited readiness at Fusaka anyway (especially say on L2s)? And in the meantime we would get valuable signal from early adopters on small Glamsterdam EOF tweaks that would be valuable. And can consider them in due time, rather than like here rushed last minute without sufficient context
00:43:30	Ahmad Bitar | Nethermind:	Replying to "What about tx create..." 

 Regardless of gas introspection
00:43:35	Barnabas:	very informal vote ( 👍 for pro EOF) ( 👎 for anti EOF) in fusaka
00:43:39	Barnabas:	Reacted to "very informal vote (..." with 👍
00:43:41	Ben Adams:	Reacted to "very informal vote (..." with 👍
00:43:42	Barnabas:	Reacted to "very informal vote (..." with 👎
00:43:42	Francis Li:	Replying to "curious why won't L2…"
so that's not an issue right? L2s will have maybe a little delay, but they'll be there, and this should relieve the concern of maintaining multiple versions?
00:43:45	Alex (axic):	Reacted to "very informal vote (..." with 👍
00:43:47	iPhone - Radek:	Reacted to "very informal vote (…" with 👍
00:43:52	stokes:	Replying to "very informal vote (..."

I think we should clarify that this is in fusaka
00:43:52	Richard Meissner:	Replying to "while i think intros..."

agree that it would make sense to touch on if EOF in the context of RISC-V is still the best approach
00:43:53	Ansgar Dietrichs:	Replying to "while i think intros..."

these need to be two clearly separated conversations. if you want to ask to reopen the general EOF question, that should be separate
00:44:08	Parithosh Jayanthi:	Reacted to "very informal vote (..." with 😕
00:44:15	lightclient:	Reacted to "very informal vote (..." with 👎
00:44:27	Charles C (vyper):	Reacted to "very informal vote..." with 👎
00:44:28	Richard Meissner:	Replying to "while i think intros..."

yes, the point is more that this conversation needs to happen rather sooner than later (best right now) as far as I understood
00:44:33	cameel | Solidity:	Reacted to "very informal vote..." with 👍
00:44:42	MariusVanDerWijden:	Reacted to "very informal vote..." with 😕
00:45:03	terence:	Reacted to "very informal vote (..." with 😕
00:45:21	Kevaundray Wedderburn:	What would be the forcing function for contracts to upgrade to EOF?
00:45:33	frangio:	a lag is the best case scenario. the worst case is for libraries to have to maintain separate codebases for legacy and eof. this is literally python2 -> 3 situation
00:45:38	andrei:	Reacted to "very informal vote (..." with 👍
00:45:39	stokes:	Replying to "What would be the fo..."

Compiler support/defaults would be a natural one
00:45:44	lightclient:	Reacted to "a lag is the best ca..." with 👍
00:45:46	Advaita | Nimbus:	Reacted to "very informal vote..." with 👎
00:45:46	Richard Meissner:	Replying to "very informal vote (..."

For this it would be interesting if RISC-V is a viable alternative in the long run, and therefore it is ok to change the opinion on EOF
00:45:46	Carl Beekhuizen:	Reacted to "very informal vote (…" with 👎
00:45:53	MariusVanDerWijden:	Replying to "What would be the ..."

gas savings
00:46:10	lightclient:	Replying to "a lag is the best ca..."

Guido has literally said if he could go back in time, he would never do 2->3 again
00:46:13	gakonst:	Reacted to "very informal vote (…" with 😕
00:46:17	gakonst:	Reacted to "a lag is the best ca…" with 👍
00:46:22	Lean F | Lambda:	Reacted to "very informal vote (..." with 👎
00:46:25	Charles C (vyper):	Replying to "a lag is the best ..."

yes, we are going to maintain separate codebases for.. at least several years
00:46:26	lightclient:	Replying to "a lag is the best ca..."

why can’t we learn from the mistake’s of others 😢
00:46:33	Łukasz Rozmej:	risc-v discussion?
00:46:36	Danno Ferrin | Ipsilon:	Reacted to "very informal vote (..." with 👍
00:46:38	Tim Beiko:	Reacted to "risc-v discussion?" with 👍
00:46:40	Kevaundray Wedderburn:	Replying to "What would be the fo..."

And the main inertia would be around re-deploying and auditing my contract again?
00:46:44	MariusVanDerWijden:	Replying to "a lag is the best ..."

Yep this will happen...
00:47:00	Parithosh Jayanthi:	Reacted to "Yep this will happen..." with 🥲
00:47:01	stokes:	Replying to "What would be the fo..."

Why would existing stuff need to change?
00:47:04	Julian Sutherland (Nethermind):	Reacted to "risc-v discussion?" with 👍
00:47:06	Barnabas:	Reacted to "Yep this will happen..." with 🥲
00:47:11	Barnabas:	Reacted to "why can’t we learn f..." with 👍
00:47:17	Parithosh Jayanthi:	Replying to "a lag is the best ca..."

Would this be the case with any version of EOF or just the currently proposed one?
00:47:22	felix (eest):	Reacted to "why can’t we lear..." with 👍
00:47:26	lightclient:	Replying to "What would be the fo..."

it’s the libraries people want to use
00:47:27	stokes:	Replying to "What would be the fo..."

I would expect legacy stuff to stay, but new things to take advantage of EOF
00:47:36	Carl Beekhuizen:	Reacted to "a lag is the best ca…" with 👍
00:47:43	stokes:	Replying to "What would be the fo..."

But the existing deployments of the libraries don’t need to change
00:47:46	Ahmad Bitar | Nethermind:	Reacted to very informal vote (... with "👍"
00:47:50	Richard Meissner:	Reacted to "risc-v discussion?" with 👍
00:47:56	stokes:	Replying to "What would be the fo..."

We would need to update the libraries for new stuff
00:48:02	Ansgar Dietrichs:	what’s the best resource on the exact proposed change?
00:48:03	lightclient:	Replying to "What would be the fo..."

we’re talking about libraries that are bundled in the binary
00:48:08	lightclient:	Replying to "What would be the fo..."

which is how many libs are used
00:48:08	frangio:	Replying to "a lag is the best ca..."

introspecting eof might not, need to review it
00:48:12	Barnabas:	Replying to "What would be the fo..."

would still require maintaining two libraries, esp if there are patches
00:48:28	Tim Beiko:	Replying to "what’s the best reso..."

https://notes.ethereum.org/@ipsilon/eof_fusaka_options#D---Introspecting-EOF2
00:48:30	stokes:	Replying to "What would be the fo..."

Ya, this is the “py2->py3” argument
00:48:32	Tim Beiko:	https://notes.ethereum.org/@ipsilon/eof_fusaka_options#D---Introspecting-EOF2
00:48:43	Charles C (vyper):	7907
00:48:52	MariusVanDerWijden:	Replying to "a lag is the best ..."

Any version, any substantial change with the evm imho. You would need to know the target chain when compiling your contract
00:48:54	Carl Beekhuizen:	Reacted to "would still require …" with 👍
00:49:10	Ansgar Dietrichs:	Replying to "what’s the best reso..."

but e.g. Danno also mentioned implications for PAY, so clearly this is not comprehensive
00:49:42	Kevaundray Wedderburn:	Replying to "What would be the fo..."

Is OZ willing to make the change if we ship EOF, as soon as possible?
00:49:50	Charles C (vyper):	but the differences are more subtle. PUSH0 is simply instruction selection
00:49:50	Parithosh Jayanthi:	Please add relevant EOF links to the interop testing call issue here: https://github.com/ethereum/pm/issues/1499
00:49:54	Ahmad Bitar | Nethermind:	Replying to "a lag is the best ca..." 

 Why maintain the legacy contracts once you have the EOF version?
00:49:58	Danno Ferrin | Ipsilon:	Replying to "what’s the best reso..."

Option D does not include PAY.  I mntion PAY because it has value outside of EOF, but can move to other forks.
00:50:04	Richard Meissner:	Replying to "7907"

7907 is confirmed to be shipped with fusaka?
00:50:39	Ansgar Dietrichs:	Replying to "what’s the best reso..."

ah, my bad. thanks for the clarification
00:50:47	lightclient:	Replying to "7907"

it’s CFI
00:50:50	frangio:	a language or library should never expose PAY and CALL as the same function, it would be acase of a feature being available in eof and not in legacy and vice versa
00:51:05	Charles C (vyper):	Replying to "a language or libr..."

hence, users need to maintain two versions of code
00:51:15	Charles C (vyper):	Replying to "a lag is the best ..."

because mainnet is not the only EVM
00:51:19	Richard Meissner:	Replying to "7907"

Gotta love news: https://www.binance.com/en/square/post/23264062999666
00:51:37	Felix (Geth):	Reacted to very informal vote (... with "👍"
00:51:38	Richard Meissner:	Reacted to "it’s CFI" with 🙌
00:51:42	Ansgar Dietrichs:	to clarify - would we also consider deciding to completely remove EOF on Monday?
00:51:53	frangio:	Replying to "a language or librar..."

yes, true
00:52:05	Parithosh Jayanthi:	Replying to "a lag is the best ca..."

And not every EVM will upgrade asap, so this migration would take ~years
00:52:10	gakonst:	Yes IMO
00:52:18	gakonst:	Reacted to "to clarify - would w…" with 👍
00:52:19	Tim Beiko:	Replying to "to clarify - would w..."

My sense from this conversation is that this would be unlikely, but I personally would only support descoping Fusaka, so removing EOF is one option here.
00:52:24	Kevaundray Wedderburn:	I think I’d like some clarification on what the process is here for removing EOF (If we decide to do it)
00:52:57	Danno Ferrin | Ipsilon:	Remember eWASM?  Pepperidge Farm Remembers.
00:53:05	Barnabas:	Please make sure every EL dev that cares or don’t care about EOF shows up to the monday call. Feel like its gonna be an important one.
00:53:06	Parithosh Jayanthi:	Reacted to "Remember eWASM?  Pep..." with 🥲
00:53:09	Tim Beiko:	Reacted to "Please make sure eve..." with ➕
00:53:11	gakonst:	Reacted to "Please make sure eve…" with 👍
00:53:13	Parithosh Jayanthi:	Reacted to "Please make sure eve..." with ➕
00:53:15	Parithosh Jayanthi:	Reacted to "Please make sure eve..." with 👍
00:53:16	stokes:	Reacted to "Please make sure eve..." with ➕
00:53:20	Alex (axic):	Reacted to "Remember eWASM?  Pep..." with 🥲
00:53:35	lightclient:	Reacted to "Please make sure eve..." with ➕
00:53:36	lightclient:	Reacted to "Please make sure eve..." with 👍
00:53:38	Mario Vega:	Reacted to "Please make sure eve..." with ➕
00:53:40	Ansgar Dietrichs:	feels like we are now talking about very uncertain long-term roadmap. this wasn’t really in discussion until a month ago, and might already no longer be an option anymore in a few more months. not a good basis for short term decisions imo.
00:53:40	Dustin:	Replying to "Remember eWASM?  P..."

people benchmarked it at the time and published stuff to arxiv etc and apparently it wasn't much faster.

also people were concerned about JITs etc
00:53:41	Tim Beiko:	Replying to "Please make sure eve..."

Again, here’s the link: https://github.com/ethereum/pm/issues/1499  😄
00:53:50	Nicolas Consigny:	Reacted to Please make sure eve... with "➕"
00:53:51	gakonst:	https://github.com/r55-eth/r55 I g2g but this is a project I've been co maintaining with Leo Alt. I think it can get us to really good devex, vs Solana devex which is bad. I encourage people to dive in.
00:53:52	Parithosh Jayanthi:	Reacted to "feels like we are no..." with 👍🏽
00:53:58	Piper Merriam:	Reacted to feels like we are no... with "👍🏽"
00:54:00	Trent:	Reacted to "feels like we are no..." with 👍🏽
00:54:17	Dustin:	Replying to "Remember eWASM?  P..."

i.e. some of the ecosystem advantages were hard to take advantage of in Ethereum because if someone hit some optimization thing that took O(n^2) time, oops
00:54:20	gakonst:	It's a dual RiscV / EVM runtime where we alrd demonstrars EVM / r5 interop / xcontract calls
00:54:25	andrei:	Reacted to "feels like we are no..." with 👍🏽
00:54:30	Barnabas:	Replying to "feels like we are no..."

EOF shouldn’t be a short term decision.
00:54:32	gakonst:	The removal of EOF should be evaluated in a vacuum imo
00:54:42	Barnabas:	Replying to "feels like we are no..."

its going to affect the whole Ethereum ecosystem forever.
00:54:46	Josh Davis:	Reacted to "EOF shouldn’t be a s..." with 🔥
00:54:55	Kevaundray Wedderburn:	Reacted to "The removal of EOF s..." with 👍
00:54:59	Sophia Gold:	Replying to "Remember eWASM?  P..."

We should view this through that lens tbh. It's not totally clear RISC-V will be the standard for zkVMs in five years
00:55:18	Ahmad Bitar | Nethermind:	Reacted to feels like we are no... with "👍🏽"
00:55:27	Sophia Gold:	Reacted to "feels like we are ..." with 👍🏽
00:55:27	frangio:	Reacted to "The removal of EOF s..." with 🧑‍🚀
00:55:37	andrei:	Reacted to "The removal of EOF s..." with 🧑‍🚀
00:56:07	Richard Meissner:	Reacted to "feels like we are no..." with 👍🏽
00:56:33	lightclient:	right - but we should decide this before a new version of our high level bytecode?
00:56:40	Richard Meissner:	Reacted to "Remember eWASM?  Pep..." with 🥲
00:56:50	Ansgar Dietrichs:	right. but we have been talking about EOF for over 2 years. now that we just had a final decision, we are bringing up all of these from-the-hip roadmap ideas. seems very bad process
00:57:05	Parithosh Jayanthi:	Reacted to "The removal of EOF s..." with 👍
00:57:06	Alex (axic):	RISC-V has a large number of variants (between register size and various features). Do we know which variant is being proposed and what kind of complexity we are talking about?
00:57:25	Parithosh Jayanthi:	Reacted to "right. but we have b..." with 👍🏽
00:57:32	Vitalik Buterin:	Replying to "RISC-V has a large n..."

I'd say this is still TBD
00:57:41	ethDreamer (Mark):	Bad process yes.. but we’re also at a pivotal moment in development right now, which is what I think is driving the process issues
00:57:59	Parithosh Jayanthi:	Reacted to "Bad process yes.. bu..." with 👍🏽
00:58:13	Tim Beiko:	What is the absolute shortest timeline on which something like this could happen?
00:58:15	William Morriss:	does the risc-v proposal spec gas?
00:58:25	Dan Cline:	It's not just a "which vm" or "we can just implement riscv5" issue right? It's toolchain as well (contract language syntax, IR, precompiles, metering), imo comms with teams that actually are implementing riscv/wasm zkvms on what works well and what doesn't here is crucial
00:58:36	Tim Beiko:	Reacted to "It's not just a "whi..." with 👍
00:58:40	ethDreamer (Mark):	Replying to "feels like we are no..."

I still think lightclient’s concerns are valid. Is it possible to continue on our current path but accelerate the evaluation of this proposal so we can make a better decision later?
00:58:44	SanLeo:	Reacted to "It's not just a "w..." with 👍
00:58:45	lightclient:	risc-v, wasm, etc, it’s not about the specific ISA
00:58:48	Sophia Gold:	Traditional execution will be slower, it won't solve our compiler ecosystem problems, altVMs don't have much traction, and there are zkVM teams using other ISAs because RISC-V is actually not ideal for proving. This may be the right direction to go, but best to wait and see imo
00:58:48	Alex (axic):	Replying to "does the risc-v prop..."

Ethereum abstractions are not part of RISCV, i.e. gas or state interaction. There’s a “syscall” to implement these abstractions over.
00:58:57	Mario Vega:	Reacted to "It's not just a "whi..." with 👍
00:59:01	lightclient:	Replying to "risc-v, wasm, etc, i..."

the issue is that people aren’t saying it’s EOF
00:59:02	Łukasz Rozmej:	switch zk-VM's to EVM bytecode?
00:59:19	Charles C (vyper):	Reacted to "Traditional execut..." with 👍
00:59:24	Sophia Gold:	Reacted to "It's not just a "w..." with 👍
00:59:26	Paweł Bylica:	Every commit of evmone is build and executed on riscv32. https://github.com/ethereum/evmone/blob/master/circle.yml#L658-L666
00:59:31	Ansgar Dietrichs:	Replying to "feels like we are no..."

fair. but like, then we need to get serious about it. not just acd vibe discussion.

have a defined emergency future-of-EVM breakout process. say we make a final go/no-go decision on EOF in 4 weeks. have an active fasttracked process between now and then to really dive deep on how realistic a near-term VM change like RISC-V is.
00:59:43	iPhone - Radek:	Reacted to "Every commit of evmo…" with 👍
00:59:48	sacha:	Reacted to "feels like we are no..." with 👍🏽
00:59:59	Richard Meissner:	Reacted to "fair. but like, then..." with ➕
01:00:10	William Morriss:	Replying to "does the risc-v prop..."

gas can't be done with a syscall
01:00:17	lightclient:	people are telling me real time proving this year
01:00:19	Vitalik Buterin:	Replying to "does the risc-v prop..."

just count cycles?
01:00:21	ethDreamer (Mark):	Reacted to "fair. but like, then..." with ➕
01:00:24	Ansgar Dietrichs:	Replying to "feels like we are no..."

this is a massive research investigation though. usually ideas like that evolve on the timespan of years. so having a mature understanding in 4 weeks would be very ambitious
01:00:26	Sophia Gold:	Reacted to "people are telling..." with 🔥
01:00:29	Parithosh Jayanthi:	Reacted to "people are telling m..." with 🔥
01:00:31	Vitalik Buterin:	when I wrote the post I had in mind was like 2-5 years
01:00:35	Alex (axic):	Replying to "does the risc-v prop..."

Gas would need to be implemented in the “interpreter” or injected. Just like it was done in ewasm or https://github.com/wasmx/fizzy
01:01:00	stokes:	Replying to "people are telling m..."

Different from the point at which we would be comfortable with protocol inclusion
01:01:07	Charles C (vyper):	fwiw -- if you want compiler and related tooling to get better, we need a stable ISA, not a new target every 3 years
01:01:26	Dankrad Feist:	Replying to "feels like we are no..." 

 agreed at commingling very long term research with short term decisions
01:01:35	Felix (Geth):	It won't be end-of-life
01:01:38	frangio:	Reacted to "fwiw -- if you want ..." with 👍
01:01:42	Cody Gunton:	Reacted to "feels like we are no..." with 👍🏽
01:01:59	Dankrad Feist:	Replying to "feels like we are no..." 

 also given proving is now 15 cents per block, proving is simply not going to be the bottleneck
01:02:16	lightclient:	potential for EOF being out python 2->3 moment + we know EOF isn’t the endgame......
01:02:18	Felix (Geth):	Even if we enable support for RISCV, we would still support EVM for a long time
01:02:23	iPhone - Radek:	We don’t know if it’s doable but we assume that it will happen in up to 5 years.
01:02:36	lightclient:	Replying to "potential for EOF be..."

i don’t see what there is to debate, it seems like we aren’t ready to make this change
01:02:39	Felix (Geth):	So any work for converting contracts to EOF will be worth it
01:02:51	Vitalik Buterin:	Replying to "Even if we enable su..."

the deprecation path for EVM would be to turn it into a smart contract on RISCV, so it would remain available to devs forever
01:03:39	Richard Meissner:	is adopting EOF now a blocker for RISC-V?
01:03:46	Ansgar Dietrichs:	Replying to "is adopting EOF now ..."

no
01:04:14	Vitalik Buterin:	Replying to "Even if we enable su..."

yeah it's also true for EOF
01:04:22	lightclient:	we have to always keep supporting it
01:04:24	Ansgar Dietrichs:	Replying to "is adopting EOF now ..."

and I don’t understand why “but we have to maintain EOF forever” is a new argument now - this was already a known cost to shipping EOF
01:04:25	lightclient:	everything
01:04:44	lightclient:	Replying to "is adopting EOF now ..."

but EOF was supposed to be the endgame
01:04:49	lightclient:	Replying to "is adopting EOF now ..."

the final version
01:05:00	Parithosh Jayanthi:	Replying to "is adopting EOF now ..."

Hasn’t this been an argument that the geth team has been proposing for a while now? i.e, that we need to support 2 EVMs forever
01:05:25	Ansgar Dietrichs:	Replying to "is adopting EOF now ..."

yes, but we heard that concern and then made the decision pro EOF anyway
01:05:30	Ahmad Bitar | Nethermind:	Isnt the idea of version number in EOF is to support multiple versions of EVM?
01:06:05	Vitalik Buterin:	I think the way that riscv (or other vm, eg. cairo) changes EOF discussions is:

It's not EOF vs nothing, it's EOF vs (contract code size increase + swap32). And a big part of the argument for EOF was future-proofness. But if the future-proofness strategy is to ossify RISCV, then that changes things
01:06:07	Dan Cline:	Replying to "is adopting EOF now ..."

Still needs toolchain implementation and maintenance for the new vm
01:06:14	lightclient:	Reacted to "I think the way that..." with 👍
01:06:17	Dan Cline:	Reacted to "I think the way that..." with 👍
01:06:21	Sophia Gold:	Reacted to "I think the way th..." with 👍
01:06:38	felix (eest):	Reacted to "I think the way th..." with 👍
01:06:42	Ansgar Dietrichs:	Replying to "I think the way that..."

so overall you would prefer dropping EOF?
01:06:45	Charles C (vyper):	btw we don't even need swap32 :) we need to fix the memory model
01:07:13	SanLeo:	Reacted to "I think the way th..." with 👍
01:07:32	Richard Meissner:	Reacted to "btw we don't even ne..." with ➕
01:07:57	lightclient:	Reacted to "btw we don't even ne..." with ➕
01:08:29	lightclient:	we need a stable and credible development platform as soon as possible
01:08:34	Carl Beekhuizen:	Reacted to "I think the way that…" with 👍
01:08:34	Charles C (vyper):	Replying to "btw we don't even ..."

https://eips.ethereum.org/EIPS/eip-7923
01:08:42	SanLeo:	Reacted to "we need a stable a..." with 👍
01:08:49	Ben Adams:	will be lots of "precompile" syscalls instead with riscv?
01:09:00	sina:	Reacted to "we need a stable and..." with 👍
01:09:13	Danno Ferrin | Ipsilon:	Replying to "we need a stable and..."

I view imemidate ossification as the real competitive alternative to EOF.
01:09:38	Kevaundray Wedderburn:	Replying to "will be lots of "pre..."

And metering
01:09:40	frangio:	Reacted to "we need a stable and..." with 👍
01:10:07	Gajinder Singh:	to apply gas which is basic EVM construct, we will need to dev/maintain our own interpreters?
01:10:08	sina:	Replying to "will be lots of "pre..."

Possibly also big int arithmetic
01:10:10	Danno Ferrin | Ipsilon:	Replying to "we need a stable and..."

every new addition is a precompile or system call, mostly for consensus data.
01:10:16	SanLeo:	Going from Legacy EVM to EOF to RiscV in the span of a few years wouldn't exactly spur great confidence for newcomers
01:10:31	lightclient:	Reacted to "Going from Legacy EV..." with 👍
01:10:34	Cody Gunton:	Reacted to "Going from Legacy EV..." with 👍
01:10:45	Cody Gunton:	Reacted to "we need a stable and..." with 👍
01:10:48	stokes:	Replying to "we need a stable and..."

The migration to riscv would be backwards compatible with legacy and EOF tho
01:10:51	Ben Adams:	Is RISCV more efficient if you are running it on x64 though?
01:10:55	Ahmad Bitar | Nethermind:	Reacted to to apply gas which i... with "➕"
01:10:59	Danno Ferrin | Ipsilon:	Replying to "to apply gas which i..."

cycle count looks like a top analogue to gas, others would be ZK proof size / zk circuit count.
01:11:25	lightclient:	Replying to "we need a stable and..."

i think the cost matters a lot here
01:11:33	Łukasz Rozmej:	How would "normal" execution look like? Risc-v interpeter? Compilation to x64?
01:11:35	Charles C (vyper):	haven't multiple zk teams looked at this problem as well, and several custom ISAs were developed as opposed to risc-v (which was also a strategy that was taken by a couple teams)
01:11:35	Kevaundray Wedderburn:	At what level of conviction is this at?

We need to change the EVM to a more traditional architecture like RISCV/WASM
We need to change to RISCV
01:11:52	Ansgar Dietrichs:	okay so if we really want to seriously reconsider EOF, what’s the process? Decide on Monday? Breakout to study the RISC-V (or similar) roadmap feasibility in more depth?

If we consider completely pulling EOF here, we need to today agree on a final decision process.

And then stick to it for good.
01:12:05	Tim Beiko:	Reacted to "okay so if we really..." with 👍
01:12:08	Mario Vega:	Reacted to "okay so if we really..." with 👍
01:12:16	Richard Meissner:	Reacted to "Going from Legacy EV..." with 👍
01:12:27	Fredrik:	Reacted to "okay so if we really..." with 👍
01:12:29	Dan Cline:	Replying to "At what level of con..."

IMO first option is how we should be thinking about this problem
01:12:33	Barnabas:	Reacted to "okay so if we really..." with 👍
01:12:35	lightclient:	Reacted to "okay so if we really..." with 👍
01:12:35	stokes:	Replying to "okay so if we really..."

We decide monday
01:12:46	Gajinder Singh:	Replying to "to apply gas which i..."

proving is separate from execution i think and is always gonna be because bare execution will always be fast
01:12:54	Parithosh Jayanthi:	Reacted to "okay so if we really..." with 👍
01:13:10	Ansgar Dietrichs:	Replying to "okay so if we really..."

my concern is a decision on Monday would not be fully informed. I would prefer the breakout approach.

Happy to be overruled ofc.
01:13:30	Gajinder Singh:	Replying to "to apply gas which i..."

(think block production)
01:13:36	Tim Beiko:	Replying to "okay so if we really..."

The breakouts are almost an implicit way of removing EOF, though
01:13:39	ethDreamer (Mark):	Replying to "okay so if we really..."

Agree with breakout approach as it seems we need more time to evaluate
01:13:53	Tim Beiko:	Replying to "okay so if we really..."

If we spend 4 weeks researching this, then we’ll delay EOF 4 weeks, then maybe it’s not ready for Fusaka
01:14:07	Ansgar Dietrichs:	Replying to "okay so if we really..."

no, the idea is we continue as-is, assuming EOF goes in ofc
01:14:17	ethDreamer (Mark):	Reacted to "no, the idea is we c..." with 👍
01:14:24	MariusVanDerWijden:	Remote Code Execution in the EVM lfg 🚀
01:14:30	Francesco:	Replying to "okay so if we really..."

If we get there, would we put it in a fusaka-devnet-1 while still going through this process?
01:14:37	Ansgar Dietrichs:	Replying to "okay so if we really..."

yes
01:14:38	Ben Adams:	Reacted to "Remote Code Executio..." with 😭
01:14:39	Łukasz Rozmej:	Reacted to "Remote Code Executio..." with 🫡
01:14:40	Mario Vega:	Reacted to "Remote Code Executio..." with 😭
01:14:41	Ahmad Bitar | Nethermind:	Reacted to Remote Code Executio... with "😭"
01:14:41	lightclient:	Reacted to "Remote Code Executio..." with 🚀
01:14:43	Parithosh Jayanthi:	Reacted to "Remote Code Executio..." with 🚀
01:14:45	Sophia Gold:	Right now it seems similar to enshrining the wrong prime field. Many zk teams are using zk specific ISAs like Cairo or newer ones
01:14:54	Charles C (vyper):	Reacted to "Right now it seems..." with 👍
01:14:55	Parithosh Jayanthi:	Replying to "Remote Code Executio..."

You bet we’re gonna run kurtosis inside the evm
01:14:56	Tim Beiko:	Continue with EOF, RISC-V “research sprint” and then decide EOF/no-EOF based on this in “a few weeks?
01:15:06	Mario Vega:	Reacted to "You bet we’re gonna ..." with 😂
01:15:08	Alex (axic):	Reacted to "Remote Code Executio..." with 🚀
01:15:09	frangio:	Reacted to "okay so if we really..." with 👍
01:15:14	Ansgar Dietrichs:	Replying to "okay so if we really..."

I would say have a final fusaka spec freeze by end of may
01:15:14	Ahmad Bitar | Nethermind:	Reacted to You bet we’re gonna ... with "😂"
01:15:20	Barnabas:	looking from the point of view of someone that is neither pro or con EOF (try to handle it as a black box) I feel like we are still at the same stage at EOF discussions as we were when I joined EF. (Which doesn’t give me much confidence that its a feature we actually need).
01:15:33	lightclient:	Reacted to "looking from the poi..." with 👍
01:15:39	Ansgar Dietrichs:	Reacted to "Continue with EOF, R..." with 👍
01:15:42	Martin | ethrex:	Reacted to "looking from the poi..." with 👍
01:15:50	Parithosh Jayanthi:	Reacted to "looking from the poi..." with 👍
01:15:51	Cody Gunton:	There is a revolution in the sort of hardware people have in their hands and on there desks happening right now. Isn’t there a good chance some other GPU/NPU focused assembly language becomes the obviously better thing within 5 years?
01:15:59	ethDreamer (Mark):	Replying to "okay so if we really..."

I agree on the need for process improvements, I just also want to point out that the process at this point will likely be disorganized because we are pivoting hard right now
01:16:01	Nicolas Consigny:	Would not hurt to have some diversity at this level and keeping Cairo around seems like a low effort high potential thing
01:16:11	Ansgar Dietrichs:	Reacted to "I agree on the need ..." with 👍
01:16:16	Advaita | Nimbus:	Reacted to "looking from the p..." with 👍
01:16:23	lightclient:	can still fix stack too deep issue with this https://github.com/ethereum/EIPs/pull/9501
01:16:42	SanLeo:	Reacted to "can still fix stac..." with 🙏
01:16:51	felix (eest):	Reacted to "Remote Code Execut..." with 😭
01:16:52	Charles C (vyper):	vyper still doesn't have stack too deep 😭
01:16:56	ethDreamer (Mark):	Reacted to "Continue with EOF, R..." with 👍
01:17:05	frangio:	Reacted to "vyper still doesn't ..." with 😭
01:17:14	lightclient:	Reacted to "vyper still doesn't ..." with 😭
01:17:18	Ansgar Dietrichs:	so main decision for today: we decide the fate of EOF:

a) on Monday, based on the comments today

b) in 4 weeks, based on a “research sprint” on RISC-V
01:17:42	ethDreamer (Mark):	Reacted to "so main decision for..." with 🅱️
01:17:46	Parithosh Jayanthi:	Reacted to "vyper still doesn't ..." with 😭
01:17:47	Ansgar Dietrichs:	Reacted to "so main decision for..." with 🅱️
01:17:50	Tim Beiko:	Replying to "so main decision for..."

How confident are we that (b) actually gives us the data we need?
01:18:22	Richard Meissner:	Replying to "so main decision for..."

It would require strong ownership of some team, right?
01:18:26	Ansgar Dietrichs:	Replying to "so main decision for..."

4 weeks needs to be enough. I think with proper effort it will be.
01:18:41	SanLeo:	RiscV hardware already exists if anyone is unaware, still early days though
01:18:50	Barnabas:	Replying to "RiscV hardware alrea..."

they are a POS tho
01:18:56	SanLeo:	Reacted to "they are a POS tho" with 👍
01:19:04	Dan Cline:	Replying to "There is a revolutio..."

I don't think so, CPUs are still best for a lot of things, the hardware for parallel / certain SIMD ops are where the improvement is happening. This is only applicable to a subset of things you would want to do, a subset that I'm not sure intersects with what people want to do on eth
01:19:15	Gajinder Singh:	Replying to "RiscV hardware alrea..."

very underwhelming hardware
01:19:19	SanLeo:	Reacted to "very underwhelming..." with 👍
01:19:20	Parithosh Jayanthi:	Replying to "RiscV hardware alrea..."

Yeah its extremely unreliable and hard to use hardware + tooling -> especially compared to arm/x86
01:19:27	SanLeo:	Reacted to "Yeah its extremely..." with 👍
01:19:33	Barnabas:	Reacted to "Yeah its extremely u..." with 👍
01:19:38	Barnabas:	Reacted to "very underwhelming h..." with 👍
01:19:43	William Morriss:	Reacted to "There is a revolutio..." with 👍
01:19:58	Orest Tarasiuk (t1):	Replying to "so main decision for..."

So soon™
01:20:13	Ansgar Dietrichs:	with EWASM, adding metering logic was hard if I remember correctly - how easy is that with RISC-V?

(sorry if already answered)
01:20:14	felix (eest):	Reacted to "Yeah its extremely..." with 👍
01:20:16	Guillaume:	Replying to "RiscV hardware alrea..." 

 For me it doesn't break more than arm/amd64 😆
01:20:19	Richard Meissner:	Replying to "RiscV hardware alrea..."

China is actively investing into this 😛  so chances are high that this will improve
01:20:25	SanLeo:	Reacted to "China is actively ..." with 👍
01:20:31	Alex (axic):	Replying to "with EWASM, adding m..."

Nothing is “hard”. Same problems apply to riscv.
01:20:39	Kevaundray Wedderburn:	Reacted to "Nothing is “hard”. S..." with 👍
01:20:42	Łukasz Rozmej:	Replying to "RiscV hardware alrea..."

Yeah like 25% performance of Raspberry Pi
01:20:53	Łukasz Rozmej:	Reacted to "very underwhelming h..." with 👍
01:20:54	Łukasz Rozmej:	Reacted to "Yeah its extremely u..." with 👍
01:20:55	Alex (axic):	Replying to "with EWASM, adding m..."

One can inject code to measure around each instruction or block. Or one can write a custom interpreter/compiler which does it.
01:20:56	Iván | Lambda:	Reacted to "so main decision for..." with 🅱️
01:20:59	Gajinder Singh:	Replying to "with EWASM, adding m..."

hard = money required
01:21:06	Barnabas:	Reacted to "For me it doesn't br..." with 😂
01:21:16	Cody Gunton:	Eli Ben-Sasson says it’s going to be weeks before he provides feedback on this VM vision
01:21:32	Kevaundray Wedderburn:	Four weeks is not enough imo
01:21:40	Parithosh Jayanthi:	Reacted to "For me it doesn't br..." with 😂
01:21:42	Vitalik Buterin:	We would benefit from a research period of a few months, particularly to answer with more finality the question of riscv vs custom prover-oriented vm

though that's obviously too late to decide eof fusaka params
01:21:44	Ansgar Dietrichs:	one big benefit of the 4 week project would be that we can then decide whether to launch a risc-v manhattan project coming out of it, to ship it
01:21:54	lightclient:	Reacted to "We would benefit fro..." with 👍
01:21:59	Barnabas:	could we make a decision on EOF independent of study?
01:22:01	SanLeo:	Reacted to "We would benefit f..." with 👍
01:22:09	Dankrad Feist:	the history on architecture upgrades like this is really poor. and that's even without having immutable smart contracts
01:22:34	Sophia Gold:	We would effectively be deciding to kill some zkEVMs at what imo is too early a stage. We should decide EOF on merit separate of this
01:22:35	Kevaundray Wedderburn:	I don’t think we should delay and evaluate EOF in a vacuum
01:22:37	Dan Cline:	Yeah seems like a mistake to hinge our decision of eof on a decision wrt riscv / zkvm
01:22:39	Charles C (vyper):	Replying to "could we make a de..."

please don't make us ship EOF, then ship another architecture 😭
01:22:45	Dankrad Feist:	even if we solve all the technical problems it may well have a 20% chance of success
01:22:49	Ansgar Dietrichs:	Replying to "could we make a deci..."

decision based on what?
01:23:04	Gajinder Singh:	Replying to "could we make a deci..."

same issue as verkle vs post quantum transition
01:23:07	nixo:	Reacted to "We would effectively..." with 👍
01:23:07	Vitalik Buterin:	imo no need to start a riscv manhattan project in 4 weeks, 4 months is fine

in the meantime we can put a lot of effort on optimizing the glam short-term L1 scaling eips, that stuff is higher urgency anyway
01:23:11	Ansgar Dietrichs:	so then how do we decide on Monday?
01:23:34	Ansgar Dietrichs:	Replying to "imo no need to start..."

but how do we decide whether to remove EOF then?
01:23:35	Kevaundray Wedderburn:	Replying to "imo no need to start..."

But then what happens to eof?
01:23:39	Richard Meissner:	Replying to "imo no need to start..."

this implies that EOF should not be part of Fusaka, right?
01:23:42	lightclient:	Reacted to "this implies that EO..." with 👍
01:23:44	Barnabas:	Reacted to "this implies that EO..." with 👍
01:24:04	Parithosh Jayanthi:	Can ACD also decide what we exactly need to discuss on Monday and decide?
01:24:20	stokes:	Replying to "Can ACD also decide ..."

Including EOF in Fusaka or not
01:24:20	lightclient:	the thing that is most clear is we don’t know the best way to get ZKP in L1, which is a major EL goal
01:24:22	Parithosh Jayanthi:	I.e what form of EOF to ship? Or IF eof is shipped
01:24:27	SanLeo:	Replying to "so then how do we ..."

VRF
01:24:28	Ansgar Dietrichs:	one (obvious) point: this is the last hardfork with free EL space - from glamsterdam on, focus will be on scaling.

So EOF not in Fusaka likely means no EOF ever
01:24:33	stokes:	Replying to "I.e what form of EOF..."

More the latter
01:24:41	stokes:	Replying to "I.e what form of EOF..."

Seems like we have a good handle on former question
01:24:47	lightclient:	Replying to "the thing that is mo..."

which i think means we should not push forward with EOF because it will be extremely expensive for the community
01:24:57	Parithosh Jayanthi:	Can client teams also update async team positions if they have one before Monday? It would help us prep a bit
01:25:02	Kevaundray Wedderburn:	Are people okay with living in a world where we have EOF and then five years later RISCV?
01:25:07	Łukasz Rozmej:	Reacted to "the thing that is mo..." with 👍
01:25:07	Parithosh Jayanthi:	Reacted to "Seems like we have a..." with 👍🏽
01:25:10	stokes:	Reacted to "Can client teams als..." with ➕
01:25:11	Barnabas:	Reacted to "Are people okay with..." with 😂
01:25:13	Ansgar Dietrichs:	clarification question: this risc-v conversation would be irrelevant to shipping an alternative EOF version, right?
01:25:13	Mario Vega:	Reacted to "Can client teams als..." with ➕
01:25:13	Gajinder Singh:	Reacted to "Can client teams als..." with ➕
01:25:16	Barnabas:	why maintain one library when you could maintain 3 libraries :D
01:25:20	frangio:	bring back incremental eof
01:25:29	Kevaundray Wedderburn:	Reacted to "why maintain one lib..." with 😂
01:25:32	Parithosh Jayanthi:	Reacted to "why maintain one lib..." with 😂
01:25:36	Mario Vega:	Replying to "Can client teams als..."

Please comment these on here: https://github.com/ethereum/pm/issues/1499
01:25:37	Ben Adams:	Reacted to "bring back increment..." with 😂
01:25:39	Gajinder Singh:	Reacted to "why maintain one lib..." with 😂
01:25:42	stokes:	Replying to "clarification questi..."

I would say no
01:25:50	Sophia Gold:	Reacted to "one (obvious) poin..." with 👍
01:25:54	lightclient:	Replying to "Are people okay with..."

no
01:26:00	stokes:	Replying to "clarification questi..."

The meta question is what target we should ultimately be heading towards
01:26:02	Ansgar Dietrichs:	somewhat insane question - is there maybe one glamsterdam EL candidate feature that could conceivably be pulled into fusaka to replace EOF?
01:26:03	lightclient:	Reacted to "why maintain one lib..." with 😂
01:26:05	Charles C (vyper):	Reacted to "why maintain one l..." with 😂
01:26:16	SanLeo:	Reacted to "somewhat insane qu..." with 👍
01:26:25	MariusVanDerWijden:	Replying to "somewhat insane qu..."

no, we need time to work on client improvements
01:26:36	Łukasz Rozmej:	Replying to "the thing that is mo..."

You can come to totally opposite conclusion based on the first statement too: that you shouldn't delay scheduled upgrades based on far future things that might not come to be :D
01:26:37	Parithosh Jayanthi:	Reacted to "no, we need time to ..." with 👍🏽
01:26:39	Tim Beiko:	Replying to "somewhat insane ques..."

Yeah, I would not extend the CFI list, especially given the gas limit increases
01:26:39	stokes:	Replying to "clarification questi..."

We could do no EOF, the other EIPs for contract size and stack issues; and then one day have a single EVM interpreter for -some_ zk ISA
01:26:48	Francesco:	Replying to "somewhat insane ques..."

Nah we can just keep it to gas limit increases
01:26:55	Kevaundray Wedderburn:	Reacted to "no, we need time to ..." with 👍🏽
01:27:00	Parithosh Jayanthi:	Replying to "somewhat insane ques..."

And probably spend time prototyping stuff
01:27:04	Kevaundray Wedderburn:	Reacted to "Nah we can just keep..." with 👍
01:27:08	Justin Florentine (Besu):	i'm really not sure how to compare something that is a pure research idea to an already engineered and being tested alternative
01:27:11	lightclient:	Replying to "the thing that is mo..."

i agree with this for protocol changes that don’t impact users much, but i disagree for things that substantially change user space
01:27:12	Barnabas:	Replying to "somewhat insane ques..."

gas limit increase + history expiry will give enough work for ELs anyway
01:27:22	ethDreamer (Mark):	Can we at least comb through the idea to see if there’s anything that would obviously kill RISC-V?
01:27:30	Ansgar Dietrichs:	“something of that magnitude eventually” is not an update though, that was always an option.

risc-v in 2 years would be a huge update
01:27:35	Martin | ethrex:	Reacted to "Nah we can just keep..." with 👍
01:27:39	andrei:	Reacted to "one (obvious) point:..." with 👍
01:27:45	Łukasz Rozmej:	Reacted to "i'm really not sure ..." with 👍
01:28:04	Tim Beiko:	Replying to "“something of that m..."

Right, I don’t think we’ve had this update?
01:28:07	Toni Wahrstätter:	Reacted to "Nah we can just keep..." with 👍
01:28:19	Ansgar Dietrichs:	Replying to "“something of that m..."

sounds like some people think that is now a possibility
01:28:23	Gajinder Singh:	the question is all we all sold on EOF benefits in short term (and concretely), so is EOF a 10X feature?
01:28:25	Toni Wahrstätter:	Reacted to "gas limit increase +..." with 👍
01:28:27	Ben Adams:	Should we move on to other points?
01:28:38	Parithosh Jayanthi:	Reacted to "gas limit increase +..." with 👍
01:28:51	Parithosh Jayanthi:	Reacted to "Can we at least comb..." with 👍🏽
01:28:54	Ahmad Bitar | Nethermind:	Irrelevant point: Building risc-V interpretors in 5 different languages will be interesting
01:28:59	Tim Beiko:	https://github.com/ethereum/EIPs/pull/9678
01:29:01	Justin Florentine (Besu):	maybe RiscV is inside an EOF v2 container and this is all moot
01:29:04	Alex (axic):	Reacted to "Irrelevant point: Bu..." with 🎉
01:29:06	lightclient:	Replying to "the question is all ..."

we can just get the major benefits like bigger code and fixing stack too deep w/o EOF
01:29:11	Parithosh Jayanthi:	Reacted to "maybe RiscV is insid..." with 👍🏽
01:29:28	lightclient:	Replying to "maybe RiscV is insid..."

no it’s about arch that the prover is executing on for zkp
01:29:38	Gary Schulte:	Replying to "maybe RiscV is insid..."

is risc-v-like change in a few years a foregone conclusion?  zkevm’s exist currently.  It isn’t clear to me that we have to make this kind of VM rewrite, tooling rewrites, etc
01:29:39	ethDreamer (Mark):	Reacted to "no it’s about arch t..." with 👍
01:29:42	Łukasz Rozmej:	If we need to suport EVM bytecode in risc-v by some kind of interpreter, what prevents us from taking existing EVM implementation and compiling it to risc-v. If it has EOF or not then is just a minor difference?
01:29:49	Gajinder Singh:	Replying to "the question is all ..."

so lets do that and then evaluate if we need EOF
01:30:01	Ahmad Bitar | Nethermind:	Replying to "maybe RiscV is insid..." 

 Even risc-v bytecode can have a container structure
01:30:18	lightclient:	Replying to "maybe RiscV is insid..."

AFAIK zk-evm is basically dead for now and everyone is focusing on ZK-VM where they compile EVM interpreter to RISC-V or the like
01:30:18	Kevaundray Wedderburn:	Replying to "clarification questi..."

I think I’d prefer evm over some zk ISA until its clear that a zk specific ISA with its own pipeline is needed
01:30:18	Dustin:	does a gas limit thing need to be consensus/an EIP?
01:30:27	Ahmad Bitar | Nethermind:	Replying to "maybe RiscV is insid..." 

 But might be a different structure than eof
01:30:31	MariusVanDerWijden:	Replying to "does a gas limit t..."

no
01:30:43	Gajinder Singh:	Replying to "does a gas limit thi..."

info EIP
01:30:43	Łukasz Rozmej:	Replying to "If we need to suport..."

So you will have EVM interpreter run on RISC-V interpreter, being interpreted in zk-EVM
01:31:02	Łukasz Rozmej:	Replying to "If we need to suport..."

Ya Dawg I heard you like interpreters...
01:31:03	andrei:	Reacted to "If we need to suport..." with 👍
01:31:12	Justin Florentine (Besu):	Reacted to "AFAIK zk-evm is basi..." with 🙏
01:31:17	Gary Schulte:	Replying to "maybe RiscV is insid..."

dead how?  linea and zksync etc might disagree
01:31:24	Vasiliy Shapovalov:	Replying to "does a gas limit thi..."

EIP doesn’t have to touch consensus code tho
01:31:26	Alex (axic):	Replying to "maybe RiscV is insid..."

Thats why this entire debate seems pointless if contract authors are not given access to riscv.
01:31:43	Parithosh Jayanthi:	"At some point”
01:31:51	Ben Adams:	Reacted to ""At some point”" with 😂
01:32:05	SanLeo:	Reacted to ""At some point”" with 😂
01:32:22	Josh Davis:	Reacted to ""At some point”" with 😂
01:32:32	Toni Wahrstätter:	Replying to "does a gas limit thi..."

not necessarily, but it makes sense to have some central place for coordination around it. We don't want validators reaching out on telegram asking if pumping the gaslimit is safe. Instead there should be something official that tells validators what is tested and what not.
01:32:48	Alex (axic):	Replying to "If we need to suport..."

The main claim is that it is done once by the block builder, then it “won’t ever need to be executed again” (tm), because there’s the proof.
01:32:51	Sophia Gold:	Reacted to "not necessarily, b..." with 💯
01:32:51	Gary Schulte:	Reacted to "Ya Dawg I heard you ..." with 😆
01:32:56	Tim Beiko:	https://github.com/ethereum/EIPs/pull/9658
01:33:08	Łukasz Rozmej:	Replying to "If we need to suport..."

sure, but I mean about core dev support
01:33:09	Alex (axic):	Replying to "If we need to suport..."

But I think that is somewhat unrelated to the EVM level.
01:33:21	Kevaundray Wedderburn:	Replying to "maybe RiscV is insid..."

It’s undesirable/dead because theres not a stable abstraction layer between the circuit and the EVM
01:33:26	Trent:	Replying to "does a gas limit thi..."

Schelling point to articulate shared strategy
01:33:33	Dustin:	Replying to "does a gas limit t..."

meh, it'll just becone another game of #pumpthegas "we can't afford to wait for the next fork"
01:33:43	Cody Gunton:	Replying to "There is a revolutio..."

I only mean for making zk provers’ lives easier. They use lots of GPU compute and requirements will go down for that making zk proving more accessible.
01:34:10	MariusVanDerWijden:	https://github.com/ethereum/go-ethereum/pull/31705
01:34:38	SanLeo:	Replying to "https://github.com..."

"At some point" came pretty quick
01:34:56	Gary Schulte:	Replying to "maybe RiscV is insid..."

because the evm is a moving target - this seems like a self inflicted wound.  Change the vm because we are always changing the vm
01:35:24	Gajinder Singh:	Replying to "does a gas limit thi..."

EIP requires clients to support limit and not break on it, so that way its more than a campaign and require some client effort
01:35:40	Sophia Gold:	Reacted to "https://github.com..." with ❤️
01:35:43	Orest Tarasiuk (t1):	are “gas eips” supposed to be about ‘sane defaults’?
01:35:57	Kevaundray Wedderburn:	Replying to "maybe RiscV is insid..."

Yep I think thats one reason to go the zkVM route
01:35:59	Barnabas:	Reacted to "not necessarily, but..." with 💯
01:36:08	Ben Adams:	Reacted to "https://github.com/e..." with ❤️
01:36:12	Ben Adams:	Reacted to "https://github.com/e..." with 🔥
01:36:26	Tim Beiko:	They are about getting client teams to increase these “sane defaults” and then update them in the next fork 😄
01:36:27	Parithosh Jayanthi:	Which Els have history expiry drop for may 1st in sepolia in their mainnet releases? Or will they make another one before the date?
01:36:37	Ben Adams:	Replying to "https://github.com/e..."

Now need CLs to do it for mev boost
01:36:49	Ansgar Dietrichs:	I would like to keep the door open for an “optimistic replacement” for EOF if we end up removing it.

One feature we try to fasttrack (second prio after peerdas obv) and only ship with fusaka if ready, otherwise keep for glamsterdam.

only if we find really important one - but my feeling is that the glamsterdam batch is really high impact
01:37:09	Ansgar Dietrichs:	Replying to "I would like to keep..."

I will look into this and see whether to bring such a proposal to the Monday call
01:37:09	Łukasz Rozmej:	I am not sure to be honest
01:37:11	Justin Florentine (Besu):	besu's is still being tested
01:37:12	Dan Cline:	Replying to "I would like to keep..."

worth continuing this discussion on discord given call is ending soon
01:37:21	Ansgar Dietrichs:	Reacted to "worth continuing thi..." with 👍
01:37:22	Barnabas:	Replying to "Which Els have histo..."

sounds like nobody lol
01:37:23	Orest Tarasiuk (t1):	Replying to "They are about getti..."

Wdym 'fork'?
01:37:38	Orest Tarasiuk (t1):	Replying to "They are about getti..."

Just client upgrade?
01:38:20	Barnabas:	I think pectra mainnet should be higher focus, and then maybe we can reiterate on history expiry next month?
01:38:30	Gajinder Singh:	Replying to "maybe RiscV is insid..."

also good to move/abstract away zkp effort out of eth dev bottleneck
01:39:06	Alex (axic):	Next final decision 😄
01:39:13	Tim Beiko:	Replying to "Next final decision ..."

always!
