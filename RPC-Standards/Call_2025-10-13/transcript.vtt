WEBVTT

1
00:00:37.230 --> 00:00:43.270
Felix (Geth): Yeah, somehow I have the feeling this call will have a great attendance today, after the shout-out on ACDT.

2
00:00:57.110 --> 00:00:58.769
Mercy Boma Naps-Nkari: Hello, good afternoon, everyone.

3
00:00:59.900 --> 00:01:05.850
Mercy Boma Naps-Nkari: Thank you guys for joining today's call. We'll begin, like, say, in the next 2 minutes or so.

4
00:01:17.500 --> 00:01:18.560
Akash | ECH: MRC.

5
00:01:21.190 --> 00:01:25.630
Mercy Boma Naps-Nkari: Hello, Kash. I will let you know when to start recording, like, in the next one minute.

6
00:01:25.990 --> 00:01:26.650
Akash | ECH: Okay.

7
00:01:29.160 --> 00:01:37.630
Sebastian Bürgel [Gnosis/HOPR]: I was just moving over from the ACDT call, where I brought up some RPC issue topic.

8
00:01:38.020 --> 00:01:42.879
Sebastian Bürgel [Gnosis/HOPR]: Yeah, so I'm not a usual attendee here, but want to say hi.

9
00:01:44.490 --> 00:01:46.620
Mercy Boma Naps-Nkari: Okay, thank you for joining us.

10
00:01:54.870 --> 00:01:59.370
Felix (Geth): Yeah, there isn't really an agenda for today, huh? It's just, I guess we could just…

11
00:02:01.090 --> 00:02:05.549
Felix (Geth): Try to make some progress on the error code stuff, and then also…

12
00:02:06.730 --> 00:02:07.130
Mercy Boma Naps-Nkari: Yeah.

13
00:02:07.130 --> 00:02:07.720
Felix (Geth): C.

14
00:02:10.620 --> 00:02:13.929
Mercy Boma Naps-Nkari: Yeah, so, Akash, can you start recording?

15
00:02:15.670 --> 00:02:17.610
Mercy Boma Naps-Nkari: If you aren't. Okay.

16
00:02:20.120 --> 00:02:23.949
Mercy Boma Naps-Nkari: So, good afternoon, everyone. So, welcome to our PC Standard Call.

17
00:02:24.490 --> 00:02:36.750
Mercy Boma Naps-Nkari: And we don't really have anything on the agenda, but from the last call we had, we discussed about error codes, and we did have, some points reviewed from the

18
00:02:36.970 --> 00:02:43.770
Mercy Boma Naps-Nkari: Luca, that we took note, and we are currently working on that. I think… let me share the links to the…

19
00:02:44.100 --> 00:02:51.410
Mercy Boma Naps-Nkari: PRs that was raised, so that we can keep… keep… kick off from here. Sorry.

20
00:03:56.460 --> 00:04:03.250
Mercy Boma Naps-Nkari: So, on the chat, I shared a link to the PR and the draft for the… Execution arrow.

21
00:04:04.460 --> 00:04:16.829
Mercy Boma Naps-Nkari: although it's not yet a formal PR, we're still working on it, and we really want to have some input on the best way to go about it, any, recommendation or things we need to change in order to

22
00:04:17.160 --> 00:04:25.010
Mercy Boma Naps-Nkari: get more progress around this. I'm trying to get Sims to join the call, because he is, like, the initial… okay. Hello, Sims.

23
00:04:26.990 --> 00:04:27.910
Simsonraj Easvarasakthi: Hey, everyone.

24
00:04:29.420 --> 00:04:39.670
Mercy Boma Naps-Nkari: Okay, so this is the… Sims is the initial author of the Iraq Standardization, so I think I should let him take off from here. Sims, can you…

25
00:04:39.930 --> 00:04:45.800
Mercy Boma Naps-Nkari: Make an introduction of who and what This proposal is all about.

26
00:04:46.280 --> 00:04:53.289
Simsonraj Easvarasakthi: Oh yeah, definitely. Hello, everyone. I'm Simpson, and I'm working with Chainlink Labs.

27
00:04:53.400 --> 00:05:01.400
Simsonraj Easvarasakthi: We set out to, you know, standardize the JSON RPC error code, because there's an inherent problem with these.

28
00:05:01.530 --> 00:05:15.829
Simsonraj Easvarasakthi: that's basically unusable for most of the clients. Just like Web 2, we don't have a standardization on Web3 error codes. Especially our company, working across multiple EVM chains, we've noticed that

29
00:05:15.830 --> 00:05:32.340
Simsonraj Easvarasakthi: This is unreliable, and we cannot use this to determine that any error code suggests any particular single error. It's either cross-used within the clients, or mixed-used across different clients and different EVM chains.

30
00:05:32.400 --> 00:05:38.080
Simsonraj Easvarasakthi: So, hence the proposal. And if you look at the proposal, proposal is really straightforward.

31
00:05:38.330 --> 00:05:52.780
Simsonraj Easvarasakthi: We plan… we've proposed to group and categorize errors, and reserve some numbers or ranges for each category. So, let's say, you know, for instance, not coding the exact number, but…

32
00:05:52.780 --> 00:06:10.280
Simsonraj Easvarasakthi: If we know any error code that's between 100 and 200, we can instantly associate that with gas errors, or something like that, and then we can react to those error codes, however the, you know, downstream consumers are willing to. So that's the goal.

33
00:06:10.280 --> 00:06:22.379
Simsonraj Easvarasakthi: And, it is pretty straightforward, like I mentioned. We're just classifying errors and, you know, allocating 200, and it's subject to change based on, the client feedback.

34
00:06:22.730 --> 00:06:38.640
Simsonraj Easvarasakthi: But the proposal is almost done. The next stage, what I'm starting to work on is, try and do negative testing, which means try and simulate these errors across multiple different chains and clients, and see,

35
00:06:39.870 --> 00:06:41.000
Simsonraj Easvarasakthi: how…

36
00:06:41.250 --> 00:06:51.379
Simsonraj Easvarasakthi: or if there are any conflicts, or if we can improve anything more. But from an initial investigation we did, like, a year and a half ago, it was pretty…

37
00:06:51.610 --> 00:07:01.280
Simsonraj Easvarasakthi: While that no one was matching, maybe the top 5 clients are fine, but rest of the clients or rest of the chains, had numbers all over.

38
00:07:01.280 --> 00:07:13.380
Simsonraj Easvarasakthi: So we wanted to standardize. That's a short introduction. I can send the details here, or the proposal and the PR that we have. It'll be really helpful if you guys can take a look at it.

39
00:07:13.500 --> 00:07:15.210
Simsonraj Easvarasakthi: And leave some feedback.

40
00:07:16.820 --> 00:07:22.329
Simsonraj Easvarasakthi: I guess most of folks here already know, been discussing this for a while.

41
00:07:24.570 --> 00:07:26.399
Simsonraj Easvarasakthi: Happy to answer any questions.

42
00:07:32.580 --> 00:07:36.479
Mercy Boma Naps-Nkari: Yeah, so I did drop the links on the chat, so I don't know if…

43
00:07:36.690 --> 00:07:41.470
Mercy Boma Naps-Nkari: We have anything else in regards to this? Any additions?

44
00:07:43.160 --> 00:07:44.210
Mercy Boma Naps-Nkari: Felix.

45
00:07:44.740 --> 00:07:51.029
Felix (Geth): Yeah, so, I just posted some feedback on the PR, so, there are some things there that…

46
00:07:51.160 --> 00:07:58.849
Felix (Geth): I don't fully understand, so I have no… so one question for me would be, like, how did you come up with this list of…

47
00:07:59.150 --> 00:08:04.990
Felix (Geth): Of… Of errors, because some of them are really weird.

48
00:08:06.260 --> 00:08:17.579
Felix (Geth): I generally think it's good to have a… to start the standardization around it, but if we start by introducing a lot of error conditions that do not exist in the clients right now.

49
00:08:17.700 --> 00:08:22.759
Felix (Geth): This will basically mean that in all the clients, we will have to do a ton of work

50
00:08:22.870 --> 00:08:28.760
Felix (Geth): To get to the point where we, you know, like, we have to implement special logic.

51
00:08:28.850 --> 00:08:43.129
Felix (Geth): to distinguish all of these error conditions. And as far as I can see, in the standard, really the only key change is that the only method that has been modified is send raw transaction, right?

52
00:08:43.570 --> 00:08:44.310
Simsonraj Easvarasakthi: Right.

53
00:08:44.310 --> 00:08:47.049
Felix (Geth): I guess also, in some ways, estimate gas.

54
00:08:47.350 --> 00:08:48.400
Simsonraj Easvarasakthi: Correct, yeah.

55
00:08:48.400 --> 00:08:49.340
Felix (Geth): Yeah, so for.

56
00:08:49.340 --> 00:08:50.190
Simsonraj Easvarasakthi: Yep, yep.

57
00:08:50.190 --> 00:08:59.340
Felix (Geth): Obviously, it's good to be able to distinguish some error conditions, but we're not gonna implement, like, 40 different errors for this one method.

58
00:09:01.340 --> 00:09:01.960
Simsonraj Easvarasakthi: Right.

59
00:09:01.960 --> 00:09:02.740
Felix (Geth): It's just…

60
00:09:02.740 --> 00:09:18.410
Simsonraj Easvarasakthi: Yeah, no, no, great, that's a good question. Initially, so, to add a little bit more context, is the errors that you see, is what we, as a client of these RPC methods, rely on, pretty much

61
00:09:18.490 --> 00:09:34.979
Simsonraj Easvarasakthi: most of the, let's assume, a MetaMask or any cross-team clients, would… would look at to react to the error message. Let's say non-s too low, gas too… intrinsic gas too low, so we can bump up the gas, we can, you know, increase the gas or increase the nons, and

62
00:09:34.980 --> 00:09:49.859
Simsonraj Easvarasakthi: things like these, which are apparent and which is most useful to the cross-team clients, rather than between clients, or between execution clients, or consensus clients. That's the focus at the moment here, but of course, like you mentioned.

63
00:09:49.860 --> 00:10:00.580
Simsonraj Easvarasakthi: We can always tweak this. It's not a finalized, proposal. It is a proof of concept showing how this will be implemented, but the error itself, or, the ranges.

64
00:10:00.580 --> 00:10:10.900
Simsonraj Easvarasakthi: can be changed, and it's not set in stone. Just looking for feedback here, and if you think, for example… and again, like you mentioned, yes, for now, I've shown it…

65
00:10:11.040 --> 00:10:15.010
Simsonraj Easvarasakthi: Only for each, send transaction, or sender out transaction.

66
00:10:15.010 --> 00:10:35.669
Simsonraj Easvarasakthi: Inherently also the estimate guess, just focusing on mostly when you send transaction, you get an error so you can react to it, from the… from the dApp's perspective or an app's perspective. That's what I've been focusing on, but of course, again, happy to extend this or reduce it.

67
00:10:35.670 --> 00:10:37.309
Simsonraj Easvarasakthi: Whichever makes sense.

68
00:10:41.020 --> 00:10:56.189
Simsonraj Easvarasakthi: And some of these errors could have been, like, really from long back. Again, I can go back and fix some of them, because I think the original classification was, like, from one, one and a half years ago. I haven't done the new

69
00:10:56.310 --> 00:11:05.689
Simsonraj Easvarasakthi: new checks again, I can fix that. I can go back and check it, but any type of contacts you guys leave would be really, really helpful for me to…

70
00:11:05.930 --> 00:11:08.120
Simsonraj Easvarasakthi: Cross-check across.

71
00:11:09.890 --> 00:11:11.639
Simsonraj Easvarasakthi: Sorry, Mercy, I cut you off.

72
00:11:12.780 --> 00:11:15.559
Mercy Boma Naps-Nkari: Yes, no problem. I'm Sebastian, you had a question.

73
00:11:17.180 --> 00:11:29.550
Sebastian Bürgel [Gnosis/HOPR]: Yeah, so given that the, basically the RPC layer is a multi-million dollar industry with many, again, multi-million dollar individual companies behind it.

74
00:11:30.480 --> 00:11:37.730
Sebastian Bürgel [Gnosis/HOPR]: Have, we kind of included them proactively in the process, gotten their feedback?

75
00:11:38.150 --> 00:11:45.749
Sebastian Bürgel [Gnosis/HOPR]: Because if I think about it, the number one reason why devs today are not using Ethereum, but are using Alchemy.

76
00:11:46.330 --> 00:11:58.220
Sebastian Bürgel [Gnosis/HOPR]: you know, let's face it, it's because exactly these edge cases are handled much, much better, right? And I don't need to have, you know, client-specific forks in my… in my, kind of, backend or front-end code.

77
00:11:58.960 --> 00:12:07.289
Sebastian Bürgel [Gnosis/HOPR]: So I think there's a lot for us to learn here, and I'm just curious if any of them have been involved thus far, or if that's the process.

78
00:12:07.830 --> 00:12:09.080
Sebastian Bürgel [Gnosis/HOPR]: If that still plans.

79
00:12:09.590 --> 00:12:13.250
Simsonraj Easvarasakthi: Yeah, again, great question, Sebastian. Oh, sorry, go ahead, Marci.

80
00:12:14.080 --> 00:12:21.760
Mercy Boma Naps-Nkari: Sorry, sorry for cutting you in. I wanted to chime in a little bit on this. So, I did reach out to some ROPC providers, but

81
00:12:21.950 --> 00:12:28.209
Mercy Boma Naps-Nkari: There's kind of, like, reluctancy in joining the discussion and moving this forward, so…

82
00:12:28.420 --> 00:12:32.269
Mercy Boma Naps-Nkari: I'm not pretty sure how we're going to go about it in that end.

83
00:12:33.450 --> 00:12:39.099
Felix (Geth): I mean, we can just resolve it right here. I mean, literally, this is the way it has always worked with…

84
00:12:44.450 --> 00:12:47.110
Simsonraj Easvarasakthi: Felix, we lost you. Sorry.

85
00:12:47.110 --> 00:12:54.700
Felix (Geth): Yeah, I'm sorry, I dropped out. Just quickly wanted to say, the way it's always worked with this API is that…

86
00:12:54.980 --> 00:13:07.299
Felix (Geth): We basically need to set the standards from the client's point of view, and then the providers will follow the standards that, you know, have been proposed by the clients, or have been set by the clients.

87
00:13:07.300 --> 00:13:24.300
Felix (Geth): Because for many of the APIs, the providers will pass through the responses from the client as is, or they will cache them, you know, in a generic way, and so on. So it's actually, for the RPC providers, it's pretty rare that they would have their own custom responder

88
00:13:24.300 --> 00:13:29.630
Felix (Geth): For any of these things, so they will mostly just, like, if we fix it in the clients, they will…

89
00:13:31.030 --> 00:13:33.179
Felix (Geth): You know, just go along with that.

90
00:13:34.580 --> 00:13:49.950
Simsonraj Easvarasakthi: Yeah, 100% agree with that. We've noticed only probably two major clients, like Tenderly and Alchemy, have their wrappers on top. Most of the other providers we checked with, just pass through the RPC responses they get.

91
00:13:49.950 --> 00:13:59.279
Simsonraj Easvarasakthi: And we also have good working relationship with these RPC providers, but we need a base or a solid foundation to even, you know, tell them, hey.

92
00:13:59.280 --> 00:14:16.220
Simsonraj Easvarasakthi: you gotta, stick with the standards. For that, we need some sort of, documentation or a proposal to be merged officially in the OpenRPC or, sorry, Ethereum Foundation to guide them on what to implement, so they can also stick to the standards.

93
00:14:18.600 --> 00:14:20.370
Simsonraj Easvarasakthi: If that answers the question.

94
00:14:22.570 --> 00:14:31.209
Felix (Geth): Yeah. I mean, I think that it would be good to start, but the proposal itself, I see the main thing is that it has

95
00:14:31.670 --> 00:14:44.699
Felix (Geth): it has a lot of errors, and some of them very questionable ones, so we have to see, kind of, where we can narrow it down. As far as I understand, the main things that are required for the transaction submission is the… is the,

96
00:14:44.700 --> 00:14:53.159
Felix (Geth): Question of, like, was it… is there, like, the transaction pool errors, this is, like, the important category, basically, here that you have.

97
00:14:53.180 --> 00:15:06.870
Felix (Geth): Where it's about the… it's about either that, or then you have these gas-related ones. So they look quite good, because they basically mirror the actual conditions that can occur when you're submitting a transaction. Some of these other ones, they are a bit more sketch.

98
00:15:06.970 --> 00:15:07.540
Felix (Geth): So…

99
00:15:07.540 --> 00:15:08.450
Simsonraj Easvarasakthi: Sorry.

100
00:15:08.620 --> 00:15:13.689
Simsonraj Easvarasakthi: Could you, could you give me, like, one simple example of which one would be, just to…

101
00:15:14.180 --> 00:15:15.419
Simsonraj Easvarasakthi: Get an idea.

102
00:15:16.100 --> 00:15:17.809
Felix (Geth): Yeah, so, mmm…

103
00:15:19.700 --> 00:15:28.749
Felix (Geth): So, for example, I think that's… I think this… the more I look at it, you made this document there, it's this executionerows.yaml file?

104
00:15:29.110 --> 00:15:36.039
Felix (Geth): Containing this group of… and it has codes for, for example, nons too low, nons too high.

105
00:15:36.140 --> 00:15:54.290
Felix (Geth): Execution reverted, invalid opcode, and then this out-of-counters thing. And out of these, I would say the only thing we really need is this execution reverted, because everything else is just, like, I mean, how… we don't distinguish now, like, invalid opcode is… it doesn't even exist in EVM.

106
00:15:54.330 --> 00:15:58.320
Felix (Geth): Like, invalid opcodes are not really a thing, so… and this.

107
00:15:58.320 --> 00:16:01.230
Simsonraj Easvarasakthi: Oh, okay, I understand the confrontation.

108
00:16:01.520 --> 00:16:02.079
Felix (Geth): Probably won't.

109
00:16:02.080 --> 00:16:02.680
Simsonraj Easvarasakthi: Okay.

110
00:16:02.840 --> 00:16:05.499
Felix (Geth): maybe generated by AI, or like, I don't.

111
00:16:05.500 --> 00:16:10.029
Simsonraj Easvarasakthi: No, no, no, no, I can explain that. I can… okay, now I understand the confusion.

112
00:16:10.050 --> 00:16:23.999
Simsonraj Easvarasakthi: you don't have to implement all the errors here, but let's say if you have to implement one of these errors, such as invalid opcode, you would use minus 31603, or execution reverter minus 31602.

113
00:16:24.000 --> 00:16:30.900
Simsonraj Easvarasakthi: The invalid opcode, especially the out-of-count counters, is a ZK stack-specific issue.

114
00:16:30.900 --> 00:16:34.830
Simsonraj Easvarasakthi: Where they… they… Maintain a counter on…

115
00:16:34.830 --> 00:16:59.800
Simsonraj Easvarasakthi: producing ZK proofs, and when that runs out, they send out an error called out of counters errors, which is common across all the ZK Sync stacked… not ZK Sync, ZK stacked, chains that we've worked with, and it's specific to them. And it doesn't mean every client have to implement all these errors. It is, if you want to, let's say, BASO has a specific error related only to BASO,

116
00:16:59.800 --> 00:17:19.139
Simsonraj Easvarasakthi: they can always come and add that error, which is… which will be resolved for them in the future, and they can just use it, or any other basis-based clients can use that, not necessarily get have to use it. So that's… that's how it is. It's not that all the errors need to be used by every single client.

117
00:17:19.880 --> 00:17:28.649
Łukasz Rozmej: Yeah, so what I got from last week's meeting is that the scope of this is way bigger than just Ethereum clients, it's all EVM-like.

118
00:17:29.050 --> 00:17:30.640
Simsonraj Easvarasakthi: Exactly.

119
00:17:32.100 --> 00:17:33.739
Simsonraj Easvarasakthi: Yeah, yeah, exactly.

120
00:17:35.160 --> 00:17:53.360
Simsonraj Easvarasakthi: even the chains, I checked ZK Sync chain, some of the ZK stack chains, different, providers like Alchemy, Tenderly, just to get a lay of the land, and it's not specific to just top 5 clients that we have.

121
00:17:53.960 --> 00:17:54.820
Felix (Geth): claims.

122
00:17:54.930 --> 00:18:12.779
Felix (Geth): Yeah, well, I mean, the main issue with adding all of these errors is that, yeah, I mean, the errors will be standardized quotes, right? But it's not really… it's kind of meaningless then, because what really needs to be standardized is, like, for which specific condition requires your client to return this error.

123
00:18:12.780 --> 00:18:23.949
Felix (Geth): Like, it doesn't… it's not so much about, like, I mean, yeah, it's good maybe to have the error codes, so that's a good step, but it's also kind of important for us to know, like, when should they actually happen.

124
00:18:24.010 --> 00:18:41.849
Felix (Geth): And I guess that is something where I would say it's maybe better to start, like, a bit more minimal, and try to define the, like, top 5 errors that we really need. I mean, it's… I think it's an awesome step to start with transaction submission, because, honestly, it has the most errors. The other,

125
00:18:41.850 --> 00:18:51.330
Felix (Geth): The other methods, they are mostly these, like, you know, read methods for basic blockchain information, and you basically have the op…

126
00:18:51.330 --> 00:19:00.069
Felix (Geth): of, like, the client failed, or the item is not there, in which case we don't return an error, return null, or we have the, you know, we get the item.

127
00:19:00.070 --> 00:19:11.950
Felix (Geth): So it's not… there aren't too many other things that can really happen, but the things that… where we need it the most is the transaction submission, and then in some ways, these, like, index queries, like get logs, where

128
00:19:11.950 --> 00:19:15.410
Felix (Geth): It would be good to come up with some…

129
00:19:16.200 --> 00:19:25.470
Felix (Geth): arrows for the edge cases, I guess. But these are not even included here. So I guess, yeah, for the transaction submission, mostly, I think we… we can…

130
00:19:25.910 --> 00:19:37.040
Felix (Geth): We can go into proposal. I have another question, by the way. So, you made the, all of the codes you kind of assigned into the negative integer range. Could you maybe explain why you,

131
00:19:37.430 --> 00:19:38.030
Felix (Geth): Did that…

132
00:19:38.030 --> 00:19:44.140
Simsonraj Easvarasakthi: Yeah, yeah, yeah, someone commented on the PR, too. It's not… oh, maybe it's just you,

133
00:19:44.140 --> 00:19:44.650
Felix (Geth): Just…

134
00:19:44.650 --> 00:19:53.870
Simsonraj Easvarasakthi: It's… we can choose any numbers. Again, like I mentioned, it was just to show how we can implement it, not necessarily. And the reason why I chose that is

135
00:19:53.870 --> 00:20:11.590
Simsonraj Easvarasakthi: It's an immediate range, next to the JSON RPC, standard. I think the JSON RPC standard ends at, minus 32,000, so I chose the next immediate range. We can, of course, choose the positive integers, too. No, no constraints there.

136
00:20:13.900 --> 00:20:22.300
Felix (Geth): Yeah, I think this is kind of a common misunderstanding, so the JSON RPC standard doesn't actually tell you that all errors need to be negative, it just puts.

137
00:20:22.300 --> 00:20:22.830
Simsonraj Easvarasakthi: Exactly.

138
00:20:22.830 --> 00:20:40.420
Felix (Geth): own errors into the negative range, because then they're gonna be out of the way of the application. But, I mean, we are the application here, so we can just choose it by ourself. And we have some existing error codes. As far as I understand, we have two or three defined error codes even now in the spec.

139
00:20:40.500 --> 00:20:50.369
Felix (Geth): They are, a bit random, I would say. Like, we have, for example, in Geth, we've been advocating for a long time for this error code 3, which is.

140
00:20:50.370 --> 00:20:51.470
Simsonraj Easvarasakthi: Right, yeah.

141
00:20:51.470 --> 00:21:06.079
Felix (Geth): for the… which is used in a specific place in ETHCall. So ETHCALL is another one of these that could really benefit from some standardization, I guess, because there are a lot of conditions that can happen in ETHCOL. And then we also have the error code 44,

142
00:21:06.120 --> 00:21:14.200
Felix (Geth): 4-4 for the, history expiry, which I guess we kind of chose it because it matches the EAP, and it's a very, sort of.

143
00:21:14.560 --> 00:21:22.669
Felix (Geth): we felt it's a good signal because we had to choose a code, but I guess for the… that means that, like, currently we have

144
00:21:22.900 --> 00:21:31.669
Felix (Geth): between, basically, number 0 and number 5,000, we probably shouldn't choose.

145
00:21:31.670 --> 00:21:34.249
Simsonraj Easvarasakthi: Yeah. Yeah, yeah.

146
00:21:34.740 --> 00:21:35.100
Felix (Geth): But yeah.

147
00:21:35.100 --> 00:21:36.509
Simsonraj Easvarasakthi: No, that's, that's fair, yeah.

148
00:21:36.610 --> 00:21:37.680
Felix (Geth): We do…

149
00:21:37.960 --> 00:21:48.670
Felix (Geth): any number is fine, and then most recently, we actually had a… some… some… some… some requests where we were thinking that, yeah, maybe we can just continue from 3, so, like, use code 4.

150
00:21:48.820 --> 00:21:53.020
Felix (Geth): So I don't really know. Like, we just have to, in the end, just, like, choose something.

151
00:21:53.780 --> 00:22:01.270
Simsonraj Easvarasakthi: True, true. Yeah, we can change the numbers. If everyone feels comfortable using positive numbers, definitely we can

152
00:22:01.270 --> 00:22:15.060
Simsonraj Easvarasakthi: go with the positive numbers. I just chose only because it's next to the range of standard JSON RPC, so people will be familiar, but again, zero other concerns for changing it to positive numbers. Of course, we can change it.

153
00:22:16.480 --> 00:22:37.090
Simsonraj Easvarasakthi: I can… I can do that change, and next meeting, we can have it a little bit more nuanced. So, from what I'm getting, I can reduce the number of error codes that we have, to focus on, probably top hitters, maybe even remove some that's not maybe relevant to the clients.

154
00:22:37.090 --> 00:22:38.439
Simsonraj Easvarasakthi: Just keep it to the…

155
00:22:38.440 --> 00:22:48.080
Simsonraj Easvarasakthi: minimal… minimum ones, at least the ones I can go back into our codebase and see what are the ones we are validating against. I would assume most of the clients also need to use them.

156
00:22:48.360 --> 00:22:54.340
Simsonraj Easvarasakthi: So we can keep it to that, to start with, and then we can propose adding more.

157
00:22:55.860 --> 00:22:57.700
Simsonraj Easvarasakthi: If that works.

158
00:23:00.380 --> 00:23:03.800
Simsonraj Easvarasakthi: That's… that's really helpful. Any other questions?

159
00:23:12.820 --> 00:23:19.440
Felix (Geth): No, I mean, it seems, it seems good to me. I was curious a bit, so, in your PR also, you,

160
00:23:20.010 --> 00:23:24.020
Felix (Geth): You added this ex… you are now adding this extension for the error group?

161
00:23:24.350 --> 00:23:32.680
Felix (Geth): I guess this is kind of a temporary workaround until the OpenRPC allows us to… support the…

162
00:23:33.230 --> 00:23:34.509
Felix (Geth): the errors?

163
00:23:35.010 --> 00:23:57.840
Simsonraj Easvarasakthi: Oh, no, okay, a little bit more context there. We worked with OpenRPC Foundation to bring out, the extension specifications. I'm not sure if we have Zane here. Okay, Zane is not here. So that's why it took us long, because we were working with OpenRPC Foundation for, like, over a year to implement the new specification called extension specification.

164
00:23:57.840 --> 00:24:09.339
Simsonraj Easvarasakthi: So, this is an official, error groups, adopted by OpenRPC Foundation. So, by what does the current proposal that doesn't do, that, Zane responded, is.

165
00:24:09.340 --> 00:24:23.360
Simsonraj Easvarasakthi: I'm extending the extension to reserve error ranges, so we can natively validate if the error codes that are returned by a group or a method is within the range that I'm expecting.

166
00:24:23.360 --> 00:24:38.890
Simsonraj Easvarasakthi: That's the only difference. Right now, we don't have a way to do that natively in OpenRPC, but I'll be working with Zane to see if we can avoid extending the extensions to add these native conditions, like a range condition.

167
00:24:38.890 --> 00:24:46.829
Simsonraj Easvarasakthi: But OpenRPC natively supports… that is what actually made this solution possible, because otherwise, the OpenRPC

168
00:24:46.890 --> 00:24:56.159
Simsonraj Easvarasakthi: or the Ethereum spec would… would be, like, massive, and would have to copy-paste all these errors across each method, which means

169
00:24:56.160 --> 00:25:11.010
Simsonraj Easvarasakthi: ETH underscore send transaction will have, let's say, hundreds of error codes copied under, and also, ETHC call will have all these hundred errors again copied. So now we can create a group and reference the group from any method we want to.

170
00:25:13.440 --> 00:25:18.060
Simsonraj Easvarasakthi: So that's a… that's a feature supported by OpenRPC now.

171
00:25:18.060 --> 00:25:35.780
Felix (Geth): Okay. And then, I'm also curious, so in your… in the actual error, group files, you have the codes, of course, but then you also have the message, which is, in your case, not really, like… I mean, the messages are more like identifiers, and then the data says the… it's… it's like…

172
00:25:36.100 --> 00:25:38.810
Felix (Geth): It's like the… I guess it's the arrow message?

173
00:25:38.940 --> 00:25:39.450
Felix (Geth): So…

174
00:25:39.450 --> 00:25:40.680
Simsonraj Easvarasakthi: So, yeah.

175
00:25:40.790 --> 00:25:52.820
Simsonraj Easvarasakthi: Yeah, great question again. Initially, we intended the data, so even now it is possible. As per the specification, now you can use the data as any data type you want.

176
00:25:53.130 --> 00:26:02.399
Simsonraj Easvarasakthi: For example, if you wanna… if you want to return an, a stack of error message with multiple different fields, you can use the data field.

177
00:26:03.900 --> 00:26:27.619
Simsonraj Easvarasakthi: Again, it's backwards compatible, but we are not enforcing it currently. We don't want to break any features. But, we've added future-proofed it for all the clients, that if we want to send more error stack to the users, they can use this data field that will be supported by the specification in the future, but right now, all we are focusing on is just the code.

178
00:26:27.800 --> 00:26:44.530
Simsonraj Easvarasakthi: And then maybe move on to using the error message, and the error message could be, like, a standardized string if you want to. If not, it's okay. But yeah, we don't want to break any compatibility at the moment, and we want to be completely backwards compatible.

179
00:26:44.530 --> 00:26:51.930
Simsonraj Easvarasakthi: So we are not insisting on using the data field, but the data field is an object that can be reused as a string or an object.

180
00:26:52.320 --> 00:27:04.680
Felix (Geth): Yeah, okay. So I was just curious, like, what's the meaning in this, like, because in the meaning, in the files, you're defining the code, the message, and the data here, but I don't know what it…

181
00:27:05.070 --> 00:27:13.890
Felix (Geth): what… if this… if this means that if I, for example, implemented this error in the client, then I have to return

182
00:27:14.860 --> 00:27:18.499
Felix (Geth): The error message as it is given in the specification, or…

183
00:27:19.480 --> 00:27:43.509
Simsonraj Easvarasakthi: Yeah, so we had a conversation about this, but if I, if I… if we enforce the message, it would mean that, a lot of clients will need to change a lot of, like, a lot of implementation, and it's a huge lift, so we are still currently debating if you want to make sure that we, you know, enforce the implementation of message.

184
00:27:43.660 --> 00:27:59.210
Simsonraj Easvarasakthi: so before it was data, right? So, data field, or data string used to be in message, now I moved that to data, because we wanted to see if we can standardize the error string also, let's say gas to low.

185
00:27:59.210 --> 00:28:09.019
Simsonraj Easvarasakthi: Any client can use gas too low as well, so if any other… if any other client or DApp is, trying to reference that, they can… they can sort of

186
00:28:09.120 --> 00:28:19.229
Simsonraj Easvarasakthi: check that string, too, as an option. But, right now, we don't have, say in it or a decision made on that particular topic.

187
00:28:19.890 --> 00:28:27.420
Simsonraj Easvarasakthi: just… I wrote it this way so it is indicative to the rest of the clients who are going to implement, saying.

188
00:28:27.420 --> 00:28:39.949
Simsonraj Easvarasakthi: okay, gasolo, straightforward, let's do $31,800, but if I say, for example, transaction price must be greater than base fee for… it could mean a different thing for a different client, so I don't wanna…

189
00:28:40.200 --> 00:28:43.620
Simsonraj Easvarasakthi: Make it too verbal. So, just…

190
00:28:43.960 --> 00:29:02.930
Simsonraj Easvarasakthi: you know, in short, you don't have to implement the message at the moment, and you don't have to use the data field to return the data, but it's the direction I feel like we should go in the future to make it more expansible, or expandable, so we can send any more… any data or data stack

191
00:29:03.360 --> 00:29:10.270
Simsonraj Easvarasakthi: As part of the error, in the data field. But right now, just focusing on code.

192
00:29:22.040 --> 00:29:23.280
Simsonraj Easvarasakthi: Cool. Any answers?

193
00:29:23.280 --> 00:29:23.820
Mercy Boma Naps-Nkari: Okay.

194
00:29:23.820 --> 00:29:24.380
Simsonraj Easvarasakthi: Yes.

195
00:29:24.810 --> 00:29:26.770
Simsonraj Easvarasakthi: Yeah, sorry, go ahead, Mercy.

196
00:29:27.300 --> 00:29:32.470
Mercy Boma Naps-Nkari: Now, I just wanted to ask if there's any other questions or contribution on this. Kira, can you please go on?

197
00:29:35.000 --> 00:29:43.789
keri: I'm wanting to change the topic a little bit, so if there's any more questions about error codes, or wanting to talk about error codes, I can, like.

198
00:29:43.790 --> 00:30:03.510
Felix (Geth): Yeah, I have one more, I have one final, comment about it. So, before we, before we continue with something else. So, the, I, I posted a link there now in the Zoom chat, for some, for some Hive tests. So, this is actually the current situation with the error code 3, and maybe it's something we could actually change, so…

199
00:30:03.510 --> 00:30:08.859
Felix (Geth): I'm pretty happy to see that So, for this specific error.

200
00:30:09.420 --> 00:30:25.580
Felix (Geth): This error is the… the error code 3 is the one that should be returned when the… in ETH call, the execution has reverted, and it should give, in the data field, the raw data returned by the EVM.

201
00:30:25.800 --> 00:30:29.390
Felix (Geth): from the contract. And, this is…

202
00:30:29.520 --> 00:30:34.360
Felix (Geth): This was, like, this error code 3 thing was, for me, like, this kind of…

203
00:30:34.550 --> 00:30:39.479
Felix (Geth): Little experiment to see if we can… kind of make it

204
00:30:39.660 --> 00:30:49.010
Felix (Geth): Like, start the, the standardization, here, because the… the…

205
00:30:50.030 --> 00:30:53.029
Felix (Geth): At the time when this was added.

206
00:30:53.320 --> 00:30:59.340
Felix (Geth): we… like, the clients were returning results all over the place. Like, some clients would return

207
00:30:59.630 --> 00:31:03.430
Felix (Geth): Wouldn't return the error data, or other clients would return

208
00:31:03.930 --> 00:31:21.989
Felix (Geth): wouldn't… would return the error data, but it was already parsed from the ABI and so on, and I'm now happy to see that, at least with Bisu and NetherMind, they are actually returning the raw error data as intended, but they are not returning error code 3 in this situation, but they are returning a generic server error. So…

209
00:31:22.030 --> 00:31:34.049
Felix (Geth): It would be good if, in Bisu and in Nethermind, we could return to Code 3 in this specific instance. It's not… I think, it's not that much of a change.

210
00:31:34.250 --> 00:31:40.599
Felix (Geth): Honestly. And it would probably… Like, help us resolve that thing, at least.

211
00:31:46.300 --> 00:31:49.049
Łukasz Rozmej: Code 3 on what? On execution reverted?

212
00:31:49.050 --> 00:31:51.729
Felix (Geth): Yeah, so that was basically this, this…

213
00:31:51.860 --> 00:31:57.960
Felix (Geth): Has been… this proposal has been kind of… Open for a long time.

214
00:31:58.100 --> 00:32:05.020
Felix (Geth): I actually don't know if we have it even merged in the spec, But I think we…

215
00:32:06.570 --> 00:32:08.119
Felix (Geth): Let me see if we…

216
00:32:08.820 --> 00:32:10.100
Łukasz Rozmej: Whoever did?

217
00:32:13.330 --> 00:32:15.489
Felix (Geth): So, it looks like…

218
00:32:17.230 --> 00:32:22.379
Felix (Geth): We have not merged it to the specs, so there should be some kind of open PR, maybe?

219
00:32:27.580 --> 00:32:43.120
Felix (Geth): Yeah, so it's this PR here, PR number 600, I will also post… Yeah, yeah, yeah, Carrie posted the link also. So yeah, that was the proposal for the spec, and we did add it into the test suit, so, kind of…

220
00:32:43.230 --> 00:32:45.490
Felix (Geth): Long while ago, and…

221
00:32:45.960 --> 00:32:58.270
Felix (Geth): I was just thinking, like, I mean, can… maybe we can… this is… this could be one of these cases where we just kind of resolve some of this issue, like, right away on this call, because I think we have representation here from Bisu and Nethermind.

222
00:32:58.540 --> 00:33:01.950
Felix (Geth): And so we could just, you know, decide now.

223
00:33:03.740 --> 00:33:06.499
Felix (Geth): How this is gonna be handled, and then…

224
00:33:06.780 --> 00:33:09.209
Felix (Geth): Yeah, we can make some progress.

225
00:33:13.160 --> 00:33:14.720
Justin Florentine (Besu): Mmm, sure.

226
00:33:22.250 --> 00:33:25.910
Justin Florentine (Besu): I'm being coy, but it seems reasonable.

227
00:33:28.450 --> 00:33:34.630
Łukasz Rozmej: I see, we had, recently a PR doing some changes there, and I see, okay, there's a…

228
00:33:34.760 --> 00:33:40.189
Łukasz Rozmej: description about this code free, I'm also liking it, but we didn't change it there yet. Okay.

229
00:33:41.020 --> 00:33:41.810
Łukasz Rozmej: So…

230
00:33:43.370 --> 00:34:00.460
Felix (Geth): Yeah, I mean, that would be great, like, if we couldn't, because, like I said, I added this to the spec, like, I added this to the test, kind of sneaky way, because when I added the test, the error data was not correct, and somehow, in between then and now, the error data seems to have been corrected, just the code is not correct still.

231
00:34:00.540 --> 00:34:07.149
Felix (Geth): So, if we now also change the code, you guys are gonna be passing one more test, and we'll finally have, like, two clocks.

232
00:34:07.150 --> 00:34:07.650
Łukasz Rozmej: Oh, yeah.

233
00:34:07.650 --> 00:34:10.259
Felix (Geth): Three clients returning the same?

234
00:34:10.260 --> 00:34:13.389
Łukasz Rozmej: This probably corrected the error.

235
00:34:13.530 --> 00:34:16.839
Łukasz Rozmej: Some parts of that, right? But not the Euro code, okay.

236
00:34:19.469 --> 00:34:29.969
Felix (Geth): Yeah. And then I think in the next step for ETHC call, we could actually figure out some more code, like, the revert, like, for ETHC call, the, execution reverted is basically the most…

237
00:34:30.089 --> 00:34:43.909
Felix (Geth): important condition, because people kind of want to know when the contract failed, they kind of want to get the solidity error message, and so on. It's just… so that is… that is kind of the… the… the big thing.

238
00:34:43.909 --> 00:34:47.459
Felix (Geth): But then there are some other things. For example, if the gas…

239
00:34:47.459 --> 00:35:10.289
Felix (Geth): is out of range for the client, like, if the node doesn't allow the gas because it's over the, like, configured cap and things like that, there are no defined error messages for that. It's kind of hard to test these things, but I guess at least we could define the code, but this is… this is something where we can create another issue. And then this is also going to have some overlap, then, with the other proposal that we discussed before, because

240
00:35:10.289 --> 00:35:13.059
Felix (Geth): We should probably use the same codes

241
00:35:13.119 --> 00:35:16.999
Felix (Geth): that we use for the transaction submission, also in ETH call.

242
00:35:20.460 --> 00:35:21.000
Simsonraj Easvarasakthi: I can…

243
00:35:21.000 --> 00:35:23.700
Felix (Geth): Paul is gonna have a subset of them.

244
00:35:24.560 --> 00:35:43.529
Simsonraj Easvarasakthi: Yeah, I can… I can probably try and use the same error codes that you guys are returning, but at least I want to make sure that, let's say, if execution errors happen, it falls in a range of 1 to 100, and gas errors in, like, 200 to 300, something like that. But we can try and reuse

245
00:35:43.530 --> 00:35:45.209
Simsonraj Easvarasakthi: Some of the previous errors.

246
00:35:45.410 --> 00:36:04.190
Felix (Geth): I mean, there is really… there aren't really any, that's the thing. Like, there are no errors right now. I mean, the clients all return errors, but it's just… they all return these, like, generic error codes from JSON RPC, and this is, in part, what has led to the current situation of, for example, certain apps, parsing the messages, because

247
00:36:04.370 --> 00:36:05.410
Felix (Geth): it's just…

248
00:36:05.500 --> 00:36:24.680
Felix (Geth): there was just no other way for the apps to really distinguish these very important conditions. I mean, you know this because you, as you said, you worked on that kind of library as well, so this is… it is obviously very important for us to agree, but the clients at the moment don't return any kind of coherent error code. And the only error code we tried to establish for this was this code 3.

249
00:36:24.680 --> 00:36:30.030
Simsonraj Easvarasakthi: Like I said, because the… and then the other error code we tried to establish is the 4444.

250
00:36:30.030 --> 00:36:37.549
Felix (Geth): when the history is unavailable. So I guess we still… I mean, I'll… I'll get back to you with some more codes that we could possibly add, but…

251
00:36:37.950 --> 00:36:41.439
Felix (Geth): That would be awesome. Yeah, that'll be super awesome. Thanks, Felix.

252
00:36:43.040 --> 00:36:48.929
Łukasz Rozmej: Yeah, so the point here is to have ETH call and said transactions having the same error codes, right?

253
00:36:49.830 --> 00:37:03.670
Łukasz Rozmej: would hurt? So the point here we're making to have the ETH call and, you know, all other call-like things, to have the same error codes as, said transaction.

254
00:37:03.900 --> 00:37:19.099
Felix (Geth): Yeah, I mean, send transaction is just gonna have more errors, that's the thing. For ETHC call, there aren't really that… I mean, the main thing is that for ETHCALL, one of the things you can do is because you can target ETHC call to a specific block in the history, which obviously you can't do for the transaction submission.

255
00:37:19.100 --> 00:37:40.749
Felix (Geth): then it's kind of that there's gonna be some of these, like, history or state-related errors as well. We're not really touching these in this initial proposal, but at some point, there will have to be a list for these, like, errors related to the state, where there's gonna be something like the client is missing the state to execute this call, or the client is missing the history to execute this call, things like that.

256
00:37:40.770 --> 00:37:53.149
Felix (Geth): And we don't really… there's… none of that exists right now. I don't even think we have really standardized it within the… like, I don't know what kind of error we return right now for that kind of stuff. But yeah, that would be, like, the stretch goal.

257
00:37:53.220 --> 00:37:59.629
Felix (Geth): So, in general, I still think it's good to start with transaction submission because it has the most errors, just…

258
00:38:01.490 --> 00:38:02.790
Łukasz Rozmej: Yeah, I'm fine with that.

259
00:38:06.870 --> 00:38:09.080
Simsonraj Easvarasakthi: Awesome. Thanks for the feedback.

260
00:38:12.080 --> 00:38:15.989
Mercy Boma Naps-Nkari: Okay, I guess that's all for the error codes. Kira, you wanted to say something?

261
00:38:16.460 --> 00:38:29.129
keri: Yeah, so I'm just curious, like, how… what is the best way to, like, make changes in this? Is it that, we, like, put the RPC methods through the EAT process?

262
00:38:29.170 --> 00:38:39.599
keri: and go that route? Is it, that we merge changes into the execution APIs, and clients start failing on,

263
00:38:39.890 --> 00:38:41.090
keri: Hive.

264
00:38:41.640 --> 00:38:51.559
keri: like, what's easiest for client devs? One thing I've been thinking about is, like, versioning for execution APIs, and so, like, we can announce when we're gonna make changes.

265
00:38:51.920 --> 00:38:59.519
keri: But I'm curious from, like, a client dev perspective, what's the best way to, like, make changes.

266
00:39:00.200 --> 00:39:01.939
keri: Or get input, even.

267
00:39:11.440 --> 00:39:29.479
Felix (Geth): I mean, I can give a quick comment on this. We discussed also before, this… turning it… turning the changes into EIPs has been tried, but… and there are some EAPs, in fact, that are still open in the interface category for… for these changes. The problem is just that,

268
00:39:29.820 --> 00:39:34.899
Felix (Geth): The interface category is very overloaded with some stuff that…

269
00:39:35.310 --> 00:39:39.550
Felix (Geth): Nobody really understands, or it's, like, because it's coming from a…

270
00:39:41.300 --> 00:39:52.600
Felix (Geth): coming from, like, a different universe, like, for example, they are trying to standardize the wallet internal RPCs there, or they're trying to standardize, like, for another chain, or all these things. This is not…

271
00:39:53.640 --> 00:40:03.369
Felix (Geth): there's a lot of noise there. And for just specifying, like, changes to the execution API as it is implemented by the Ethereum nodes.

272
00:40:04.140 --> 00:40:20.929
Felix (Geth): it will just kind of be lost in this, because if we now start to merge just the EIPs, which are related to the nodes, then everyone's going to be asking, like, what about the other EIPs, or like, it's… it's kind of hard to draw the line. Once we… like, I think for now, the consensus has just been that

273
00:40:21.650 --> 00:40:34.750
Felix (Geth): everyone kind of gave up on the interface category. I know people are doing some stuff there, but, like, for the clients, it's never really mattered, because once they start looking there, it's gonna be kind of wild, like, what… which of these proposals are…

274
00:40:34.960 --> 00:40:38.449
Felix (Geth): You know, should be implemented, which ones should not be implemented.

275
00:40:39.900 --> 00:40:42.190
Felix (Geth): It's kind of impossible to decide it, yeah?

276
00:40:52.530 --> 00:41:03.819
Justin Florentine (Besu): I think the silence here is very telling. This is kind of the big question that this subdomain of Ethereum has struggled with in the past, so… I'm glad we're at least thinking about it.

277
00:41:08.420 --> 00:41:14.140
Felix (Geth): Like, I can… I can give an example, like, for example, there's a… there's… there are eaps such as EIP6…

278
00:41:15.350 --> 00:41:18.769
Felix (Geth): 695, like, this is a very old EIP.

279
00:41:19.110 --> 00:41:20.679
Felix (Geth): And this EIP?

280
00:41:21.410 --> 00:41:34.419
Felix (Geth): for example, this added the, the, like, chain ID method. So this one, if you submitted this today, like, this would be probably considered one of the, like, acceptable ones, right? So, I mean, yeah, this… as an Ethereum client.

281
00:41:34.420 --> 00:41:48.960
Felix (Geth): you can very easily implement this method. And in fact, it is implemented in all the clients. It's part of the spec now. Like, this is one of these examples where someone took the effort, they put in the EIP a long time ago, it was agreed that this is a good direction, it was put in the spec, and so on. But…

282
00:41:49.290 --> 00:41:55.799
Felix (Geth): this sits next in the same list. You have things such as, I don't know, like an EIP that's saying.

283
00:41:56.740 --> 00:42:12.809
Felix (Geth): you know, the window EVM providers object, or something like that. This is not an EIP, like, this would be EIP57449. So, this one doesn't really concern the Ethereum clients at all. So now it's just kind of the question.

284
00:42:12.810 --> 00:42:20.779
Felix (Geth): because with RPC, it's always so open-ended, who implements what, or, like, where does this even apply?

285
00:42:21.260 --> 00:42:22.610
Felix (Geth): like, which…

286
00:42:22.650 --> 00:42:35.040
Felix (Geth): I mean, obviously, the first EIP, right, 695, we could have brought that up on ACD, but, like, the second one, maybe it was brought up on ACD at one point, like, when it was discussed? I have no idea how this, you know.

287
00:42:35.040 --> 00:42:47.510
Felix (Geth): when this was merged, or when this was turned final, or who should even implement that. And there are some other ones that kind of got left by the wayside that are in a similar direction, but they didn't really make it, so it's…

288
00:42:47.530 --> 00:42:57.290
Felix (Geth): not… like, with the EAPs, it has some downsides. If we start using EAPs for this, then we first have to kind of clear up the backlog of the existing EAPs that are kind of…

289
00:42:58.560 --> 00:43:11.549
Felix (Geth): I mean, people are still proposing EAPS there, and there are some in last call. I guess one of them has been in last call since 2021. There are two of them which are in last call, one since March, the other one since…

290
00:43:12.810 --> 00:43:16.160
Felix (Geth): Or, like, until March, and then the other one until…

291
00:43:16.520 --> 00:43:24.479
Felix (Geth): like, ETHConfig was kind of speed… kind of speedrun all of this process, I guess, because it was deemed important, so…

292
00:43:25.140 --> 00:43:26.720
Felix (Geth): It's a bit of a mess.

293
00:43:37.010 --> 00:43:40.830
keri: Yeah, I feel like, I don't know, I think…

294
00:43:41.840 --> 00:43:43.939
keri: There needs to be some sort of process.

295
00:43:44.140 --> 00:43:47.739
keri: You know, rather than just, like, YOLO merging.

296
00:43:49.880 --> 00:43:50.650
Felix (Geth): Yo.

297
00:43:50.680 --> 00:44:04.799
Felix (Geth): I mean, definitely, it would be good, and that's why I was also, like, for me, the ideal case would have been that if we somehow manage to ever get to, like, this is also one of the reasons why we didn't expand

298
00:44:04.800 --> 00:44:14.169
Felix (Geth): the tests so much initially, because I kind of was hoping that at one point, we will finally get to…

299
00:44:14.390 --> 00:44:29.480
Felix (Geth): The exciting moment where several clients are passing 100% of the tests, and then once we have that stable base, we can, like, very carefully extend it and, like, see what else we can pull in under the standardization effort, and just kind of trying to do it a bit in lockstep.

300
00:44:29.530 --> 00:44:37.100
Felix (Geth): But it was just very hard to, like, get to this initial passing state. And I feel we're closer to it than ever now.

301
00:44:37.120 --> 00:44:51.909
Felix (Geth): with the RPC Compet test, we have very few failing tests for some of the clients, so, I mean, if we can put a little bit of extra work in to, for example, resolve the final differences, like, for the total difficulty with Nethermine and so on, and then maybe for some of these, like.

302
00:44:52.120 --> 00:45:02.620
Felix (Geth): error codes for the unimportant cases, then I think we can be very close. And if we ever get to the situation where, you know, it's the default to have the green tests.

303
00:45:02.620 --> 00:45:19.739
Felix (Geth): it's gonna be quite easy to say, you know what, guys, we added 5 more tests, can you please check them? Can we try to, like, get this bit standardized, that bit standardized? It's just that we never really got to this sort of initial moment, so we're still kind of trying to play catch-up on the existing issues that are years old.

304
00:45:23.480 --> 00:45:24.970
keri: Yeah, I think that makes sense.

305
00:45:27.070 --> 00:45:30.940
keri: Alright, I can keep bugging clients.

306
00:45:32.290 --> 00:45:40.110
keri: And sometimes it's on the execution APIs, too, that need to be updated, but… Cool.

307
00:45:48.440 --> 00:45:51.489
Mercy Boma Naps-Nkari: So, is… I don't know if there's any other thing on this end?

308
00:45:58.300 --> 00:46:04.680
Mercy Boma Naps-Nkari: Okay, the floor is open for an open discussion if you have any other thing pending we want to discuss on this.

309
00:46:13.500 --> 00:46:29.910
Felix (Geth): Yeah, Barnabas, I can quickly give an update on that. So, we have been… yeah, this is maybe… I don't know if this is, like, depressing or exciting, but, like, on the Geth side, we have been working this year on a proposal for, like, some kind of minimal REST API,

310
00:46:30.170 --> 00:46:33.040
Felix (Geth): This is coming as an…

311
00:46:33.730 --> 00:46:44.139
Felix (Geth): kind of reaction to the frustrations that we felt, especially last year with the JSON RPC. So for the REST stuff, we were just thinking that we'll basically have a brand new proposal.

312
00:46:44.660 --> 00:46:52.959
Felix (Geth): Oh, wow, it got the downvote. So we… we've been thinking that it might be easier to get started on, like, a very small

313
00:46:53.070 --> 00:46:56.879
Felix (Geth): proposal that basically has a…

314
00:46:57.290 --> 00:47:10.639
Felix (Geth): minimal and fully trustless API for, like, the core functionality offered by the nodes. And if we could have this, then it would maybe somehow be possible to implement the JSON RPC interface on top.

315
00:47:10.640 --> 00:47:22.700
Felix (Geth): And also, since it would be a new API, we could avoid some of the problems of the existing API, notably this kind of scope creep and the overlap between the wallets and providers and different chains and so on.

316
00:47:22.700 --> 00:47:35.410
Felix (Geth): basically start something new. The downside with the rest is that, since the JSON RPC is kind of, sort of an industry standard in the Web3 space, it's gonna be a bit hard to convince anyone to use it.

317
00:47:36.510 --> 00:47:44.819
Felix (Geth): So, yeah, I mean… We don't really… we're still working on this, we have the proposal, and

318
00:47:44.860 --> 00:47:59.860
Felix (Geth): we have… we've just started working on a demo implementation of it, so we can at least have something to show, and I guess it will be presented, if you guys are coming to DevConnect, we will try to present more about it at the ETH Client Summit at DevConnect.

319
00:48:00.270 --> 00:48:08.600
Felix (Geth): So that's where we were hoping to kind of introduce this, and you know, start off a bit of a discussion between the nodes on the, like.

320
00:48:08.930 --> 00:48:10.950
Felix (Geth): Available features, and so on.

321
00:48:24.380 --> 00:48:30.529
Mercy Boma Naps-Nkari: So, Zane, I don't know if you have any other thing to say. Zane is from the OpenRPC team.

322
00:48:30.530 --> 00:48:36.599
Zane Starr: Actually, sorry, I'm joining really late, so I actually don't know what…

323
00:48:36.600 --> 00:48:37.320
Mercy Boma Naps-Nkari: Okay.

324
00:48:37.320 --> 00:48:39.090
Zane Starr: fed.

325
00:48:39.090 --> 00:48:41.730
Simsonraj Easvarasakthi: Jane, I can add one thing.

326
00:48:41.800 --> 00:48:44.340
Mercy Boma Naps-Nkari: For a little bit of context, quickly.

327
00:48:44.570 --> 00:48:48.739
Simsonraj Easvarasakthi: Felix was asking,

328
00:48:49.280 --> 00:48:58.290
Simsonraj Easvarasakthi: About the extension specifications, so if you want to give, like, a couple of lines about extension specifications that you have cook up, yeah.

329
00:48:58.290 --> 00:49:10.270
Zane Starr: Yeah, sure, that's… that's easy enough. So, so OpenRPC has an extension specification, which basically allows you to define extensions to the spec for things that…

330
00:49:10.300 --> 00:49:21.529
Zane Starr: are not officially a part of the spec, but may be on the roadmap to be a full member. So those are things that, like, sort of provide an upgrade path

331
00:49:21.930 --> 00:49:27.900
Zane Starr: for upgrading OpenRPC in a sustainable way, as well as allowing for customizations.

332
00:49:28.040 --> 00:49:31.070
Zane Starr: That may be application-specific.

333
00:49:31.870 --> 00:49:36.310
Zane Starr: Other high-level things I can say about the extension spec is that

334
00:49:36.470 --> 00:49:45.890
Zane Starr: You can include an extension in the spec itself, and so other people will be able to read and consume this and validate against it.

335
00:49:46.190 --> 00:49:52.339
Zane Starr: So, for instance, with, like, sort of error codes, or error groups.

336
00:49:52.610 --> 00:50:03.549
Zane Starr: You'll be able to, like, pull that down as a person that's just, like, say, writing a spec against something else.

337
00:50:03.720 --> 00:50:06.320
Zane Starr: And then be able to define, like.

338
00:50:06.450 --> 00:50:14.729
Zane Starr: Oh, cool, error groups. I can put X dash error groups and these locations, and then everything else will sort of…

339
00:50:14.840 --> 00:50:20.500
Zane Starr: Fall out from there, depending on what the consuming system, like, renders or doesn't render.

340
00:50:20.680 --> 00:50:25.149
Zane Starr: Over things about the extension SPAC,

341
00:50:25.720 --> 00:50:34.729
Zane Starr: Extensions back sort of changes or improvements. So, initially, we capped the extensions back to be…

342
00:50:34.890 --> 00:50:41.900
Zane Starr: Tied to, the actual, sort of, specification objects, so, like, method object.

343
00:50:42.190 --> 00:50:51.520
Zane Starr: or it could be, like, errors, or things like that. But we started to use JSON pointers, instead, so you could be even more specific.

344
00:50:51.640 --> 00:50:54.110
Zane Starr: Okay, Mercy, go ahead.

345
00:50:55.910 --> 00:51:06.559
Mercy Boma Naps-Nkari: No, so this is actually out of context. I wanted to ask you about the… any updates on the documentation font. You did mention about, some improvements in that regard.

346
00:51:07.190 --> 00:51:23.119
Zane Starr: Yeah, so, OpenRPC Team has been, rethinking the way that we do documentation. So, the way that it was a long time ago, it was, like, soda, the state of the art, with Gatsby, like, 4 or 5 years ago.

347
00:51:23.600 --> 00:51:26.060
Zane Starr: But now we kind of want to move…

348
00:51:26.390 --> 00:51:30.690
Zane Starr: back into this DocuSource direction, but even more generic than that.

349
00:51:30.830 --> 00:51:46.259
Zane Starr: So, our thinking is that we're going to create sort of a generic base that produces the OpenRPC in Markdown, and then consuming projects can then, depending on how they want to re-display that, display that in Markdown.

350
00:51:46.540 --> 00:51:57.389
Zane Starr: So for us, it's gonna be almost slightly two-tiered. So, one is generating a sort of markdown generator, which is gonna be…

351
00:51:57.400 --> 00:52:07.760
Zane Starr: almost no changes from your perspective. The only difference is, is that now the OpenRPC won't be an opaque contribution to

352
00:52:07.910 --> 00:52:26.980
Zane Starr: the repo, but it will be generated code. And then the consuming DocuSource plugin will then have nice sidebars, curlability, and you'll be able to drill into individual methods. And you'll also be able to do, sort of the sorting by type.

353
00:52:27.640 --> 00:52:35.700
Zane Starr: which has to do with document tags. So, one of the problems that we kind of identified with the execution APIs is that

354
00:52:36.890 --> 00:52:40.590
Zane Starr: You don't exactly know where a method comes from, from what fork.

355
00:52:40.870 --> 00:52:47.289
Zane Starr: So, being able to tag this, and then the drill down, like, what's coming up in Glamsterdam, or what's coming up in…

356
00:52:49.630 --> 00:53:05.459
Zane Starr: foo bar fork is really useful, so we're gonna try and bring some of that versioning nuance into the docs. So we're just looking for a great baller experience, and if people have, like, other sort of UX…

357
00:53:06.140 --> 00:53:13.510
Zane Starr: leaning improvements and things like that, just let us know. You can drop us a line either directly in our Discord.

358
00:53:13.710 --> 00:53:19.090
Zane Starr: Or you can just at me in the JSON RPC API.

359
00:53:19.280 --> 00:53:26.690
Zane Starr: contacts. But that's just, like, a little bit of where we're going, and then the sort of longer tail of that is…

360
00:53:27.180 --> 00:53:34.290
Zane Starr: thinking about errors and negative testing within the spec, which is kind of where Sims is talking about.

361
00:53:34.590 --> 00:53:45.970
Zane Starr: But we were thinking about doing something a little bit smaller to just, like, get us started. So just taking the standard errors that we have right now, and then making that negative test work through,

362
00:53:46.530 --> 00:53:56.440
Zane Starr: the, light clients' light coverage tool, etc. And we also have some additional coverage tools that aren't currently being utilized.

363
00:53:57.110 --> 00:54:02.640
Zane Starr: by EF, but… Could be utilized and would be, like, probably super beneficial.

364
00:54:04.010 --> 00:54:06.709
Zane Starr: Okay, so, I've kind of rambled.

365
00:54:06.960 --> 00:54:11.159
Zane Starr: I got in there. Let me know if anyone has any questions.

366
00:54:11.360 --> 00:54:14.839
Zane Starr: Yeah, and happy to talk about it.

367
00:54:24.060 --> 00:54:34.579
Mercy Boma Naps-Nkari: So, okay, thank you, Zane. Thank you, everyone. I think this should be the last point of discussion, or do we have one last thing to talk about, or we should call it…

368
00:54:35.280 --> 00:54:36.350
Mercy Boma Naps-Nkari: for the day.

369
00:54:39.020 --> 00:54:45.299
Mercy Boma Naps-Nkari: And also, I just wanted to say, I don't know if Kira is still here, about some PRs on the…

370
00:54:45.640 --> 00:54:58.750
Mercy Boma Naps-Nkari: repo itself, we need to… if Lifeline can be made available to look at some of the payers, and also, especially the ones that has to do with typos in the docs itself, needs to be merged.

371
00:55:01.510 --> 00:55:03.670
keri: I can look at those if you want to send them to me.

372
00:55:04.940 --> 00:55:22.470
Mercy Boma Naps-Nkari: Okay, okay. Thank you very much. Thank you all for joining today's call, and I'll also urge us to join us next week. Our calls happen biweekly, so this would be, a great point of contact for us to have discussions like this and actually get things moving, because we kind of, like.

373
00:55:22.890 --> 00:55:35.969
Mercy Boma Naps-Nkari: On a more slow pace. So if you have these discussions and we… we are more… we get clarity on the things we need to do and act on, it will help us move faster and then achieve more, tangible results.

374
00:55:37.800 --> 00:55:40.939
Mercy Boma Naps-Nkari: So, thank you, everyone. Thank you for joining. Bye.

375
00:55:41.900 --> 00:55:43.220
Zane Starr: Thanks. Bye.

376
00:55:44.520 --> 00:55:45.320
Simsonraj Easvarasakthi: Bye-bye.

