WEBVTT

1
00:02:49.760 --> 00:02:51.060
Akash | ECH: And mercy.

2
00:02:55.550 --> 00:02:56.330
Mercy Boma Naps-Nkari: Hello.

3
00:02:58.870 --> 00:03:02.830
Akash | ECH: I'm helping with the stream today, so please let me know whenever you are ready.

4
00:03:03.420 --> 00:03:04.630
Mercy Boma Naps-Nkari: Okay, thank you.

5
00:06:38.550 --> 00:06:39.470
Mercy Boma Naps-Nkari: Hello.

6
00:06:42.750 --> 00:06:43.650
Simsonraj Easvarasakthi: Hey, Mercy.

7
00:06:44.860 --> 00:06:54.420
Mercy Boma Naps-Nkari: Thank you for joining us. I think we should just wait a little… a little while, but I'm trying to tag, some people on the chat.

8
00:06:56.310 --> 00:06:57.449
Simsonraj Easvarasakthi: Sounds good, thank you.

9
00:07:55.960 --> 00:07:56.810
Mercy Boma Naps-Nkari: Hey, Kira.

10
00:07:58.950 --> 00:07:59.730
keri: Hello!

11
00:08:01.460 --> 00:08:06.890
Mercy Boma Naps-Nkari: So I don't know, is it okay for us to start now, or we should wait, a little bit more?

12
00:08:11.700 --> 00:08:16.030
keri: I was hoping to have some client devs. Come.

13
00:08:16.290 --> 00:08:22.749
keri: We have an EF internal meeting that conflicts, and I don't know… so I don't know if Felix is gonna go to that, or…

14
00:08:23.250 --> 00:08:30.670
keri: Here, what, I don't have the agenda pulled up. What's the first, item?

15
00:08:42.010 --> 00:08:44.399
Mercy Boma Naps-Nkari: Okay, but what do you suggest?

16
00:08:45.860 --> 00:08:53.319
keri: Well, I was gonna say, if we don't need client devs for the first item, let's get started. But if we do, maybe we should give it a couple more minutes.

17
00:08:54.770 --> 00:09:00.359
Mercy Boma Naps-Nkari: Yeah, for the first item on the agenda, we need, a client of.

18
00:09:00.360 --> 00:09:02.729
keri: He was actually raised by one of them, so…

19
00:09:02.760 --> 00:09:04.980
Mercy Boma Naps-Nkari: I'm not sure if he's going to be here or not.

20
00:09:06.020 --> 00:09:07.390
Mercy Boma Naps-Nkari: Gladi dug him.

21
00:09:10.170 --> 00:09:13.649
keri: Let's give it maybe one more minute, and we can go from there.

22
00:09:14.380 --> 00:09:16.049
Mercy Boma Naps-Nkari: Okay, thank you.

23
00:10:29.130 --> 00:10:32.920
Mercy Boma Naps-Nkari: Okay, I think we can start. Akash, you can start recording.

24
00:10:33.520 --> 00:10:35.230
Akash | ECH: Yeah, we are live.

25
00:10:36.160 --> 00:10:47.119
Mercy Boma Naps-Nkari: Okay so good afternoon, everyone. Welcome to RFPC Standard Call 15. Today's date being October 27th, 2025.

26
00:10:47.440 --> 00:10:56.569
Mercy Boma Naps-Nkari: Currently, we have 3 things on our agenda, and whatever the, again, we… we want to discuss that is not yet on the agenda.

27
00:10:56.690 --> 00:11:04.130
Mercy Boma Naps-Nkari: The first thing will be handling of, the error handling for a block not found, which was raised by Mark.

28
00:11:04.340 --> 00:11:11.069
Mercy Boma Naps-Nkari: Which, I'm not sure he's here, but do we have any impute on that? I shared a link to the issue.

29
00:11:12.500 --> 00:11:13.789
Mercy Boma Naps-Nkari: on our chat.

30
00:11:15.180 --> 00:11:17.860
Mercy Boma Naps-Nkari: So I'm not sure if we have anything, if…

31
00:11:18.880 --> 00:11:25.249
Mercy Boma Naps-Nkari: will have any contribution in respect to this, but Mark is not here to show more light on this, so I'm not…

32
00:11:32.200 --> 00:11:35.189
Felix (Geth): Hey, sorry, so I think it might help if we…

33
00:11:36.070 --> 00:11:42.270
Felix (Geth): discuss it, in a bit more detail. So this is about, specific tests, right?

34
00:11:44.420 --> 00:11:45.310
Mercy Boma Naps-Nkari: Yes.

35
00:11:47.480 --> 00:11:51.180
Felix (Geth): Yeah, so specifically, it's about the get lock receipts.

36
00:11:54.370 --> 00:11:55.190
Felix (Geth): Yeah.

37
00:11:57.410 --> 00:12:00.190
Felix (Geth): So… Seems that…

38
00:12:01.300 --> 00:12:09.589
Felix (Geth): Can we go about the… what is the specific question? So in the… the pull request just changes BISU to return null instead of…

39
00:12:09.810 --> 00:12:11.450
Felix (Geth): Returning an error.

40
00:12:23.140 --> 00:12:25.080
Felix (Geth): So I guess the question is…

41
00:12:26.110 --> 00:12:31.630
Felix (Geth): If that is a valid behavior, or is it… should we change something, or…

42
00:12:33.640 --> 00:12:41.490
keri: I think the… it looks to me, like, from the pull request, that the problem is that, fixing this, like, get blocked receipts

43
00:12:41.950 --> 00:12:47.389
keri: 5 tests break the simulate V1.

44
00:13:00.830 --> 00:13:20.749
Mercy Boma Naps-Nkari: I'm not sure about the details about it, but I… from the, the pull request, it was… they mentioned that it's… there is an inconsistency in error handling behavior, like, the expectation, so what is… the output is not what is expected. The entire details is what I'm not sure about, because I've not, like, looked into it myself.

45
00:13:21.190 --> 00:13:26.090
Mercy Boma Naps-Nkari: But… If anyone has an idea, or…

46
00:13:26.230 --> 00:13:32.360
Mercy Boma Naps-Nkari: Can help us understand this much more better, or a better way to go about this than the floor is there.

47
00:13:37.160 --> 00:13:42.959
Felix (Geth): Yeah, so the way I see it is that, basically, they… they… they are changing…

48
00:13:43.430 --> 00:13:47.209
Felix (Geth): it to fix the tests, but somehow it…

49
00:13:51.330 --> 00:13:52.540
Felix (Geth): Yeah, I mean…

50
00:13:52.690 --> 00:14:08.299
Felix (Geth): I don't really see why they're not… why they are not… so it breaks the test ETH SimulateV1 empty with block num set plus 1, or something like that, because ETSimulate V1 seems to have the different handling. So I don't really understand. I mean, it just means they have to implement it different for the eSimulate.

51
00:14:10.020 --> 00:14:16.819
Felix (Geth): I mean, here he's saying that they have this abstract class that is used by several RPCs, so yeah, if they…

52
00:14:18.010 --> 00:14:23.369
Felix (Geth): If they change it in this abstract class, it will affect, but this just sounds like a BSU problem to me.

53
00:14:23.470 --> 00:14:27.359
Felix (Geth): Like, yeah, I mean, they have to fix it, but it's… It's not…

54
00:14:33.800 --> 00:14:44.939
Felix (Geth): I mean, ultimately, the defined behavior in the spec is that if the block is requested, but the block is not found, then it's supposed to return null. And the not found is not an error condition.

55
00:14:45.850 --> 00:14:53.060
Felix (Geth): That's just how we always have defined it in the specification, so… and it's how the other methods handle it as well.

56
00:14:54.460 --> 00:14:58.100
Zane Starr | OpenRPC: And just for clarity, does that mean that…

57
00:14:58.350 --> 00:15:07.580
Zane Starr | OpenRPC: Okay, there's an expectation that a block should be found, and it's not found, and then it throws an error? Or is it just, like.

58
00:15:08.030 --> 00:15:08.960
Zane Starr | OpenRPC: Yeah.

59
00:15:09.600 --> 00:15:20.989
Felix (Geth): I mean, there's a difference between the block not existing and there being an error accessing the database, for example. So if there's an error while trying to load the block from the database, then that is an error.

60
00:15:21.090 --> 00:15:26.680
Felix (Geth): But just… the basic idea behind returning null was always that

61
00:15:27.170 --> 00:15:39.190
Felix (Geth): When you're trying to access, for example, a block number that's higher than the current one, shouldn't necessarily be an error, because you just cannot know if this block is, like, existing or not.

62
00:15:39.310 --> 00:15:43.910
Felix (Geth): And, I mean, it will exist in the future, so it's a bit of a different kind of error from…

63
00:15:44.820 --> 00:15:48.840
Felix (Geth): That was always the whole idea behind this, basically, that you…

64
00:15:49.010 --> 00:15:58.969
Felix (Geth): you… when we can tell you're trying to do something impossible, we will tell you with an error. But if we can't, then…

65
00:15:59.360 --> 00:16:02.879
Felix (Geth): We shouldn't define it as an error, per se.

66
00:16:04.510 --> 00:16:18.469
Felix (Geth): So it's more like that. Or, if we know it doesn't exist, then it's also not an error, right? Like, that's the other thing. For example, there's a bit of a thing, like, we have the same behavior, for example, when you're trying to access a transaction by its hash. So…

67
00:16:19.410 --> 00:16:23.180
Felix (Geth): If… if the transaction doesn't exist, we return null.

68
00:16:26.860 --> 00:16:33.439
Felix (Geth): But… Yeah, it's just… that's just how we always had it in this API.

69
00:16:36.040 --> 00:16:39.830
Mercy Boma Naps-Nkari: Okay, so, according to what he said, he said,

70
00:16:41.250 --> 00:16:48.820
Mercy Boma Naps-Nkari: It returns… the base rule returns an error, but it's… this, but the test is expecting a success response with no result.

71
00:16:53.220 --> 00:16:58.610
Felix (Geth): Yes, exactly. So when it's not found, then it's supposed to return null as the result, yes.

72
00:16:58.770 --> 00:17:06.420
Felix (Geth): So, we can check it, actually, in Hive. So, we… I see they are failing quite a few tests. But, for example,

73
00:17:07.599 --> 00:17:15.540
Felix (Geth): Let me try to see. So they have this get block receipts not found. Yeah, so they return error code minus 32,000 for this case.

74
00:17:15.690 --> 00:17:16.960
Felix (Geth): And I guess it's…

75
00:17:17.550 --> 00:17:22.940
Felix (Geth): Do they have it in another case? I'm checking the test for BISO right now to see which ones.

76
00:17:36.780 --> 00:17:37.750
Felix (Geth): No.

77
00:17:41.910 --> 00:17:52.189
Felix (Geth): No, it's only this one. I mean, it's… it's basically as he was writing in the PR description, it will fix 3 hive tests or something, but not more of them.

78
00:17:52.780 --> 00:17:57.170
Felix (Geth): Yeah, just, like, get block receipts empty, future, or not found.

79
00:17:57.560 --> 00:18:01.469
Felix (Geth): Yeah, I'm less sure about this empty test, what this is even about.

80
00:18:03.540 --> 00:18:04.640
Felix (Geth): Excuse me.

81
00:18:15.390 --> 00:18:30.630
Felix (Geth): So, okay. So in this getBlockReceiptsEmpty test, it accesses get blockReceipts with the hash value that is all zeros. So the whole idea is that basically it's using an invalid block hash that we know doesn't exist.

82
00:18:31.320 --> 00:18:32.210
Felix (Geth): Yo.

83
00:18:40.970 --> 00:18:47.720
Felix (Geth): Notably, they do return null already for, for example, get blocked by number or get blocked by hash.

84
00:18:53.130 --> 00:18:58.459
Felix (Geth): And they also… return null for the get transaction by hash when it's not found.

85
00:19:03.840 --> 00:19:06.249
Mercy Boma Naps-Nkari: Sorry, I'm not quite sure if I understand this, so…

86
00:19:06.450 --> 00:19:16.089
Mercy Boma Naps-Nkari: Are we saying that it's best suit problem, or the specs and the hive test are inconsistent in terms of handling errors and what is expected?

87
00:19:16.920 --> 00:19:31.679
Felix (Geth): So I think this is a Bisu problem, because that's what I think, because the Bisu itself is also a bit inconsistent. The spec is pretty clear, and all the other clients adhere to it in this case. So it's just that Bisu doesn't.

88
00:19:31.980 --> 00:19:39.650
Felix (Geth): And in fixing this, they seem to be creating some issue with the eSimulate, but this also I would regard as, like, a Bisu issue.

89
00:19:39.890 --> 00:19:48.459
Felix (Geth): that they… basically, fixing it on their side seems to have some effect on the eSimulate V1, but then I guess they just have to fix that one as well.

90
00:19:49.630 --> 00:19:55.480
Felix (Geth): I have no idea what he wanted to discuss about it. I think maybe he wanted to bring up, like, changing simulate?

91
00:19:55.980 --> 00:20:00.120
Felix (Geth): V1 to have the similar behavior or something like that? I don't know.

92
00:20:01.270 --> 00:20:05.369
keri: So it looks like, to me, that the, the simulate

93
00:20:05.740 --> 00:20:11.340
keri: Like, if you look at eSimulate empty with block numset, Plus one.

94
00:20:11.680 --> 00:20:15.349
keri: It's a future block, and it's throwing an error.

95
00:20:16.750 --> 00:20:20.500
keri: a block not found error. Like, should that return null?

96
00:20:21.480 --> 00:20:26.939
keri: Or should that throw an error? Is it… are you putting that into, like, the impossible bucket?

97
00:20:27.180 --> 00:20:29.749
keri: Like, this is impossible because it's in the future.

98
00:20:30.550 --> 00:20:32.099
Felix (Geth): I mean, you could say…

99
00:20:32.490 --> 00:20:41.969
Felix (Geth): I mean, this is weird. I mean, this is the same question, would, for example, apply for the ETH call, right? And I think we're missing a test there, so we would have to create a test that

100
00:20:42.120 --> 00:20:47.849
Felix (Geth): runs ETHC call with a future block, and we have to decide about the behavior of this.

101
00:20:48.240 --> 00:20:54.100
Felix (Geth): The whole idea with returning null is that it's supposed to return null when…

102
00:20:54.880 --> 00:21:04.839
Felix (Geth): the item which you are seeking is not found. So it's like, when you do get blocked by number with a future number, then

103
00:21:05.020 --> 00:21:09.089
Felix (Geth): And the block doesn't exist in the node, it should return null.

104
00:21:11.210 --> 00:21:18.690
Felix (Geth): But if you're trying to execute an ETH call on a block that doesn't exist, probably that should be an error.

105
00:21:19.760 --> 00:21:24.319
Felix (Geth): Do you understand the distinction between these two cases, or is it weird, or…

106
00:21:25.040 --> 00:21:25.969
Felix (Geth): I don't know.

107
00:21:27.810 --> 00:21:33.859
Zane Starr | OpenRPC: So, to recap from the outside, And saying you're…

108
00:21:34.060 --> 00:21:39.089
Zane Starr | OpenRPC: Saying, like, okay, if it's a normal, like, everything is well-formed.

109
00:21:39.520 --> 00:21:49.310
Zane Starr | OpenRPC: And you don't find this block, and you, like, even if it's in the future, then that should return null. But if for some reason

110
00:21:49.720 --> 00:21:54.069
Zane Starr | OpenRPC: It's like… I don't know, a malformed block number?

111
00:21:54.200 --> 00:21:57.610
Zane Starr | OpenRPC: It should return an error.

112
00:21:57.610 --> 00:21:58.320
Felix (Geth): Yes.

113
00:21:58.460 --> 00:21:59.320
Felix (Geth): Yes.

114
00:21:59.490 --> 00:22:01.339
Felix (Geth): But also, it's, it's like…

115
00:22:01.420 --> 00:22:11.989
Felix (Geth): is a bit like the return null is a bit like the error 404 in HTTP. It's like, if you… you wouldn't… you'd only give the error 404 in HTTP

116
00:22:12.040 --> 00:22:28.860
Felix (Geth): if the exact resource which is being requested doesn't exist. But if there's a problem, like, if there is an internal problem accessing the resource, like a problem in the server or something, then it's not gonna return 404. It's going to return something else.

117
00:22:29.450 --> 00:22:44.429
Felix (Geth): like, some other error. So, in some ways, this return null thing is a bit like returning the 404 in HTTP. So, yeah, I mean, in the future, we could define an error code that is specifically about, like, this condition, that it's not found.

118
00:22:45.030 --> 00:22:47.870
Felix (Geth): The thing you were looking for is not found.

119
00:22:48.070 --> 00:22:57.169
Felix (Geth): But right now, we don't have this defined error code at all, so we are… and we have been using this return null convention since the beginning of the API.

120
00:22:57.410 --> 00:23:01.350
Felix (Geth): So, I feel like… I mean, yeah, we can change it in the future, maybe.

121
00:23:01.350 --> 00:23:02.900
Łukasz Rozmej: Don't we have something…

122
00:23:06.420 --> 00:23:09.360
Łukasz Rozmej: Don't have done that for, like, when we're…

123
00:23:09.930 --> 00:23:13.820
Łukasz Rozmej: block externally, like, we've not found.

124
00:23:18.390 --> 00:23:20.060
Łukasz Rozmej: microphone fault.

125
00:23:21.950 --> 00:23:24.670
Łukasz Rozmej: I'm not sure, because not…

126
00:23:25.990 --> 00:23:26.820
Felix (Geth): I'm sorry, Wukai.

127
00:23:26.820 --> 00:23:27.670
Mercy Boma Naps-Nkari: Got some trouble here.

128
00:23:27.670 --> 00:23:28.779
Felix (Geth): understanding you.

129
00:23:28.780 --> 00:23:31.049
Mercy Boma Naps-Nkari: Is it just me, or I can't hear him?

130
00:23:33.830 --> 00:23:35.669
Felix (Geth): I couldn't understand him either.

131
00:24:10.850 --> 00:24:16.089
Mercy Boma Naps-Nkari: Okay, I think we just wait for him to join or fix his mic. Felixar, you were saying something before you got caught up.

132
00:24:16.510 --> 00:24:18.349
Felix (Geth): No, not really. It's okay.

133
00:24:19.720 --> 00:24:32.030
Felix (Geth): I just tried to explain again, like, this difference between the… I think this could be one action item for this. Basically, we need to create a test that tries each call with some future block or something.

134
00:24:32.270 --> 00:24:36.590
Felix (Geth): I think that's… that's possible. We don't have that now, I think. Let me see.

135
00:24:37.490 --> 00:24:39.200
Łukasz Rozmej: Can you hear me now, guys?

136
00:24:41.820 --> 00:24:42.880
keri: Yeah, that's better.

137
00:24:44.070 --> 00:24:51.960
Łukasz Rozmej: Okay, my point was, I think we have something like, something similar to resource not found, which we use for…

138
00:24:53.880 --> 00:24:58.149
Łukasz Rozmej: For example, So there is an error code that could be used here.

139
00:24:59.800 --> 00:25:04.679
Łukasz Rozmej: If I'm not mistaken. But I'm not at the computer at the moment, so not entirely sure.

140
00:25:07.170 --> 00:25:19.859
Felix (Geth): Yeah, I mean, we don't really… at the moment, there are no really defined error codes. I mean, we will be discussing the error code proposal later. We have some other error codes, but we don't have a general error code for not found.

141
00:25:20.150 --> 00:25:26.029
Felix (Geth): It doesn't exist so far. Yeah, it would have to be added, and then we would have to define it, and for…

142
00:25:26.420 --> 00:25:32.810
Felix (Geth): Check… change all the servers, and change the spec, and change the tests, and… so we don't have that now.

143
00:25:32.910 --> 00:25:35.550
Felix (Geth): Basically, now, right now, for most

144
00:25:35.990 --> 00:25:43.079
Felix (Geth): methods which can return a result. We have this convention that their result is either null, or it is

145
00:25:43.250 --> 00:25:45.280
Felix (Geth): An object, or something like that.

146
00:25:46.980 --> 00:26:00.430
Felix (Geth): I mean, I don't find it pretty either with the null, I have to say, like, I wrote the Go RPC client for the API, and it's kind of annoying, you have to pay attention to this null thing all the time, but I guess it is what it is now, so… yeah.

147
00:26:03.160 --> 00:26:08.649
Mercy Boma Naps-Nkari: Okay, so, I don't know… Oh. Sorry, go on.

148
00:26:09.290 --> 00:26:14.019
Łukasz Rozmej: I have actually two different topics, Felic, that I wanted to ask you.

149
00:26:14.380 --> 00:26:21.190
Łukasz Rozmej: One is the, reverted error code. We changed it to free recently, right?

150
00:26:21.350 --> 00:26:29.380
Łukasz Rozmej: But I think the ETH Simulate tests weren't updated, and they still are using the old revert code, error code.

151
00:26:29.550 --> 00:26:42.850
Felix (Geth): Yes, yes, yes. We would, we can discuss it, yeah, but, this… this update is in progress. Yes, they will be updated, but we have to… if we all agree on this call that this change should be made to ETH Simulate.

152
00:26:42.850 --> 00:26:52.400
Felix (Geth): we can definitely make this change. We have a pull request for it, go Ethereum, we can regenerate the test with a different error. It's… it's all there, but we have to agree it.

153
00:26:52.400 --> 00:26:52.990
Felix (Geth): Today.

154
00:26:52.990 --> 00:27:00.439
Łukasz Rozmej: Well, we merged the spec, right? So I think the reverted error code should be consistent between different calls.

155
00:27:02.400 --> 00:27:05.550
Felix (Geth): yes, that's true.

156
00:27:05.800 --> 00:27:16.489
Felix (Geth): However, I'm not sure if we really did change it in also the… Simulate.

157
00:27:17.150 --> 00:27:18.860
Łukasz Rozmej: Well, you didn't, definitely.

158
00:27:18.860 --> 00:27:19.820
Felix (Geth): Yeah.

159
00:27:25.270 --> 00:27:39.659
Felix (Geth): At the moment, I don't see that… so we did not change the spec for eTsimulate to have this error code defined. It is something we can do. I mean, yeah, we can change it to the error code 3 as well. I have no problem with that. I really just wanted to say that we have to,

160
00:27:41.440 --> 00:27:47.990
Felix (Geth): we… we have to agree at first. I mean, I agree with it, yeah, let's go, but…

161
00:27:47.990 --> 00:27:50.819
Łukasz Rozmej: No, it's a mess. If we didn't.

162
00:27:52.120 --> 00:27:57.919
Felix (Geth): Yeah, it's inconsistent, I agree with that too. Yeah, yeah, it is inconsistent right now, yes. Definitely.

163
00:27:58.580 --> 00:28:05.739
Felix (Geth): It's because this proposal with error code 3 and the proposal for eSimulate happened in the same time, so yeah, it's kind of…

164
00:28:05.930 --> 00:28:16.549
Felix (Geth): And on a long time scale. But how about this? Maybe we should follow the agenda first, and then… because at the end of the agenda is not very long, so we can just…

165
00:28:16.550 --> 00:28:16.930
Łukasz Rozmej: Go ahead.

166
00:28:16.930 --> 00:28:18.999
Felix (Geth): Agenda, maybe bring this up again, yeah.

167
00:28:23.250 --> 00:28:28.420
Mercy Boma Naps-Nkari: Okay, that would be great. Kiri, I think you're next on the agenda about, execution API versioning.

168
00:28:30.060 --> 00:28:35.879
keri: Yeah, so this actually sort of segues into what I've been thinking about a lot, which is that we should

169
00:28:36.480 --> 00:28:43.200
keri: version execution APIs, so that, clients aren't trying to hit, like, a moving target, and so…

170
00:28:43.940 --> 00:28:47.120
keri: I mean, I think in an ideal world, we'd get

171
00:28:47.510 --> 00:28:54.820
keri: all the, like, ETH SimulateB1 tests passing before we, like, tag execution APIs.

172
00:28:55.790 --> 00:29:01.599
keri: But I think in lieu of that, I think we can kind of, like, tag it. I'd like…

173
00:29:02.140 --> 00:29:07.439
keri: I… I'm… prefer SEMBER, or semantic versioning,

174
00:29:07.680 --> 00:29:19.590
keri: And so, I think we can tag execution APIs either in, like, a beta right now, or just tag it with something, and have Hive run those tests, and then,

175
00:29:19.620 --> 00:29:34.769
keri: if we're doing, like, bug fixes, or, like, things like the youth simulate error codes, I think those can kind of fall into, like, bug fixes, and then we can have Hive pick those up, but then next time we make, like, a big breaking change, like.

176
00:29:35.010 --> 00:29:39.920
keri: Eat Simulate, for example, adding that, we can kind of do it

177
00:29:40.180 --> 00:29:45.840
keri: All at once, and warn people, and tell them that, like, you know, something's gonna break.

178
00:29:46.280 --> 00:29:48.660
keri: But wanted to get a feel for, like.

179
00:29:50.120 --> 00:29:52.489
keri: What people's thoughts were on that, or…

180
00:29:52.820 --> 00:29:54.539
keri: If that was a bad idea.

181
00:29:57.820 --> 00:30:00.390
Zane Starr | OpenRPC: I'm a fan of it.

182
00:30:00.740 --> 00:30:04.960
Zane Starr | OpenRPC: I like the idea of, having some very…

183
00:30:05.080 --> 00:30:18.110
Zane Starr | OpenRPC: And then I would say, probably just maybe put a versioning.md, just so people know the rules around, like, what is, like, a version bump and what's not, like, what's…

184
00:30:19.040 --> 00:30:22.360
Zane Starr | OpenRPC: Each of the patch for patch, minor, and major.

185
00:30:22.580 --> 00:30:24.620
Zane Starr | OpenRPC: What those will mean.

186
00:30:25.740 --> 00:30:27.440
keri: Cool. Yeah, I think that makes sense.

187
00:30:29.070 --> 00:30:39.620
Mercy Boma Naps-Nkari: Yeah, I… I think it's absolutely a good idea, and also it will help us with error codes, so that we can easily… clients can easily adapt to it in terms of adaptation, so…

188
00:30:42.450 --> 00:30:46.070
keri: Well, I'll try and get that implemented before next meeting.

189
00:30:48.090 --> 00:30:56.060
Mercy Boma Naps-Nkari: Okay, but do you… do we have any plans on it already on how we're going to go about it? More like an MD file to this, or…

190
00:30:58.890 --> 00:31:01.840
keri: I mean, I think we just need to do it,

191
00:31:02.650 --> 00:31:07.630
keri: So, I think the steps are… the file,

192
00:31:07.790 --> 00:31:10.949
keri: Tag it as it is, and we can kind of address

193
00:31:12.310 --> 00:31:22.719
keri: you know, things that come in, issues and PRs that come in, and decide that they're bug fixes, or,

194
00:31:23.370 --> 00:31:28.880
keri: Or features, or braking changes, and then, yeah, yeah, have a changelog, and…

195
00:31:29.350 --> 00:31:31.390
keri: Tag it, and then have Hive pick it up.

196
00:31:31.570 --> 00:31:37.229
keri: I have a local PR to have Hive pick up a certain tag, so I can… I think it'll be pretty quick.

197
00:31:39.240 --> 00:31:41.220
Mercy Boma Naps-Nkari: Okay, thank you, that would be great.

198
00:31:41.340 --> 00:31:45.560
Mercy Boma Naps-Nkari: So, next on the agenda would be the three PRs,

199
00:31:47.050 --> 00:31:50.670
Mercy Boma Naps-Nkari: I think this has to do with you, Kerry, because you have the emerging rights.

200
00:31:50.780 --> 00:31:52.370
Mercy Boma Naps-Nkari: Subscription API.

201
00:31:52.720 --> 00:32:01.789
Mercy Boma Naps-Nkari: if you could help us look at the PR, and if there's review, or anything else that needs to be done, then that would be fine. Or further discussions also on it.

202
00:32:06.490 --> 00:32:11.129
Felix (Geth): Yeah, one second, let me just, see if either of us can share the screen.

203
00:32:11.500 --> 00:32:14.210
Felix (Geth): Let me see where… where we got that.

204
00:32:14.680 --> 00:32:16.210
Felix (Geth): So, one sec…

205
00:32:27.920 --> 00:32:28.720
Felix (Geth): Yeah.

206
00:32:29.640 --> 00:32:30.630
Felix (Geth): Okay.

207
00:32:30.960 --> 00:32:32.469
Felix (Geth): Can you guys see it?

208
00:32:33.770 --> 00:32:34.310
keri: Yep.

209
00:32:34.640 --> 00:32:35.220
Felix (Geth): Yes.

210
00:32:35.970 --> 00:32:48.409
Felix (Geth): So, I thought we would try this, because we have the, we have this thing with the pull request triage in GoEthereum as well, and it's been pretty useful, so I thought maybe in the future, if…

211
00:32:48.790 --> 00:32:58.099
Felix (Geth): you know, if we would tag some of the pull requests here, and then just look at them. I tagged these more as an example, because I feel we should discuss them.

212
00:32:58.420 --> 00:33:10.080
Felix (Geth): And they seem to be, unlike the other ones, for example, the fossil spec's huge thing. We're not going to review that today, and it's, like, related to some future protocol feature. But, for example, this one is very small.

213
00:33:10.970 --> 00:33:18.939
Felix (Geth): So, it's something we can easily discuss on this call, I feel, because we just have to make a quick decision about it.

214
00:33:19.620 --> 00:33:23.319
Felix (Geth): And, this pull request…

215
00:33:23.500 --> 00:33:31.450
Felix (Geth): is about adding in the spec an option that has existed for a while, which is that in get logs.

216
00:33:32.590 --> 00:33:38.729
Felix (Geth): there are now two options. So, the current… in the spec currently, it only allows…

217
00:33:38.860 --> 00:33:47.539
Felix (Geth): specifying a block range and a filter. So the block range is defined by from block and to block, and then you have the optional

218
00:33:48.150 --> 00:33:49.520
Felix (Geth): addresses…

219
00:33:49.910 --> 00:34:00.429
Felix (Geth): and the topics. And the topics, they are sort of, like, defined… they… the address and the topics, they define a kind of filter that has to be matched by the logs. So.

220
00:34:01.040 --> 00:34:09.409
Felix (Geth): This PR is about adding another option, which is the block hash. So, when this is specified, instead of giving

221
00:34:10.300 --> 00:34:19.330
Felix (Geth): instead of specifying a range of two numbers, you can query the logs of a specific block which is identified by the hash. It is a useful,

222
00:34:20.280 --> 00:34:30.149
Felix (Geth): It is a useful thing for some clients to be able to access just the logs of a specific block, and also to be able to filter them.

223
00:34:31.909 --> 00:34:33.690
Felix (Geth): Yeah.

224
00:34:35.300 --> 00:34:38.840
Felix (Geth): I initially thought we have to,

225
00:34:39.909 --> 00:34:48.050
Felix (Geth): We would have to, you know, agree on this, but actually, turns out that… this…

226
00:34:48.190 --> 00:34:55.120
Felix (Geth): EIP was proposed in 2017, And… It is final, so…

227
00:34:56.320 --> 00:35:05.289
Felix (Geth): I guess this is official, and we could just merge the PR. However, this is not supported by NetherMind at the moment.

228
00:35:09.160 --> 00:35:10.350
Felix (Geth): So, yeah.

229
00:35:10.350 --> 00:35:20.700
Łukasz Rozmej: Yeah, sure, we can add support, it's not a big deal. One question, is there any, what's the behavior when the block is non-canonical, because we don't have blocks?

230
00:35:21.650 --> 00:35:25.200
Łukasz Rozmej: Probably undefined, right? There's no definition of error code.

231
00:35:25.200 --> 00:35:33.359
Felix (Geth): Yeah, I mean, there's no… there's… this… I mean, that's… that's… this is now the interesting question, like, we are back now to this… to this,

232
00:35:33.790 --> 00:35:42.000
Felix (Geth): to this question of should it return null or not? I think in this particular case, maybe not, because

233
00:35:42.540 --> 00:35:50.880
Felix (Geth): Basically, the intention for you is not to access the block, it is to access the logs. And if you specify…

234
00:35:51.100 --> 00:35:57.500
Felix (Geth): And also, you're specifying the block by the hash, so it's kind of like, the intention here is to say,

235
00:35:58.090 --> 00:36:05.870
Felix (Geth): you want to filter logs contained in a specific block, so if that block isn't there, then the operation you wanted to do is impossible.

236
00:36:07.880 --> 00:36:11.280
Felix (Geth): So, it maybe should… have an error.

237
00:36:11.280 --> 00:36:12.070
Łukasz Rozmej: Yeah, exactly.

238
00:36:12.440 --> 00:36:19.079
Łukasz Rozmej: Another thing, there is 44s, right? So, we need to specify that for four errors, also, I'm like.

239
00:36:19.080 --> 00:36:26.980
Felix (Geth): That's true, that's true, that's true, that's true. So, yes, exactly. When the… this needs to… okay, this is a good point, but,

240
00:36:27.120 --> 00:36:32.270
Felix (Geth): I think maybe we can… we can do it in this PR or not?

241
00:36:33.610 --> 00:36:34.489
Felix (Geth): For me, it was…

242
00:36:34.490 --> 00:36:37.550
Łukasz Rozmej: If we won't do it in this PR, we will forget about it.

243
00:36:38.150 --> 00:36:46.700
Felix (Geth): Okay, interesting. Yeah, that's definitely one way to see it. Let's see, I don't know exactly…

244
00:36:47.130 --> 00:36:55.929
Łukasz Rozmej: At least I will forget about it, and then I don't care that much about JSON RPC to keep that in my mind longer than 5 minutes.

245
00:36:57.920 --> 00:36:58.570
Felix (Geth): Yeah.

246
00:36:59.530 --> 00:37:04.119
Felix (Geth): I don't know, what's your GitHub name, by the way?

247
00:37:04.120 --> 00:37:06.190
Łukasz Rozmej: Lucas Rosmi.

248
00:37:06.730 --> 00:37:10.290
Łukasz Rozmej: Yeah. Like, my normal name without Polish paragraph.

249
00:37:10.290 --> 00:37:11.010
Felix (Geth): Yeah.

250
00:37:15.550 --> 00:37:16.320
Łukasz Rozmej: M.

251
00:38:01.890 --> 00:38:05.399
Felix (Geth): One sec, guys, I need to pick up the phone.

252
00:38:18.010 --> 00:38:18.940
Felix (Geth): Okay.

253
00:38:19.080 --> 00:38:34.970
Felix (Geth): All right, so yeah, I'm back. So that's a… that's a good point. Can… can we still… I mean, I can take care of the error codes. Do you… if you guys agree, we can just merge this. I mean, this is… I checked it, and it appears to be implemented, in most, clients.

254
00:38:35.140 --> 00:38:36.140
Łukasz Rozmej: Yeah, true.

255
00:38:36.140 --> 00:38:43.060
Felix (Geth): Okay, cool. Sorry, I clicked on my own name. Yeah, okay, cool. So we will merge this, and then that's that.

256
00:38:43.420 --> 00:38:54.630
Felix (Geth): Yeah, it's a bit weird that this has this, like, one-off definition, but I guess that's just how it is with OpenRPC. There's not really a better way to do this. So, yeah, I guess we have to…

257
00:38:55.010 --> 00:39:00.929
Felix (Geth): I mean, it's gonna look okay, I guess, in the website. You have these two options, filter by range, or filter by block hash.

258
00:39:02.110 --> 00:39:11.480
Felix (Geth): And then, yeah, I guess that's it. Cool! So that was the PR number one. Now, the next one is maybe a bit more complicated.

259
00:39:12.240 --> 00:39:13.140
Felix (Geth): I feel like…

260
00:39:13.140 --> 00:39:16.790
keri: You're gonna track that error implementation, or you want me to put up an issue?

261
00:39:17.610 --> 00:39:21.759
Felix (Geth): I mean, I can do it right after the call, basically, I thought.

262
00:39:22.030 --> 00:39:22.569
keri: Cool, thank you.

263
00:39:22.570 --> 00:39:25.209
Felix (Geth): So, the next one is for the…

264
00:39:26.270 --> 00:39:33.040
Felix (Geth): ETHConfig. So, technically, I think ETHConfig is… Final, right?

265
00:39:34.390 --> 00:39:35.510
keri: Yeah, I think so.

266
00:39:35.970 --> 00:39:51.109
Felix (Geth): No, it's last call. Okay. So, and the last call ends tomorrow. Okay. I didn't know that. But yeah, I mean, I don't think… expect that anything will be changed anymore in ETHConfig,

267
00:39:51.240 --> 00:39:56.980
Felix (Geth): It seems that this is also adding test cases,

268
00:39:58.100 --> 00:40:18.090
Felix (Geth): the thing about the test cases is we will have to redo them, so it's always the problem that when test cases get submitted like this, we have to later kind of turn them into, like, because we use the generator to create the test, we kind of have to backport them into the generator after this. But I think… I mean, this is a very well-specified thing, and…

269
00:40:19.260 --> 00:40:23.380
Felix (Geth): I'm sure that since everyone is working now on the,

270
00:40:23.730 --> 00:40:31.140
Felix (Geth): Fusaka fork, and this was included in the Fusaka fork and decided by all core devs, this is for sure implemented by everyone.

271
00:40:31.440 --> 00:40:34.600
Felix (Geth): And, would be good to have the test for it.

272
00:40:34.930 --> 00:40:38.290
Felix (Geth): So, I don't think we're gonna change anything about this PR.

273
00:40:38.690 --> 00:40:39.510
Felix (Geth): Right?

274
00:40:41.270 --> 00:40:43.390
Felix (Geth): I mean, this… this is just…

275
00:40:43.980 --> 00:40:52.489
Felix (Geth): It's just a matter of merging it, I guess. So, yeah, I mean, if you guys have any kind of last-minute reservations about it, we can still change.

276
00:40:56.830 --> 00:40:58.680
keri: No, I think this is a good one to get in.

277
00:40:59.620 --> 00:41:00.260
Felix (Geth): Yeah.

278
00:41:00.970 --> 00:41:06.480
Felix (Geth): So, and then, I guess with the tests, also, we need to see, I think there must be something there

279
00:41:06.870 --> 00:41:10.210
Felix (Geth): Yeah, in the RPC test gen, I mean, we can check.

280
00:41:11.420 --> 00:41:13.799
Felix (Geth): if there is a matching PR,

281
00:41:14.620 --> 00:41:17.370
Felix (Geth): Nope, so we need to…

282
00:41:30.910 --> 00:41:37.910
Mercy Boma Naps-Nkari: Sorry, just one question, I saw the IO5 from… on this.

283
00:41:38.010 --> 00:41:42.719
Mercy Boma Naps-Nkari: So, if there is no test for it, so how come the .io files are generated?

284
00:41:43.570 --> 00:41:44.690
Mercy Boma Naps-Nkari: But I'm lost.

285
00:41:45.170 --> 00:41:48.760
Mercy Boma Naps-Nkari: I… on the RFPC, yeah, here, daisy.io file.

286
00:41:50.270 --> 00:41:55.679
Mercy Boma Naps-Nkari: Yeah, so how come the test… we have a .io file, but we don't have a test?

287
00:41:57.540 --> 00:42:07.560
Felix (Geth): I mean, this is maybe something where also, like, because I recently reviewed your PR Mercy on the RPC test gen, so RPC Test Gen just…

288
00:42:07.810 --> 00:42:27.720
Felix (Geth): RPC testing is not the test, it's just the test generator. So the I.O. files are the tests, and, they are created by this tool, but they don't have to be, necessarily. I mean, I guess the… that, what's his name again? I forgot. Dano just, created these tests somehow.

289
00:42:27.900 --> 00:42:40.009
Felix (Geth): using his own tools, I guess using Bisu or whatever, he created them, and then… now it's kind of on us to make sure that as we keep regenerating the tests.

290
00:42:41.250 --> 00:42:47.300
Felix (Geth): they will… always be up-to-date. So this is, like, the thing, the I.O. files, they contain

291
00:42:47.690 --> 00:42:52.500
Felix (Geth): the I.O. files are tests, which are…

292
00:42:54.630 --> 00:43:02.329
Felix (Geth): Which correspond to the current test chain, also, like, that's the thing, like, inside of the test folder, we have the test chain.

293
00:43:02.470 --> 00:43:06.970
Felix (Geth): And this test chain, You can see it here.

294
00:43:07.160 --> 00:43:22.249
Felix (Geth): there's this, like, chain.rlp, and then, like, the Genesis, and so on. So these files, they define, like, the blocks which exist in the test, and so on. And the ETH simula… the ETH config tests here, they somehow correspond to…

295
00:43:23.290 --> 00:43:30.219
Felix (Geth): They somehow correspond to this test chain, but we have to backport

296
00:43:30.620 --> 00:43:36.109
Felix (Geth): these tests into the generator. So basically, we have to update the generator to actually call ETHConfig.

297
00:43:36.250 --> 00:43:44.299
Felix (Geth): And basically recreate these tests so that when we update the test chain the next time, these will not go out of date.

298
00:43:44.300 --> 00:43:59.489
Felix (Geth): Or something, because then, you know, maybe the block hashes will change, or something about the config will change, or, you know, like, anything, like the fork ID, or like, all of these things will change over time. And in order to make sure that the test will remain up-to-date, we have to kind of make sure that…

299
00:44:00.130 --> 00:44:19.149
Felix (Geth): these tests are created by the generator as well. But the pull request authors in execution APIs, they don't always know this, and I mean, I don't think they can always be expected to, update the generator with their tests, so usually what I would say is that we just kind of

300
00:44:20.040 --> 00:44:27.369
Felix (Geth): add the test that they created, or something, and then we just have to backport it. Like, that's how I would… it's just how…

301
00:44:28.890 --> 00:44:30.770
Felix (Geth): I would say it's the easiest.

302
00:44:33.490 --> 00:44:39.110
Mercy Boma Naps-Nkari: No, okay, so I was thinking we do the, we do our PC test first before…

303
00:44:40.530 --> 00:44:45.979
Mercy Boma Naps-Nkari: Putting it to the, execution repo.

304
00:44:46.380 --> 00:44:46.940
Felix (Geth): Mmm.

305
00:44:46.940 --> 00:44:51.159
Mercy Boma Naps-Nkari: I was thinking it just has, like, a unified format, like, a step.

306
00:44:52.380 --> 00:44:56.590
Felix (Geth): Yeah, it's true. I mean, we could totally do that, yeah. So, basically, here we would have to say…

307
00:45:15.620 --> 00:45:19.530
Felix (Geth): Okay, so that's what you mean, yeah? That it has to be created first.

308
00:45:20.360 --> 00:45:32.609
Felix (Geth): In that… in that case, I mean, someone, maybe you can actually do this? I mean, you have updated the RPC test gen before. So basically, what needs to happen is the… it has to be changed so that the RPC test gen calls

309
00:45:33.300 --> 00:45:38.840
Felix (Geth): ETH config two times once, With no parameters, and ones with

310
00:45:40.920 --> 00:45:57.520
Felix (Geth): Wait, also no parameters? Yeah, that doesn't work. No, that's weird. So, that's not… that's not… these tests will not work, because it calls the same method two times, and it has a different result. That's not how… I don't know, does it even take parameters?

311
00:46:03.330 --> 00:46:05.509
Felix (Geth): Does it even take parameters?

312
00:46:12.500 --> 00:46:14.030
Felix (Geth): Yeah, I guess it…

313
00:46:20.210 --> 00:46:23.820
Felix (Geth): It doesn't, yeah. Okay. There are no parameters.

314
00:46:24.070 --> 00:46:28.910
Felix (Geth): Okay, interesting. So, in that case, it means, basically, we can only keep one of these tests.

315
00:46:31.790 --> 00:46:37.019
Felix (Geth): Yeah. So we will only have a single test for ETHConfig, which is the one that returns.

316
00:46:37.250 --> 00:46:38.420
Felix (Geth): the current.

317
00:46:41.030 --> 00:46:43.049
Zane Starr | OpenRPC: Sidebar question here.

318
00:46:44.370 --> 00:46:53.249
Zane Starr | OpenRPC: Are both tasks important in terms of, like, syntactic correctness for returning results, depending on the state of the chain?

319
00:46:54.300 --> 00:47:07.159
Felix (Geth): Yeah, I guess so. I mean, this… this is kind of the problem with ETHConfig in general, that it's kind of… it's one of the aspects of econfig that I personally don't like. It's that it… the result is dependent on the current block in the client.

320
00:47:07.670 --> 00:47:08.920
Felix (Geth): So, if…

321
00:47:09.340 --> 00:47:19.250
Felix (Geth): if the… I mean, it's like, if you schedule a fork in the client, and the client knows there will be an upcoming fork, it returns something else in ETHConfig.

322
00:47:19.250 --> 00:47:35.410
Felix (Geth): compared to when the fork is over, and there's no currently defined fork. I think it's a pretty weird distinction. We cannot actually test it using our current setup, because there's no way for us to… I mean, I guess we could make a custom Hive test that launches the client with a fork scheduled in the future.

323
00:47:35.410 --> 00:47:41.380
Felix (Geth): But that… setup doesn't exist for the RPC compatibility tests. We would have to basically

324
00:47:42.540 --> 00:47:44.640
Felix (Geth): It would be like a specialized test.

325
00:47:45.430 --> 00:48:02.479
Zane Starr | OpenRPC: So, just out of another sidebar, and that takes 10 dev work, but, it seems like maybe there's… needs to be an additional parameter that specifies chain state, or some way of specifying the chain state.

326
00:48:02.740 --> 00:48:08.519
Zane Starr | OpenRPC: required for making each of the, RPC requests.

327
00:48:10.610 --> 00:48:11.429
Felix (Geth): What'd you mean?

328
00:48:11.690 --> 00:48:20.610
Zane Starr | OpenRPC: So, because you call eveconfig, right, but there's an expectation of different responses per chain state.

329
00:48:20.870 --> 00:48:27.510
Zane Starr | OpenRPC: So, it seems like the test needs to specify what the chain state is.

330
00:48:27.970 --> 00:48:34.970
Zane Starr | OpenRPC: Or what's chain state to, like, load for then, like, validating that the response is correct?

331
00:48:35.910 --> 00:48:41.690
Felix (Geth): I mean, we have… we… yes, but we have that, so we have a single test chain which is defined.

332
00:48:42.560 --> 00:49:01.760
Felix (Geth): And so that chain, we just use it for all the… for all the tests. So basically, the expectation is that before any of the tests can run, the client has to load the defined test chain, and then it's gonna be in that state. And I guess we could add a second set of tests that run against a different chain, or something like that?

333
00:49:02.190 --> 00:49:03.850
Felix (Geth): But… yeah.

334
00:49:03.910 --> 00:49:19.400
Zane Starr | OpenRPC: Yeah, I guess I'm trying to see, like, how do you solve the git config with next fork and get current config issue, and then it seems like there's, like, a couple of ways you could do it. So one is, like, you could play forward the sequence of, like, RPC calls.

335
00:49:19.630 --> 00:49:26.289
Zane Starr | OpenRPC: To then put the chain in the state, the test chain in the state that then allows you to validate it.

336
00:49:26.630 --> 00:49:35.630
Felix (Geth): Yeah, but we can't really do that, because we can't… I mean, we could, like, start talking to the client over the engine API to advance the chain somewhere else, but…

337
00:49:35.880 --> 00:49:42.409
Felix (Geth): it's not really… I mean, the way the test chain works right now is that the,

338
00:49:43.770 --> 00:49:46.890
Felix (Geth): So you can see it kind of in this… in the genesis.

339
00:49:47.890 --> 00:49:51.200
Zane Starr | OpenRPC: Right, it's just a static… it's a static state.

340
00:49:51.600 --> 00:50:07.990
Felix (Geth): I mean, it is a… it is a… it has to load the chain, but then also the chain is kind of set so that when the client is finished importing, or has finished importing all the blocks in chain.rlp, it will have passed this prog fork. So the prog fork here, I think, is kind of the latest fork.

341
00:50:09.060 --> 00:50:18.389
Felix (Geth): So… It will just… It will just go past all the forks, basically.

342
00:50:22.170 --> 00:50:31.589
Felix (Geth): So we can't really schedule a future fork in the tests, because we… the tests are supposed to, like, when the test… at the end of the test chain, all the forks are passed.

343
00:50:32.820 --> 00:50:35.160
Felix (Geth): All the ones that exist, I mean.

344
00:50:35.420 --> 00:50:36.960
Zane Starr | OpenRPC: Yeah, that makes sense.

345
00:50:38.160 --> 00:50:43.530
Felix (Geth): I mean, we could kind of stop import, like, we could make another test chain that, like, stops before the…

346
00:50:44.350 --> 00:50:46.710
Felix (Geth): Bef… before the…

347
00:50:47.250 --> 00:51:05.109
Felix (Geth): before the proc fork or something, but then that's… that's, like, really weird. We only need it for one test, which is the ETHC config. So this kind of, like, ETH config's kind of hard to test in that way. It's even hard to test, like, in general, because most of the time, there's no next fork. The only time when ETHConfig returns, even something for the next fork.

348
00:51:05.110 --> 00:51:10.569
Felix (Geth): Is, well, when… When the clients were just updated.

349
00:51:11.760 --> 00:51:15.050
Felix (Geth): To, to, you know, support the fork.

350
00:51:18.120 --> 00:51:32.230
Felix (Geth): I mean, I guess this is a valid… this could be interesting. We might just discuss this today in Discord, since the last call of ETHConfig is not yet passed, so we could just technically bring it up and be like, hey guys, why don't you just change ETHConfig to remove this next fork thing?

351
00:51:32.470 --> 00:51:37.689
Felix (Geth): I don't know. Seems a bit wild, but I guess it's not too late, formally.

352
00:51:38.210 --> 00:51:44.280
Felix (Geth): Anyways, yeah, Lukash, you were saying you need to go, so could we just finalize?

353
00:51:45.250 --> 00:51:47.409
Felix (Geth): I mean, this PR, I think, in…

354
00:51:47.880 --> 00:51:53.049
Felix (Geth): I would say we can kind of merge it, because it is… it implements the EIP.

355
00:51:53.280 --> 00:51:58.339
Felix (Geth): At the same time, the EIP is in last call, it's not final, so maybe it's too early, and also we need to

356
00:51:58.560 --> 00:52:09.959
Felix (Geth): make the generator. So maybe, Mercy, you can just add this call to the generator, that would be great, and then we can update this PR with the generated test, and there will only be one test for now.

357
00:52:10.660 --> 00:52:12.829
Felix (Geth): Do you think that's a good resolution?

358
00:52:14.310 --> 00:52:25.949
Felix (Geth): Okay, super cool. So let's go like that, and then we can have some progress. So basically, then it will be all good in terms of the process, and I can ping Dano to figure out

359
00:52:26.090 --> 00:52:28.349
Felix (Geth): What to do about this next fork thing.

360
00:52:29.830 --> 00:52:30.830
Felix (Geth): Okay.

361
00:52:31.170 --> 00:52:38.450
Felix (Geth): And so now, let's maybe quickly go and see the final one. So the final thing that was tagged for triage is this

362
00:52:38.550 --> 00:52:44.569
Felix (Geth): JSON RPC error code standardization. This is kind of a big thing, so…

363
00:52:45.540 --> 00:52:52.180
Felix (Geth): I don't know how far we're gonna get. Definitely some things were changed after the last call where we discussed this.

364
00:52:53.190 --> 00:52:57.660
Simsonraj Easvarasakthi: Yeah, I can quickly update it, just, like, in 2 minutes,

365
00:52:57.680 --> 00:53:13.220
Simsonraj Easvarasakthi: In short, I addressed most of the comments, changed the ranges to positive, for the newly implemented ones, and most importantly, for execution alert errors, at least for the execution reverted, it now reflects 3.

366
00:53:13.490 --> 00:53:20.079
Simsonraj Easvarasakthi: And rest of the transaction pool and, ZK executioner is a new category I added.

367
00:53:20.270 --> 00:53:26.070
Simsonraj Easvarasakthi: And gas errors, I've reduced the number of gas errors to only reflect the…

368
00:53:26.120 --> 00:53:41.059
Simsonraj Easvarasakthi: errors that we actually get, at least with GET and BASU. I cross-checked it with the test. I also created a new test suit. This is currently in my, profile. I'll slowly start working on moving it to Hive or RPC test run.

369
00:53:41.060 --> 00:53:48.840
Simsonraj Easvarasakthi: But that has the updated report, so if you click on the last point in the ETH error test, in the, in the…

370
00:53:48.990 --> 00:53:53.539
Simsonraj Easvarasakthi: Just, in the description. It's in the description at the… at the bottom.

371
00:53:57.500 --> 00:54:00.350
Simsonraj Easvarasakthi: Oh, no, it's all the way top in the PR description.

372
00:54:00.670 --> 00:54:01.560
Mercy Boma Naps-Nkari: I shed the.

373
00:54:01.560 --> 00:54:02.000
Simsonraj Easvarasakthi: Okay.

374
00:54:02.000 --> 00:54:02.730
Mercy Boma Naps-Nkari: Chat.

375
00:54:02.910 --> 00:54:04.530
Simsonraj Easvarasakthi: Oh yeah, thank you, yeah, that one.

376
00:54:04.820 --> 00:54:06.390
Felix (Geth): the tests. Okay.

377
00:54:06.390 --> 00:54:09.560
Simsonraj Easvarasakthi: Yeah, yeah, yeah, yeah, yeah, yeah. So, yeah, if…

378
00:54:09.610 --> 00:54:29.159
Simsonraj Easvarasakthi: Exactly. So I created my own suit. It's based on the existing test I did long back, and I updated it to include all scenarios. So the reports now will have… I only did for Sepolia, Get, and Besu, but it's easy to append for the rest of the clients to add it. It's sort of like a…

379
00:54:29.160 --> 00:54:42.199
Simsonraj Easvarasakthi: very similar to Hive, how it spins up local clients and runs scenarios, but just as my own structure, but I can't… I'll start working on expanding this for the rest of the clients, but…

380
00:54:42.240 --> 00:54:45.940
Simsonraj Easvarasakthi: If you click on the reports and pick up any one of the reports CSV,

381
00:54:46.150 --> 00:54:49.269
Simsonraj Easvarasakthi: It's in the, folder, reports folder.

382
00:54:50.450 --> 00:54:54.269
Simsonraj Easvarasakthi: Yeah, you could click on Get if you want, yeah, CSV, yeah.

383
00:54:54.810 --> 00:54:55.450
Felix (Geth): Hmm.

384
00:54:55.450 --> 00:55:02.540
Simsonraj Easvarasakthi: Nice, cool. You can see the raw transaction, and those are the errors I added in the gas errors, and…

385
00:55:02.620 --> 00:55:21.479
Simsonraj Easvarasakthi: this will reflect the error code, and I've simulated this on actual… by deploying actual contract, and simulating this exactly how it would respond. But for some scenarios, it's not too perfect. I cannot replicate errors, such as non's too high.

386
00:55:21.480 --> 00:55:32.879
Simsonraj Easvarasakthi: But that can be addressed, and there are a few hacks here to get it all printed out, but pretty much should work still, for most of the clients, and I've done this again for Beiso, too.

387
00:55:33.100 --> 00:55:41.190
Simsonraj Easvarasakthi: So, I can expand this test, too, to cover more scenarios, but if you click on the test cases folder under the package.

388
00:55:42.170 --> 00:55:53.330
Simsonraj Easvarasakthi: And, send transaction scenarios at the end. I haven't done the estimate cast, it's currently only on send transaction scenarios. So if you click on the send transaction scenarios file.

389
00:55:53.330 --> 00:55:54.190
Felix (Geth): One second.

390
00:55:55.160 --> 00:55:56.300
Simsonraj Easvarasakthi: Sure.

391
00:56:18.600 --> 00:56:22.930
Felix (Geth): I'm sorry, yeah, alright, yeah, what should I click on? Sorry.

392
00:56:23.460 --> 00:56:26.740
Simsonraj Easvarasakthi: No worries, not all good. Send transaction scenarios.

393
00:56:27.440 --> 00:56:27.970
Felix (Geth): Huh.

394
00:56:27.970 --> 00:56:34.299
Simsonraj Easvarasakthi: Yeah, that's the one. So this has all the tests that I did, basically, you know,

395
00:56:35.040 --> 00:56:53.439
Simsonraj Easvarasakthi: updating some of the params to simulate different kinds of errors, but this is up-to-date. I need to implement the same for ETHAS and call, ETHCALL, but ETH and transaction should be… should have all the latest values. I need to fix the code a bit, but…

396
00:56:54.250 --> 00:57:07.039
Felix (Geth): And it seems kind of interesting to me, I mean, we should… there's a lot of overlap in this with both RPC Test Gen and with the Hive, so… Right, correct. I feel like you should just kind of convert this to run in the Hive, and then we would…

397
00:57:07.040 --> 00:57:15.579
Simsonraj Easvarasakthi: I agree, completely agree. The only reason I didn't do that now is because I wanted to get this done quickly, and I had the setup ready in my local.

398
00:57:15.580 --> 00:57:16.050
Felix (Geth): Yeah, yeah.

399
00:57:16.050 --> 00:57:26.550
Simsonraj Easvarasakthi: So just sort of expanded on it, but it would take a little bit for me to move this to Hive and our PC testing, but it's all simulating, really, actual native errors.

400
00:57:26.850 --> 00:57:46.340
Felix (Geth): Yeah, yeah, yeah. I mean, this is very good. I have a general feeling that might actually be useful now that we think… I think about it, to maybe just also run RPC TestGen inside of Hive. So this is something that we could do, because, at the moment, it's like, we own… we use… in RPC TestGen, we run Geth to generate the…

401
00:57:46.340 --> 00:57:52.620
Felix (Geth): The test cases, because it's easiest for us to just, like, compile and run it in the same setup.

402
00:57:52.660 --> 00:57:54.040
Felix (Geth): But that doesn't mean

403
00:57:54.600 --> 00:58:08.629
Felix (Geth): it would actually be kind of interesting to fill the same test from another client, just to see the results. It doesn't necessarily mean we have to commit them or something, it's just more like, at the moment, it's literally not possible to do the filling. Like, I mean, yeah, it is.

404
00:58:08.630 --> 00:58:09.270
Simsonraj Easvarasakthi: Exactly.

405
00:58:09.270 --> 00:58:14.359
Felix (Geth): manual stuff, but I guess… so, there is some overlap with that, too.

406
00:58:15.080 --> 00:58:33.310
Simsonraj Easvarasakthi: Yeah, no, I agree. This is, like, a single package where you can add a new client and run all the tests in one go. But definitely, the end goal is to move this to Hive and RPC Testion, once I have, like, nailed it down. The only reason I didn't do it is, again.

407
00:58:33.650 --> 00:58:39.660
Felix (Geth): Yeah, but this code could basically be used as is to generate the test cases, right? Like, that's the main thing, yeah.

408
00:58:39.660 --> 00:58:48.869
Simsonraj Easvarasakthi: Yeah, exactly. No, I kept most of the stuff very similar, so we can… it'll be easy to import later, but yeah, this is what I have so far.

409
00:58:50.080 --> 00:59:05.329
Felix (Geth): I mean, the question is also, like, I mean, this is more, like, this project is more about doing, like, some research in terms of, like, what the clients actually do right now, but obviously it's not, like, what they are doing right now is not necessarily what we want to put in the spec, right? We want to…

410
00:59:05.330 --> 00:59:06.210
Simsonraj Easvarasakthi: Correct, exactly.

411
00:59:06.210 --> 00:59:10.700
Felix (Geth): This is more for, like, you know, having an overview of, like, where the clients are at.

412
00:59:10.850 --> 00:59:22.770
Felix (Geth): And I guess now Wukash left, but, like, he is… was from Nethermind, so I guess it would have been quite interesting to… to hear it from him, because, like, I mean, Nethermind isn't here, but obviously they also have some…

413
00:59:23.930 --> 00:59:25.050
Felix (Geth): They also have some.

414
00:59:25.050 --> 00:59:31.209
Simsonraj Easvarasakthi: Yeah, I can add another one quickly, it wouldn't take too long, just probably under a day.

415
00:59:31.400 --> 00:59:43.470
Simsonraj Easvarasakthi: Again, never mind quickly. Yeah, but yeah, this is just to showcase where the clients are, and even if you want to run after fixes, this would reflect the current state and the future state, but yeah.

416
00:59:43.470 --> 00:59:44.440
Felix (Geth): Pretty much.

417
00:59:44.640 --> 00:59:45.280
Simsonraj Easvarasakthi: Yeah.

418
00:59:45.780 --> 00:59:52.750
Felix (Geth): Yeah, very cool, very cool. So, can we maybe go back to the… so what we gonna do about the PR? I mean…

419
00:59:53.080 --> 00:59:55.649
Felix (Geth): For now, I guess now it's…

420
01:00:00.160 --> 01:00:17.070
Simsonraj Easvarasakthi: I think it should be really ready at this point, if you all take a look into the actual numbers and see if it matches and, sounds good. I think we can… we should be in a position to merge this. There may be, like, one final comment I have to do, some cleanup.

421
01:00:17.260 --> 01:00:24.500
Simsonraj Easvarasakthi: just, some description on README, but other than that, the PR and this should be… should be in a good condition.

422
01:00:29.260 --> 01:00:34.810
Felix (Geth): I have the general, comment. I think that the,

423
01:00:37.000 --> 01:00:56.370
Felix (Geth): these two groups are not required to specify, because JSON RPC allows the server to return these errors anyways. I mean, it's just gonna be, like, if there's a server error, then yeah, it's gonna return this error. Do you think it's required to put this in for every single method to define that, you know, the standard errors can be returned?

424
01:00:58.260 --> 01:00:58.719
Felix (Geth): Good reduction.

425
01:00:58.720 --> 01:01:11.770
Simsonraj Easvarasakthi: It would be useful in the future test. If it doesn't match, it should at least warn us. Let's say someone is using completely outside the JSON standard errors or the errors we have defined.

426
01:01:11.820 --> 01:01:22.709
Simsonraj Easvarasakthi: We should at least see the warrant message, or at least error it out, so… and of course, it's like a single place to look up all the errors that

427
01:01:22.920 --> 01:01:35.250
Simsonraj Easvarasakthi: currently is supported, and that's the only reason. Probably, I can do this even more slightly generic. I can take a look at that, but, yeah, it'll be useful for the test in the future.

428
01:01:35.650 --> 01:01:36.300
Felix (Geth): Yeah, okay.

429
01:01:36.300 --> 01:01:37.989
Simsonraj Easvarasakthi: Actually, implementation, yeah.

430
01:01:43.300 --> 01:01:50.580
Felix (Geth): Yeah, I… okay, so, I mean, this is definitely improved compared to last time. Let me put it like that.

431
01:01:51.490 --> 01:01:58.250
Felix (Geth): But, and yeah, it has some… has some good things, but it has some… That's a…

432
01:01:58.760 --> 01:02:13.850
Felix (Geth): I mean, mostly, yeah, it has the ZK errors now, these are new, and then some of the… some of them have to be reduced. I still think we should maybe, for example, one of the things that's a bit weird still is this message and data situation here, like.

433
01:02:14.610 --> 01:02:17.590
Felix (Geth): that… I mean, I know last time we talked about it, but

434
01:02:18.920 --> 01:02:26.930
Felix (Geth): like, the message here is… this is very confusing, I have to say, because this says message already known, but this is more like a…

435
01:02:26.930 --> 01:02:27.590
Simsonraj Easvarasakthi: Right.

436
01:02:27.590 --> 01:02:35.599
Felix (Geth): I don't understand, like, what's the distinction between these two fields. Like, there's the message, and then there's also the other message, which is more, like, readable.

437
01:02:36.500 --> 01:02:46.869
Simsonraj Easvarasakthi: Right. So, yeah, I can also revert that back. I didn't… I didn't keep it to cause confusion. The more goal was for me to,

438
01:02:47.130 --> 01:03:06.089
Simsonraj Easvarasakthi: you know, push people to start using the data field more often. That could be a string, that could be an object, and also, this also gives us a way to standardize the message field a little bit more. If, you know, clients want to say out of counters or transaction

439
01:03:06.160 --> 01:03:14.260
Simsonraj Easvarasakthi: Not permitted, some kind of error, that's not defined, or well-known, just like non-too-low.

440
01:03:14.260 --> 01:03:19.839
Simsonraj Easvarasakthi: Because non's too low, everyone knows it's pretty standard, and everyone has similar, string.

441
01:03:19.840 --> 01:03:34.689
Simsonraj Easvarasakthi: For the rest of them, we can also kind of use this kind of underscore messages to standardize messages in the future, but absolutely not needed now. So, we are only focusing on code. If it's causing more confusion, I think we should… we can revert this and…

442
01:03:34.720 --> 01:03:40.409
Simsonraj Easvarasakthi: Move the description into the message field, and leave the data out of the standardization.

443
01:03:41.000 --> 01:03:46.869
Simsonraj Easvarasakthi: But so that is just to point what can be used for this, error code, that's it.

444
01:03:47.550 --> 01:03:48.160
Felix (Geth): Yeah.

445
01:03:48.160 --> 01:03:55.240
Zane Starr | OpenRPC: I would be on board with the, like, maybe moving the stuff that's in data into message.

446
01:03:55.820 --> 01:03:56.530
Simsonraj Easvarasakthi: Yeah, yeah.

447
01:03:56.530 --> 01:03:58.380
Zane Starr | OpenRPC: From the OpenRPC side.

448
01:03:58.640 --> 01:04:10.430
Zane Starr | OpenRPC: it's kind of, like, maybe an early days misstep, where, yeah, like Shane said in the comments, that it should be, like, the data field should really specify a schema.

449
01:04:10.620 --> 01:04:18.460
Zane Starr | OpenRPC: So, like, imagine that you're out of gas, we could define schemas that clients should return,

450
01:04:18.460 --> 01:04:19.070
Simsonraj Easvarasakthi: Yeah.

451
01:04:19.070 --> 01:04:24.309
Zane Starr | OpenRPC: client with that. So it could be, like, oh, gas, field, plus number.

452
01:04:24.480 --> 01:04:25.830
Zane Starr | OpenRPC: That kind of thing.

453
01:04:27.110 --> 01:04:36.270
Zane Starr | OpenRPC: So the more that we can push into the message, then whenever OpenRPC does the version bump to support, like, the data schema.

454
01:04:36.470 --> 01:04:40.859
Zane Starr | OpenRPC: That could be… like, it's gonna be a seamless transition, then.

455
01:04:41.600 --> 01:04:42.020
Felix (Geth): So here.

456
01:04:42.020 --> 01:04:43.389
Simsonraj Easvarasakthi: Awesome, yeah, that sounds good.

457
01:04:44.030 --> 01:04:52.340
Felix (Geth): I'm showing this on the screen right now, but basically, we have, for the existing code 3, we have the data, which is defined to be the schema, so it's like a byte.

458
01:04:52.570 --> 01:04:59.530
Felix (Geth): this… this is kind of the intention between… the intention of using the data field. So for this error.

459
01:05:00.240 --> 01:05:01.480
Felix (Geth): of Code 3,

460
01:05:01.710 --> 01:05:08.139
Felix (Geth): We don't expect the client to return this exact message. That's kind of the point of error codes, that they don't have to agree on the message.

461
01:05:08.140 --> 01:05:08.500
Simsonraj Easvarasakthi: Right.

462
01:05:08.500 --> 01:05:19.939
Felix (Geth): We will never check that, but we will check the code, and we do have to check the data as well, that, like, they return the correct thing in the data, and the tests will verify that also.

463
01:05:20.510 --> 01:05:22.090
Felix (Geth): So, we can't…

464
01:05:22.560 --> 01:05:37.149
Felix (Geth): if the… I know that, for example, Reh currently returns some other… like, they have it a bit like you have it in your proposal, where they have, like, some error message in the message, and then they have another error message in the data, but that's not really how it's supposed to be used.

465
01:05:37.850 --> 01:05:38.760
Felix (Geth): So, yeah.

466
01:05:38.760 --> 01:05:44.760
Simsonraj Easvarasakthi: Yeah, no, yeah, that definitely makes sense. I can move the data field into message,

467
01:05:44.800 --> 01:05:59.900
Simsonraj Easvarasakthi: just want to make sure that people don't cross-use the messages, or cross-use the error code for different kind of errors, but absolutely, that makes sense. I can move the data into the message field and leave the data out of the proposal.

468
01:06:00.350 --> 01:06:01.390
Felix (Geth): Yeah, I would say, because.

469
01:06:01.390 --> 01:06:01.830
Simsonraj Easvarasakthi: And, like.

470
01:06:01.830 --> 01:06:14.139
Felix (Geth): We will define… we will define, like, additional error data when it's necessary, just we haven't really had that… that happen so far. Like, for now, it hasn't really been the case that we need,

471
01:06:15.220 --> 01:06:17.850
Felix (Geth): We need the error data, or something like that.

472
01:06:18.740 --> 01:06:21.170
Simsonraj Easvarasakthi: That makes sense, like, Zane mentioned.

473
01:06:21.170 --> 01:06:22.500
Felix (Geth): So, yeah.

474
01:06:22.500 --> 01:06:26.980
Simsonraj Easvarasakthi: Yeah, yeah. Like Zane mentioned, when they have implemented the schemas for…

475
01:06:27.210 --> 01:06:32.400
Simsonraj Easvarasakthi: data, we can start using it. For now, I can move it. Yeah, I think, that makes sense.

476
01:06:32.660 --> 01:06:43.919
Simsonraj Easvarasakthi: That should be a quick change, too. I can do this before tomorrow, and send it out on the channel. But if you have anything else also, happy to do it, so we can get this merged really quick.

477
01:06:47.510 --> 01:06:55.730
Felix (Geth): Yeah, I mean, that, and then I guess we're kind of good. We have to review again, like, all of the defined error codes, if they really make sense, but for now.

478
01:06:55.900 --> 01:07:04.669
Felix (Geth): it's… I think it's moving towards the… the good state, I would say, like, with this. Like, definitely we're… we're on it now, yeah.

479
01:07:05.130 --> 01:07:07.560
Simsonraj Easvarasakthi: Sounds good, thank you.

480
01:07:10.830 --> 01:07:21.670
Mercy Boma Naps-Nkari: Sorry, I just wanted to add, if… in case you make the changes, we can then move it over to the ACDT call, so that they can… all other clients can actually, like.

481
01:07:21.850 --> 01:07:27.050
Mercy Boma Naps-Nkari: Look more into that, and if they have any specifics, then that would be great.

482
01:07:28.260 --> 01:07:31.350
Mercy Boma Naps-Nkari: But let's say we are… we are bypassing the same zone here.

483
01:07:32.370 --> 01:07:40.109
Simsonraj Easvarasakthi: Yeah, that makes sense, Marci, for sure. I'll try to get this done quick, so maybe before next week, we can take you to ACD call.

484
01:07:44.520 --> 01:07:45.140
Felix (Geth): Thank you.

485
01:07:46.130 --> 01:07:52.000
Mercy Boma Naps-Nkari: So, I guess that's the last thing on the agenda, so… Any last comment?

486
01:07:58.690 --> 01:08:07.510
Mercy Boma Naps-Nkari: Oh, okay, so before we close, I just wanted to say, I wanted to make out some changes on the documentation, on the website itself.

487
01:08:08.020 --> 01:08:14.869
Mercy Boma Naps-Nkari: But when I'll make up a PR, and then I will send the PR link so we can further discuss, because we already, like.

488
01:08:15.360 --> 01:08:16.779
Mercy Boma Naps-Nkari: We're over time now.

489
01:08:17.200 --> 01:08:21.660
Mercy Boma Naps-Nkari: That's all from my end. It was nice having you all, and

490
01:08:21.859 --> 01:08:24.289
Mercy Boma Naps-Nkari: having these discussions. Thank you, everyone.

491
01:08:26.729 --> 01:08:27.509
Felix (Geth): Thank you.

492
01:08:28.050 --> 01:08:28.840
Simsonraj Easvarasakthi: Thank you.

493
01:08:29.340 --> 01:08:30.130
Simsonraj Easvarasakthi: Bye.

494
01:08:30.529 --> 01:08:32.469
Zane Starr | OpenRPC: Thanks. Thanks, everyone. Bye.

