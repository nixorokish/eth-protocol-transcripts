WEBVTT

1
00:00:12.610 --> 00:00:18.830
Akash | ECH: And we are livestreaming this meeting on Ethereum Protocol YouTube channel, so let me know whenever you are ready.

2
00:00:19.610 --> 00:00:21.289
Mercy Boma Naps-Nkari: Okay, no problem. Thank you.

3
00:01:49.970 --> 00:01:52.039
Zane Starr: Mercy, if you're speaking, you're muted.

4
00:01:56.010 --> 00:01:59.809
Mercy Boma Naps-Nkari: Oh, sorry, I was trying to share the link on the…

5
00:02:00.090 --> 00:02:06.199
Mercy Boma Naps-Nkari: On Discord. Good afternoon, everyone. Akash, I think we are ready. We're… can go now.

6
00:02:08.000 --> 00:02:09.169
Akash | ECH: Yeah, we are live.

7
00:02:12.280 --> 00:02:13.790
Mercy Boma Naps-Nkari: Good afternoon.

8
00:02:15.360 --> 00:02:15.710
Zane Starr: Hey.

9
00:02:15.710 --> 00:02:18.750
Mercy Boma Naps-Nkari: Good afternoon, so… Okay.

10
00:02:19.120 --> 00:02:26.260
Mercy Boma Naps-Nkari: Welcome to ROPC Call 13. Today's days being 29th September 2025.

11
00:02:26.430 --> 00:02:38.810
Mercy Boma Naps-Nkari: So… I don't have… we only have two things on the agenda, but if you want to, if you have anything… any other thing apart from what's on the agenda to talk about, feel free to also indicate.

12
00:02:39.950 --> 00:02:54.080
Mercy Boma Naps-Nkari: But, and that will be actually feedback on the error quotes. From my end, I don't have any feedback, because I feel like it's good to go, but we still need to share it with the… with other code devs to take a look at it.

13
00:02:54.530 --> 00:03:01.880
Mercy Boma Naps-Nkari: And… but I don't know if someone has any other thing in respect to the error codes that was posted this week. Last week, rather.

14
00:03:05.800 --> 00:03:21.990
Simsonraj Easvarasakthi: Yeah, hey everyone. Yeah, just to reiterate, I think the doc, or the README file I wrote, should be pretty self-explanatory, and should give you an idea to review. I'd really appreciate if you guys take a look at it.

15
00:03:22.100 --> 00:03:28.050
Simsonraj Easvarasakthi: And, Mercy, if you have any contacts, with different clients, and if you can help them forward it.

16
00:03:28.290 --> 00:03:37.539
Simsonraj Easvarasakthi: and get some feedback, I'd really appreciate that. And, so we can… we can talk about what's the next steps, and how we can get this merged.

17
00:03:39.890 --> 00:03:43.939
Mercy Boma Naps-Nkari: Yeah, so the reason why I pointed it out was I was hoping to…

18
00:03:44.450 --> 00:03:58.700
Mercy Boma Naps-Nkari: open it up here, then if anyone has an opinion on what needs to be changed, or what could be improved, then we'll talk about it here, then we'll make the changes, then we'll bring it out, we'll present it to the core developers to take a look at it.

19
00:03:59.240 --> 00:04:01.760
Mercy Boma Naps-Nkari: I don't know if this… Alexis?

20
00:04:01.940 --> 00:04:08.500
Simsonraj Easvarasakthi: Oh yeah, definitely, sounds good. Yeah, I'll give it a couple of days, for anyone to comment.

21
00:04:08.810 --> 00:04:14.360
Simsonraj Easvarasakthi: And I can… I can post this on the Core Developer's channel.

22
00:04:15.190 --> 00:04:17.740
Simsonraj Easvarasakthi: If that would make sense after a couple of days.

23
00:04:18.480 --> 00:04:27.340
Zane Starr: Yeah, I think that would make sense. Just from, like, an outside, like, operational perspective.

24
00:04:27.890 --> 00:04:37.379
Zane Starr: It seems like it might be good to do the presentation for everyone, at the core dev call, but it also seems like it would be

25
00:04:37.830 --> 00:04:39.729
Zane Starr: Probably useful, because…

26
00:04:40.040 --> 00:04:45.270
Zane Starr: I think the core dev, like, time that you have to discuss is so small and narrow.

27
00:04:45.590 --> 00:04:53.750
Zane Starr: Right. To just be able to meet with different client teams, so if maybe Carrie or Mercy could make an introduction to…

28
00:04:54.130 --> 00:05:06.939
Zane Starr: someone that's working on Aragon, or Nevermind, or any of the… or Baisu, even, if we could just take some time to talk with them, to just see, like, hey, does this track?

29
00:05:07.210 --> 00:05:10.490
Zane Starr: That might be, like, useful in the interim before…

30
00:05:10.740 --> 00:05:15.429
Zane Starr: The all-hands, so that way, like, people have a lot more time to, like.

31
00:05:16.050 --> 00:05:21.400
Zane Starr: look at it, get feedback, etc, because I feel like otherwise we're gonna be in, like.

32
00:05:22.250 --> 00:05:32.530
Zane Starr: little 5 to 10 minute chunks that people, like, see it for, like, 5 minutes on that one hour, but then not again for a while. And it's the kind of thing where

33
00:05:32.660 --> 00:05:38.259
Zane Starr: Like, I think a lot of people might have just, like, a lot of weird private stuff going on.

34
00:05:38.370 --> 00:05:39.800
Zane Starr: Yeah.

35
00:05:40.550 --> 00:05:46.860
Zane Starr: not weird private stuff, but I mean, like, error codes and responses that are unexpected.

36
00:05:47.040 --> 00:05:48.630
Zane Starr: Yeah.

37
00:05:51.060 --> 00:05:54.460
Mercy Boma Naps-Nkari: Yeah, so that's actually what I was thinking, but I wanted to, like.

38
00:05:54.570 --> 00:06:05.049
Mercy Boma Naps-Nkari: for us to discuss this in-house, in case of… we have any changes, so that we kind of, like, start changing it at hand, then we'll take it to the JSNROPC Discord, we'll tag some…

39
00:06:05.830 --> 00:06:10.720
Mercy Boma Naps-Nkari: attack, some core developers there, then if it is…

40
00:06:11.130 --> 00:06:16.530
Mercy Boma Naps-Nkari: Looking promising, like, if there's improvement, or they give us a thumbs up on it.

41
00:06:17.030 --> 00:06:27.900
Mercy Boma Naps-Nkari: then taking it over to each client teams, and then maybe officially bringing it up again to the SED, the execution layer core, SEDE.

42
00:06:28.350 --> 00:06:47.889
Mercy Boma Naps-Nkari: But I know that it won't… they won't give us much time, but at least once we have, like, a reasonable feedback from each call… from each client team that is involved, we kind of, like, bring it more to a more, official ground. And then, even if it's 5 minutes, they're going to take a look at it. They will know that, okay, this is happening.

43
00:06:50.250 --> 00:07:07.870
Mercy Boma Naps-Nkari: I don't know if that makes sense. But I just wanted us to, like, talk about it. What do we think? Do we have anything… any changes we want to incorporate? Do we have any idea, improvements, or something we need to improve on? So that it would be… let's do the hard work, so that it would be easier for the core developers to just… it won't take…

44
00:07:08.080 --> 00:07:19.050
Mercy Boma Naps-Nkari: a total change that will, like, take a whole lot of time. Let's just do the heavy lifting, so that when they look at it, they'll be like, oh, oh, this is good, and give us a thumbs up, then we can go ahead.

45
00:07:19.400 --> 00:07:20.709
Mercy Boma Naps-Nkari: Does this make sense?

46
00:07:24.970 --> 00:07:29.290
Simsonraj Easvarasakthi: Yeah, absolutely. Yeah, we can… sorry, go ahead, Kerry.

47
00:07:30.020 --> 00:07:36.680
keri: Oh, no, I was just gonna say, I think that makes sense, I can take a look. I haven't had a chance to look at it, but I can do that today or tomorrow.

48
00:07:38.320 --> 00:07:39.729
keri: And then we can jumpstart.

49
00:07:39.730 --> 00:07:40.530
Simsonraj Easvarasakthi: Thank you, yeah.

50
00:07:41.750 --> 00:07:42.569
Zane Starr: Sounds good.

51
00:07:47.950 --> 00:07:55.440
Mercy Boma Naps-Nkari: So, about the ROPC compact, do we… I don't know, I was trying to look into it, but I'm not sure how to…

52
00:07:55.740 --> 00:07:57.530
Mercy Boma Naps-Nkari: properly,

53
00:07:58.540 --> 00:08:08.580
Mercy Boma Naps-Nkari: contribute based on that? Is there, like, something we need to know for people that want to contribute? Because I think Sina did ask a question about it on the Discord also.

54
00:08:09.230 --> 00:08:11.650
Mercy Boma Naps-Nkari: Kira, I think you're the best person to…

55
00:08:15.610 --> 00:08:25.130
keri: For RBC Compact, I got a PR merged, last week, or actually just this morning, but I put in a PR, to…

56
00:08:25.320 --> 00:08:41.169
keri: look for a spec-only flag. It was already existing in execution APIs, and now the RPC compat simulator respects that, so it's only… so, like, for us to make gas, we don't expect clients to

57
00:08:41.169 --> 00:08:47.139
keri: Have the same, like, return the same values for the estimation of the gas, and so we only look at the keys.

58
00:08:47.210 --> 00:08:52.850
keri: And so, there's a couple tests passing in Hive, and then we probably need to add a few

59
00:08:53.020 --> 00:08:54.520
keri: spec only.

60
00:08:54.640 --> 00:08:57.719
keri: flags on the execution API side.

61
00:08:58.000 --> 00:09:06.329
keri: Do you have specific questions? Does that answer your question, or do you have other specific questions around the RPC Compass?

62
00:09:07.160 --> 00:09:10.340
Mercy Boma Naps-Nkari: Yeah, so I did look at the…

63
00:09:10.610 --> 00:09:22.900
Mercy Boma Naps-Nkari: simulate, and then… but I wanted to know if there is… if there… is there a way to improve the filling, at least to get a reasonable number of passes in the test?

64
00:09:26.030 --> 00:09:32.750
keri: Yeah, I'm still looking at that. Standardizing the error codes will help a lot. There's a lot of,

65
00:09:33.470 --> 00:09:37.130
keri: Error code failures. And then…

66
00:09:37.260 --> 00:09:46.100
keri: like, some of this stuff is just things that clients haven't gotten to. Like, the block timestamp was just added not too long ago for each, like, Git logs.

67
00:09:46.430 --> 00:09:48.260
keri: And…

68
00:09:48.650 --> 00:09:55.830
keri: GEF has it, but no one else does, sort of thing. And then SimulateV1 is the other kind of big one that everyone…

69
00:09:56.440 --> 00:10:03.060
keri: is failing, except Geth. And I think that's, I think it's…

70
00:10:03.560 --> 00:10:08.950
keri: Sort of a lack of consensus across plants, But…

71
00:10:09.290 --> 00:10:11.720
keri: Yeah, I think those are kind of the big ones.

72
00:10:14.230 --> 00:10:15.629
keri: That we need to address.

73
00:10:16.350 --> 00:10:17.659
Mercy Boma Naps-Nkari: Okay, thank you.

74
00:10:18.270 --> 00:10:23.720
Mercy Boma Naps-Nkari: Hello, Luca. I don't know… I think we have a client sitting over here.

75
00:10:24.480 --> 00:10:28.850
Mercy Boma Naps-Nkari: So I will just… I will drop the link to the error codes, file.

76
00:10:34.030 --> 00:10:40.209
Mercy Boma Naps-Nkari: if you can get anybody from Nethermine to take a look at it and maybe give us a feedback on this, this is what we've been working on.

77
00:10:40.700 --> 00:10:42.950
Mercy Boma Naps-Nkari: Good afternoon, Luca, I don't know if you can hear me.

78
00:10:45.180 --> 00:10:47.610
Łukasz Rozmej: Yes, I can hear you, I will take a look.

79
00:10:50.680 --> 00:10:53.879
Zane Starr: Are you familiar with the error codes, like…

80
00:10:55.010 --> 00:10:57.650
Zane Starr: ARC that, we've been jamming on?

81
00:10:59.540 --> 00:11:02.400
Łukasz Rozmej: With error codes what? Sorry, didn't get that.

82
00:11:02.610 --> 00:11:10.870
Zane Starr: So we've been working on, grouping the error codes, so there's a way within the spec

83
00:11:11.030 --> 00:11:15.559
Zane Starr: To be able to specify, like, what is a valid error code range.

84
00:11:15.710 --> 00:11:26.440
Zane Starr: And so, what we're trying to do is reserve ranges of error codes for the SPAC or execution APIs to be able to officially use.

85
00:11:26.450 --> 00:11:37.970
Zane Starr: So, as a client, if you had some error code that was, like, beyond like that, you could safely use, like, this range for returning back a custom error code.

86
00:11:39.340 --> 00:11:40.660
Łukasz Rozmej: Okay.

87
00:11:40.660 --> 00:11:48.259
Zane Starr: So we're trying to standardize the errors. Maybe, Sims, if you wanted to step through it really quickly?

88
00:11:48.630 --> 00:12:07.489
Simsonraj Easvarasakthi: Yeah, no, he pretty much summarized it. So the goal is, for the cross clients, to return, a dependable error code, that, that the clients or DApps or anyone can rely on, rather than looking at the string

89
00:12:07.490 --> 00:12:11.849
Simsonraj Easvarasakthi: of what the error is. Sometimes even that's really vague, right?

90
00:12:11.850 --> 00:12:24.930
Simsonraj Easvarasakthi: So, we wanted to have standardized usage of error codes. Currently, it's pretty much non-existent. For that, the proposal, you know, is looking to reserve some error

91
00:12:25.270 --> 00:12:34.530
Simsonraj Easvarasakthi: codes per category. We've split it into categories. We can add more category, we can remove it, modify it, based on the feedback, but the goal is to

92
00:12:34.780 --> 00:12:48.829
Simsonraj Easvarasakthi: you know, reserve some error codes per category, and also predefine, the numbers to certain errors. For example, let's say nonce too low should always return

93
00:12:48.890 --> 00:12:53.989
Simsonraj Easvarasakthi: Say, 001, something like that. Which means…

94
00:12:54.000 --> 00:13:10.120
Simsonraj Easvarasakthi: any… you can return any error string, but the error code will still be similar, just like in Web2 world. People can reliably start using these error codes slowly, and, you know, will be a better cross-chain, cross-client.

95
00:13:10.120 --> 00:13:14.440
Simsonraj Easvarasakthi: experience for everyone. So that's the goal of the proposal.

96
00:13:14.830 --> 00:13:19.739
Simsonraj Easvarasakthi: And, really would appreciate if you can take a look at it, provide any sort of feedback.

97
00:13:20.650 --> 00:13:23.839
Łukasz Rozmej: Got it. Yeah, makes sense.

98
00:13:24.060 --> 00:13:34.609
Łukasz Rozmej: So, maybe feedback from my side as a person who, for example, sometimes fixed some things that we were doing different on GEF?

99
00:13:35.530 --> 00:13:36.600
Łukasz Rozmej: Wow.

100
00:13:37.600 --> 00:13:45.820
Łukasz Rozmej: That's… sometimes it… the hard thing is not maybe that there is an error code of… of certain,

101
00:13:46.500 --> 00:13:54.030
Łukasz Rozmej: Value, but the problem is that when this error code should be used, And things like,

102
00:13:54.900 --> 00:14:04.090
Łukasz Rozmej: to higher, none to low is fairly… maybe… Maybe it's not even self-explanatory, right?

103
00:14:04.810 --> 00:14:10.230
Łukasz Rozmej: And sometimes there is also, like, an order of validations, right?

104
00:14:10.530 --> 00:14:14.320
Łukasz Rozmej: And this order of validations can also be different per client.

105
00:14:14.660 --> 00:14:16.840
Łukasz Rozmej: are things that… so, in similar

106
00:14:17.170 --> 00:14:19.160
Łukasz Rozmej: You can get different error code.

107
00:14:19.890 --> 00:14:23.610
Łukasz Rozmej: Right. And sometimes… sometimes even, like.

108
00:14:25.550 --> 00:14:43.180
Łukasz Rozmej: Yeah, some things end up in the same buckets in one client, which you get the same error code, but different buckets in other clients when you can get the different error codes. And those things are harder. Not just the existence of error codes, but where, like…

109
00:14:43.260 --> 00:14:50.639
Łukasz Rozmej: exact… exactly specified which error code should be returned where, or, which error code

110
00:14:50.750 --> 00:14:59.020
Łukasz Rozmej: poten… maybe less important, but what, order of the error codes should be validated, right? Things like that are also…

111
00:14:59.260 --> 00:15:01.329
Łukasz Rozmej: Problematic between the clients sometimes.

112
00:15:01.860 --> 00:15:19.860
Simsonraj Easvarasakthi: No, very true, and a great point, too. Actually, last week when I was modifying a few stuff, I also noticed that. The non-stool can be returned directly from mempool for certain clients. Certain clients do that at the consensus level, especially, let's say, some L2s.

113
00:15:20.000 --> 00:15:44.029
Simsonraj Easvarasakthi: Few changes to that, too. It's a great point, but, with this provision, we can actually add non-too-low in both categories. Let's say you can add at, mempool level, you can say 001 non-too-low is mempool level, non-too-low, and we can also go and add it into consensus level, because

114
00:15:44.030 --> 00:15:51.919
Simsonraj Easvarasakthi: We still have flexibility. We haven't used the anterior ranges. If you want to go back and add it to the ranges, we can also extend the range.

115
00:15:52.080 --> 00:16:03.280
Simsonraj Easvarasakthi: We can keep adding it, so now the users will actually know exactly where this non-studulo is happening. If it's happening at the consensus level, or if it's happening at the mempool level.

116
00:16:03.280 --> 00:16:18.330
Simsonraj Easvarasakthi: So even they can react to these different sort of, hierarchy of validations on the client side. So we still have provisions for that. But we haven't defined these overlapping error codes yet in the example

117
00:16:18.330 --> 00:16:25.120
Simsonraj Easvarasakthi: Or the proposal we have raised right now, but we can definitely add it without causing any confusions.

118
00:16:25.960 --> 00:16:44.930
Simsonraj Easvarasakthi: that's… that's why we have grouping, error grouping. We have, like, mempool, we have execution client errors, we have consensus errors, we have network errors. We can, again, also add more grouping, or reduce grouping, or split grouping, based on how we want, but the overall

119
00:16:44.980 --> 00:17:01.779
Simsonraj Easvarasakthi: general idea applies to pretty much every single client, because they have a mempool, they have a consensus, they have a execution layer, so that's how we are facing these classifications on. So, we can still add these overlapping errors into different categories.

120
00:17:04.730 --> 00:17:05.220
Łukasz Rozmej: Mmm.

121
00:17:05.220 --> 00:17:06.550
Simsonraj Easvarasakthi: That made sense.

122
00:17:06.990 --> 00:17:09.150
Łukasz Rozmej: Yeah, got it, got it.

123
00:17:09.589 --> 00:17:12.860
Łukasz Rozmej: Maybe it would benefit from a more explicit

124
00:17:13.880 --> 00:17:23.119
Łukasz Rozmej: spec when this should be thrown, right? So, for example, What is, non-studulow for… Transaction pool, right?

125
00:17:23.540 --> 00:17:27.750
Łukasz Rozmej: probably based on chain head, etc, right? If… if the…

126
00:17:27.900 --> 00:17:37.660
Łukasz Rozmej: So, for example, I would say, like, proper spec would be… Well… that this… Tates…

127
00:17:38.340 --> 00:17:44.929
Łukasz Rozmej: That the nouns for the address of, Sender of the transaction.

128
00:17:45.550 --> 00:17:47.140
Łukasz Rozmej: Right?

129
00:17:47.610 --> 00:18:04.239
Łukasz Rozmej: that is already in the state based on the current block, current, fork choice updated head, right? Message from the fork choice update, head. Nonce is smaller than,

130
00:18:04.630 --> 00:18:07.170
Łukasz Rozmej: Right? Smaller than provider, right? Yeah.

131
00:18:07.170 --> 00:18:07.810
Simsonraj Easvarasakthi: Yeah, yeah.

132
00:18:07.810 --> 00:18:11.800
Łukasz Rozmej: a bit more verbose, what exactly does it mean? Okay, for nonstoolau, it's…

133
00:18:12.420 --> 00:18:19.240
Łukasz Rozmej: pretty obvious, but there are, especially in ETH call, let's say, scenarios.

134
00:18:19.350 --> 00:18:30.020
Łukasz Rozmej: There can be really custom… not custom, but really more complex, scenarios where this verbosity would be,

135
00:18:30.560 --> 00:18:31.599
Łukasz Rozmej: Nice to have.

136
00:18:32.880 --> 00:18:45.829
Simsonraj Easvarasakthi: Oh yeah, that's a really valid feedback. Would really also appreciate if you can point me to some. This is me coming from directly using, let's say, a client perspective rather than a protocol perspective.

137
00:18:45.880 --> 00:18:57.850
Simsonraj Easvarasakthi: Working with multiple chains, so we… I went ahead and tested a lot of different chains, checking what is the value they written back to the client or the users in the JSON RPC.

138
00:18:57.960 --> 00:19:15.100
Simsonraj Easvarasakthi: and that pretty much aligned with what the spec I have written right now, but definitely we can add any of these overlapping messages, too. And, more to say that we don't want to, you know, restrict users on returning any sort of

139
00:19:15.100 --> 00:19:17.540
Simsonraj Easvarasakthi: String-based error messages.

140
00:19:17.540 --> 00:19:35.589
Simsonraj Easvarasakthi: That is up to the user or clients to define, whoever is going to adopt the spec, but we'll just hold the number. So, we will know if we get anything between, let's say, 001 to 0010, it's going to be gas errors, which means we can sort of manage.

141
00:19:35.590 --> 00:19:35.980
Łukasz Rozmej: No.

142
00:19:35.980 --> 00:19:37.420
Simsonraj Easvarasakthi: Yes, and cool.

143
00:19:37.420 --> 00:19:42.910
Łukasz Rozmej: Especially on things like reverts, etc, users are relying on messages.

144
00:19:43.690 --> 00:20:01.939
Simsonraj Easvarasakthi: Right, yeah, we have execution errors specifically defined class category, which means it is coming directly from execution clients, which is sort of telling the users, hey, this is coming from execution layer, you cannot have automated logic on top, go and check the error messages and act manually.

145
00:20:01.940 --> 00:20:18.319
Simsonraj Easvarasakthi: But if it's a gas-based error, which, if I get, by default, I can, you know, try and bump the gas, or try and, you know, bump the nonce, try and bump the gas limit to, you know, make sure the transaction goes through, which can be an automated process, rather than…

146
00:20:18.400 --> 00:20:33.629
Simsonraj Easvarasakthi: it's a retryable logic rather than always failing logic. So that's how I'm trying to classify and also give more room for both clients and users to initially see how the specs spread out.

147
00:20:33.630 --> 00:20:39.119
Simsonraj Easvarasakthi: Rather than being too restrictive and too instructive to the clients, hey.

148
00:20:39.180 --> 00:20:45.619
Simsonraj Easvarasakthi: You have to use this sort of error message for this error code, and, you know,

149
00:20:45.860 --> 00:20:48.619
Simsonraj Easvarasakthi: Just… just follow the spec.

150
00:20:48.780 --> 00:21:08.090
Simsonraj Easvarasakthi: To the .NT. So the cold right now is, like, let's see if I do noncerror, and if it's going to be 8001. If you want another noncerror in execution layer, if you still want to return it to the user directly without having a filter on top, you can add it to the execution layer and still return it.

151
00:21:08.090 --> 00:21:24.679
Simsonraj Easvarasakthi: But you'll have… for the users, they will start looking at the spec, they'll see, hey, okay, I see non-too-low error, both in mempool as well as in execution, so I need to do validation for these two and react to these errors in a way that I want to.

152
00:21:24.710 --> 00:21:29.970
Simsonraj Easvarasakthi: So it was also a little expandable in that, in that sense.

153
00:21:31.810 --> 00:21:50.649
Łukasz Rozmej: Okay, I won't go into details, but I can point you to one of the PRs we recently did that can, for example, help you with understanding some of the problems we have with aligning to GAF, right? Awesome. Because the problem for us is also, like, there was no spec, so GEF is the spec.

154
00:21:50.980 --> 00:22:00.669
Łukasz Rozmej: And in order to, you know… and then someone complains, that's okay, they get different, for example, error messages, and…

155
00:22:00.980 --> 00:22:03.820
Łukasz Rozmej: The only way to do it is try to,

156
00:22:03.920 --> 00:22:10.050
Łukasz Rozmej: reverse engineer gaffe, right? Of how the message is… and this is exactly a point…

157
00:22:10.150 --> 00:22:20.240
Łukasz Rozmej: where I think this kind of thing happened, and it actually… wasn't… A completely straightforward,

158
00:22:21.110 --> 00:22:25.050
Łukasz Rozmej: Thing. It was also about reverse here, I think, a bit.

159
00:22:25.050 --> 00:22:33.260
Simsonraj Easvarasakthi: I see. No, this is very helpful. I'm gonna actually look into this and see if I can incorporate this into the example.

160
00:22:33.420 --> 00:22:38.269
Łukasz Rozmej: Because we went from some two-state,

161
00:22:38.420 --> 00:22:52.720
Łukasz Rozmej: two-state results that we're returning something deeply from EVM to free-state results, let's say. And depending on that, we had to, adjust the error, but I think this is more smoothly for ETH get call.

162
00:22:53.130 --> 00:22:59.690
Łukasz Rozmej: If I'm correct. There's also an issue for that, yeah.

163
00:23:00.210 --> 00:23:07.230
Łukasz Rozmej: So, those are the most hard things to, to, to get aligned on, because, like.

164
00:23:07.380 --> 00:23:14.450
Łukasz Rozmej: Yeah, sure, non-to-low, which is a static check that you do before even going to EVM, is relatively easy.

165
00:23:14.580 --> 00:23:16.330
Łukasz Rozmej: To standardize.

166
00:23:17.520 --> 00:23:32.120
Simsonraj Easvarasakthi: No, yeah, definitely agree. Yeah, we can discuss this, offline, too. This is really helpful. I'll take a look at the PR and see if I can also use that in the… or previous serve for your use case.

167
00:23:32.340 --> 00:23:41.829
Simsonraj Easvarasakthi: But, the main goal here is, whatever error being returned to the users or dApps or client, on a JSON RPC level.

168
00:23:42.030 --> 00:23:43.849
Simsonraj Easvarasakthi: Should be…

169
00:23:44.300 --> 00:23:56.139
Simsonraj Easvarasakthi: categorize and classified, so people can start relying on error codes rather than messages, rejects, and stuff. But yeah, definitely we'll take a look at this. Thank you so much.

170
00:23:56.900 --> 00:24:03.900
Łukasz Rozmej: I think, like, this is somewhat already done in the clients, like, the easier…

171
00:24:04.170 --> 00:24:12.329
Łukasz Rozmej: errors are somewhat standardized. Again, probably the devil is in the details, and, like, if it's 80% standardized and 20%

172
00:24:12.500 --> 00:24:20.470
Łukasz Rozmej: Not, it's still, problematic. Yeah, but that's my… At least on Nevermind,

173
00:24:21.070 --> 00:24:38.260
Łukasz Rozmej: feeling that this… this is mostly, especially the simple errors, the static… let's say the static errors, which are, you know, right there on the surface that you can validate on the surface level without going deeper into, into the…

174
00:24:39.320 --> 00:24:43.960
Łukasz Rozmej: The calls that you have some… that you have propagated back from something… somewhere deeper.

175
00:24:44.150 --> 00:24:58.230
Łukasz Rozmej: Right. In the architecture. Those are relatively easy and mostly done, but again, I haven't looked into Rev, or Aragon, or Bezo that deeply, so…

176
00:24:58.360 --> 00:25:03.290
Łukasz Rozmej: Maybe that's only… but I expect they have… similar experience.

177
00:25:04.350 --> 00:25:07.180
Zane Starr: Do you have any thoughts on,

178
00:25:09.440 --> 00:25:17.430
Zane Starr: Being able to, like, list out or investigate the dynamic calls that may throw back, different errors.

179
00:25:18.070 --> 00:25:18.900
Zane Starr: Yeah.

180
00:25:19.150 --> 00:25:19.889
Zane Starr: What would be your…

181
00:25:19.890 --> 00:25:26.670
Łukasz Rozmej: That's a good question, probably…

182
00:25:26.880 --> 00:25:31.589
Łukasz Rozmej: The best way would be… to…

183
00:25:33.270 --> 00:25:36.569
Łukasz Rozmej: go through an implementation, like GEF?

184
00:25:38.100 --> 00:25:42.090
Łukasz Rozmej: And, find all the errors there.

185
00:25:42.460 --> 00:25:44.729
Łukasz Rozmej: And create a test for each one.

186
00:25:45.400 --> 00:25:49.179
Łukasz Rozmej: And then try them… try those tests on different clients.

187
00:25:49.900 --> 00:25:51.170
Łukasz Rozmej: Let's see what happens.

188
00:25:56.590 --> 00:26:11.530
Łukasz Rozmej: Right? And that would show you… and then, don't already assume that maybe GEF is super correct and others are not. If you have this discrepancy, try and investigate a bit why this discrepancy… where does it come from?

189
00:26:12.190 --> 00:26:15.690
Łukasz Rozmej: And… which way you should standardize, right, let's say.

190
00:26:18.100 --> 00:26:20.539
Łukasz Rozmej: That's… that's how I would approach it.

191
00:26:21.100 --> 00:26:22.770
Łukasz Rozmej: If I had to do it.

192
00:26:25.800 --> 00:26:30.999
Mercy Boma Naps-Nkari: Okay, so I have something to say. I don't think, like…

193
00:26:31.110 --> 00:26:35.139
Mercy Boma Naps-Nkari: Wouldn't it be better if we don't always rely on GETs to validate?

194
00:26:36.090 --> 00:26:40.969
Mercy Boma Naps-Nkari: Can we do something about that? Because GET can be right at every time.

195
00:26:41.820 --> 00:26:52.189
Łukasz Rozmej: Yeah, so, there are two things, right? We need to define the spec, because it's not defined as a spec, right? So that should be the goal, in my opinion, to define the spec.

196
00:26:52.360 --> 00:26:57.400
Łukasz Rozmej: And now, GEF is a good starting point, because,

197
00:26:57.830 --> 00:27:12.610
Łukasz Rozmej: GEF is the spec to some extent, because there's no spec, and GEF was the main client for so long that it kind of became the spec. So that's why I say it's a very good starting point, but on the other hand, I'm not saying that

198
00:27:12.680 --> 00:27:22.380
Łukasz Rozmej: you should blindly follow Gaff if you see that discrepancy between clients, but then we can investigate that scenario and figure out what the specs should be.

199
00:27:22.470 --> 00:27:33.119
Łukasz Rozmej: But starting with… we need to start with somewhere, and so… that's why I said… and you… I don't expect people to dive into multiple code bases.

200
00:27:33.280 --> 00:27:39.360
Łukasz Rozmej: So, diving into one codebase and generating tests based on that one codebase… This is a starting point.

201
00:27:46.700 --> 00:27:53.249
Simsonraj Easvarasakthi: Yeah, just a small point. I… when I was writing the spec, I think, like, a year ago.

202
00:27:53.380 --> 00:28:11.849
Simsonraj Easvarasakthi: That's exactly what I did. I attached the Excel sheet, but these are very basic tests that I did. I think I extended it at a later point, but I don't have the stored results for that. I was not able to find it, but this is basic ones I did really long back.

203
00:28:11.990 --> 00:28:28.860
Simsonraj Easvarasakthi: But you can see it is testing base over, Aragon, GET, Corally, even chains like zkSync and a few other chains. It's very inconsistent across, at least when I started, maybe there was some sort of standardization?

204
00:28:28.860 --> 00:28:37.369
Simsonraj Easvarasakthi: But it's not written anywhere for the rest of the clients or chains to follow, unless you fork GET or, like, you work really closely with GET.

205
00:28:37.430 --> 00:28:49.549
Simsonraj Easvarasakthi: The goal now is, at least let's write it down so some, you know, everyone has some place where they can look this up and follow it up, rather than diving into one code piece, like you mentioned. Get.

206
00:28:49.550 --> 00:28:53.159
Łukasz Rozmej: Okay, that's a good date…

207
00:28:53.280 --> 00:28:56.759
Łukasz Rozmej: a point, let's say, but, how should I read it?

208
00:28:56.960 --> 00:29:02.450
Łukasz Rozmej: Is there a good way… Okay, but for example…

209
00:29:02.590 --> 00:29:07.689
Łukasz Rozmej: Just, just to looking… you, you were doing get balance with the latest parameter, right?

210
00:29:07.960 --> 00:29:08.640
Simsonraj Easvarasakthi: Right.

211
00:29:08.770 --> 00:29:15.059
Łukasz Rozmej: If those are in different points of time, you will get different, different,

212
00:29:15.600 --> 00:29:18.770
Łukasz Rozmej: responses, right? Because the balance of this address could change.

213
00:29:19.310 --> 00:29:31.280
Simsonraj Easvarasakthi: Right, so these are trying to simulate failure cases, mostly, which means, like, if I'm getting an error, what is the error code? I'm… all I'm focusing is on an error code.

214
00:29:31.280 --> 00:29:32.010
Łukasz Rozmej: Okay.

215
00:29:32.010 --> 00:29:47.729
Simsonraj Easvarasakthi: Yeah. But again, this is too old. I can try and redo this test with a more expansive use cases, but with the basic ones, at least, like, even the standard ones, we can actually see how different clients are in completely different

216
00:29:47.740 --> 00:29:54.120
Simsonraj Easvarasakthi: Error messages or error code, or reuse the error code that you can see, minus 32602.

217
00:29:54.490 --> 00:30:03.730
Simsonraj Easvarasakthi: get balance, also for, like, get code, even for incorrect method name and stuff, so it is… it is non-reliable.

218
00:30:03.850 --> 00:30:09.390
Simsonraj Easvarasakthi: Even forget. We cannot say this one error code means something.

219
00:30:09.390 --> 00:30:17.890
Łukasz Rozmej: This error code means, invalid parameters or something? What's… what's… let me double-check what this is, because I don't know them by heart.

220
00:30:18.650 --> 00:30:27.580
Łukasz Rozmej: So… Where do I have this? Okay… what's set at? Nevermind.

221
00:30:28.780 --> 00:30:34.869
Łukasz Rozmej: Aww… Yeah, this is invalid params, right? So it's a very generic error code.

222
00:30:34.870 --> 00:30:36.080
Simsonraj Easvarasakthi: Right, yeah.

223
00:30:36.080 --> 00:30:40.540
Łukasz Rozmej: So, if the parameters are invalid, like, you cannot deserialize them, right?

224
00:30:40.710 --> 00:30:41.410
Simsonraj Easvarasakthi: Right.

225
00:30:41.410 --> 00:30:48.159
Łukasz Rozmej: And, for example… There might be different, different, reasons, right?

226
00:30:48.270 --> 00:30:54.120
Łukasz Rozmej: But you generally don't… don't… differentiate them.

227
00:30:54.360 --> 00:31:01.969
Łukasz Rozmej: you cannot necessarily ask parameters, yeah, your request is wrong. And maybe we can put in message what exactly is… we have a problem with, and that's…

228
00:31:02.140 --> 00:31:04.689
Łukasz Rozmej: Fine, in my opinion, to some extent.

229
00:31:04.970 --> 00:31:06.890
Łukasz Rozmej: We…

230
00:31:07.530 --> 00:31:15.140
Łukasz Rozmej: not sure if there's point… well, maybe there is a point of doing more detailed, but… yeah, I'm looking at your…

231
00:31:16.370 --> 00:31:23.300
Łukasz Rozmej: Sheets, jumping through bedzo Aragon gaff, and they are more or less returning the same error code in those scenarios.

232
00:31:23.440 --> 00:31:40.350
Simsonraj Easvarasakthi: But even… okay, so, yeah, I… let's do this. I'll actually do more, little more expansive, test cases. I know this one I tried to more, you know, try and simulate more on the basic error codes, rather than diving deep into the

233
00:31:40.370 --> 00:31:44.270
Simsonraj Easvarasakthi: execution logic. I wanted to initially check how

234
00:31:44.290 --> 00:31:56.469
Simsonraj Easvarasakthi: the standardized error codes that JSON RPC currently uses is being used. Even with that, it's, I can exactly point between which ones are colliding or overlapping.

235
00:31:56.470 --> 00:32:08.869
Simsonraj Easvarasakthi: But I want to actually do… also use this as some feedback and do a bit more execution-based, error codes, and try and simulate, you know, failure error cases.

236
00:32:08.870 --> 00:32:14.289
Łukasz Rozmej: Let me rephrase what I said. So, looking at the sheet you provided.

237
00:32:14.290 --> 00:32:18.249
Simsonraj Easvarasakthi: Yeah. Baz do, Aragon, and Geff, more or less, I'm…

238
00:32:18.250 --> 00:32:24.479
Łukasz Rozmej: It's hard without a proper, like, diff, on that. More or less, return the same errors.

239
00:32:27.100 --> 00:32:30.649
Łukasz Rozmej: Anything obvious when they return different error codes.

240
00:32:31.510 --> 00:32:37.890
Simsonraj Easvarasakthi: True, but also, the same error codes for different methods.

241
00:32:37.890 --> 00:32:43.390
Łukasz Rozmej: Yeah, yeah, but if… okay, but if an error code is an invalid parameter, it's regardless of the method, right?

242
00:32:43.710 --> 00:32:50.900
Łukasz Rozmej: If you cannot deserialize parameters for a method, that's a generic error code that can be used from different methods.

243
00:32:51.060 --> 00:32:52.469
Simsonraj Easvarasakthi: True, true.

244
00:32:52.470 --> 00:32:55.559
Łukasz Rozmej: And this is the most one that you, that you have.

245
00:32:55.560 --> 00:33:01.870
Simsonraj Easvarasakthi: Yeah, yeah, that's the most one I'm actually trying to look for, because it's been long, I'm trying to remember which one.

246
00:33:02.210 --> 00:33:17.659
Simsonraj Easvarasakthi: for example, if you get… if you take the ETH estimate gas on, let's say, BESU, and it's returning minus 32,000, saying execution reverted. It doesn't say why it was reverted, I actually don't know what was the simulation.

247
00:33:17.660 --> 00:33:19.260
Łukasz Rozmej: Okay, okay, okay, and…

248
00:33:19.680 --> 00:33:32.530
Łukasz Rozmej: That's what I was saying about the complex error codes, because this goes and spin-ups the VM. VM, VM does,

249
00:33:33.200 --> 00:33:38.619
Łukasz Rozmej: its thing, and then it reverts, right? In DVM. And there are my.

250
00:33:38.620 --> 00:33:39.190
Simsonraj Easvarasakthi: Yeah, yeah.

251
00:33:39.190 --> 00:33:49.430
Łukasz Rozmej: multiple things why this thing is reverted. It might be a revert opcode directly from the contract, and this revert opcode might have some data attached or not.

252
00:33:49.460 --> 00:34:02.709
Łukasz Rozmej: Or it might be out of gas, probably, might result in the same thing, or it might be something else. So, now it gets complex, and this is completely unspecified. Right. Right.

253
00:34:02.710 --> 00:34:12.129
Simsonraj Easvarasakthi: No, no, true, I agree. Yeah, that's why I want to do more execution-based tests, but if you look at the same error code in ZKEVM, you would see that for even

254
00:34:12.239 --> 00:34:18.190
Simsonraj Easvarasakthi: wrong parameter. For example, if you take invalid block parameter format.

255
00:34:18.330 --> 00:34:24.939
Simsonraj Easvarasakthi: Line 20. It's using the same error code for non-execution-based.

256
00:34:24.949 --> 00:34:40.699
Łukasz Rozmej: Okay, okay, got it, but that's the KV, I'm saying. Okay, I… you… you're going beyond Ethereum clients, okay? I don't have… I don't have an idea about beyond Ethereum clients, so yeah, that's where I agree with you, sure. Right.

257
00:34:40.699 --> 00:34:52.779
Simsonraj Easvarasakthi: So this is going to, like, this is sort of like a guide for everyone, any client, any chain, to be like, hey, we have a standard that exists, please try and follow the standard. Even we are in a position where we can

258
00:34:52.789 --> 00:35:05.119
Simsonraj Easvarasakthi: work with, like, really nascent chains, EVM chains, and say, hey, please follow the standards so all the dApps can, you know, by default, work with you without doing any modifications.

259
00:35:05.120 --> 00:35:09.860
Łukasz Rozmej: Got it, I do agree, especially if you, like, start,

260
00:35:10.740 --> 00:35:23.370
Łukasz Rozmej: adding, like, niche implementations, right, to the mix. This may make sense. What I was saying was more from perspective of established

261
00:35:23.530 --> 00:35:25.030
Łukasz Rozmej: Right, right, no.

262
00:35:25.030 --> 00:35:25.390
Simsonraj Easvarasakthi: Definitely.

263
00:35:25.390 --> 00:35:25.980
Łukasz Rozmej: premium client.

264
00:35:25.980 --> 00:35:27.449
Simsonraj Easvarasakthi: Yeah, yeah, yeah.

265
00:35:27.450 --> 00:35:29.130
Łukasz Rozmej: The Big Five, let's say.

266
00:35:29.130 --> 00:35:39.340
Simsonraj Easvarasakthi: Makes sense, yeah. No, definitely, I agree. I'll also try and do more tests and see if I can find any inconsistencies between even the big five,

267
00:35:39.530 --> 00:35:41.419
Simsonraj Easvarasakthi: But yeah, so the point was, like.

268
00:35:41.420 --> 00:35:47.630
Łukasz Rozmej: some, but I would say it's not as bad as you might think.

269
00:35:47.630 --> 00:35:53.829
Simsonraj Easvarasakthi: Right, right. No, I agree, but the goal is for cross-EVM chains, like EVM…

270
00:35:54.250 --> 00:36:02.399
Simsonraj Easvarasakthi: All EVM chains or EVM clients should be standardized. How we expect the whole JSON method standardization?

271
00:36:02.660 --> 00:36:04.190
Łukasz Rozmej: Expecting payers.

272
00:36:04.190 --> 00:36:04.740
Simsonraj Easvarasakthi: as well.

273
00:36:04.740 --> 00:36:08.240
Łukasz Rozmej: But where those other EVM clients…

274
00:36:08.840 --> 00:36:12.519
Łukasz Rozmej: come from… most of them are forks of… of GEF.

275
00:36:13.140 --> 00:36:31.760
Łukasz Rozmej: They might be… they might be stale forks of GEF, so they are not updated, right? And that might be one of the problems, why, for example, maybe GEF standardized something, or fixed something, and they don't have that fix, or standardization. Not sure about ZitKey VMs.

276
00:36:31.980 --> 00:36:43.449
Łukasz Rozmej: That's a good question, but ZKVMs now, most of them would also run… a customly compiled

277
00:36:44.190 --> 00:36:45.590
Łukasz Rozmej: EVM…

278
00:36:45.910 --> 00:36:58.449
Łukasz Rozmej: implementation that would also come from Big Five and maybe EVM1, or ATRX, which is also, like, a newer client, right? But I think they mostly run compiled REF at the moment.

279
00:36:58.450 --> 00:37:09.160
Łukasz Rozmej: I know because we are trying to compile Nevermind to this format, at the moment, we have a big initiative around that, and hopefully will also join soon.

280
00:37:09.160 --> 00:37:21.400
Łukasz Rozmej: Gef is also being compiled, I think, to 64-bit, RISC-V. So those, those implement… those… those implementations that are running compiled.

281
00:37:21.400 --> 00:37:29.670
Łukasz Rozmej: let's say Ethereum client code will inherit the Ethereum client properties in this regard.

282
00:37:29.840 --> 00:37:32.720
Łukasz Rozmej: I think. I'm not sure if they will.

283
00:37:33.480 --> 00:37:40.540
Łukasz Rozmej: Yeah, they'll be… Okay, maybe, maybe, maybe they need a bit of additional code, additional instrumentation there.

284
00:37:40.790 --> 00:37:42.430
Simsonraj Easvarasakthi: Yeah, some things I've noticed…

285
00:37:42.430 --> 00:37:48.670
Łukasz Rozmej: Okay, that's a question mark, then, on my side, but they could, they could potentially inherit that.

286
00:37:49.060 --> 00:37:49.550
Łukasz Rozmej: to some.

287
00:37:49.550 --> 00:37:56.309
Simsonraj Easvarasakthi: Yeah, yeah. No, sometimes I've noticed, some of these chains run just an RPC layer on top.

288
00:37:56.480 --> 00:38:10.459
Simsonraj Easvarasakthi: Just to do certain sequencer-based validations, or add a few more functionality, and they sort of return completely different error messages and codes just because they're running, like, a RPC

289
00:38:10.460 --> 00:38:23.300
Simsonraj Easvarasakthi: wrap layer on top of any existing clients, like Geth or any other fork. So, the goal is for them to also, say, either use already standardized

290
00:38:23.300 --> 00:38:35.249
Simsonraj Easvarasakthi: follow the spec, because SPEC also follows the big five clients. That's why we are working with the Ethereum Foundation, to make sure, you know, this is set as a standard so everyone can follow, and

291
00:38:35.250 --> 00:38:36.639
Simsonraj Easvarasakthi: So cute. It's just…

292
00:38:36.640 --> 00:38:53.490
Łukasz Rozmej: What, for example, if you have two problems, like gas price too low and non-s too low? Do you want to define that in this scenario, you have to return one over the other, or, like, a priority, like I said, the order of…

293
00:38:53.910 --> 00:38:56.700
Łukasz Rozmej: Validations, or whatever you want.

294
00:38:56.960 --> 00:39:08.959
Simsonraj Easvarasakthi: You know, that's up to the clients. At the end of the day, whatever the clients, I mean, we're not trying to change the logic of validation, just the value that they're returning. Just add proper…

295
00:39:08.960 --> 00:39:27.339
Łukasz Rozmej: Your existing validation will remain the same. You need to be very precise in your tests, if you write tests after that, if you provide, and in my opinion, with a spec, there should be a test set provided, to… when you're doing the test, that only this one thing has to be wrong in the request.

296
00:39:27.830 --> 00:39:28.890
Simsonraj Easvarasakthi: Right, yeah, yeah.

297
00:39:28.890 --> 00:39:36.529
Łukasz Rozmej: Because if there will be more than one, because if there will be more than one, then you can get discrepancy between,

298
00:39:36.580 --> 00:39:53.519
Łukasz Rozmej: between the results, and it will only spawn confusion, and people will just say that those tests are garbage, because, for example, they returned the thing in GEF order, and Nevermind has a bit different order, and now the tests fail, right?

299
00:39:53.520 --> 00:39:53.920
Simsonraj Easvarasakthi: Right.

300
00:39:54.030 --> 00:39:56.169
Łukasz Rozmej: And it will be just frustration.

301
00:39:56.510 --> 00:40:01.640
Simsonraj Easvarasakthi: No, completely agree, because, we've been talking about this a bit, too, because DD…

302
00:40:01.890 --> 00:40:07.610
Simsonraj Easvarasakthi: The test negative, especially the negative test case, is not going to be straightforward, and

303
00:40:08.350 --> 00:40:10.880
Simsonraj Easvarasakthi: It's going to cause a lot of confusion, so…

304
00:40:10.880 --> 00:40:20.310
Łukasz Rozmej: Depends which ones. The simple ones are not that bad. Get a proper working case and just change one thing, right?

305
00:40:20.310 --> 00:40:25.099
Simsonraj Easvarasakthi: Right. And you… you can get something relatively easily.

306
00:40:25.100 --> 00:40:25.970
Łukasz Rozmej: Yeah.

307
00:40:26.640 --> 00:40:34.310
Łukasz Rozmej: targeted, right? Let's say. The more complex ones that involve execution, yeah, those are a lot harder to craft.

308
00:40:34.310 --> 00:40:51.340
Simsonraj Easvarasakthi: Yeah, execution ones and consensus ones are really hard to achieve, definitely. Yeah, we haven't gone to that stage yet, writing negative test cases. Hopefully, with the test I'm going to do across clients, may come as a base for the future.

309
00:40:51.340 --> 00:40:59.899
Simsonraj Easvarasakthi: But right now, goal is, like, non-restrictive spec documentation out there, so people start looking at it and start using it.

310
00:40:59.900 --> 00:41:14.790
Simsonraj Easvarasakthi: And then, we'll have the test, to make sure that they slowly start being compliant to these specs. It's not a spec, like, that's why we didn't write it as an EIP. It's more like a suggestion and guide for now.

311
00:41:14.880 --> 00:41:31.490
Simsonraj Easvarasakthi: We are not making it restrictive that you should return this code. Again, because it's almost impossible to make sure, like you said, the order of validation and making sure, we cover all the use cases, all the scenarios of errors,

312
00:41:31.760 --> 00:41:45.339
Simsonraj Easvarasakthi: for any client. So, for now, the goal is keep it simple, at least the major ones, the client, the dApps or wallets uses, and rely, on those errors to do some reactive logic.

313
00:41:45.460 --> 00:41:57.319
Simsonraj Easvarasakthi: We're just focusing on that, at least for now, so at least that part will be seamless and making it easy, and then move on to complicate it slowly. That's why the spec is expandable for the future.

314
00:42:02.080 --> 00:42:03.500
Łukasz Rozmej: Okay.

315
00:42:05.080 --> 00:42:17.149
Simsonraj Easvarasakthi: But I'll work on the test, that's definitely a good feedback, really appreciate that. It's also going to give me some points, to modify the spec if I need to. Well, I'll work on the spec, the test.

316
00:42:21.310 --> 00:42:23.039
Łukasz Rozmej: Okay, yeah, it looks…

317
00:42:23.330 --> 00:42:29.149
Łukasz Rozmej: So that, looking at this current spec, it is okay, but it's very, very minimal at the moment, right?

318
00:42:29.150 --> 00:42:38.870
Simsonraj Easvarasakthi: Right, no, very true. Yeah, we'll be keeping it very minimal, intentionally, like, just the ones that is being used by the apps, our clients.

319
00:42:41.550 --> 00:42:42.330
Łukasz Rozmej: Mmm.

320
00:42:42.330 --> 00:42:49.239
Simsonraj Easvarasakthi: Yeah, we can… we can discuss more, we can cover more tests, or more error codes, results…

321
00:42:49.240 --> 00:42:58.729
Łukasz Rozmej: It might be good to… in the general one, just one thing, it might be good to expand a bit what is parseller, invalid request, invalid params, how do…

322
00:42:58.730 --> 00:43:00.179
Simsonraj Easvarasakthi: Those are standardized.

323
00:43:00.180 --> 00:43:00.780
Łukasz Rozmej: Yeah, so those are…

324
00:43:00.780 --> 00:43:04.050
Simsonraj Easvarasakthi: standardized already… Yeah, I know, I know, I know. Yeah.

325
00:43:04.530 --> 00:43:05.040
Łukasz Rozmej: Yeah.

326
00:43:05.040 --> 00:43:06.380
Simsonraj Easvarasakthi: We can, you can do that too, right?

327
00:43:06.380 --> 00:43:11.090
Łukasz Rozmej: Yeah, they are standardized by… aha, okay, JSON RFPC spec, okay, got it.

328
00:43:11.090 --> 00:43:13.689
Simsonraj Easvarasakthi: Right, right. Yeah, we are not touching that range.

329
00:43:14.010 --> 00:43:19.690
Łukasz Rozmej: Okay, cool. Got it. And that's fine. I didn't even know that they are standardized there.

330
00:43:20.280 --> 00:43:25.369
Simsonraj Easvarasakthi: Yeah, they have, like, two implementation standard and just spec standard.

331
00:43:28.410 --> 00:43:29.200
Łukasz Rozmej: Okay.

332
00:43:29.480 --> 00:43:30.530
Łukasz Rozmej: Got it.

333
00:43:31.920 --> 00:43:41.090
Łukasz Rozmej: Then that's fine, yeah, but like I said, for,

334
00:43:41.330 --> 00:43:45.639
Łukasz Rozmej: Ethereum clients, this is not really that useful, what you have there.

335
00:43:45.890 --> 00:43:53.700
Łukasz Rozmej: For the main ones, right? Because I think… Almost everything should be… Like that already.

336
00:43:54.660 --> 00:43:56.120
Simsonraj Easvarasakthi: Yeah, yeah.

337
00:43:56.120 --> 00:44:00.330
Łukasz Rozmej: There might be an exception here or two, but you won't find it until you write the tests.

338
00:44:00.330 --> 00:44:01.260
Simsonraj Easvarasakthi: Right.

339
00:44:01.260 --> 00:44:01.810
Łukasz Rozmej: And around it.

340
00:44:01.810 --> 00:44:09.270
Simsonraj Easvarasakthi: Right, so, I mean, I was initially thinking of changing the error codes to be in, like, an order within the range for now.

341
00:44:10.240 --> 00:44:22.829
Simsonraj Easvarasakthi: there is no particular range defining these, categories, right? Like, gas errors are not belong… it's not belonging to, let's say, 32,000 to 32,200.

342
00:44:24.390 --> 00:44:27.280
Łukasz Rozmej: But you want to change the existing error codes?

343
00:44:27.280 --> 00:44:28.220
Simsonraj Easvarasakthi: Right, yes.

344
00:44:28.220 --> 00:44:30.360
Łukasz Rozmej: Oh… man.

345
00:44:31.570 --> 00:44:36.810
Łukasz Rozmej: I think that's already… You know…

346
00:44:38.330 --> 00:44:45.129
Łukasz Rozmej: like, you would have to change both the Ethereum client, and then all the users of those server codes.

347
00:44:45.450 --> 00:44:52.340
Simsonraj Easvarasakthi: Right. I mean, currently the… no one uses the error codes, as far as I know, because it's not… it's not reliably…

348
00:44:52.340 --> 00:44:53.619
Łukasz Rozmej: That's a variable statement.

349
00:44:53.620 --> 00:44:54.755
Simsonraj Easvarasakthi: I…

350
00:44:56.170 --> 00:45:05.349
Simsonraj Easvarasakthi: I'm working… just a bit of a context, I'm from Chainlink Labs. We work with so many EVM chains, right? And,

351
00:45:06.050 --> 00:45:10.660
Simsonraj Easvarasakthi: at least, personally, I have worked with, like, 50, 60 EVM chains.

352
00:45:11.220 --> 00:45:25.029
Simsonraj Easvarasakthi: And for 95% to 98% of the chains, we don't use error codes at all. We rely on, string regex mapping internally, to react to these errors, because… mainly because

353
00:45:25.320 --> 00:45:40.250
Simsonraj Easvarasakthi: Even the RPC clients, just like an RPC provider, have their own wrapper, return completely different error code for a different… for any error message. So, we don't use it. And as far as I've spoken…

354
00:45:40.250 --> 00:45:47.130
Łukasz Rozmej: devs did it, core devs did it properly, and then RPC providers and users fucked it up.

355
00:45:48.140 --> 00:46:02.689
Simsonraj Easvarasakthi: Right, even for core devs, but there is no definition written down anywhere, right? No spec or document saying, hey, if this is their code, which means this is going to be the behavior, and that's what we want to achieve, at least, like.

356
00:46:02.690 --> 00:46:03.120
Łukasz Rozmej: Yeah.

357
00:46:03.120 --> 00:46:04.550
Simsonraj Easvarasakthi: pointer, yeah.

358
00:46:04.840 --> 00:46:05.520
Łukasz Rozmej: Got it.

359
00:46:06.520 --> 00:46:21.590
Łukasz Rozmej: So you say that if we remap the error codes, that work would be mostly on the… on us, on the core developers, and potentially, like, our PC providers, but, the thing with remapping is that,

360
00:46:23.580 --> 00:46:31.889
Łukasz Rozmej: There will be a lot of inconsistencies, like, in between flights, people running different versions, and that would cause even more chaos, to some extent.

361
00:46:32.380 --> 00:46:39.320
Simsonraj Easvarasakthi: No, I… yeah, definitely agree. I'll also think about it, how we can… sort of…

362
00:46:39.550 --> 00:46:44.829
Simsonraj Easvarasakthi: Make sure there's not break. Again, right, at least for initial couple of versions…

363
00:46:44.830 --> 00:46:56.200
Łukasz Rozmej: There are so many numbers, there are so many numbers that you can say, up to this point, those are legacy error codes, and they were defined before, and now we are defining new error codes in this, in this…

364
00:46:56.380 --> 00:46:57.519
Simsonraj Easvarasakthi: Right, right.

365
00:46:57.520 --> 00:47:00.090
Zane Starr: Right. Legacy.

366
00:47:00.090 --> 00:47:02.190
Simsonraj Easvarasakthi: Legacy. Yeah.

367
00:47:02.350 --> 00:47:08.040
Zane Starr: So, like, yeah, we could try and do it in a way that it's, like, it just keeps it…

368
00:47:08.240 --> 00:47:09.090
Zane Starr: Right.

369
00:47:10.250 --> 00:47:14.240
Zane Starr: The old values as exceptionals, and then…

370
00:47:14.240 --> 00:47:15.360
Łukasz Rozmej: Yeah, that's what I meant.

371
00:47:15.360 --> 00:47:17.450
Zane Starr: Yeah, yeah, and then…

372
00:47:17.450 --> 00:47:18.349
Simsonraj Easvarasakthi: Yeah, we can do that.

373
00:47:18.350 --> 00:47:24.250
Zane Starr: We should say, from this time forward on, we are no longer doing that.

374
00:47:24.420 --> 00:47:30.990
Zane Starr: Yeah, that might actually be best, because I'm thinking about like… if…

375
00:47:31.100 --> 00:47:45.079
Zane Starr: a producer or consumer is aware of something happening, then they're probably… there's always someone that's relying on it, that, like, in a weird way that you wouldn't know.

376
00:47:45.140 --> 00:47:45.960
Łukasz Rozmej: Exactly.

377
00:47:45.960 --> 00:47:47.040
Simsonraj Easvarasakthi: Yep.

378
00:47:49.330 --> 00:47:57.930
Łukasz Rozmej: I'm thinking, can you have two error codes for the same code, one in legacy, one in NOT, but not really, that wouldn't work out well.

379
00:47:58.350 --> 00:47:59.010
Zane Starr: Oh…

380
00:47:59.010 --> 00:48:13.320
Simsonraj Easvarasakthi: And, initially, we're not going to force, clients or anyone to, you know, fail the validations of, let's say, high validations or RPC test gen. At least for a couple of versions, it'll be a

381
00:48:13.740 --> 00:48:26.719
Simsonraj Easvarasakthi: Guide, saying, hey, we're not expecting this error code for this range, so try and change it, and then slowly start, you know, at least for the basic ones, start moving to

382
00:48:26.980 --> 00:48:29.860
Simsonraj Easvarasakthi: Stricter implementations.

383
00:48:32.250 --> 00:48:49.239
Łukasz Rozmej: Like I said, implementing those basic error codes is very simple. Sometimes, when those are those deeper that come from when you get to virtual machine execution, and then you need to map that to error code, that's where

384
00:48:49.370 --> 00:48:53.289
Łukasz Rozmej: Most of the problems come in.

385
00:48:54.480 --> 00:49:03.899
Łukasz Rozmej: Similarly… and you do that in a lot of places, because you do that in simple ETH vehicle or gas estimate, but you also do it… Right.

386
00:49:03.900 --> 00:49:05.380
Simsonraj Easvarasakthi: Same transaction.

387
00:49:05.380 --> 00:49:07.050
Łukasz Rozmej: for example, yeah.

388
00:49:07.190 --> 00:49:13.350
Łukasz Rozmej: A said transaction goes to a transaction pool, so you don't execute it directly. Right, right.

389
00:49:13.540 --> 00:49:20.469
Łukasz Rozmej: But, yeah, so there are different cases of that that might also differ. Now there's ETH Simulate, which is…

390
00:49:20.620 --> 00:49:24.190
Łukasz Rozmej: Big piece of its own,

391
00:49:25.000 --> 00:49:31.359
Łukasz Rozmej: complicated. I think we… we did pretty well define error codes there for the…

392
00:49:31.700 --> 00:49:40.509
Łukasz Rozmej: ETH simulation part, but simulation also involves running a virtual machine, and again, those error codes bubble… can bubble up from there.

393
00:49:40.880 --> 00:49:51.429
Łukasz Rozmej: In some regards, maybe not, I don't remember. Or maybe they are… they would be… covered. Okay, I don't remember. Yes, there are so many details that…

394
00:49:51.640 --> 00:49:56.309
Łukasz Rozmej: I, I… it's hard to grasp everything.

395
00:49:57.790 --> 00:50:02.289
Łukasz Rozmej: Mmm… Yeah, okay. That's my feedback, I think.

396
00:50:04.470 --> 00:50:08.800
Simsonraj Easvarasakthi: Oh, no, really appreciate, I'll… I have some…

397
00:50:09.060 --> 00:50:12.990
Simsonraj Easvarasakthi: stuff that I need to do on my end, but…

398
00:50:13.090 --> 00:50:15.880
Simsonraj Easvarasakthi: Yeah, at least the goal is, let's do…

399
00:50:16.140 --> 00:50:20.900
Simsonraj Easvarasakthi: Basic, simpler codes make everyone's life a little bit easier.

400
00:50:20.900 --> 00:50:26.389
Łukasz Rozmej: And slowly move on to see how we can expand this, and that's intentionally left out.

401
00:50:26.600 --> 00:50:32.709
Simsonraj Easvarasakthi: the reserved range. We still have the ranges that you can use, people can still relay on them.

402
00:50:32.780 --> 00:50:42.600
Simsonraj Easvarasakthi: But then slowly move towards using this as a base or a guide, and we all, of course, is gonna contribute and set the actual number or value.

403
00:50:42.610 --> 00:50:57.429
Simsonraj Easvarasakthi: And we can actually keep adding it. Let's say Basu has a special use case and only BASO returns in the future. We can add it to the pre-reserved ranges. Of course, it's going to be a version bump. People can start relying on it. If not.

404
00:50:57.440 --> 00:51:02.889
Simsonraj Easvarasakthi: Send a completely new error message, but at least the ones that everyone is going to rely on across

405
00:51:02.930 --> 00:51:04.280
Simsonraj Easvarasakthi: different clients.

406
00:51:04.350 --> 00:51:20.610
Simsonraj Easvarasakthi: is, at least we need to standardize that, because it's, again, like I mentioned, doing 60-plus EVM chains as an org, we've done more than 100 chains, but we haven't used this ever in any of the use cases or scenarios.

407
00:51:20.610 --> 00:51:23.130
Łukasz Rozmej: That's not what I would expect.

408
00:51:24.010 --> 00:51:27.279
Simsonraj Easvarasakthi: So, yeah, that's exactly what I'm trying to fix.

409
00:51:28.330 --> 00:51:34.209
Łukasz Rozmej: In my opinion, when people not using them is why they are not being respected.

410
00:51:34.790 --> 00:51:42.470
Łukasz Rozmej: Like I said, and I disagree that people are not using them, because we did have some…

411
00:51:43.130 --> 00:51:48.130
Łukasz Rozmej: tickets to… to align our error codes with GEF, so…

412
00:51:49.130 --> 00:51:52.799
Łukasz Rozmej: So… there are definitely some people using it.

413
00:51:53.300 --> 00:51:58.260
Łukasz Rozmej: And I think that the biggest

414
00:51:58.520 --> 00:52:03.240
Łukasz Rozmej: biggest challenge for you would be getting our board RPC providers.

415
00:52:03.630 --> 00:52:05.370
Łukasz Rozmej: And making them compliant.

416
00:52:06.110 --> 00:52:10.159
Simsonraj Easvarasakthi: Yeah, yeah, it's going to be a little difficult, yeah.

417
00:52:10.960 --> 00:52:15.509
Łukasz Rozmej: making client devs, a bit, like I said, like I said, big five.

418
00:52:15.730 --> 00:52:24.489
Łukasz Rozmej: is trivial. We would love to have it. We would love to have tests, so it will show us where we are not compliant.

419
00:52:26.660 --> 00:52:36.030
Łukasz Rozmej: But… Rpc, if they have their own rappers, and the rappers do whatever they want, then…

420
00:52:36.150 --> 00:52:40.150
Łukasz Rozmej: Yeah, that's on them, and they need to fix that by themselves, so…

421
00:52:40.150 --> 00:52:53.669
Simsonraj Easvarasakthi: Yeah, yeah, yeah, no, definitely. This is a long goal, like, implementing a standard is never easy, but at least we have good communi- you know, communication with most of these RPC party providers.

422
00:52:53.770 --> 00:53:06.770
Simsonraj Easvarasakthi: And personal relationships with chains, where we can, you know, say, hey, now, Ethereum Foundation has a standard, and we work based on this standard.

423
00:53:06.910 --> 00:53:13.879
Simsonraj Easvarasakthi: So, we sort of come in like a middleman and saying, please work with the standard so it's easy for everyone.

424
00:53:13.880 --> 00:53:31.189
Łukasz Rozmej: Again, I think you need those test suits, because if you just say them, oh, this is displayed, please, please comply, and they would say, yeah, whatever, and if you say, oh, this is the, test suit that every client, if you run them locally, every major client.

425
00:53:31.260 --> 00:53:37.480
Łukasz Rozmej: complies with, and you just don't, and we can run it on your endpoint and see you don't.

426
00:53:37.780 --> 00:53:47.439
Łukasz Rozmej: Then, That may, you know, budge them a bit. And it's… and for the.

427
00:53:47.440 --> 00:53:48.130
Simsonraj Easvarasakthi: Oh, yeah.

428
00:53:48.130 --> 00:53:55.659
Łukasz Rozmej: For the simpler error code, I think it's not that much of a work on their side to become.

429
00:53:55.660 --> 00:53:56.340
Simsonraj Easvarasakthi: Right, right.

430
00:53:56.470 --> 00:54:09.110
Simsonraj Easvarasakthi: Yeah, the end goal is implementing this in the Hive test and incorporating this in the Fortnite test that runs, I think. I'm not fully sure, but yeah, the end goal is get this included…

431
00:54:09.110 --> 00:54:15.309
Łukasz Rozmej: But I also mean you need to… like, we have a…

432
00:54:16.070 --> 00:54:30.690
Łukasz Rozmej: page for HiveTest, you need to target the, Alchemy, Infura, etc, and, as a test there, to some extent. Okay, it might be hard, because some are state… some of those will be state-based.

433
00:54:30.990 --> 00:54:34.400
Łukasz Rozmej: But some are not, so at least with that, with the stateless tests.

434
00:54:34.990 --> 00:54:40.950
Łukasz Rozmej: That's, like, you send a transaction with invalid nons, that's a stateless test, right?

435
00:54:40.950 --> 00:54:41.550
Simsonraj Easvarasakthi: Right.

436
00:54:41.550 --> 00:54:47.539
Łukasz Rozmej: If you have… small amount of gas on… they have a private key, right? Whatever, you can probably…

437
00:54:48.000 --> 00:54:49.799
Łukasz Rozmej: do that, right?

438
00:54:49.930 --> 00:54:54.510
Łukasz Rozmej: So you can send a valid signed transaction.

439
00:54:54.670 --> 00:54:57.360
Łukasz Rozmej: And this is, like, doesn't cost much.

440
00:54:59.310 --> 00:55:10.519
Łukasz Rozmej: Yeah, so for the, for the basic things, you should also, like, you know, put them on the pedestal, yeah, you're, you're, you know, you're, you're the problem here, right? And fix it.

441
00:55:10.520 --> 00:55:11.169
Simsonraj Easvarasakthi: That's what they mean.

442
00:55:11.170 --> 00:55:14.830
Łukasz Rozmej: Like, you, you need a bit of a stick to…

443
00:55:15.480 --> 00:55:31.929
Simsonraj Easvarasakthi: No, agreed. Yeah, definitely, we'll start working on the test. I was just trying to gather, more feedback on the proposal, so I don't have to rewrite the test, but testers are definitely the next step to this.

444
00:55:32.040 --> 00:55:36.409
Łukasz Rozmej: I'm fine with a proposal, I find it basic,

445
00:55:36.610 --> 00:55:43.010
Łukasz Rozmej: like, from my perspective, never mind that I expect it's mostly compliant with it already.

446
00:55:45.150 --> 00:55:48.989
Simsonraj Easvarasakthi: It would be good to have a test case when, if we're not compliant, like.

447
00:55:48.990 --> 00:55:51.999
Łukasz Rozmej: 3 or 4 of those, we would probably change immediately.

448
00:55:52.000 --> 00:55:54.609
Simsonraj Easvarasakthi: Oh yeah, yeah, that's definitely coming.

449
00:55:55.650 --> 00:55:56.950
Simsonraj Easvarasakthi: Thank you.

450
00:55:58.030 --> 00:56:08.210
Simsonraj Easvarasakthi: I do want to give back some time if anyone has any other opinions or some other topics we want to discuss, Mercy. I really appreciate the feedback.

451
00:56:08.350 --> 00:56:09.339
Simsonraj Easvarasakthi: Thanks so much.

452
00:56:10.770 --> 00:56:11.200
Łukasz Rozmej: Yeah, sure.

453
00:56:11.200 --> 00:56:16.759
Mercy Boma Naps-Nkari: I don't have any other thing to discuss, just, I need to,

454
00:56:16.890 --> 00:56:20.089
Mercy Boma Naps-Nkari: Kerry, I don't know, there was a chat,

455
00:56:20.540 --> 00:56:27.580
Mercy Boma Naps-Nkari: on Discord about the ROPC test suite. So, Sina did ask for regular updates so that

456
00:56:27.590 --> 00:56:41.529
Mercy Boma Naps-Nkari: they can track the process in resolving the issue, and then if you can, like, summarize the differences that needs to be addressed. So I don't know if you can, like, work this out behind the scenes, and then we'll get back to Sina on this. I don't know if you saw the chat.

457
00:56:42.290 --> 00:56:47.450
keri: I didn't, but I, I have a spreadsheet going, so I can…

458
00:56:48.090 --> 00:56:52.010
keri: Okay, okay. Was that this week, or last week?

459
00:56:53.650 --> 00:56:56.550
Mercy Boma Naps-Nkari: Can you just send me a DM, or I'll kind of.

460
00:56:56.550 --> 00:56:57.200
keri: I see. Oh, gotcha.

461
00:56:57.200 --> 00:56:57.529
Mercy Boma Naps-Nkari: Thank you.

462
00:56:57.530 --> 00:56:58.970
keri: Gotcha. Yeah, yeah.

463
00:56:58.970 --> 00:56:59.600
Mercy Boma Naps-Nkari: Bye.

464
00:57:00.000 --> 00:57:00.940
keri: Yep.

465
00:57:01.720 --> 00:57:05.550
Mercy Boma Naps-Nkari: Okay, that's all from my end. I don't know if someone else has something to say.

466
00:57:05.720 --> 00:57:07.449
Mercy Boma Naps-Nkari: It flies up on the floor wrap up.

467
00:57:11.990 --> 00:57:19.190
Mercy Boma Naps-Nkari: Alright, I guess that's all for today. Thank you all for joining, and it was really nice getting all this feedback. Thank you, Luca.

468
00:57:21.480 --> 00:57:22.939
Łukasz Rozmej: Yeah, sure, no problem.

469
00:57:25.560 --> 00:57:28.720
Zane Starr: Alright, bye guys. Thanks, everyone. Peace.

470
00:57:28.720 --> 00:57:30.670
Mercy Boma Naps-Nkari: Amazing. Thank you, Shane.

471
00:57:30.800 --> 00:57:31.370
Mercy Boma Naps-Nkari: Bye.

472
00:57:31.370 --> 00:57:31.910
Simsonraj Easvarasakthi: Bye.

