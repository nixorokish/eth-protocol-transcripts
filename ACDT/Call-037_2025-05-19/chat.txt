00:04:56	Roman:	gm
00:05:13	Parithosh Jayanthi:	Replying to "gm"

+1 $PROTOCOL for being the first to show up
00:05:37	Roman:	Replying to "gm"

Lol, where can I claim
00:05:42	Parithosh Jayanthi:	Reacted to "Lol, where can I cla..." with 😂
00:06:34	Pooja Ranjan:	Reacted to "+1 $PROTOCOL for bei..." with 😂
00:08:20	Kamil Chodoła:	Hi!
00:08:36	Roman:	Wo ist Marius?
00:08:40	Justin Florentine (Besu):	gethoc'lock y'all
00:08:52	Will Corcoran:	Looks like the zoom link in the Protocol Cal needs to be updated.
00:08:54	Will Corcoran:	Been there
00:09:10	Parithosh Jayanthi:	Replying to "Been there"

Hm I used it too and think it worked?
00:09:23	Justin Florentine (Besu):	Reacted to "Hm I used it too and..." with ➕
00:09:29	Piotr | Ipsilon:	Reacted to "Hm I used it too and..." with ➕
00:09:42	Minhyuk Kim:	Reacted to "Hm I used it too and..." with ➕
00:09:43	Nicolas Consigny:	Reacted to "Hm I used it too and..." with ➕
00:10:02	Nicolas Consigny:	Replying to "Been there"

Wait did you get stuck with the link from the calendar ? @Will Corcoran
00:10:37	Parithosh Jayanthi:	https://discord.com/channels/595666850260713488/892088344438255616/1373975537789304862
00:11:16	Gabriel Trintinalia | Besu:	From besu, yes
00:11:21	MariusVanDerWijden:	geth yes
00:11:25	Roman:	reth yes
00:11:25	Barnabas:	better to ask who is against having it in
00:11:32	jochem-brouwer (EthJS):	ethjs yes
00:11:33	Marek Moraczyński:	Nethermind yes
00:11:50	Parithosh Jayanthi:	https://notes.ethereum.org/@ethpandaops/fusaka-devnet-0
00:12:01	Will Corcoran:	Replying to "Been there"

Hey @Nicolas Consigny I think I figured out my situation: I tend to copy the invite form the protocol cal to my personal cal - and it looks like the copied invite doesn’t update if the zoom link gets updated.
00:12:22	Roman:	Bpos!
00:12:26	Gabriel Trintinalia | Besu:	Reacted to "Bpos!" with 👍
00:13:00	Barnabas:	Proposed suggestion:
    "cancunTime": 0,
    "blobSchedule": {
…
      "prague": {
        "target": 6,
        "max": 9,
        "baseFeeUpdateFraction": 5007716
      },
      "bpo1": {
        "timestamp": 1747670415,
        "target": 9,
        "max": 12,
        "baseFeeUpdateFraction": 5007716
      },
      "bpo2": {
        "timestamp": 1747671183,
        "target": 9,
        "max": 12,
        "baseFeeUpdateFraction": 5007716
      },
      "bpo3": {
        "timestamp": 1747671951,
        "target": 9,
        "max": 12,
        "baseFeeUpdateFraction": 5007716
      },
      "bpo4": {
        "timestamp": 1747672719,
        "target": 9,
        "max": 12,
        "baseFeeUpdateFraction": 5007716
      },
…
    },
    "pragueTime": 0,
    "bpo1Time": 1747670415,
    "bpo2Time": 1747671183,
    "bpo3Time": 1747671951,
    "bpo4Time": 1747672719,
  },
00:13:49	potuz:	can't get used to this thing not muting automatically on login, apologize for any noise
00:14:23	Roman:	fwiw idts peering with peers on another bpo fork is that bad for ELs
00:14:32	Parithosh Jayanthi:	Reacted to "fwiw idts peering wi..." with 👍🏽
00:14:35	Gabriel Trintinalia | Besu:	Reacted to "fwiw idts peering wi..." with 👍🏽
00:14:45	Nicolas Consigny:	Reacted to "Hey @Nicolas Consign..." with 👍
00:15:08	Raúl Kripalani:	my view: BPO is just an implementation detail; from the consensus perspective, a change in blob counts is a breaking change and therefore should be signalled and treated like a hardfork
00:15:35	Justin Florentine (Besu):	Reacted to "my view: BPO is just..." with ➕
00:17:17	Gajinder:	Why leave scope for bad data
00:19:37	Barnabas:	sounds like an EL only hard fork :D
00:19:46	Justin Florentine (Besu):	Reacted to "sounds like an EL on..." with ➕
00:19:47	Barnabas:	everyone been wanting to have those anyways since the merge
00:19:49	Gajinder:	Yea we need just forversion update only
00:20:26	Gajinder:	Handshake one is ok with me
00:20:57	Barnabas:	why can’t we just have the gascost configured in the cl config too?
00:21:19	Barnabas:	so we can verify it pretty much right away
00:21:38	Justin Traglia:	On the CL side, I’m in favor of BPO forks as a long term solution.
00:21:47	terence:	Replying to "why can’t we just ha..."

separation of concern
00:23:03	Gajinder:	Makes sense for incremental strategy with bpos
00:23:12	Barnabas:	This is just early testing for bpo_1 to be triggered 1mo after fusaka or something like that
00:24:00	Justin Traglia:	Yeah an issue/PR would be great.
00:24:30	MariusVanDerWijden:	geth: yes
00:24:33	potuz:	Replying to ""

Thanks!
00:24:37	Gajinder:	Yes from ethjs
00:24:37	Barnabas:	Reacted to "geth: yes" with 🎉
00:24:40	Barnabas:	Reacted to "Yes from ethjs" with 🎉
00:24:41	Gabriel Trintinalia | Besu:	besu yes
00:24:44	Barnabas:	Reacted to "besu yes" with 🎉
00:24:45	jochem-brouwer (EthJS):	Heeft gereageerd op "Yes from ethjs" met 👍
00:24:48	Justin Florentine (Besu):	Reacted to "besu yes" with ➕
00:24:52	potuz:	Replying to ""

but got like 10 Zoom clients and never remember to update them all
00:24:54	potuz:	Replying to ""

:)
00:24:55	Gabriel Trintinalia | Besu:	Replying to "Proposed suggestion:..."

Is this the format that ELs are going with?
00:25:08	Daniel Lehrner (Besu):	We are getting EL only forks, before CL only forks. LOL
00:25:09	Roman:	we should also update BPO EIP to reflect that on EL it’s treated as a hardfork because currently it’s misleading and has no mention of fork id changes
00:25:22	Gabriel Trintinalia | Besu:	Reacted to "we should also updat..." with ➕
00:25:28	MariusVanDerWijden:	We don't need it
00:25:43	Fredrik:	Reacted to "but got like 10 Zoom..." with 😅
00:25:50	Gabriel Trintinalia | Besu:	Reacted to "We don't need it" with ➕
00:25:51	Gajinder:	So for CL we adding in metadata?
00:26:05	Parithosh Jayanthi:	Please wait for the CL discussion, ill start that next and clarify all points
00:26:18	Justin Florentine (Besu):	Reacted to "We don't need it" with ➕
00:27:27	Gajinder:	Yea with static forks we don't need timestamp in blobschedule
00:27:39	Gabriel Trintinalia | Besu:	Reacted to "Yea with static fork..." with ➕
00:27:41	Parithosh Jayanthi:	Reacted to "Yea with static fork..." with ➕
00:28:22	MariusVanDerWijden:	Nethermind is using a different format anyway
00:28:27	Parithosh Jayanthi:	Reacted to "Nethermind is using ..." with 👍🏽
00:28:30	jochem-brouwer (EthJS):	Heeft gereageerd op "Nethermind is usin..." met 👍
00:29:13	pk910:	the max safe integer in json is 2^53 - 1
should be fine for timestamps
00:29:18	Barnabas:	wen uniform genesis file format?
00:29:25	Gabriel Trintinalia | Besu:	Reacted to "wen uniform genesis ..." with ➕
00:29:46	Ben Adams:	9007199254740991 is max safe integer for json/javascript
00:29:51	Justin Florentine (Besu):	Replying to "wen uniform genesis ..."

still waiting on your pr
00:30:11	Justin Traglia:	Reacted to "still waiting on you..." with 😂
00:30:16	Barnabas:	Replying to "wen uniform genesis ..."

first I need my besu certificate
00:30:58	jochem-brouwer (EthJS):	Antwoord verzenden naar "wen uniform genesi..."

lets eip spec it
00:31:24	Justin Florentine (Besu):	Replying to "wen uniform genesis ..."

adding Barnabas to the working group brb
00:31:41	Barnabas:	we should downscore peers
00:31:50	Gajinder:	Add field in metadata
00:32:05	Marek Moraczyński:	Replying to "wen uniform genesis ..."

should we be able to configure EIPs list in the fork? 🙂
00:32:11	terence:	Opened an issue: https://github.com/ethereum/consensus-specs/issues/4331
00:32:22	Justin Traglia:	Reacted to "Opened an issue: htt..." with 🙏
00:32:28	Justin Florentine (Besu):	Replying to "wen uniform genesis ..."

i love that feature tbh, but first step is just spec current state
00:32:46	Justin Florentine (Besu):	Replying to "wen uniform genesis ..."

i.e. json schema for geths format plus some docs, done
00:33:18	Marek Moraczyński:	Replying to "wen uniform genesis ..."

if we want to adjust then it is a good occasion to design the format we would like to see
00:33:28	Gajinder:	Handshake filter is better than downscoring
00:33:40	mpaulucci | ethrex:	Reacted to "wen uniform genesis ..." with ➕
00:33:44	potuz:	I agree with Pari
00:34:06	Justin Florentine (Besu):	Replying to "wen uniform genesis ..."

oof. can't we iterate on it since it doesn't require consensus? i'd also like to separate the state definition out as well.
00:34:11	terence:	lol
00:34:12	Enrico Del Fante (tbenr):	MetaData Field seems interesting, it is already changed in Fulu, right?
00:34:14	potuz:	sorry Barnabas I love you
00:34:16	felix (eest):	Reacted to "lol" with 😂
00:34:22	jochem-brouwer (EthJS):	lol
00:34:25	Agnish Ghosh:	Reacted to "lol" with 😂
00:34:27	Justin Traglia:	Reacted to "lol" with 😂
00:34:36	mpaulucci | ethrex:	Reacted to "lol" with 😂
00:34:37	Parithosh Jayanthi:	Reacted to "lol" with 😂
00:35:03	Barnabas:	Replying to "sorry Barnabas I lov..."

😂
00:35:21	Nicolas Consigny:	Reacted to "lol" with 😂
00:35:26	Justin Florentine (Besu):	calls need more "HELL NO"s tbh
00:35:28	Agnish Ghosh:	same for nimbus
00:35:34	Barnabas:	sounds like you need ansible to generate go code 😂
00:35:35	Parithosh Jayanthi:	Reacted to "calls need more "HEL..." with 😂
00:35:36	Mario Vega:	Reacted to "calls need more "HEL..." with 😂
00:35:38	Gabriel Trintinalia | Besu:	Reacted to "calls need more "HEL..." with 😅
00:35:40	Parithosh Jayanthi:	Replying to "calls need more "HEL..."

Makes discussions easy
00:35:46	Barnabas:	Replying to "sounds like you need..."

I know just the guy
00:36:28	Barnabas:	Reacted to "calls need more "HEL..." with 😂
00:36:32	Gajinder:	Not schedule just current active params
00:36:32	Barnabas:	Reacted to "lol" with 😂
00:37:10	MariusVanDerWijden:	Oh no, prysm following the geth paradigm, arguing on ACD
00:37:11	Gajinder:	Replying to "Not schedule just cu..." 

 Allows people to incrementally update
00:37:17	Parithosh Jayanthi:	Reacted to "Oh no, prysm followi..." with 😂
00:37:19	Gabriel Trintinalia | Besu:	Reacted to "Oh no, prysm followi..." with 😂
00:37:20	Barnabas:	Reacted to "Oh no, prysm followi..." with 😂
00:37:29	potuz:	We need to add entries to the fork schedule, versions for forks, tests for the new fork etc
00:37:32	Barnabas:	Replying to "Oh no, prysm followi..."

they used the geth boilerplate 😂
00:37:35	potuz:	it's not just implementing the new fork
00:37:40	Agnish Ghosh:	Reacted to "it's not just implem..." with 👍
00:37:44	Manu:	Agree with Potuz
00:37:44	Agnish Ghosh:	Reacted to "We need to add entri..." with 👍
00:37:48	Manu:	Reacted to "it's not just implem..." with 👍
00:37:48	Manu:	Reacted to "We need to add entri..." with 👍
00:37:53	Agnish Ghosh:	agree with potuz as well
00:37:58	terence:	ya which I think it may be easier
00:38:55	Barnabas:	Could we not have a new field in enr that states which bpo a specific node is on?
00:39:02	Agnish Ghosh:	imo the most critical path in the code is processing execution payload
00:39:04	Gajinder:	Ideally we should mixin hash of current active config with forkversion
00:39:38	Barnabas:	Fusaka-devnet-0 will not have outdated peers, so this won’t break anyting.
00:39:46	Barnabas:	but def. should look into it going forward.
00:40:00	Anders Elowsson:	A side note, if you wanna bump the blob count slowly you could do so smoothly also with some simple function (i.e, going from 9 to 72 max) over the desired time frame. It is kinda ugly having that code in the spec but it reduces the risk of failures at discretely timed fork boundaries. You would then upon discovery of issues need to have some agreement on how to stop this slow increase.
00:40:14	terence:	but i think we need to do the same with ENR changes as well, and this is new
00:40:47	Justin Florentine (Besu):	Replying to "A side note, if you ..."

cries in "vanilla home staker"
00:41:00	potuz:	Replying to "We need to add entri..."

this is contained to a single package in prysm rather than everywhere else where there's a switch statement over forks
00:41:19	Barnabas:	https://checkpoint-sync.peerdas-devnet-7.ethpandaops.io
00:41:30	Manu:	Prysm does not (yet) implement backfill.
00:41:38	Barnabas:	It would be great if every client could verify their own clients can do backfill for supernodes and non supernodes.
00:41:43	Jeroen Ost:	Reacted to "It would be great ..." with 😮
00:41:45	Agnish Ghosh:	we do, but the image isn't in devnet 7 yet
00:41:46	Justin Florentine (Besu):	Replying to "A side note, if you ..."

i.e. it's a problem when i'm not using mev and i'm already near the limits of my upstream bandwidth. i could get automated into late block proposals and missed rewards
00:42:12	Anders Elowsson:	Replying to "A side note, if you ..."

We would have the same schedule as in the blobSchedule file, just smooth
00:42:14	terence:	Replying to "We need to add entri..."

i could be wrong, but I dont think we can do it in single package
00:42:21	Gabriel Trintinalia | Besu:	Besu yes
00:42:22	Agnish Ghosh:	no way
00:42:24	potuz:	Replying to "We need to add entri..."

it should be only P2P
00:42:27	MariusVanDerWijden:	geth: yes
00:42:31	Roman:	reth: yes
00:42:47	Barnabas:	Reacted to "reth: yes" with 🎉
00:42:48	Francesco:	Replying to "A side note, if you ..."

Side note, but you should be able to propose blocks without sending the blobs out at all, just relying on people already having them in the mempool. Or use the max-blobs flag
00:42:48	Barnabas:	Reacted to "geth: yes" with 🎉
00:42:56	potuz:	Replying to "We need to add entri..."

it's at the handshake level, and then of course the enforcing of the new max, which has to be dealt anyway on either approach
00:42:59	Barnabas:	Replying to "Besu yes"

are you guys skipping devnet 7?
00:43:03	Anders Elowsson:	Reacted to "Side note, but you s..." with 👍
00:43:09	Barnabas:	Reacted to "no way" with 😮‍💨
00:43:28	Justin Florentine (Besu):	Replying to "A side note, if you ..."

did max blobs get SFI'd?
00:43:40	Gabriel Trintinalia | Besu:	Replying to "Besu yes"

we have a branch ready, it does not have any bpo changes tho. Is devnet 7 running with bpo?
00:43:41	Barnabas:	test in prod
00:43:41	Minhyuk Kim:	Replying to "we do, but the image..."

If you’d like to test it in a longer running devnets, let me know the versions and I can run it in our devnets
00:43:45	jochem-brouwer (EthJS):	Heeft gereageerd op "test in prod" met 😅
00:43:50	terence:	Replying to "We need to add entri..."

We also need it for Sync package. We need to be able to join the new column sidecar subnets
00:43:52	Mario Vega:	Reacted to "test in prod" with 😅
00:43:55	Anders Elowsson:	Replying to "A side note, if you ..."

It’s a client flag?
00:44:02	Barnabas:	Replying to "Besu yes"

devnet 7 doesn’t have bpo
00:44:08	Justin Florentine (Besu):	Replying to "A side note, if you ..."

it's a proposed one, nonstandard
00:44:10	Gabriel Trintinalia | Besu:	Reacted to "devnet 7 doesn’t hav..." with 👍
00:44:14	Barnabas:	we are happy to create a few nodes to test besu peerdas stuff
00:44:16	Anders Elowsson:	Replying to "A side note, if you ..."

Ok
00:44:40	Gabriel Trintinalia | Besu:	Replying to "Besu yes"

https://github.com/Gabriel-Trintinalia/besu/tree/peerdas-devnet-7
00:44:49	Barnabas:	💯
00:44:51	potuz:	Replying to "We need to add entri..."

this is independent of what I am saying those changes will happen anyway with or without a fork
00:45:03	Will Corcoran:	https://github.com/ethereum/beacon-APIs/issues/519 

https://github.com/ethereum/beacon-APIs/pull/524
00:45:13	potuz:	Replying to "We need to add entri..."

the point is that the specific fork boilerplate gets replaced by changes in a single package: p2p
00:47:00	Gajinder:	Validator get blinded block even for local block
00:47:34	Parithosh Jayanthi:	Reacted to "We need to add entri..." with 👍
00:47:51	Gajinder:	For signing but yes validator is sticky to beacon as beacon bundles data while publish call
00:48:03	terence:	Replying to "We need to add entri..."

that makes sense to me
00:51:27	potuz:	@Raúl Kripalani If you guys get involved you can redo the tests that pandaops did on the current implementation without any changes
00:51:56	potuz:	It'd be nice to get more data without changes in code but with the right mesh sizes and different block sizes
00:52:52	Raúl Kripalani:	@potuz sure, makes sense. are those tests linked from the ethresearch thread?  https://ethresear.ch/t/faster-block-blob-propagation-in-ethereum/21370/37
00:53:15	Justin Traglia:	There are a few consensus-specs PRs I would like to get more eyes on:
Clarify node behavior when validator custody changes
Remove MAX_REQUEST_* config variables
Backport blob schedule to deneb
00:53:21	potuz:	it doesn't make sense to continue working uniess the current imlpementation shows a big difference. The next steps would be
- study network topology and optimal mesh sizes chunk numbers
- Study and even implement curves over F_2 so that we can use 1 byte scalars instead of 32
00:53:37	potuz:	I am willing to pipeline the assembly for the latter if there aren't good implementations out there
00:53:42	Raúl Kripalani:	Replying to "@potuz sure, makes s..."

this? https://github.com/OffchainLabs/prysm/pull/14813
00:54:08	Raúl Kripalani:	Reacted to "it doesn't make sens..." with 👀
00:54:13	potuz:	Replying to "@potuz sure, makes s..."

This is the branch we tested yes,
00:54:21	Barnabas:	Could we actually discuss the 10MB block limit EIP?
00:54:27	Barnabas:	I think we should consider adding that to fusaka (https://eips.ethereum.org/EIPS/eip-7934 )
00:54:46	potuz:	Replying to "@potuz sure, makes s..."

we want to run tests like pandaops did with 1000 nodes distributed geographically (or ethshadow, if I can be convinced that it is actually not adding it's own artifacts)
00:55:13	MariusVanDerWijden:	Has anyone looked for anything yet?
00:55:25	Ben Adams:	Reacted to "Could we actually di..." with 💯
00:55:36	Francesco:	Replying to "it doesn't make sens..."

In the previous test you used full scalars right? (Rather than 1-byte scalars which blow-up over time)
00:55:53	Francesco:	Replying to "it doesn't make sens..."

Did you have any measurement on the number of hops btw?
00:56:05	Raúl Kripalani:	Replying to "@potuz sure, makes s..."

perfect, do you think we can isolate the RLNC changes at the gossip layer from the Eth client itself? Marco has been working on a stripped down shadow-based benchmarker purely for libp2p (which should reduce artifacts too)
00:56:17	potuz:	Replying to "it doesn't make sens..."

of course, it's impossibl;e to use 1 byte in Ristretto, number of hops doesn't matter you need to internally deal with inversions early on anyway
00:56:21	pk910:	hoodi will be interesting as we can craft big attestation slashings there
00:56:49	pk910:	big in terms of block size,  not number of slashed validators ;)
00:56:50	Barnabas:	Replying to "hoodi will be intere..."

we gotta be careful not to accidently break hoodi tho
00:56:51	Barnabas:	Replying to "hoodi will be intere..."

lol
00:56:54	potuz:	Replying to "it doesn't make sens..."

We didn't mention hops, perhaps can be meassured statistically with the number of bits in the scalars
00:58:01	potuz:	Replying to "@potuz sure, makes s..."

no that's impossible
00:58:10	potuz:	Replying to "@potuz sure, makes s..."

it's intimately ligated with the way you sign the data
00:59:02	Raúl Kripalani:	Replying to "@potuz sure, makes s..."

got it, but for pure benchmarking purposes can we use mock data (even if signed)?
00:59:03	Barnabas:	Replying to "Besu yes"

besu nodes coming online
00:59:14	potuz:	Replying to "@potuz sure, makes s..."

you can get some benchmarks of the broadcasting level but I doubt this would be different than the simulatiosn that Anton already did. I trust a full devnet cause I understand it, perhaps I should look into what actually shadow does to see if there are artifacts or not
00:59:32	potuz:	Replying to "@potuz sure, makes s..."

that reply was for the previous comment
00:59:51	potuz:	Replying to "@potuz sure, makes s..."

as for this
> got it, but for pure benchmarking purposes can we use mock data (even if signed)?

No you can't cause the block validation pipeline changes
01:00:04	potuz:	Replying to "@potuz sure, makes s..."

I think you can't really isolate the changes if you want to get a good IRL bench
01:00:27	potuz:	Replying to "@potuz sure, makes s..."

the way you downscore peers, etc, everything gets touched when the block signature goes into the commitments to the chunks
01:00:53	Barnabas:	kinda sad how little love history expiry gets
01:00:54	Barnabas:	lol
