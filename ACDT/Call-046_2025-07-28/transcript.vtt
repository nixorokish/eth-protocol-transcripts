WEBVTT

1
00:03:57.710 --> 00:03:58.970
Parithosh Jayanthi: It wouldn't be long.

2
00:05:20.080 --> 00:05:23.680
Parithosh Jayanthi: Let's wait another minute for people to join, and then we can start off.

3
00:06:46.670 --> 00:06:50.189
Parithosh Jayanthi: Okay, let's get started then.

4
00:06:50.620 --> 00:06:55.180
Parithosh Jayanthi: So we're gonna start with fusata devnet 3 today.

5
00:06:56.282 --> 00:07:10.019
Parithosh Jayanthi: So the devnet went live late last week. So we have the I'm gonna share the link for Dora in a second. The networks finalizing, and we've had 3 dpo since then.

6
00:07:10.440 --> 00:07:39.270
Parithosh Jayanthi: So we've progressively just been increasing. So we had fullu as a fork, and then we had the Vpos on top. So we're currently at 18 blocks per block. However, Bpo 4 is scheduled to reduce the block count so that we can also test that workflow. It should go live tomorrow and additional information on network. We've added some rate limiters. So we have about 30% gigabit nodes. And these are all super nodes.

7
00:07:39.510 --> 00:07:51.700
Parithosh Jayanthi: and the remainder of the nodes have 100 m bit down and 50 mbit up. So this is based on the eip that defines the recommended hardware spec for a testers

8
00:07:52.258 --> 00:08:16.909
Parithosh Jayanthi: the distribution of the keys is also not uniform. However, what we've done is, we have one of every client there, and when we've done top ups to cause a difference in what state runs on each node, and this is also allowing us to check Cgc changes with top ups, I think. Barnabas had a few points to note there, but he's out of office today, so he'll definitely bring it up with the clients later.

9
00:08:18.152 --> 00:08:20.389
Parithosh Jayanthi: Yeah, Amanda, do you wanna go.

10
00:08:21.530 --> 00:08:23.938
Manu: Yes, I had a question about rate limiting

11
00:08:24.620 --> 00:08:29.370
Manu: do all the node has the same right limiting, or is it depending of

12
00:08:29.770 --> 00:08:32.580
Manu: client implementation or super node, or full node.

13
00:08:34.549 --> 00:08:42.089
Parithosh Jayanthi: It depends on. If it's a super node or a full node, so if it's full node, it gets a hundred Mbps, and if it's a super node. It gets gigabit.

14
00:08:43.860 --> 00:08:45.079
Manu: Okay. Thank you.

15
00:08:47.240 --> 00:08:56.969
Parithosh Jayanthi: Yeah. And these numbers are from the recommended hardware eip. So if for whatever reason, we notice that this is insufficient, then we have to

16
00:08:57.090 --> 00:08:59.570
Parithosh Jayanthi: raise a bag and figure out what to do with that.

17
00:09:00.760 --> 00:09:04.130
Parithosh Jayanthi: But this is the recommended hardware we have for stakes right now.

18
00:09:05.857 --> 00:09:17.489
Parithosh Jayanthi: Besides this, we see that Nimbus and Nimbus el seem to be having a couple of shoes. Do we have on the call to expand?

19
00:09:23.070 --> 00:09:34.490
Parithosh Jayanthi: Okay, I don't see them immediately. But yeah, they essentially were having some issues with peering, and were unable to connect to the Bootnodes.

20
00:09:34.780 --> 00:09:43.180
Parithosh Jayanthi: They're trying to debug it with Dcli. But I'm not sure what the current status is, but I guess we take that we take that async.

21
00:09:44.870 --> 00:09:49.660
Parithosh Jayanthi: Besides the nimbus issue, most clients are performing

22
00:09:49.980 --> 00:10:01.789
Parithosh Jayanthi: quite, quite well so far. We do have a higher than expected rate of orphan blocks. I know that Manu was starting to look into it. Do you want to give an update on that Manu.

23
00:10:03.090 --> 00:10:08.746
Manu: Yeah. I notice there is that prism often one block

24
00:10:09.890 --> 00:10:14.263
Manu: and when looking into the logs, I saw that

25
00:10:15.760 --> 00:10:21.670
Manu: for the block of slot just before all the colons were received quite late, like

26
00:10:21.860 --> 00:10:24.690
Manu: more than 6 or 7 seconds into the slot.

27
00:10:25.710 --> 00:10:29.810
Manu: so that explain why prism didn't chose to

28
00:10:29.920 --> 00:10:34.160
Manu: build its own block on the param block, but on the grandfather

29
00:10:34.570 --> 00:10:41.229
Manu: and yes, I was wondering if it wasn't due to the weight limiting. Maybe

30
00:10:43.870 --> 00:10:51.159
Manu: So I have to check more into details. Why these colons were received very late.

31
00:10:52.390 --> 00:11:00.340
Parithosh Jayanthi: Yeah, I can also have a look at the metrics. As far as I know, I don't think we were

32
00:11:01.093 --> 00:11:08.210
Parithosh Jayanthi: rate limited on all nodes, and especially with such a small network like roughly 100 nodes. Having 30 of them, Gigabit is

33
00:11:08.330 --> 00:11:11.480
Parithosh Jayanthi: should be enough to propagate everything quickly.

34
00:11:13.730 --> 00:11:22.679
Parithosh Jayanthi: yeah, just looking at a quick 3Â h metric on network usage where, at around the 30 Mbps

35
00:11:23.130 --> 00:11:29.560
Parithosh Jayanthi: on not even 30 megabits per second, actually even lower. But it's roughly 20 Mbps sent and received.

36
00:11:30.310 --> 00:11:53.949
Parithosh Jayanthi: and there's no apparent saying so. It's very random as to which cl and which el it is. So we don't actually know what's going on the only change we have from earlier networks is that the map workflow is now present, so it could be that there's some interactions there that we don't really know what's going on. It could be that the map node is

37
00:11:53.990 --> 00:12:01.229
Parithosh Jayanthi: releasing the blocks late or nodes are waiting longer for timeouts. Not fully sure we have to investigate all of this, I guess.

38
00:12:04.826 --> 00:12:12.730
Parithosh Jayanthi: Any other immediate info you wanted to gather, Manu, or are we all good to? Just look at this, Async.

39
00:12:13.922 --> 00:12:15.920
Manu: No, that's all good right now.

40
00:12:16.630 --> 00:12:17.250
Parithosh Jayanthi: Okay.

41
00:12:17.840 --> 00:12:38.300
Parithosh Jayanthi: I've also made sure that 4 keys now working it. Was missing some dependencies. So it's up and running. You should be able to see when something's wrong. I did notice there were at least one or 2 instances where Nimbus was trying to build on a very old parent, and Grandine also tried building on an older parent.

42
00:12:38.480 --> 00:12:45.192
Parithosh Jayanthi: so I'm not sure why that necessarily happened. I don't easily see a trend.

43
00:12:46.330 --> 00:12:58.020
Parithosh Jayanthi: a quick example, is slot C, 5, 7, 7, 6. Where Grandine builds on a parent that's about 5 slots earlier or 4 slots earlier, instead of an immediate parent.

44
00:12:58.690 --> 00:13:00.270
Parithosh Jayanthi: and then gets offered.

45
00:13:02.810 --> 00:13:07.209
Parithosh Jayanthi: But yeah, I'm sure that we find a lot more examples and figure this out.

46
00:13:07.773 --> 00:13:12.879
Parithosh Jayanthi: Besides this, do we have Bharat on the call to give us an update on the map. Workflow.

47
00:13:13.920 --> 00:13:18.970
Bharath: Yeah, I'm there. So in terms of the update, like, my workflows.

48
00:13:19.380 --> 00:13:35.320
Bharath: yeah, so where we are currently is that we have like 6 72 validators registered out of the 8 18 validators on the network. And we have a block production. We just got a slot delivered. We just got a block delivered for the latest slot.

49
00:13:35.440 --> 00:13:37.470
Bharath: So blocks are being delivered of.

50
00:13:37.700 --> 00:13:59.350
Bharath: So I am currently on top of my mind, for the workflows are 2 things. One thing is, why are all the validators not registered? I think the the Devops team we have set up like we've connected all the beacon nodes to the relay. So that shouldn't be an issue. So I so based on my initial investigations, there's some issue with like

51
00:13:59.880 --> 00:14:28.769
Bharath: Loadstar, like, for some reason the validated registrations. When when lodestar sends it like there's a issue with the timestamp in the validated registration. It's a little weird like I was talking to Nico about that about it, and it seems like everything is right in the lodestar code. I don't know what's happening. I'm just going to investigate that I'm checking. If there's any caching around the stack. I don't know but I don't think so. But I'll investigate that. So that's there. Second on top of my mind is

52
00:14:29.180 --> 00:14:56.589
Bharath: for some reason. When block publishing for nimbus fails with the State root mismatch, and this happens for Nimbus, only I don't know where the issue is. Here. That's another thing I'm gonna investigate. But yeah, so these are the 2 issues that I'm looking at in terms of my workflows outside that like. We've been having like very decent like rate of block delivery like if I just page to the

53
00:14:58.210 --> 00:15:00.619
Bharath: link to the whatever. Oh, yeah.

54
00:15:00.620 --> 00:15:02.309
Parithosh Jayanthi: Yeah, Justin just shared it.

55
00:15:02.580 --> 00:15:19.969
Bharath: Yeah. So based on that, we seem to have pretty decent like, block delivery, like like today. Morning, we had an issue. We had a bunch of issues even over the weekend, like when we hit Bpo. One block building failed because we're using the block parameters of Fusaka and not of the Bpo's

56
00:15:20.349 --> 00:15:26.809
Bharath: in the builder. So we updated that. And today we had some rate limiting issue with block simulation to fix that. And I think

57
00:15:26.940 --> 00:15:31.669
Bharath: we have regular blocks coming in. But these are the 2 issues that

58
00:15:31.810 --> 00:15:35.099
Bharath: I'm I'm looking into like right now, without my workflows.

59
00:15:35.820 --> 00:15:36.400
Parithosh Jayanthi: Awesome.

60
00:15:36.620 --> 00:15:47.480
Parithosh Jayanthi: Thank you for the update. There's, I think, one more thing. The map workflow now unlock unlocks for us. They've added the ability to have a private member, a private blog mempo.

61
00:15:47.490 --> 00:16:08.560
Parithosh Jayanthi: And the benefit is that if we submit blobs here and the block gets produced via the map workflow. We've essentially turned off the get blobs optimization. So we can actually network would perform if we have blobs that have never been propagated. Ahead of time. I think we should try this over the next day, or have we already been trying this.

62
00:16:10.490 --> 00:16:15.899
Bharath: I'm actually not sure to be honest. I think one of us had configured it, but I I.

63
00:16:16.830 --> 00:16:25.689
Parithosh Jayanthi: I can look into it. I didn't get an update from him as to what the status was there. I can look into it, and if we haven't been trying it already, then I'll make sure that we tried. Now.

64
00:16:26.100 --> 00:16:26.730
Bharath: Sounds, cool.

65
00:16:29.390 --> 00:16:33.779
Parithosh Jayanthi: Okay. Anything else related to Fusaka Demnet. 3.

66
00:16:33.990 --> 00:16:36.910
Parithosh Jayanthi: Anything people wanted to discuss. I

67
00:16:37.100 --> 00:16:40.749
Parithosh Jayanthi: either. There's mostly 2 or 3 active threads

68
00:16:41.020 --> 00:16:45.550
Parithosh Jayanthi: on the interrupt channel. But I think we spoke about everything so far.

69
00:16:50.260 --> 00:17:02.890
Parithosh Jayanthi: Okay. There was a bunch of discussion last week about eth config. I didn't fully follow the discussion. Could someone summarize this? We have any volunteers?

70
00:17:09.369 --> 00:17:11.329
Parithosh Jayanthi: Yeah, Mario, do you wanna go.

71
00:17:11.970 --> 00:17:22.579
Mario Vega: Yeah, I think this summary is that we have it. Underscore config checks now in East, but we do have to enable them, I think, assert would be a nice place.

72
00:17:22.609 --> 00:17:48.690
Mario Vega: Currently, the clients. What they can do is just use East to test their testnet configuration. And yeah, testnet and mainnet configurations, but I think it would be nice for us to coordinate and add this to assert, or probably adding, it's just a matter of creating a file that East understands with the devnet configuration. And then what we can do is basically just start querying the client's life

73
00:17:48.980 --> 00:17:58.530
Mario Vega: during the net during the devnet. So we can like just just consistently see if there's anything breaking in need config or in the configuration itself.

74
00:17:58.660 --> 00:18:05.280
Mario Vega: Yeah, that's that's basically my understanding. So far, I don't know if there's anything else.

75
00:18:11.250 --> 00:18:15.620
Parithosh Jayanthi: Okay, thank you. Yeah. I,

76
00:18:15.800 --> 00:18:23.540
Parithosh Jayanthi: at least on a quick reading. It looked like there was something about serializing. Rlp.

77
00:18:24.130 --> 00:18:26.730
Parithosh Jayanthi: or is that a completely unrelated discussion.

78
00:18:32.490 --> 00:18:33.640
Parithosh Jayanthi: Yeah, Marius.

79
00:18:35.590 --> 00:18:41.930
Marius van der Wijden: Not really to that point. But I don't think matters here, but one of his

80
00:18:42.420 --> 00:18:50.930
Marius van der Wijden: problems with this was the the hashing that it introduces. And

81
00:18:52.260 --> 00:18:56.418
Marius van der Wijden: the problem is that we are hashing it in

82
00:18:57.350 --> 00:18:59.690
Marius van der Wijden: we are hashing the Json Rpc

83
00:19:00.190 --> 00:19:14.600
Marius van der Wijden: response. And that means everyone has to have the same Json, Rpc, response. That means we have to like strip all of the all of the wide space and stuff. And

84
00:19:15.200 --> 00:19:21.100
Marius van der Wijden: I feel like this makes it extremely brittle. So I don't have

85
00:19:21.410 --> 00:19:23.340
Marius van der Wijden: a hundred percent context on this.

86
00:19:24.980 --> 00:19:27.779
Marius van der Wijden: So it's very unfortunate that Matt is not here. But

87
00:19:30.530 --> 00:19:36.150
Marius van der Wijden: I think we should find another way of verifying this, not

88
00:19:37.240 --> 00:19:40.980
Marius van der Wijden: like, not this weird way of hashing the Json.

89
00:19:43.700 --> 00:19:45.990
Danno Ferrin: Do you have any proposals that aren't? Rlp.

90
00:19:48.299 --> 00:19:54.789
Marius van der Wijden: So this is this. Okay, this is related to the Rp, and then I think we should just hash the Rp.

91
00:19:55.730 --> 00:20:04.519
Danno Ferrin: Rlp is a format that we're supposed to not be using anymore. Why should we introduce another use of the format? Should we do an SSD. Encode against that.

92
00:20:10.420 --> 00:20:12.922
Marius van der Wijden: Everything is better than the Json.

93
00:20:14.110 --> 00:20:16.551
Marius van der Wijden: I would prefer the Rrp.

94
00:20:17.870 --> 00:20:25.080
Marius van der Wijden: But if other clients feel strongly that Sse is the way to go.

95
00:20:27.680 --> 00:20:37.160
Marius van der Wijden: I don't think anyone wants to prove anything against this Rp. And against anything against this hash, and that's why I think Rrp.

96
00:20:37.280 --> 00:20:43.020
Marius van der Wijden: As the preferable option. If we were to prove stuff against it, then, I think Ss.

97
00:20:43.210 --> 00:20:49.650
Marius van der Wijden: Might be better. But since we want to extend this configuration

98
00:20:50.150 --> 00:20:55.749
Marius van der Wijden: in the future potentially a lot. I think Rfu would be the the better format.

99
00:20:59.610 --> 00:21:00.600
Parithosh Jayanthi: Yeah. Roman.

100
00:21:00.930 --> 00:21:23.199
Roman: That's not exactly a fair assessment that we're not supposed to be using Rlp, because one of the upcoming headliner proposals for the next hard work is block access list, and it will be in Rlp. So since Rlp. Is used everywhere, I agree, it's strictly better than the Json that is currently specified in the.

101
00:21:28.070 --> 00:21:30.190
Danno Ferrin: When are we gonna do the Sfd shifts?

102
00:21:30.400 --> 00:21:34.129
Danno Ferrin: I mean, we keep pushing it off. Are we gonna live with rop necessity forever?

103
00:21:36.860 --> 00:21:54.449
Roman: Well currently on El. We have only Rlp, well, we we don't have Scc anywhere, so it would make sense to to change the config once we do that, and when we do that I'm not sure that this is the topic for this call to discuss.

104
00:21:56.230 --> 00:22:03.359
Danno Ferrin: Cool. I would feel better just dropping the hash in general and doing adjacent dip before moving it to Rlp. To be honest.

105
00:22:07.830 --> 00:22:09.659
Roman: That also sounds amicable.

106
00:22:09.880 --> 00:22:17.270
Roman: I agree it might be a little bit more difficult for for the testing tools

107
00:22:17.680 --> 00:22:23.309
Roman: to to sort everything and like to see that there were no extra keys. But but yeah.

108
00:22:23.880 --> 00:22:28.269
Roman: everything sounds better than sorry in Json, as it is right now, I agree.

109
00:22:29.200 --> 00:22:31.798
Danno Ferrin: If the testing tools can alphabetize the

110
00:22:32.310 --> 00:22:36.450
Danno Ferrin: the fields underneath each each Javascript object that the diffing should be easy.

111
00:22:37.510 --> 00:22:48.339
Mario Vega: Yeah, we we can even just I mean, we get the, we get the response and we don't do the hash ourselves. So I think we can do the hashing ourselves. If that's a a really big problem for the clients.

112
00:22:49.310 --> 00:22:54.019
Mario Vega: So yeah, basically, Json, we do the hashing. We compare. It's not a problem.

113
00:22:55.130 --> 00:22:57.340
Danno Ferrin: Okay, I'll drop the bits of the hash from the spec.

114
00:23:01.910 --> 00:23:06.310
Parithosh Jayanthi: Awesome. Thank you. And Daniel will send an updated Pr.

115
00:23:09.790 --> 00:23:15.150
Danno Ferrin: For the eip. And what else do we want for the Pr. Just eip, and let the teams do the rest.

116
00:23:16.696 --> 00:23:20.420
Parithosh Jayanthi: I guess Eip and I'd assume it's in the execution. Api, as well.

117
00:23:20.920 --> 00:23:21.969
Danno Ferrin: Yeah, those 2.

118
00:23:21.970 --> 00:23:24.239
Parithosh Jayanthi: Yeah, okay, I think that should be it. Yeah.

119
00:23:27.820 --> 00:23:36.469
Parithosh Jayanthi: awesome. Thank you. That works well. And we can still ping like client, and see if he's okay with the outcome. But

120
00:23:37.040 --> 00:23:38.539
Parithosh Jayanthi: some sort of good outcome.

121
00:23:40.090 --> 00:23:46.109
Danno Ferrin: There's also, while we're changing things. There is request to normalize the keys and values in the addresses.

122
00:23:46.635 --> 00:23:58.190
Danno Ferrin: I don't want to lead with the addresses, but I'd be willing to lead with like the names of the precompile, so it'd be precompiled. Name Colon address. They wouldn't be statically sorted, but they would show quite nicely on the desk.

123
00:24:02.670 --> 00:24:05.890
Danno Ferrin: So if the right time to do that change, that was another event concerns.

124
00:24:08.240 --> 00:24:12.110
Parithosh Jayanthi: 10 itself. That sounds like a sane change to me. Do we have any opposition.

125
00:24:13.660 --> 00:24:16.669
Mario Vega: Could you repeat the change? I didn't quite get it. What's what's the change?

126
00:24:16.670 --> 00:24:46.180
Danno Ferrin: So so in the precompiled contracts and system contracts. I have it ordered in what's being configured in the value in the configuration. That means we have 2 different keys and precompiles. It's the address of the contract, and then the value is the name of the contract and system contract. It's the name system contract you're looking for in the address it's at. I would propose for pre compiles. We flip it. It's always the name of the precompile, and always the address. The consequences. They're not going to sort in order and adding, won't always be at the end.

127
00:24:46.260 --> 00:24:52.040
Danno Ferrin: But if we're diffing Javascript, it's not going to matter. It's going to be obvious that you're missing one when a diff happens

128
00:24:55.820 --> 00:24:59.730
Danno Ferrin: so that would make the keys consistent across the precompiles in the system contracts.

129
00:25:04.270 --> 00:25:11.229
Mario Vega: Yeah, I think either way is fine. We're still gonna sort them internally, just to to make a comparison. So it doesn't matter.

130
00:25:14.620 --> 00:25:17.979
Danno Ferrin: Okay, I'll put that in my Pr. If anyone objects we can undo it.

131
00:25:22.820 --> 00:25:24.220
Parithosh Jayanthi: Perfect. Thank you.

132
00:25:25.256 --> 00:25:40.739
Parithosh Jayanthi: Do we have any other eips or Prs? We need to look into cause as of the last time. I checked the notes. Document the spec sheet for for 7 3 I think we had. Everything merged in.

133
00:25:41.910 --> 00:25:47.810
Parithosh Jayanthi: The only outliers were 2 metric Prs. And I'm assuming we're still looking into those.

134
00:25:49.840 --> 00:25:52.709
Parithosh Jayanthi: Are there any other eips we should be paying attention to?

135
00:26:02.450 --> 00:26:04.529
Parithosh Jayanthi: Okay, that's good news time.

136
00:26:05.521 --> 00:26:15.910
Parithosh Jayanthi: I guess the next question is, what's the timeline we want steps of testing. We have a shadow fork planned as well as a really large network.

137
00:26:16.369 --> 00:26:31.140
Parithosh Jayanthi: I wager that we should at least wait until the nimbus issues are figured out as well as the map. Workflow issues are figured out, and the often rate are there any other points that client teams want to wait for before we start the next phase of testing?

138
00:26:31.470 --> 00:26:36.140
Parithosh Jayanthi: And do we have an estimate we wanna come up with

139
00:26:36.350 --> 00:26:39.180
Parithosh Jayanthi: this time next week or earlier.

140
00:26:41.640 --> 00:26:44.200
Parithosh Jayanthi: Do we have any strong opinions?

141
00:26:54.460 --> 00:27:10.500
Parithosh Jayanthi: Okay, then I guess we'll make a post on the interrupt channel. As to what the plan should be, but for now it would be great if clients focus on the orphaned issue as well as any in any client. Specific bugs that we point out.

142
00:27:10.620 --> 00:27:12.910
Parithosh Jayanthi: or you can already find.

143
00:27:15.220 --> 00:27:19.419
Parithosh Jayanthi: Okay, and then we move as soon as we can as a follow.

144
00:27:21.040 --> 00:27:21.710
Parithosh Jayanthi: So

145
00:27:22.445 --> 00:27:39.030
Parithosh Jayanthi: the next topic on the agenda is a gas limit. So we have Mainnet at 45 million for about a about a week. Now, is there anything particular that client teams have noticed on Mainnet. Any analyses, any

146
00:27:39.787 --> 00:27:42.570
Parithosh Jayanthi: bugs. I issued notice in the last week.

147
00:27:53.710 --> 00:28:04.729
Parithosh Jayanthi: Okay, I think we're investigating cl validator stability. Still. But we'll we'll probably have an analysis out soon about that.

148
00:28:10.060 --> 00:28:18.667
Alexey: Sure if it's worth mentioning. We have some peer issues on my net. I mean

149
00:28:19.440 --> 00:28:22.999
Alexey: Those are my notes become less visible

150
00:28:24.300 --> 00:28:30.559
Alexey: in a peer set may not for some reason, and we are trying to figure out

151
00:28:31.570 --> 00:28:40.210
Alexey: maybe it is connected to an update of some certain execution. Client? Maybe not.

152
00:28:40.470 --> 00:28:53.130
Alexey: So we are investigating. If you, if some other clients see this similar picture and came to some conclusions.

153
00:28:53.570 --> 00:28:56.659
Alexey: ping guests, too, please. Oh, and Sarah

154
00:28:58.240 --> 00:29:00.139
Alexey: And say, it's just.

155
00:29:03.240 --> 00:29:05.829
Marius van der Wijden: Yeah, we are also looking into this.

156
00:29:07.860 --> 00:29:19.160
Marius van der Wijden: We have a theory that it might be because of Geth, because we introduced a feature where we

157
00:29:19.460 --> 00:29:22.959
Marius van der Wijden: are asking the connecting node for

158
00:29:23.350 --> 00:29:25.639
Marius van der Wijden: to do the note Key Exchange

159
00:29:26.930 --> 00:29:33.269
Marius van der Wijden: or the United Exchange. I don't. I don't remember what what we do. But yeah, that

160
00:29:33.630 --> 00:29:36.620
Marius van der Wijden: improves peering on on some level, but it

161
00:29:37.080 --> 00:29:42.920
Marius van der Wijden: maybe if this, if this exchange fails, then it's also not good for

162
00:29:43.180 --> 00:29:46.789
Marius van der Wijden: others. I think Jabba made this change

163
00:29:47.160 --> 00:29:52.680
Marius van der Wijden: so maybe he can. He can speak to that a bit better than I can.

164
00:30:03.308 --> 00:30:06.000
Parithosh Jayanthi: Do you wanna unmute or.

165
00:30:08.000 --> 00:30:11.110
Csaba: I'm on mute. Yeah. Do you hear me?

166
00:30:12.700 --> 00:30:13.260
Csaba: Yeah.

167
00:30:13.260 --> 00:30:13.989
Parithosh Jayanthi: We can hear you.

168
00:30:15.009 --> 00:30:22.579
Csaba: Okay, yeah. So the change was on this before, I haven't seen the issue yet. The change was on this before.

169
00:30:23.510 --> 00:30:26.809
Csaba: When we are getting the Dnrs

170
00:30:27.740 --> 00:30:32.440
Csaba: before just blindly trying to connect to to whatever node

171
00:30:32.820 --> 00:30:37.459
Csaba: is behind that IP address physically that we have first.st

172
00:30:37.919 --> 00:30:45.260
Csaba: We are getting the actually another with the folk Id. And and we are filtering, and we are only connecting

173
00:30:45.380 --> 00:30:48.859
Csaba: to those notes which I was connecting.

174
00:30:48.970 --> 00:31:02.359
Csaba: So that's only an outgoing. And that's what happens in this week. 5 already. It's just that this week 4 that we changed so that it's it's only trying to connect to nodes which which makes sense to connect.

175
00:31:02.570 --> 00:31:11.659
Csaba: So I don't see how that can create issues. But if there is an issue on some pointers, I can try to look into it and and see if it's related to that.

176
00:31:16.850 --> 00:31:18.399
Csaba: Yeah, that that was the.

177
00:31:18.850 --> 00:31:24.509
Csaba: I suppose my perspective on that change, the other changes that we introduced are are more just.

178
00:31:26.930 --> 00:31:34.419
Csaba: what was it? Yeah. So in in this before and and in in this, before we just changed. How we are

179
00:31:36.440 --> 00:31:45.299
Csaba: looking up emails from the from the 3, 4, this 3, 5, so that we always have enough notes in the in the queue for for dialing out.

180
00:31:45.810 --> 00:31:46.590
Csaba: But did you?

181
00:31:47.940 --> 00:31:48.650
Csaba: Yep.

182
00:31:49.120 --> 00:31:50.040
Parithosh Jayanthi: Has this been? Live?

183
00:31:51.480 --> 00:31:52.579
Parithosh Jayanthi: It's not hard.

184
00:31:53.820 --> 00:32:00.850
Csaba: Yeah, it has been live for. No, not not not that much, not not one month. I think I think a bit less.

185
00:32:03.000 --> 00:32:06.220
Csaba: But I have to understand what's the issue that that you're seeing

186
00:32:06.390 --> 00:32:10.160
Csaba: and and the timeline, and then we can

187
00:32:10.860 --> 00:32:12.659
Csaba: try to see if it's edited.

188
00:32:16.750 --> 00:32:17.979
Parithosh Jayanthi: Got it. Thank you.

189
00:32:20.290 --> 00:32:20.950
Csaba: Yep.

190
00:32:23.730 --> 00:32:24.400
Ben Adams: Oh, never mind!

191
00:32:24.400 --> 00:32:26.840
Parithosh Jayanthi: Yeah. Sorry. Yeah. Ben, go ahead.

192
00:32:27.490 --> 00:32:31.199
Ben Adams: I was just thinking, I mean, cause it also depends on

193
00:32:31.590 --> 00:32:36.300
Ben Adams: when people upgrade their nodes so smooth.

194
00:32:36.300 --> 00:32:38.120
Parithosh Jayanthi: That's fair. I was.

195
00:32:38.980 --> 00:32:47.980
Parithosh Jayanthi: Yeah. I was also just wondering, because never mind, did have a release. About a week ago I wanted to mainly know if it was some to the Never mind release, or

196
00:32:48.120 --> 00:32:51.239
Parithosh Jayanthi: if it's something that's been sitting on Mainnet for a month.

197
00:32:52.320 --> 00:32:56.819
Ben Adams: It was around the time of our release, I think. Rep also did a release.

198
00:32:58.840 --> 00:33:05.789
Ben Adams: But is happening with prior prior versions. Also.

199
00:33:10.700 --> 00:33:13.570
Csaba: Can you send the link issue description?

200
00:33:13.710 --> 00:33:16.729
Csaba: Well, something related that you see.

201
00:33:19.930 --> 00:33:26.880
Ben Adams: Sure. I mean, it's sort of coming from Crawler, so we'll just hit

202
00:33:31.701 --> 00:33:34.229
Ben Adams: I'll I'll send it to you. Then.

203
00:33:35.910 --> 00:33:36.500
Csaba: Kim.

204
00:33:42.130 --> 00:33:51.759
Parithosh Jayanthi: Okay? Yeah. If any client teams also notice any business with their notes, then please reach out and we can see how widespread it is, and see if there's a pattern.

205
00:33:52.660 --> 00:33:56.969
Ben Adams: Yeah, I mean, we. We've not had any complaints from any users.

206
00:33:59.610 --> 00:34:01.660
Ben Adams: Yeah, it's quite. It's just weird.

207
00:34:03.990 --> 00:34:11.370
Parithosh Jayanthi: Yeah, that makes sense. Yeah, I was also just checking my note. And it seems to have, yes, so

208
00:34:12.690 --> 00:34:19.130
Parithosh Jayanthi: okay, cool anything else on the peering topic.

209
00:34:24.159 --> 00:34:32.009
Parithosh Jayanthi: Okay, is Carlos on the call. He wanted to give us an update on blueprint.

210
00:34:32.310 --> 00:34:34.629
CPerezz: Yep, yeah, go ahead

211
00:34:35.986 --> 00:34:44.390
CPerezz: so we finally arrived to the 2 X State landmark. Now, what I wanted to ask

212
00:34:44.710 --> 00:35:04.570
CPerezz: especially to never mind breath and ergon, or see if they could. Take a look to this document that I've sent the link which contains a bunch of questions that would be really useful for us to finalize all of the test cases that we want to test in blood

213
00:35:05.820 --> 00:35:08.400
CPerezz: so far. This

214
00:35:08.890 --> 00:35:23.749
CPerezz: which I'm sending here. This second document is all of the scenarios that we have come up with. But hopefully, after reviewing it with all of the teams. This will grow and get much more precise and and correct. Probably.

215
00:35:24.300 --> 00:35:40.379
CPerezz: Aside from that. There's an issue with breath in implemented, which is actually not proposing. If I recall correctly, which haven't been, which hasn't been tracked yet.

216
00:35:40.540 --> 00:36:05.769
CPerezz: and another one with gift. Although this has been tracked already, and I think Gary just sent a link for it so hopefully it will all be resolved soon. So yeah, please, if we can have a review on these documents, and we can try to meet by this week, it would be it would be extremely useful coming from the teams.

217
00:36:06.310 --> 00:36:07.439
CPerezz: Yeah, what is.

218
00:36:08.540 --> 00:36:17.639
Marius van der Wijden: Yeah. So the the issue that we're tracking there is not really the the issue that actually happened.

219
00:36:18.480 --> 00:36:43.259
Marius van der Wijden: Basically, this is just a symptom. The real issue that happened on Bloatnet was that somehow get would ignore the some some flags for the tracing, and so it would trace with the stack and the state enabled so whenever, like, we made

220
00:36:44.290 --> 00:36:52.549
Marius van der Wijden: something like a like, we change something in the State, it would dump out all of the State.

221
00:36:52.820 --> 00:36:56.199
Marius van der Wijden: which is because of Bloatnet extremely heavy.

222
00:36:58.330 --> 00:37:11.600
Marius van der Wijden: we just updated to current master. And it seems like current master has fixed this problem. So that was because performance, the performance branch had like some weird old image.

223
00:37:13.139 --> 00:37:26.379
Marius van der Wijden: Yeah, so, and because this used so much memory, the node would keep crashing every now and then whenever we had this like really big traces.

224
00:37:26.943 --> 00:37:39.269
Marius van der Wijden: And because of that, I think we had around 55 crashes. And at some point the database was just fried. And this this issue that we're tracking right now is is basically

225
00:37:39.410 --> 00:37:47.489
Marius van der Wijden: the database being fried. But it's not the root cause. The root cause was just the node running out of memory because of tracing.

226
00:37:47.750 --> 00:37:53.410
Marius van der Wijden: And we kind of fixed the issue

227
00:37:53.710 --> 00:37:57.599
Marius van der Wijden: already. Basic. Well, it wasn't really an issue was just an outdated image.

228
00:37:57.860 --> 00:38:12.880
Marius van der Wijden: But we are also reworking our tracing to use less memory. So even if you enable these bloating techniques and enable state tracing, then it will not use that much memory.

229
00:38:13.955 --> 00:38:14.640
Marius van der Wijden: Yeah.

230
00:38:16.580 --> 00:38:23.449
CPerezz: So just just to be clear. Then this was sent by Gary saying that there's

231
00:38:23.650 --> 00:38:30.539
CPerezz: in parallel maximum payload that you can actually push into the database so

232
00:38:31.010 --> 00:38:34.089
CPerezz: like, how is that with running out of memory.

233
00:38:34.090 --> 00:38:34.610
Marius van der Wijden: Better.

234
00:38:34.610 --> 00:38:36.209
CPerezz: I don't know if swap, but.

235
00:38:36.510 --> 00:38:49.850
Marius van der Wijden: That is, that is a different issue. That also happens when the database is fried. When we don't have the log indexer anymore, we will run the log indexer, and the log indexing

236
00:38:50.714 --> 00:39:01.100
Marius van der Wijden: creates might create a batch that is more than 4Â GB, and then pebble refuses to to write that batch.

237
00:39:01.950 --> 00:39:06.820
Marius van der Wijden: but that is also something that we already had fixed on master. So

238
00:39:07.430 --> 00:39:10.770
Marius van der Wijden: the the only thing that is not.

239
00:39:11.550 --> 00:39:21.170
Marius van der Wijden: or that is questionable right now is like, if there's a way of fixing this this fried database, basically.

240
00:39:22.660 --> 00:39:27.700
Marius van der Wijden: But it's not really an issue in Geth, it's more of an issue in in pebble itself.

241
00:39:30.400 --> 00:39:43.500
Parithosh Jayanthi: Yeah. So for right now I've started re-syncing the note with the fried database, so we should have get back. Attend soonish, and we should be able to make a snapshot with get as well.

242
00:39:43.650 --> 00:39:49.379
Parithosh Jayanthi: But yeah, we still have to, I guess. Look into the tracing issue. And there's already organizations.

243
00:39:52.780 --> 00:40:15.520
CPerezz: So aside from that, there's 1 last thing which is the last link the last hacking, the link I sent which contains the scenarios we have so far, I was wondering whether this is something we can deduplicate and basically agree on with the yields team

244
00:40:15.720 --> 00:40:26.913
CPerezz: mainly because they they have this issue which is related to Ck vms, but is the one I was referred to for state growth. Related tests

245
00:40:27.530 --> 00:40:35.040
CPerezz: I can signal the redirection issue here. They started here.

246
00:40:36.360 --> 00:40:58.660
CPerezz: So yeah, so the idea is that we can basically use all of these tests as state growth and state road computation once for both just testing and also benchmarking. So I think Mario is here. So it would be nice to see whether you are interested in working on those or not.

247
00:40:58.660 --> 00:41:16.709
CPerezz: and especially because we're interested in running those when compaction or or other sub processes in notes are triggered, and I'm not sure to which extent this is functionality that yields should have, or we just need to build something outside and and monitor ourselves.

248
00:41:18.970 --> 00:41:26.250
Mario Vega: Yeah, it's pretty interesting. I think the main problem with the tests that we produce is that we cannot do like a

249
00:41:26.360 --> 00:41:31.009
Mario Vega: super huge state because of various reasons.

250
00:41:31.170 --> 00:41:40.269
Mario Vega: But I would need to take a look into this this list. To be honest, I'm not. I'm not very familiar with it. But yeah, in general, just like the

251
00:41:40.440 --> 00:41:48.539
Mario Vega: the things that we can add like right now, maybe you can expand this in the future is like computationally intensive

252
00:41:48.730 --> 00:41:50.830
Mario Vega: benchmarking tests

253
00:41:51.350 --> 00:41:57.079
Mario Vega: for state growth. We still like trying to decide how we can implement those if we can implement them.

254
00:41:57.707 --> 00:42:17.190
Mario Vega: I don't know if these are all state growth and state specific tests? Or is there anything like computationally? Because if there's any computationally intensive tests that you have in this list, those like would be like the low hanging fruits, and we can just port them right away to to east.

255
00:42:17.540 --> 00:42:33.580
CPerezz: So there, there will be computational, intensive, but just for state road calculation, but not, I mean, you will not be doing a lot of computation within the Edm itself. It's more related work and state state computation.

256
00:42:33.580 --> 00:42:43.860
Mario Vega: I see, I see. Do you? Do you need to have like the state has to be huge in the in in this case, or can we start with a with a with a small state.

257
00:42:45.180 --> 00:42:56.950
CPerezz: Ideally, we should test it with broad net state, which is 2 x mainnet at this point, and in the future we should do it with even bigger state sizes. So that's the ideal scenario.

258
00:42:58.140 --> 00:43:00.790
Mario Vega: I see, I see. Thank you. Yeah.

259
00:43:00.790 --> 00:43:11.650
CPerezz: It's just that yields was going to be integrated within spammer by Philip. So it just seemed like all the pieces came together. But yeah, maybe.

260
00:43:12.036 --> 00:43:37.689
Parithosh Jayanthi: It is, it should still be coming together. I don't think comments on the call, he texted, saying he won't be able to make it. But what they've what the Netherland team has done. They is they've used a specific type of file system where you can copy very quickly from snapshots, so he was able to run a test and revert the test back to the old snapshot within a matter of seconds. So they wanted to use

261
00:43:37.690 --> 00:43:49.780
Parithosh Jayanthi: that along with their gas benchmarking tool and the yields integration such that it doesn't matter if yields can import the State because they just have to do it once, and then you do these file system tricks to do the remainder of the work.

262
00:43:50.183 --> 00:43:57.470
Parithosh Jayanthi: He's not here on the call, so I'd say we take that discussion, Async, but they have been putting some time into thinking about.

263
00:44:00.040 --> 00:44:04.049
CPerezz: Okay, that makes sense. So I'll follow up asynchronously. That should be all for me.

264
00:44:07.080 --> 00:44:08.720
Parithosh Jayanthi: Perfect. Thank you.

265
00:44:10.244 --> 00:44:15.000
Parithosh Jayanthi: Yeah. Anything else from the guesstimate testing discussions.

266
00:44:19.928 --> 00:44:23.112
Parithosh Jayanthi: Mario, do you wanna give an update on

267
00:44:24.500 --> 00:44:28.119
Parithosh Jayanthi: east integration into the gas limit testing tool.

268
00:44:31.257 --> 00:44:36.029
Mario Vega: Are you referring to? Clc, I this? So, yeah.

269
00:44:36.030 --> 00:44:40.539
Parithosh Jayanthi: I meant the other tool, the Nethermind tool integrating to use the East test.

270
00:44:41.130 --> 00:44:47.489
Mario Vega: Oh, yeah, okay, yeah. Basically, I think the update there would be that we have a new release.

271
00:44:49.370 --> 00:44:54.842
Mario Vega: we have a new benchmark release. Let me share the the link. And basically what this thing does is

272
00:44:55.780 --> 00:44:57.380
Mario Vega: here's link.

273
00:44:57.922 --> 00:45:09.460
Mario Vega: Yeah. Basically, this thing contains all of the benchmark tests that we have produced in East. And then from here we have this, what is called a consolidated

274
00:45:10.356 --> 00:45:11.830
Mario Vega: genesis file.

275
00:45:12.110 --> 00:45:33.129
Mario Vega: which means that never mind can now use those genesis files to start their testing. I think they're still working on the integration. But basically, the starting point would be the benchmark releases from now on, we're going to try to make it like as seamless as possible for them to generate these Genesis files where they can just run every single benchmark that we have.

276
00:45:33.390 --> 00:45:40.299
Mario Vega: But yeah, it's it's still a work in progress. It should be. It's almost. It's almost done. I think

277
00:45:40.870 --> 00:45:49.419
Mario Vega: the main blocker right now is that we have to update some of the benchmark tests because we just updated the format to make them like all seamlessly work. But yeah.

278
00:45:51.770 --> 00:45:52.330
Parithosh Jayanthi: So.

279
00:45:53.105 --> 00:46:01.090
Parithosh Jayanthi: Yeah, I guess the next topic on the list is the Clc benchmarks. Do either you or Lewis want to talk about it?

280
00:46:02.380 --> 00:46:04.350
Mario Vega: And Lewis is the person. Yeah.

281
00:46:04.350 --> 00:46:07.599
Louis: Oh, okay, I will send the slides in the chat

282
00:46:07.910 --> 00:46:10.210
Louis: and let me share my screen now.

283
00:46:16.500 --> 00:46:17.580
Louis: Okay.

284
00:46:18.190 --> 00:46:20.649
Louis: Oh, can you? Can you see my screen.

285
00:46:22.450 --> 00:46:23.279
Parithosh Jayanthi: Yes, we can.

286
00:46:23.550 --> 00:46:24.250
Louis: Okay?

287
00:46:24.814 --> 00:46:30.580
Louis: Okay, today, I want to present the benchmark result for calculating 0 of code and

288
00:46:30.710 --> 00:46:38.030
Louis: the p. 25256. Verify recompile introducing Fussaka.

289
00:46:38.280 --> 00:46:41.080
Louis: and we run benchmark from East

290
00:46:42.115 --> 00:46:45.630
Louis: Is included in this folder, and

291
00:46:46.247 --> 00:46:51.930
Louis: this is the steps away from benchmark. 1st we fill the test cases.

292
00:46:52.160 --> 00:47:04.359
Louis: And we want a hype server with different client configurations and run as an engine, and to observe the execution time for the payload.

293
00:47:04.730 --> 00:47:08.799
Louis: And if we want to check more details about each test cases.

294
00:47:09.000 --> 00:47:16.190
Louis: I have prepared a pull request for list so you could check detail here and for

295
00:47:16.310 --> 00:47:19.790
Louis: the visualization results. There are some notes for it.

296
00:47:19.990 --> 00:47:28.130
Louis: First, st we're not comparing with client performance, which with each other, we're comparing the counting, leading 0 up code

297
00:47:28.250 --> 00:47:30.389
Louis: to other.

298
00:47:30.620 --> 00:47:33.829
Louis: Of course, with similar gas cost.

299
00:47:34.000 --> 00:47:50.129
Louis: And currently, we do not have client warmups in the East benchmark infrastructure. So there is no client warm up in neither, my and baseu. So in the result, it will take much longer time for these 2 clients.

300
00:47:50.420 --> 00:47:54.289
Louis: but we believe with more help, it will be much faster.

301
00:47:54.970 --> 00:48:04.080
Louis: And for the benchmark we we do. Take the Vip 7, 8, 25 into account.

302
00:48:04.230 --> 00:48:10.429
Louis: So there is transaction gas limit cap in the benchmark test result.

303
00:48:10.860 --> 00:48:17.080
Louis: And in the benchmark test we have 2 cases. The 1st one is for 7 to

304
00:48:17.360 --> 00:48:24.330
Louis: 1 million gas, which is twice amount of the default gas limit now in East

305
00:48:24.480 --> 00:48:27.360
Louis: and the other one is the 100 million.

306
00:48:27.790 --> 00:48:30.710
Louis: and for for list test cases

307
00:48:31.260 --> 00:48:37.610
Louis: is slightly like it. It is for worse block benchmark, so

308
00:48:37.790 --> 00:48:40.799
Louis: we are not like running to upcoast

309
00:48:40.970 --> 00:48:46.940
Louis: for 1,000 times and compare the time spent for the benchmark test

310
00:48:47.110 --> 00:48:50.999
Louis: we in in our case, we try to fill a block

311
00:48:51.330 --> 00:48:54.170
Louis: as much up code as possible.

312
00:48:54.320 --> 00:49:01.439
Louis: as much certain, of course, as possible, and we use this to benchmark the

313
00:49:01.750 --> 00:49:07.010
Louis: the operation so it might affect how you interpret the result.

314
00:49:07.660 --> 00:49:16.430
Louis: And this is the visualization graph we have now, for the red one.

315
00:49:17.390 --> 00:49:27.329
Louis: It takes 3 gas costs, and this is the operation. It is listed here and full of blue

316
00:49:27.570 --> 00:49:31.700
Louis: boot. Route one! It takes 5 gas costs.

317
00:49:31.910 --> 00:49:35.899
Louis: and for cld, we have 2 cases, one for

318
00:49:36.485 --> 00:49:46.939
Louis: executing, counting, leading 0 with different input and the other one is executing, counting, leading 0 with same. Input, it is labeled in green.

319
00:49:47.080 --> 00:49:50.320
Louis: so you could see the result here and.

320
00:49:50.320 --> 00:49:50.980
Marius van der Wijden: Alright!

321
00:49:51.360 --> 00:49:52.470
Louis: This is the.

322
00:49:52.620 --> 00:49:54.719
Marius van der Wijden: This is the time. Oh, yeah.

323
00:49:55.580 --> 00:49:59.360
Marius van der Wijden: Do you use Clz with 3 or with 5?

324
00:49:59.480 --> 00:50:00.590
Marius van der Wijden: Guess. Oh.

325
00:50:00.770 --> 00:50:02.930
Louis: We're we're using with 5 now.

326
00:50:05.740 --> 00:50:08.149
Louis: So it is the updated version

327
00:50:17.310 --> 00:50:25.410
Louis: in for the Y-axis. It is the time spent to run this benchmark and is measuring second.

328
00:50:26.920 --> 00:50:30.820
Louis: And this is the result for 100 million guest limit.

329
00:50:32.930 --> 00:50:37.110
Louis: And this 2 graph is for calculating 0.

330
00:50:37.330 --> 00:50:51.560
Louis: And this one is for the frequent pile, and this is the comparison, and there is a no.

331
00:50:51.720 --> 00:50:58.249
Louis: the comparison in the time is spent but in person percentage. And this is a formula.

332
00:50:58.540 --> 00:51:01.490
Louis: how we derive these values.

333
00:51:03.720 --> 00:51:10.420
Louis: Forget that that's it from my side. Do you have any question about these results?

334
00:51:17.350 --> 00:51:26.540
Parithosh Jayanthi: So one of the takeaways would be that with a gas limiter with a Z price of 5, we're able to do both 72 as well as 100 million gas. Right?

335
00:51:26.930 --> 00:51:27.990
Parithosh Jayanthi: Guess limits.

336
00:51:31.070 --> 00:51:34.580
Parithosh Jayanthi: because the execution time of all the clients are below 4 seconds.

337
00:51:38.180 --> 00:51:41.740
Louis: Yeah, you know, below sports seconds.

338
00:51:50.090 --> 00:51:54.940
Ben Adams: And this is without warming up for basically. And Netherlands.

339
00:51:55.330 --> 00:51:56.399
Ben Adams: Yes, yeah.

340
00:51:56.400 --> 00:51:58.330
Louis: It is without warming up.

341
00:51:58.960 --> 00:52:03.949
Ben Adams: So they should be. They should be better on after some time.

342
00:52:04.730 --> 00:52:06.050
Ben Adams: It looks like we're good.

343
00:52:07.920 --> 00:52:14.040
Louis: Yes, we have opened an issue for adding warming up in the East so.

344
00:52:14.400 --> 00:52:15.919
Louis: but we will do it later.

345
00:52:19.470 --> 00:52:29.070
Parithosh Jayanthi: Perfect. Thank you. Does anyone have any other follow up questions? Any other benchmarks we should be collecting for Clc, or are we okay with status quo for now.

346
00:52:39.960 --> 00:52:42.983
Parithosh Jayanthi: Okay, that's it for

347
00:52:43.960 --> 00:53:06.059
Parithosh Jayanthi: for status quo. Thank you so much for this. And addressing Roman's point of dropping to 3 I think right now we should freeze and focus on shipping and stick to 5, and we know that we have a bit more slack for reducing the price at Amsterdam. So repricing. I know that there's a bigger discussion around repricing at Amsterdam, anyway.

348
00:53:09.880 --> 00:53:12.299
Parithosh Jayanthi: Okay, any other comments on Cfz.

349
00:53:17.840 --> 00:53:20.979
Parithosh Jayanthi: Perfect. Thank you for presenting and collecting the data. Lewis.

350
00:53:23.060 --> 00:53:23.740
Louis: Thank you.

351
00:53:26.456 --> 00:53:27.289
Parithosh Jayanthi: Yeah. Mario.

352
00:53:27.630 --> 00:53:53.709
Mario Vega: Just one comment on the on the methodology. I think for this we use eels, and even though, like we are filling blocks, it's it's a little bit of a bottleneck because of the it's a little bit slower than clients, of course, but I think this is doable for this and for future hardworks. So basically, the methodology should be that we implement 1st in yields.

353
00:53:53.880 --> 00:54:04.900
Mario Vega: and then we can just fill the benchmarks and just try them out with the with the clients. So now we have, like the the approach, on how to do it, on, on the, on decent feature forks.

354
00:54:05.260 --> 00:54:06.030
Mario Vega: Yep.

355
00:54:13.740 --> 00:54:15.607
Parithosh Jayanthi: Perfect. Thank you.

356
00:54:16.680 --> 00:54:25.620
Parithosh Jayanthi: cool. The next item on the agenda is the Sunnyside Labs team. They've been working on a few things and they had an open issue

357
00:54:25.990 --> 00:54:32.869
Parithosh Jayanthi: talking to the tech crew team where they found something, I think. Do you maybe want to give a present? Briefly, give us an update.

358
00:54:34.530 --> 00:54:56.520
Minhyuk Kim: Yeah, we're preparing the reports right now. But just to give a update on our progress, we are running 2 type. We ran 2 types of devnets. So one was, we are running the previous test that we did in the last report, and we are rerunning the test with regular transactions as well on top of the pop transactions so that we can monitor how the

359
00:54:56.520 --> 00:55:04.799
Minhyuk Kim: larger block sizes can affect the data column sidecar like propagation across the network.

360
00:55:04.890 --> 00:55:11.916
Minhyuk Kim: And we are also running the other network, which is composed of 16 nodes. So with each

361
00:55:12.560 --> 00:55:18.619
Minhyuk Kim: note studying a data column. So

362
00:55:18.930 --> 00:55:25.570
Minhyuk Kim: that is a 1 28 in total. So we have one client concerning one calling, each like

363
00:55:25.800 --> 00:55:31.080
Minhyuk Kim: one column started by one client each, so that we know

364
00:55:31.360 --> 00:55:34.670
Minhyuk Kim: we we maybe we could find any bugs or

365
00:55:34.780 --> 00:55:36.910
Minhyuk Kim: problems with that kind of setup.

366
00:55:37.050 --> 00:56:06.719
Minhyuk Kim: And we also started running the test for validator custom backfill and in the Fussaka devnet 3 spec. Page. I noticed that Teku was the only client which said, it supports backfill right now. So we ran the test for Teku. But there were some problems. So we are communicating with the Techo team, and if any other client are ready for the backfill implementation we. We'd be glad to help with testing that as well.

367
00:56:08.850 --> 00:56:14.299
Minhyuk Kim: And for when we get done with the new report we'll share it in the discord.

368
00:56:16.480 --> 00:56:17.180
Parithosh Jayanthi: Okay.

369
00:56:17.370 --> 00:56:32.640
Parithosh Jayanthi: thank you very much. Yeah. If any clients also need some help saying testing, then please either reach out to the Sunnyside lab team or to us. And it 1st glance, is the perfect column definite working. Okay.

370
00:56:33.590 --> 00:56:42.869
Minhyuk Kim: Yeah, it's working. And it was it handled like 40 50 blobs without any issues@firstst Yeah, so yeah.

371
00:56:43.540 --> 00:56:49.449
Minhyuk Kim: nice, perfect. I know we've had some trouble with the with that conf specific configuration in the past. So that's good to hear.

372
00:56:50.050 --> 00:56:50.530
Minhyuk Kim: Okay.

373
00:56:50.530 --> 00:56:51.180
Parithosh Jayanthi: Nice.

374
00:56:52.200 --> 00:56:55.000
Parithosh Jayanthi: Okay? Any other questions for Sunnyside labs?

375
00:56:58.210 --> 00:57:03.319
Parithosh Jayanthi: Great? Any other open discussion points

376
00:57:03.600 --> 00:57:06.110
Parithosh Jayanthi: or anything I've missed from the agenda today.

377
00:57:11.070 --> 00:57:21.119
Parithosh Jayanthi: Okay, then please engage with the 2 open metrics. Prs as well as the hack. Md, that Carlos has shared. And

378
00:57:21.320 --> 00:57:24.920
Parithosh Jayanthi: thank you guys for attending the call, have a nice week.

379
00:57:26.090 --> 00:57:26.820
CPerezz: Cheers.

380
00:57:30.010 --> 00:57:31.150
Marius van der Wijden: Thank you. Bye.

381
00:57:31.670 --> 00:57:32.440
Parithosh Jayanthi: And.

382
00:57:32.720 --> 00:57:33.540
Pooja Ranjan: Thank you.

383
00:57:35.190 --> 00:57:35.910
Louis: Thank you.

