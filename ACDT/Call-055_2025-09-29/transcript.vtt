WEBVTT

1
00:00:15.470 --> 00:00:16.680
Akash | ECH: Hey, Mario.

2
00:00:19.450 --> 00:00:21.050
Mario Vega: Hello! Good morning.

3
00:00:21.050 --> 00:00:24.880
Akash | ECH: I'm helping with the stream today, so let me know whenever you are ready.

4
00:00:26.170 --> 00:00:28.010
Mario Vega: Thank you so much. Yeah, I will do.

5
00:00:28.750 --> 00:00:29.560
Akash | ECH: Okay.

6
00:00:38.560 --> 00:00:39.310
xuzhiqiang: Bush.

7
00:03:45.120 --> 00:03:54.280
Mario Vega: Hi everyone, I will be leading the call today. We're just gonna give a couple more minutes to give everyone time to join, and then we can start.

8
00:04:17.880 --> 00:04:18.750
Antoine James: Yes, sir?

9
00:04:22.670 --> 00:04:24.690
Antoine James: Just a… Yep.

10
00:04:33.530 --> 00:04:36.149
Justin Traglia: Hey Antoine, you're unmuted, by the way.

11
00:05:54.080 --> 00:05:59.700
Mario Vega: Hey, Akash, I think we have enough people, we can get started. Just let me know when to start.

12
00:06:01.160 --> 00:06:02.370
Akash | ECH: Yeah, we are, like…

13
00:06:03.510 --> 00:06:11.109
Mario Vega: Thank you so much. Good day, everyone. Welcome to ACDT number 55 to this September 29.

14
00:06:11.280 --> 00:06:17.999
Mario Vega: We have a lot of items in the agenda today. I'm gonna share the link to the issue so we can follow along.

15
00:06:18.330 --> 00:06:23.339
Mario Vega: This is the one… And… we can start with Fusaka.

16
00:06:23.400 --> 00:06:35.750
Mario Vega: And the first item in the agenda is DevNet3. As far as I know, we have DevNet3 running, and we don't… no longer have DevNet 5 running, so…

17
00:06:35.750 --> 00:06:45.840
Mario Vega: Do we have anyone from Epand Ops to give an update on DevNet3? I see there's no finalization, as I can see right now. Is… is this suspected?

18
00:06:46.310 --> 00:06:51.379
Mario Vega: Is Piquet Indy or Barnabas in the call?

19
00:06:55.710 --> 00:07:05.230
pk910: I think Barnabas is not here yet, but, yeah, we've just figured a new, unfinology test on DevNet3, so, that chain split, and…

20
00:07:05.480 --> 00:07:08.369
pk910: The unfinity is kind of expected for now.

21
00:07:11.830 --> 00:07:12.610
Mario Vega: Thank you.

22
00:07:12.950 --> 00:07:19.520
Mario Vega: Do you know… do you have more context on this? Do you know how much is this test gonna last?

23
00:07:19.970 --> 00:07:25.619
Mario Vega: Or is there any action items for client teams to take care of on this, or…

24
00:07:28.280 --> 00:07:34.110
pk910: As far as I know, the unfinity test was requested by some clients.

25
00:07:34.530 --> 00:07:39.169
pk910: It will probably last for one or two days, and then we'll,

26
00:07:39.960 --> 00:07:44.230
pk910: Deploy the proper clients again, and see if they can recover properly.

27
00:07:47.380 --> 00:07:48.640
Mario Vega: Excellent, thank you.

28
00:07:49.310 --> 00:07:53.839
Mario Vega: Let me see… Alright,

29
00:07:54.050 --> 00:08:03.160
Mario Vega: Cool. Is there any updates from clients regarding dentistry? Any findings that want to be shared on this call? Either ELs or CLs?

30
00:08:03.510 --> 00:08:06.419
Mario Vega: Who want to chime in on… on the… on this subnet?

31
00:08:19.840 --> 00:08:25.700
Mario Vega: Alright, yeah, okay, since no updates, I think we can move along. Good.

32
00:08:25.950 --> 00:08:43.700
Mario Vega: Yeah, and the next topic is the… there was the announcement, the blog post, I mean, regarding Fusaka, so we now have the schedule and activation times for Holeshki, Sepolia, and Holy, with Holeshki happening this Wednesday.

33
00:08:44.159 --> 00:08:50.839
Mario Vega: I think… All of the release versions are now up in the blog post.

34
00:08:51.090 --> 00:08:58.260
Mario Vega: yes, Bari, yeah, we just finished that. Do you want to update something on the DevNets?

35
00:08:58.950 --> 00:08:59.960
Mario Vega: Yeah.

36
00:08:59.960 --> 00:09:22.999
Parithosh Jayanthi: Not sure what updates were already mentioned, but we have Holsky ShadowFork up as of, like, half an hour-ish. The network seems to be finalizing. We're discussing with the Aragon team why the node's not able to keep up, but it was able to do the ShadowFork, so it's likely more peer-related than anything else. And,

37
00:09:23.000 --> 00:09:30.430
Parithosh Jayanthi: Bezoo's billing blocks, but it's billing it without transaction inclusion, so they've also been informed, and…

38
00:09:30.430 --> 00:09:31.979
Parithosh Jayanthi: Would be great if they can have a look.

39
00:09:37.470 --> 00:09:43.570
Barnabas: And we have also submitted, some pop-up transactions, and exits.

40
00:09:43.990 --> 00:09:51.980
Parithosh Jayanthi: Exactly, so we should have, all the queues full at the time of the transition, which was able to catch a few bugs in the last week.

41
00:09:52.780 --> 00:09:57.030
Parithosh Jayanthi: And the transition should happen in, like, the next half an hour, I think.

42
00:10:09.650 --> 00:10:11.130
Mario Vega: Excellent, thank you so much.

43
00:10:11.230 --> 00:10:16.410
Mario Vega: Should we jump into Manage Health Fork, now?

44
00:10:19.160 --> 00:10:31.040
Barnabas: We're gonna be doing other testing setup works before we do main initial work. I think we're gonna be waiting for the minute releases before we do maintenance of work. That's gonna be at least a month away.

45
00:10:31.260 --> 00:10:41.009
Parithosh Jayanthi: Yeah, our plan is to use the latest releases from all the clients to do the shadow fork for the immediate next testnet, try and catch all the bugs that we can.

46
00:10:41.010 --> 00:10:54.070
Parithosh Jayanthi: And the other line of testing is that DevNet 3 is still up and running, and Banervice triggered non-finality today, so we let it non-finalizing for about 2 days before joining it back, so that we can make sure that the releases are also able to recover.

47
00:10:56.010 --> 00:10:58.610
Parithosh Jayanthi: And parallelly sync tests are also running.

48
00:11:03.230 --> 00:11:05.020
Mario Vega: Excellent. Thank you.

49
00:11:05.430 --> 00:11:06.280
Mario Vega: Cool.

50
00:11:06.490 --> 00:11:12.919
Mario Vega: Yeah, it makes sense to delay, mainnet Shadow Forks until we have, like, the releases for mainnet.

51
00:11:13.240 --> 00:11:19.479
Mario Vega: Alright, cool. Oh, going back to the activations, we have Holesky on…

52
00:11:19.710 --> 00:11:29.579
Mario Vega: on Wednesday, and I wanted to touch upon the topic of client releases. Is there any updates on client releases so far?

53
00:11:29.980 --> 00:11:36.509
Mario Vega: Please check the blog post to see if the client version that is pointed out in the blog post is up-to-date.

54
00:11:36.630 --> 00:11:43.969
Mario Vega: If not, is there any update from any of the clients? Are we ready for, for Wednesday?

55
00:11:49.360 --> 00:11:55.900
pawan: I think for Lighthouse, it wasn't, listed earlier, we just had a release today.

56
00:11:56.400 --> 00:12:03.050
pawan: So I think the blog post can be updated with the… Specific thing?

57
00:12:03.170 --> 00:12:04.300
pawan: Yeah, okay, awesome.

58
00:12:04.300 --> 00:12:07.659
Parithosh Jayanthi: Yeah, we already have it, it is waiting to be approved.

59
00:12:08.160 --> 00:12:09.140
pawan: Okay, thanks.

60
00:12:11.940 --> 00:12:13.639
Mario Vega: Excellent, thanks so much.

61
00:12:14.890 --> 00:12:23.259
Mario Vega: Alright Any other updates from clients, regarding, Holeshky support, on the releases?

62
00:12:31.520 --> 00:12:49.450
Mario Vega: Cool. If not, I think we should be ready, and we can discuss the transition on next ACDC on Thursday after it happens on Wednesday. The BPO activation happens next week, so we'll have, ACDT, to discuss, first the…

63
00:12:49.780 --> 00:12:58.279
Mario Vega: transition into Fusaka on Holeski, and then the BPO, if there's anything that we need to fix before… before it happens next Tuesday.

64
00:12:59.220 --> 00:13:00.220
Mario Vega: Alright.

65
00:13:01.220 --> 00:13:18.229
Mario Vega: Cool. Yeah. And next thing, we have a couple of topics on, execution client testing on the east side. There's a new release, version 5.2, which is basically just small updates, to the…

66
00:13:18.460 --> 00:13:37.460
Mario Vega: to the exception mapping, so there's not… nothing from the client size to do, as far as I know. And we have, 5.3 version of East, which is pending, and we will update the blob schedule. And with that update, we're gonna also verify the client design configuration via,

67
00:13:37.520 --> 00:13:45.779
Mario Vega: if underscore config, and we're gonna use the execute config application in the, in East to verify the…

68
00:13:45.900 --> 00:13:50.539
Mario Vega: the releases. If we find anything, we're gonna ping the clients,

69
00:13:50.740 --> 00:13:55.179
Mario Vega: To see if there's any fix that needs to be done from your side.

70
00:13:58.960 --> 00:14:04.049
Mario Vega: Alright, let me see what's next? Shadow Fork, we already discussed.

71
00:14:04.770 --> 00:14:05.440
Mario Vega: Hmm…

72
00:14:05.840 --> 00:14:22.010
Mario Vega: Anything else on Shelfworks that I might have missed, or anyone wants to chime in? But I guess there's not much to discuss, since Holesk is not… sorry, since Shellfwork has not yet acted at Fusaka, we can discuss that on the next call, I guess.

73
00:14:22.950 --> 00:14:28.339
Mario Vega: And the last topic regarding Fusaka is the Sherlock Fusaka audit contest.

74
00:14:28.910 --> 00:14:36.130
Mario Vega: I think it's still ongoing. Is there anyone here that wants to give an update to this?

75
00:14:43.520 --> 00:14:47.469
Justin Traglia: I can just say that it's going well, and there's, 2 more weeks left.

76
00:14:47.600 --> 00:14:48.839
Justin Traglia: And the competition.

77
00:14:53.220 --> 00:14:53.950
Mario Vega: Thank you.

78
00:14:55.750 --> 00:14:56.630
Mario Vega: Alright.

79
00:14:56.920 --> 00:15:06.030
Mario Vega: Alright, that's everything for Fusaka. Anything that I missed, that we need to discuss today regarding Fusaka?

80
00:15:07.930 --> 00:15:10.530
Mario Vega: Anyone, anything that anyone wants to bring up?

81
00:15:13.100 --> 00:15:16.900
Mario Vega: Important findings, or anything related to client box?

82
00:15:27.660 --> 00:15:30.489
Mario Vega: Frederick, do you like to expand on this?

83
00:15:30.880 --> 00:15:32.530
Fredrik: Oh yeah, sorry,

84
00:15:33.230 --> 00:15:39.959
Fredrik: I think, yeah, we already have a Fusaka directory in the, PM repo, but,

85
00:15:40.130 --> 00:15:45.300
Fredrik: We should, make sure that… We,

86
00:15:46.260 --> 00:15:56.440
Fredrik: we add the relevant files, for the… that's what Harry listed out to do, basically, and we should do that as we have done for

87
00:15:56.610 --> 00:16:02.180
Fredrik: Pictra, for example, basically, create the plans for

88
00:16:03.200 --> 00:16:19.280
Fredrik: for the different, testnets and mainnets, so that we follow the process that's been set up, so that we don't miss any specific steps in testing and, yeah, other aspects. I think Tim used

89
00:16:19.400 --> 00:16:24.749
Fredrik: To do that, but, since he's away, so on.

90
00:16:25.840 --> 00:16:28.399
Fredrik: Should probably take up that torch.

91
00:16:29.830 --> 00:16:38.059
Pooja Ranjan: I actually see a folder created in Ethereum slash PM, it is for Fusaka, maybe we would want to move all the related files in this folder.

92
00:16:39.180 --> 00:16:46.090
Fredrik: Yeah, it's just a paradass readness checklist in there right now, and then we should…

93
00:16:47.130 --> 00:16:54.310
Pooja Ranjan: Yeah, we can have all the PRs to move all related files in this folder, and then we will add it to the network upgrade folder.

94
00:16:55.490 --> 00:16:56.230
Fredrik: Yep.

95
00:17:01.040 --> 00:17:04.089
Mario Vega: Who wants to take on this, this task?

96
00:17:04.819 --> 00:17:06.770
Mario Vega: Since Tim is out of the office.

97
00:17:11.630 --> 00:17:28.699
Pooja Ranjan: So, I mean, I would recommend here that we add all the related files in Fusaka folder, and once that is done, we can move the Fusaka folder to Network Upgrade… Network Upgrade folder archive, which is right now. We can update it right over there.

98
00:17:28.920 --> 00:17:38.479
Pooja Ranjan: But first, let's move all so anyone with related information, make a PR, and I believe Nixo will be in a position to, merge all the PR. Yeah, Stokes as well.

99
00:17:40.370 --> 00:17:47.330
Mario Vega: Excellent, and Alex pointed out that he can start the, the PR for this. Thank you.

100
00:17:49.600 --> 00:17:56.030
Mario Vega: Alright, let's see, alright, anything else?

101
00:17:56.270 --> 00:17:59.420
Mario Vega: Related to Fusaka, or should we move on to the next topic?

102
00:18:06.390 --> 00:18:12.450
Mario Vega: Cool. Alright. So, next topic is, gas limit testing updates.

103
00:18:13.040 --> 00:18:24.050
Mario Vega: And the first subtopic is, the mainnet 60 million gas activation in the Fusaka releases. Any comments on this regarding clients? I…

104
00:18:24.050 --> 00:18:33.829
Mario Vega: I'm out of context here, regarding whether the clients added or not the 60 million gas limit, so if anyone can chime in to…

105
00:18:33.910 --> 00:18:35.250
Mario Vega: To comment on this?

106
00:18:36.550 --> 00:18:37.979
Mario Vega: Any of the clients, I mean?

107
00:18:41.050 --> 00:18:47.340
Mario Vega: Like I mentioned that GET is ready for 60 million, and it's in the release, I presume.

108
00:18:47.850 --> 00:18:49.270
Mario Vega: Andrew, sorry, yes?

109
00:18:49.480 --> 00:18:59.729
Andrew Ashikhmin: So yeah, I have a question. Do we want, it to be included into the, testnet Fusaka release, or in the mainnet Fusaka release?

110
00:19:01.220 --> 00:19:11.699
Parithosh Jayanthi: So, testnets are already at 60 million, so it shouldn't really matter if it's included in the testnet release. I think the main intent is that it is included before the mainnet release.

111
00:19:12.150 --> 00:19:12.920
Andrew Ashikhmin: Okay.

112
00:19:18.710 --> 00:19:22.019
Mario Vega: Any other clients? I see Nethermine.

113
00:19:25.320 --> 00:19:40.499
Kamil Chodoła: Yeah, I can chime in here. So, we have a PR with 60 for NetherMind. From a testing perspective, I know that GEF have API system to make sure that 60 is working well. That's also improved quite a lot.

114
00:19:40.500 --> 00:19:55.430
Kamil Chodoła: I get back after a longer break right now and still analyzing the data, and the outstanding thing from testing perspective is still Zen testing, which I'm discussing right now with Johan and the team, so hopefully this week we'll be able to test it and give some extra input on that.

115
00:19:55.950 --> 00:20:00.999
Kamil Chodoła: Yeah, from NetherMind perspective, we have APR, which we'll include on my net release.

116
00:20:03.280 --> 00:20:21.929
Mario Vega: Excellent, thank you. Yeah, and we have a… we have a topic for discussion today on compute and state benchmarking, so we can, dig deeper in that section. Any other clients? I see Bessu in the call. Do you guys have 60 million gas enabled in the test and releases?

117
00:20:22.070 --> 00:20:23.070
Mario Vega: per minute.

118
00:20:25.770 --> 00:20:32.300
Ameziane Hamlat: Yeah, so it is not on the testnet release, but, yeah, it will be on mainnet, for sure.

119
00:20:33.880 --> 00:20:36.039
Ameziane Hamlat: For the mainnet release, I mean.

120
00:20:36.660 --> 00:20:37.390
Mario Vega: Perfect.

121
00:20:38.110 --> 00:20:39.300
Mario Vega: Thanks.

122
00:20:40.000 --> 00:20:41.920
Mario Vega: Any other clients?

123
00:20:45.130 --> 00:20:49.780
Mario Vega: Let's see… is Reth here? Is anyone from Reth in the call?

124
00:20:52.500 --> 00:20:53.989
Jen: Yeah, Riff is ready.

125
00:20:56.090 --> 00:20:59.620
Mario Vega: Excellent. Is it in the… in the release already?

126
00:20:59.960 --> 00:21:00.720
Jen: Yes.

127
00:21:01.050 --> 00:21:02.909
Jen: I can send it in the chat.

128
00:21:04.090 --> 00:21:05.119
Mario Vega: Excellent, thank you.

129
00:21:06.690 --> 00:21:10.480
Mario Vega: Alright, who am I missing? I don't think any other clients are here.

130
00:21:11.060 --> 00:21:14.730
Mario Vega: Cool. Excellent. Okay.

131
00:21:16.260 --> 00:21:22.180
Mario Vega: Thank you. Yeah, and there's, just another…

132
00:21:22.490 --> 00:21:28.820
Mario Vega: bullet point on this is we have a proposal in the East repository.

133
00:21:29.010 --> 00:21:35.809
Mario Vega: to update the, directory structure that we have for benchmarking. I think we can,

134
00:21:35.850 --> 00:21:57.399
Mario Vega: discuss, but I… maybe… maybe it's out of topic for this call, but just for everyone's reference, we currently have benchmark tests in the East repository, and they now are gonna be divided in two sections, and we can discuss those sections in a bit, but basically the compute is one section, which is basically a state,

135
00:21:57.400 --> 00:22:00.340
Mario Vega: A small state in the test, but,

136
00:22:00.340 --> 00:22:11.630
Mario Vega: a lot of competition, and then state which includes, a bigger state for, bigger… I'm sorry, for more intensive, state testing.

137
00:22:13.260 --> 00:22:26.339
Mario Vega: And please, follow the link, and you can see how we're gonna restructure this. It's very simple. But yeah. With that said, I think we can jump into compute-intensive benchmarking. We're gonna…

138
00:22:26.450 --> 00:22:41.659
Mario Vega: There's just one subtopic, so please, if anyone else wants to raise another topic, another discussion topic for this, please raise your hand. But yeah, the only topic for discussion is that we're gonna have an update on the,

139
00:22:41.920 --> 00:22:55.319
Mario Vega: on East, to update the format, the testing format for the benchmark tests. I don't think there's anything to be done from client side on this, it's just basically a better way of writing tests.

140
00:22:55.510 --> 00:23:09.180
Mario Vega: As far as I know. So yeah, there's no action item for clients. Basically, it's gonna produce the same blockchain test and the same state tests that we have already produced, so no changes in the conception of these tests, it's just a matter of, like.

141
00:23:09.680 --> 00:23:16.540
Mario Vega: just, making it easier to write the benchmarking tests. Let's see…

142
00:23:16.640 --> 00:23:22.400
Mario Vega: Luis, yeah, if you want to chime in just, on this PR, just please feel free to.

143
00:23:27.070 --> 00:23:32.040
Mario Vega: If not, we can continue. Yeah, and the next,

144
00:23:32.230 --> 00:23:43.160
Mario Vega: topic is the state benchmarking. I think Johim, is prepared for, to give an update on this. So yeah, Johim, just feel free to…

145
00:23:44.100 --> 00:23:58.279
jochem-brouwer: Yeah, yeah, thank you, thank you. Yeah, so I think I am bringing this topic up every week, so that's very nice. So, again, we want to create state-intense benchmarks, and this is, like, these are kinds of new tests that

146
00:23:58.280 --> 00:24:06.739
jochem-brouwer: Which we don't really have the tooling for yet to run these tests. And what we want to do is we want to run tests against,

147
00:24:06.860 --> 00:24:10.729
jochem-brouwer: clients with, like, a large state, for instance, mainnet state.

148
00:24:10.950 --> 00:24:15.849
jochem-brouwer: And then we want to see and to figure out what are, like, the worst-case situations here which can happen.

149
00:24:16.070 --> 00:24:26.589
jochem-brouwer: I'm working with Camille from Nevermind on this tooling to run these tests, and of course, if we want to run tests, we also need to have the situations which we run on.

150
00:24:26.590 --> 00:24:40.530
jochem-brouwer: Obviously, Xen is a candidate for this, because the Xen contact has a very large storage, and what I would like clients to think a bit about is what is actually the worst-case situation in your client.

151
00:24:40.760 --> 00:24:53.309
jochem-brouwer: So, we are thinking about state, and we could say, okay, maybe deleting state is the worst-case situation, or updating state is the worst case situation, or writing new storage slots is the worst-case situation.

152
00:24:53.320 --> 00:25:02.140
jochem-brouwer: That, I think, completely has to do with the implementation and the optimizations which a client does, which I have no ID for at this moment.

153
00:25:02.190 --> 00:25:18.389
jochem-brouwer: Or maybe there are even more exotic situations where, well, a client might have optimized something very well, but now has a very specific area where the behavior is now very, well, bad. And of course, we need tests for this, so if you have, like, a very specific situation.

154
00:25:18.420 --> 00:25:25.099
jochem-brouwer: where you would like your client to get a benchmark for, then please let me know. I can write these tests, I will

155
00:25:25.260 --> 00:25:29.830
jochem-brouwer: I would love to write, write these tests. And,

156
00:25:30.200 --> 00:25:43.480
jochem-brouwer: Yeah, we would really want that we have these tests, because we want to update the gas limit, we want to increase this on mainnet, that's fine, but we don't really have eyes yet on, like, these worst-case situations for the state.

157
00:25:43.610 --> 00:26:03.420
jochem-brouwer: And we can… so we are writing this tooling now to run these tests, and I think that will be done very soon. And then we can use these to actually perform these tests in an isolated environment, so we can know beforehand what, like, the areas of optimizations for clients are.

158
00:26:03.790 --> 00:26:14.849
jochem-brouwer: So if someone has, like, an idea for extra tests or other situations, then please let me know. But, yeah, let me know that the state benchmarks are coming very soon.

159
00:26:15.090 --> 00:26:15.770
jochem-brouwer: Thank you.

160
00:26:17.960 --> 00:26:25.769
Mario Vega: Awesome, thanks. Is there anything from the east side? How are we approaching this, the testing of this?

161
00:26:26.540 --> 00:26:29.859
Mario Vega: I'm curious about how our… Yes. I mean…

162
00:26:30.390 --> 00:26:37.909
Mario Vega: To paraphrase my question, I think, are we including the big state on East, or how is the big state,

163
00:26:38.200 --> 00:26:39.860
Mario Vega: Gonna be included in the tests.

164
00:26:40.020 --> 00:26:54.480
jochem-brouwer: Yes, this is a very good question. So, the test itself is, so specifically this XEN test, but likely also every, every other test for the state benchmarks, they will be written in EAST.

165
00:26:54.750 --> 00:26:58.499
jochem-brouwer: And what you will do is you will use the address step.

166
00:26:58.720 --> 00:27:17.349
jochem-brouwer: to target a specific network, so, for instance, like mainnet, then you would use the XEN contract for your Xen tests. And what you would then do, and this is… this is why we need this extra tooling, so you do not… you can obviously not put the entire pre-state into the pre-state files of East.

167
00:27:17.460 --> 00:27:20.219
jochem-brouwer: So what you will then do is you will spin up a node.

168
00:27:20.400 --> 00:27:39.019
jochem-brouwer: And the current tooling, what we are using, is we have basically a CL mock, which drives the chain to run these tests on, and this generates the payloads for the client to run. And then to actually run this test, we replay these payloads on top of other clients, and then we see how they perform.

169
00:27:39.340 --> 00:27:43.740
jochem-brouwer: And these other clients, they all run from the same snapshot.

170
00:27:44.140 --> 00:27:52.840
jochem-brouwer: So, you basically, you start the chain, you use this snapshot, and then on top of this snapshot, you run the payloads generated by these East tests.

171
00:27:57.500 --> 00:27:59.439
Mario Vega: Got it, got it.

172
00:27:59.730 --> 00:28:04.689
Mario Vega: The tooling that you mentioned that you're missing, is that on the east side, or on the client side?

173
00:28:05.250 --> 00:28:21.669
jochem-brouwer: This is actually, well, basically a third-party tool currently. So, this is tooling, that's currently, it is, well, okay, this tooling is currently my own custom tooling, but Metamine's guest benchmark repository is, I think, the repository which will include this thing.

174
00:28:21.870 --> 00:28:28.460
jochem-brouwer: But personally, I would say that this is also something which we would likely want in East as well.

175
00:28:29.480 --> 00:28:41.079
Parithosh Jayanthi: I would actually see if we can have it as a fully independent tool with a way to hook it into EAST as well as another man tool, because I can also imagine the mock CL ability is something we can use elsewhere, right?

176
00:28:42.340 --> 00:28:50.269
jochem-brouwer: Yes, that's true. Okay, maybe as a standalone tool, that would actually be maybe a bit more logical, yeah. Interesting, yeah.

177
00:28:52.750 --> 00:29:07.619
Kamil Chodoła: Yeah, so… I was seeing that in the beginning, it's like, IST is having the definitions of the tests, and it can contain definitions for tests which are specific for the chains, like, we often is right, for example, on mainnet.

178
00:29:07.640 --> 00:29:13.340
Kamil Chodoła: We can have specific tests for blotnet, we can have specific tests for any testnets, if you would like to.

179
00:29:13.750 --> 00:29:28.650
Kamil Chodoła: And then we have the site tool link, which for now probably will be GAS Benchmarks, which will be responsible for generating the payloads. Here we are using some custom version of Netarmite, which will be generating the payloads on top of that state.

180
00:29:28.680 --> 00:29:38.630
Kamil Chodoła: And then, also, like, what Gazelle actually have right now is the execution of those tests, using some VMs which are having,

181
00:29:39.310 --> 00:29:49.589
Kamil Chodoła: backups of all of the clients ready just to be mounted. Test will be executed, and the state will be, afterwards, reverted to the initial state.

182
00:29:49.910 --> 00:29:55.279
Kamil Chodoła: So, like, the separate tool, but it will always have all of the definitions of those tests.

183
00:29:55.520 --> 00:30:15.220
Kamil Chodoła: Long term, we can see if we can integrate that to EAST, but probably, as Pari mentions, it's like, it's better to have the execution part being outside for that, because this is quite heavy, and not really… like, not to be very useful for EAST to have it, rather East to be a repository of tests for that.

184
00:30:17.230 --> 00:30:19.150
Mario Vega: Makes sense. Thanks so much.

185
00:30:20.130 --> 00:30:25.879
Mario Vega: Alright, any questions on this topic for Joachim? From clients, I mean?

186
00:30:26.010 --> 00:30:27.030
Mario Vega: Primarily.

187
00:30:30.270 --> 00:30:37.549
Andrew Ashikhmin: Yeah, so I have a question, like, when you say snapshots, what do you mean by snapshots?

188
00:30:38.360 --> 00:31:00.839
jochem-brouwer: So, a snapshot will be any… I'm specifically meaning, if PandaOps snapshots, but this is basically, like, I think PandaOps at every… yeah, thank you, Barry. Like, every 10,000 blocks on mainnet and also on testnets, I think it's every 10,000 blocks, or maybe 100,000 blocks, they release this snapshot, so you can directly download this snapshot and, use that as your

189
00:31:00.840 --> 00:31:03.990
jochem-brouwer: Well, basically your state's database to run the test form.

190
00:31:05.120 --> 00:31:06.950
Andrew Ashikhmin: Okay, I see, thank you.

191
00:31:16.180 --> 00:31:16.980
Mario Vega: Excellent.

192
00:31:17.160 --> 00:31:18.490
Mario Vega: Messien?

193
00:31:19.040 --> 00:31:27.890
Ameziane Hamlat: Yeah, I have a quick question, related to, these tests. How close are they from

194
00:31:28.330 --> 00:31:37.849
Ameziane Hamlat: the transactions that we see on mainnet? Because, for example, when I look to your… to the comment, I see 7,700 as a store, and

195
00:31:37.950 --> 00:31:39.709
Ameziane Hamlat: 8 has slowed.

196
00:31:40.440 --> 00:31:52.050
Ameziane Hamlat: And, on base's side, if I remember correctly, when, we were looking into it, like, the most, like, the biggest bottleneck was actually S-load.

197
00:31:52.830 --> 00:32:02.690
Ameziane Hamlat: even, like, on the Xen contract, transactions, and, which, which, which could be, you know, weird, like, when, at, at, like, first place, when we…

198
00:32:02.970 --> 00:32:06.810
Ameziane Hamlat: when we know that, like, there are more SS stored than S loads, but…

199
00:32:07.180 --> 00:32:12.550
Ameziane Hamlat: The thing is that we found that most of the S-load were actually on

200
00:32:13.200 --> 00:32:22.840
Ameziane Hamlat: were actually, zero reads, so basically slots that, don't exist, in the state. So, I was wondering how…

201
00:32:23.790 --> 00:32:27.349
Ameziane Hamlat: Is this something that you already have in the tests, or…

202
00:32:28.940 --> 00:32:39.220
jochem-brouwer: Yes, okay, very good question. So, I think what you meant is that you, specifically were looking at replaying mainnet transactions, so replaying the mainnet situation.

203
00:32:39.250 --> 00:32:51.149
jochem-brouwer: Well, this is doing, basically that, but even worse. And what I mean with worse is that on mainnet, what you see for the Xen situation is that tokens are being minted, and,

204
00:32:51.800 --> 00:32:53.710
jochem-brouwer: this,

205
00:32:54.620 --> 00:33:15.060
jochem-brouwer: this has some extra computational overhead in the contract itself. So it does, like, some extra logic. What I'm trying to do is I want to write, using the existing Xen contract, as much storage to the present contract as possible. And one of the ways to do this, and I'm not sure if this is actually the worst-case situation, but this is likely

206
00:33:15.060 --> 00:33:20.249
jochem-brouwer: Well, bad enough, is to call the approve function.

207
00:33:20.540 --> 00:33:27.650
jochem-brouwer: So what you do there is you can approve, like, another address to spend your tokens, even if you don't have any tokens yourself.

208
00:33:28.070 --> 00:33:45.019
jochem-brouwer: So, for this situation, like, on the mainnet transactions, you will see, like, less S-stores and maybe more S loads. The tests which you saw in the comment is specifically looking only at S-stores, so that's why you see, like, only 8S loads.

209
00:33:45.800 --> 00:34:01.300
jochem-brouwer: I will, of course, also implement a test, which focuses on the S loads, because this could, of course, also be a bottleneck, so these specific tests are only looking at the S-store, but this tries to squeeze out as much S-stores as possible on XAM.

210
00:34:01.500 --> 00:34:03.600
jochem-brouwer: And I will do the same for SLoad.

211
00:34:04.200 --> 00:34:18.250
jochem-brouwer: So yeah, this is basically a worst… well, a more worse situation than the things we have seen on mainnets yet, and of course, this is with the side note that I am running these tests on an isolated node.

212
00:34:18.380 --> 00:34:27.409
jochem-brouwer: So they are not running, like, any networking or whatever, so that's more optimal. But in terms of execution itself, this should,

213
00:34:27.780 --> 00:34:34.049
jochem-brouwer: well, in practice, it can happen, but likely no one wants to spend their money on this. So…

214
00:34:34.219 --> 00:34:39.989
jochem-brouwer: This might be, like, a very good approximation of the worst-case situation for S-store on mainnet.

215
00:34:42.929 --> 00:34:43.759
Ameziane Hamlat: Thanks.

216
00:34:45.980 --> 00:34:51.770
jochem-brouwer: And of course, if you have, like, any other ideas for these kind of benchmarks, like, please let me know, or if you see something weird.

217
00:34:51.770 --> 00:35:06.519
jochem-brouwer: please reach out, because I might either have done something, like, super, super dope, or there's, like, a very good explanation for it, so please reach out if you have any cool ideas on how to make these situations even worse.

218
00:35:08.050 --> 00:35:25.460
Mario Vega: Thank you. There's a great question from Maria on the chat, whether this is only seen on the same contract, or if there's any smaller contracts. I assume it may not, maybe, that exhibit the same behavior. Do you know if that's the case?

219
00:35:25.760 --> 00:35:27.049
Mario Vega: For other contracts?

220
00:35:28.870 --> 00:35:39.830
jochem-brouwer: I think a client team should, chime in on this, but I think all clients use, like, some kind of… well, for the Snap protocol, you have, like, a 01 lookup time for SLoad.

221
00:35:39.950 --> 00:35:47.690
jochem-brouwer: So, I think it does not matter if you have, like, a very big contract or a very small contract, but of course, this also depends on the implementation and the optimizations.

222
00:35:52.740 --> 00:35:53.650
Mario Vega: Excellent.

223
00:35:53.840 --> 00:35:54.250
Marius van der Wijden: Yes.

224
00:35:54.250 --> 00:35:54.610
Mario Vega: Secure.

225
00:35:54.610 --> 00:36:01.740
Marius van der Wijden: So, exactly what, what Joachim said. The only, the only thing,

226
00:36:02.320 --> 00:36:05.159
Marius van der Wijden: That can be different is if you are…

227
00:36:05.290 --> 00:36:14.900
Marius van der Wijden: if you are loading… S-loading something that is, that is cached somewhere, or if you're S-loading something that is non-existent, or if you're…

228
00:36:15.120 --> 00:36:26.940
Marius van der Wijden: as loading, like, existing… existing data. Those are the three different, different things, but it's not… not really dependent on the size of the contract where you're… where you're exploiting from.

229
00:36:35.010 --> 00:36:38.039
Mario Vega: And there's, another question…

230
00:36:38.460 --> 00:36:46.579
Mario Vega: So for Bessu, are there any changes in optimization that may make this different from other clients?

231
00:36:47.390 --> 00:36:51.740
Mario Vega: Do you have someone from Besu that could, chime in?

232
00:36:51.740 --> 00:37:01.029
Ameziane Hamlat: I mean, it depends on the question. For example, we had a few discussions during the interop with, with some…

233
00:37:01.160 --> 00:37:10.449
Ameziane Hamlat: folks from Wrath, So, for example, Wrath, like, the… if I remember correctly, the bottleneck was on…

234
00:37:10.910 --> 00:37:25.939
Ameziane Hamlat: the hash calculation, like, the root hash calculation. So, on our side, we, we preload the storage slots on the, like, during, during transaction execution.

235
00:37:26.070 --> 00:37:37.750
Ameziane Hamlat: So, like, each time we touch, one slot, key, we preload, all, like, the, the branch, the branch nodes to…

236
00:37:38.040 --> 00:37:42.760
Ameziane Hamlat: So then we can, you know, speed up the root hash calculation.

237
00:37:43.740 --> 00:37:50.330
Ameziane Hamlat: Yeah, so that's, like, that's the main, I think, the main… the main optimization on the… on the root hash side.

238
00:37:50.600 --> 00:37:59.409
Ameziane Hamlat: But I don't know if the question is related to something else. But, for example, for the S… like, for, like, the S-load performance on…

239
00:38:01.650 --> 00:38:21.029
Ameziane Hamlat: on zero leads, so this is something we're already aware of. So there is, like, there is one small limitation on the LuxDB side, so there is a bug in OroxyDB that, so basically, which is basically, triggering, an issue

240
00:38:21.040 --> 00:38:34.010
Ameziane Hamlat: like, an exception when there is, when there is a zero read, instead of just returning whatever, you know. So we… there is a PR that is pending, but it is not matched yet.

241
00:38:34.930 --> 00:38:35.780
Ameziane Hamlat: Yeah.

242
00:38:36.150 --> 00:38:40.649
Ameziane Hamlat: Yeah, so yeah, apart from that, Yeah, that's all, actually.

243
00:38:42.760 --> 00:38:43.290
Mario Vega: Thank you.

244
00:38:43.290 --> 00:38:44.650
Marius van der Wijden: Yeah, so…

245
00:38:44.780 --> 00:38:55.409
Marius van der Wijden: Just to expand on this, we also have a, we also have a problem with non-existent weeds. Well, it's not a problem, but it's, like, whenever we do

246
00:38:55.760 --> 00:39:09.660
Marius van der Wijden: When we read something that is non-existent, we need to go through all of the in-memory diff layers, and then go to the disk layer, which is a load of work for reading something that is non-existent.

247
00:39:09.880 --> 00:39:13.850
Marius van der Wijden: So actually, like, the existent read is…

248
00:39:14.390 --> 00:39:18.699
Marius van der Wijden: Quite a bit faster than a non-existent REIT for us.

249
00:39:25.690 --> 00:39:27.530
Mario Vega: Cool, thank you.

250
00:39:30.800 --> 00:39:49.720
Mario Vega: Yeah, and just to echo Johann's, if there's any particular interesting ideas that you want for him to write a test for, I think it would be very good if you guys can reach out. I think this particular scenario that you're mentioning, Marius, I think it would be very nice for us to also have a

251
00:39:49.790 --> 00:39:54.789
Mario Vega: a compute test. Maybe there's something that we can do on the compute side.

252
00:39:54.870 --> 00:39:57.399
Mario Vega: For that. For MTS loads, I mean.

253
00:39:57.620 --> 00:39:59.510
Mario Vega: Cool.

254
00:40:00.210 --> 00:40:01.090
Mario Vega: Alright.

255
00:40:02.120 --> 00:40:10.300
Mario Vega: Anything else? Any other questions for Johan, or on this topic that we want to… Race…

256
00:40:10.590 --> 00:40:28.759
jochem-brouwer: Yeah, I just want to note, as final point, that, as you mentioned, it would be very nice if people could reach out, like, this kind of situation, I would like to see tested. But my goal is also for myself to go into these clients, to all of the clients, to see what is being optimized and what is not being optimized.

257
00:40:28.820 --> 00:40:47.040
jochem-brouwer: And to see there, okay, what's, like, the worst case situation that, well, how can we abuse this optimization, or how can we not abuse it? But it would be really helpful if I could have some help on that, because it's, of course, much harder to figure out the code on yourself, instead of talking to someone who wrote this code, yeah.

258
00:40:50.720 --> 00:40:54.340
Mario Vega: There's also a nice point, by Ben. If…

259
00:40:54.760 --> 00:41:05.649
Mario Vega: We could change as a store to not check the current value for pricing. So just to paraphrase that, we need… we would need an EIP for that, right? Just to basically not…

260
00:41:06.180 --> 00:41:12.410
Mario Vega: Having the current value to be a precondition to calculate the gas pricing for that.

261
00:41:13.430 --> 00:41:14.170
Mario Vega: Yep.

262
00:41:14.580 --> 00:41:23.079
Ben Adams: Yeah, so… So, obviously the reason it does check the current price is so it can correctly

263
00:41:23.260 --> 00:41:27.950
Ben Adams: Add additional… Costs for state growth.

264
00:41:28.640 --> 00:41:32.929
Ben Adams: But it's also the most expensive part of S-Store, is that.

265
00:41:33.170 --> 00:41:35.690
Ben Adams: Searching for the current value.

266
00:41:36.250 --> 00:41:44.079
Ben Adams: And that's… that's where, usually, checking for a value that doesn't exist comes from.

267
00:41:56.380 --> 00:42:04.819
Mario Vega: Thank you, thank you. Cool. One last comment from, CPRS,

268
00:42:05.160 --> 00:42:08.060
Mario Vega: All of the case… he posted a link.

269
00:42:08.330 --> 00:42:10.650
Mario Vega: I assume this is a list?

270
00:42:10.920 --> 00:42:16.619
Mario Vega: Yes, this is a list, of test cases that will eventually make it into East.

271
00:42:17.020 --> 00:42:27.460
Mario Vega: Just for everyone to go over this list, because this is something that we are already working on, so if your test case is not in this list.

272
00:42:28.830 --> 00:42:40.399
Mario Vega: please chime in on make… or make a comment, I guess, that would be the best, approach. Make a comment into this list so we can add a test, a scenario that will eventually make it into East.

273
00:42:40.620 --> 00:42:41.390
Mario Vega: Yep.

274
00:42:42.900 --> 00:42:43.780
Mario Vega: Alright.

275
00:42:44.410 --> 00:43:03.529
Mario Vega: Thanks. If nothing else on this topic, we can jump into Glamster then. So, the first agenda item is that we have a new Consistent Specs release that happened last Thursday, version 1.6 Vita 0. So, Justin, do you have any… anything else to add to this?

276
00:43:05.440 --> 00:43:07.450
Justin Traglia: Not really, I mean…

277
00:43:07.640 --> 00:43:12.750
Justin Traglia: Yeah, there's a new release, EPBS. Devnet Zero will be based off of this as well.

278
00:43:15.920 --> 00:43:22.629
Mario Vega: Alright, thanks. Just for clients to be aware, just to consume the tests, I assume. Yep.

279
00:43:24.380 --> 00:43:42.900
Mario Vega: So, yeah, and jumping into specifics, so we have, block-level access list and EPPS, for Glamstrom, so we can jump into, block-level access list first, and then into EPPS, if there's any topics. So, I see the first, comment, or first bullet point, sorry, is from Rahul.

280
00:43:43.000 --> 00:43:50.550
Mario Vega: Let me see if he's in this call… Let me see…

281
00:43:51.870 --> 00:43:53.130
raxhvl: I'm here.

282
00:43:53.130 --> 00:44:00.199
Mario Vega: Oh, yeah, sorry, there you go. Yeah, can you chime in on the blog access list? Any, any updates that you want to share?

283
00:44:01.200 --> 00:44:06.879
raxhvl: Sure. In our last release for block-level access list, that was version 1,

284
00:44:07.210 --> 00:44:12.200
raxhvl: We focused on simple happy, path scenarios for block access lists.

285
00:44:12.610 --> 00:44:16.770
raxhvl: And since then, we've been working on some complex test cases.

286
00:44:17.050 --> 00:44:25.389
raxhvl: And throughout our testing, what we found is the intersection of block access lists and some existing EIPs, such as 7702, is quite nuanced.

287
00:44:26.030 --> 00:44:33.760
raxhvl: For instance, when you create a 7702 delegation, the target account need not be read from the state for the delegation to be created.

288
00:44:34.130 --> 00:44:38.229
raxhvl: This is because the target account can't be read from the address directly.

289
00:44:38.640 --> 00:44:43.700
raxhvl: So we clarified this in the IP and added a negative test case to ensure

290
00:44:43.830 --> 00:44:48.840
raxhvl: That clients do not perform a state read for the target account when creating a delegation.

291
00:44:49.340 --> 00:44:58.410
raxhvl: We also needed to, address some, system operations, like self-destruct and precompiles, which required some further, clarification.

292
00:44:58.530 --> 00:45:01.840
raxhvl: Those also have been updated in the IP now.

293
00:45:02.310 --> 00:45:13.039
raxhvl: And throughout this month, we fixed several bugs within the execution specs, and the IP has been refined to some extent to cover all our learnings and edge cases.

294
00:45:13.290 --> 00:45:16.170
raxhvl: That we've, discovered in the past month.

295
00:45:16.860 --> 00:45:19.760
raxhvl: We now have close to 30 test cases.

296
00:45:19.970 --> 00:45:21.869
raxhvl: That's currently under review.

297
00:45:22.400 --> 00:45:26.369
raxhvl: And, we should, should expect a release soon, YAM.

298
00:45:26.560 --> 00:45:35.289
raxhvl: Also, we'd like to proactively run test cases for clients. If you're a client and have not shared a dev branch with us.

299
00:45:36.320 --> 00:45:41.650
raxhvl: please do so. This will ensure that, we release a polished version of test.

300
00:45:41.970 --> 00:45:44.970
raxhvl: And finally, if you're client dev that's new.

301
00:45:45.790 --> 00:45:51.640
raxhvl: to testing, or have any questions, feel free to reach out. Be happy to help you get started.

302
00:45:53.900 --> 00:45:55.620
Mario Vega: Excellent. Thank you so much.

303
00:45:55.820 --> 00:46:01.869
Mario Vega: Yeah, just to echo that, please reach out to Raul or Felipe,

304
00:46:02.180 --> 00:46:14.439
Mario Vega: So they can, either point you to the latest block-level access list release in East, or they can help you out to run the tests for you if you provide the branch to do so.

305
00:46:15.510 --> 00:46:16.280
Mario Vega: Cool.

306
00:46:16.880 --> 00:46:21.669
Mario Vega: Any questions on block-level access lists, and specifics from clients, especially?

307
00:46:23.160 --> 00:46:31.410
Toni Wahrstaetter: I'm not from a client, but let me ju- let me just add one thing. We had the block of Access List breakout call on Wednesday, and we discussed,

308
00:46:31.490 --> 00:46:44.139
Toni Wahrstaetter: one important topic, that might affect more people than just those that were at the call. So it's about, do we want to do a block-level access list hash versus a block-level access list root?

309
00:46:44.340 --> 00:46:51.070
Toni Wahrstaetter: I won't rehash the whole discussion here, so please check out the Discord. I have summarized,

310
00:46:51.500 --> 00:46:57.280
Toni Wahrstaetter: The discussion, if you scroll up a bit, or you can also rewatch the breakout call.

311
00:46:57.320 --> 00:47:15.970
Toni Wahrstaetter: But this is definitely something… it's a small change, it's still open, so right now it's a block of access list hash, but it might make sense to move towards a block of access list route. The change would be rather small, but still, if we really want to go for that, we should decide, yeah, as early as possible.

312
00:47:15.970 --> 00:47:19.260
Toni Wahrstaetter: So please, if you have an opinion on that.

313
00:47:19.450 --> 00:47:33.099
Toni Wahrstaetter: yeah, reach out, join the call, or, voice your opinion on Discord. And there's also a Eve Research post by Jason about, Block Live Access List X, pre-conf.

314
00:47:33.530 --> 00:47:40.189
Toni Wahrstaetter: That also, highlights why a route might be, beneficial for some use cases.

315
00:47:43.040 --> 00:47:57.540
Mario Vega: Excellent. Thank you so much, Tani. Just to surface one comment from the chat, Karim mentions that there's a message in Discord that there's a missing test, for BESU that is related to block load exit list that we should check.

316
00:47:57.890 --> 00:48:01.949
Mario Vega: So, thank you for that. Make sure that we can check that.

317
00:48:02.470 --> 00:48:11.409
Mario Vega: Cool. And the other point is that, we have this link provided by Eve Bandelp's. It,

318
00:48:11.710 --> 00:48:13.769
Mario Vega: It lays out the,

319
00:48:13.900 --> 00:48:23.200
Mario Vega: the block level access list.net specification. Just please come here and see if the information is okay to you.

320
00:48:23.690 --> 00:48:27.420
Mario Vega: I don't think we have a date, I cannot see a date here, so…

321
00:48:28.370 --> 00:48:31.210
Mario Vega: It might be not specified.

322
00:48:31.830 --> 00:48:36.610
Mario Vega: So yeah, there's no date, it seems, it's only slated for late, yeah.

323
00:48:37.240 --> 00:48:48.170
Parithosh Jayanthi: There's no date yet, we're still waiting for Kurtosis conflicts to look good, for us to get a better idea of local testing that we can do, and then once there's at least 3 clients, then we're ready to spin up a DevNet.

324
00:48:50.330 --> 00:48:53.629
Mario Vega: Excellent, excellent, thanks. Yeah. Alright.

325
00:48:54.040 --> 00:48:59.389
Mario Vega: Moving on, the last topic today is EPVS.

326
00:48:59.860 --> 00:49:05.320
Mario Vega: We also have a link from EidpandaOps here. Let me share it in the chat.

327
00:49:05.720 --> 00:49:18.940
Mario Vega: Yeah, same… similar things, we have a Devness slated for the end of October, and I think we are missing the client branches, say, in this case, too.

328
00:49:19.410 --> 00:49:21.170
Mario Vega: yep.

329
00:49:23.170 --> 00:49:28.770
Mario Vega: Cool. So yeah, on the deeper topic of EPBS, is there anything…

330
00:49:28.880 --> 00:49:34.350
Mario Vega: Any client wants to share on this, or do we have, like, more context from someone that can share?

331
00:49:34.510 --> 00:49:38.110
Mario Vega: That can be shared here. Sorry, about EPVS.

332
00:49:44.510 --> 00:49:57.200
Justin Traglia: I can probably just talk more. I mean, I know clients are working on implementing everything for the first DevNet. We'll know more in two weeks whether or not DevNet Zero can be launched at the end of October.

333
00:49:58.150 --> 00:50:07.700
Justin Traglia: Clients should provide an EPBS DevNet-0 branch for ETH PandaOps, to test with.

334
00:50:08.360 --> 00:50:13.779
Justin Traglia: There was some testing… Things that we need to figure out, and

335
00:50:16.150 --> 00:50:20.249
Justin Traglia: Katya asked if there are any metrics needed for EPBS? I don't know.

336
00:50:23.430 --> 00:50:27.970
Justin Traglia: That's pretty much it. I mean, we're just working on implementing everything.

337
00:50:30.950 --> 00:50:43.750
Mario Vega: Alright, thank you, makes sense. Yeah, if there's anyone else that knows a little bit more about… I mean, probably there's no one right now, but, just try to keep an eye on metrics, I think that's a very interesting…

338
00:50:43.910 --> 00:50:47.679
Mario Vega: Topic that we need to, resurface at some point.

339
00:50:48.110 --> 00:50:50.249
Mario Vega: Thank you, Katya, for the question.

340
00:50:50.640 --> 00:50:53.140
Mario Vega: Cool.

341
00:50:53.430 --> 00:51:02.650
Mario Vega: Any opinions or anything that wants to be shared from clients regarding EPVS?

342
00:51:04.190 --> 00:51:05.710
Mario Vega: If not, that's okay.

343
00:51:11.970 --> 00:51:22.220
Mario Vega: Okay, cool. Yeah, that was the last, topic in the agenda for today. Is there anything that we missed that has to be discussed today?

344
00:51:23.080 --> 00:51:24.770
Mario Vega: Please raise your hand now.

345
00:51:25.660 --> 00:51:27.139
Mario Vega: Before we end the call.

346
00:51:32.350 --> 00:51:34.960
Mario Vega: If not, I think that's it for today.

347
00:51:35.160 --> 00:51:38.759
Mario Vega: Thanks, everyone, for joining. Yeah, let's,

348
00:51:38.870 --> 00:51:42.070
Mario Vega: Let's see, hope that the,

349
00:51:43.230 --> 00:51:49.219
Mario Vega: The activation in Holesky goes smoothly this Wednesday, and we can discuss it on the ACDC on Thursday.

350
00:51:49.330 --> 00:51:50.510
Mario Vega: Thank you, everyone.

351
00:51:51.530 --> 00:51:52.210
jochem-brouwer: Thank you.

352
00:51:52.480 --> 00:51:53.420
stokes: Thank you.

353
00:51:53.420 --> 00:51:53.950
Toni Wahrstaetter: That's true.

