WEBVTT

1
00:04:10.080 --> 00:04:10.950
Mario Vega: Hello! Hello!

2
00:04:12.970 --> 00:04:14.300
Pooja Ranjan: Good morning!

3
00:04:15.410 --> 00:04:17.579
Mario Vega: Good morning. How's it going.

4
00:04:19.529 --> 00:04:24.799
Pooja Ranjan: Good good. Another Monday morning and 8 o'clock, looking forward to so many new things.

5
00:04:26.240 --> 00:04:26.740
Mario Vega: Awesome.

6
00:04:27.240 --> 00:04:27.930
Carson | STEEL: Morning.

7
00:04:28.580 --> 00:04:29.470
Mario Vega: Morning.

8
00:04:33.710 --> 00:04:39.109
Carson | STEEL: Mario, you're same time, zone. You're 10 o'clock right now.

9
00:04:40.550 --> 00:04:45.069
Mario Vega: I'm 8 well, 2 min until 8. Yeah.

10
00:04:45.070 --> 00:04:48.890
Carson | STEEL: 10 min. Okay, you're even earlier than us, are you? A morning person.

11
00:04:49.470 --> 00:04:50.783
Mario Vega: I wasn't.

12
00:04:52.250 --> 00:04:53.500
Mario Vega: I am now.

13
00:04:54.217 --> 00:04:59.362
Carson | STEEL: Yeah. Now we're all whatever kind of person our team is. I think.

14
00:05:00.030 --> 00:05:02.309
Mario Vega: Exactly. Yeah.

15
00:08:01.650 --> 00:08:04.150
Mario Vega: Hi, everyone. We'll

16
00:08:04.637 --> 00:08:09.639
Mario Vega: start in a in a minute just waiting for everyone to join. And we can start. Then.

17
00:09:37.210 --> 00:09:42.710
Mario Vega: hey, Pooja! I think we can start. Just let me know when I when I should start.

18
00:09:43.600 --> 00:09:44.650
Pooja Ranjan: We are, live.

19
00:09:47.230 --> 00:09:56.610
Mario Vega: Awesome. Thank you so much. Yeah. Welcome everybody to acdt number 45. Today's July 21, st

20
00:09:57.089 --> 00:10:05.230
Mario Vega: we have a couple of items in the agenda. And 1st of all, as always, Fussaka updates, is the 1st thing to to address.

21
00:10:07.520 --> 00:10:14.960
Mario Vega: I think definite 3 has not gone. Live at this point. But we can start with.

22
00:10:15.090 --> 00:10:24.340
Mario Vega: there was an East release. So I think we can start with that. If that's okay. Spencer, are you?

23
00:10:24.500 --> 00:10:29.969
Mario Vega: Yeah, Spencer, do you want to give an update on the East release?

24
00:10:30.620 --> 00:10:35.860
spencer-tb: Yeah, sure. So and we released a yeah, a feature release.

25
00:10:35.970 --> 00:10:39.529
spencer-tb: And for devnet free just last Friday.

26
00:10:40.050 --> 00:10:50.060
spencer-tb: And basically the changes within the release include updates to the gas prices of and the modex

27
00:10:50.680 --> 00:10:57.370
spencer-tb: and the curve Clz, which I guess we'll chat about later.

28
00:10:57.650 --> 00:11:06.600
spencer-tb: and the blog base fee cost change for eip, 7, 9, 1, 8, and

29
00:11:06.700 --> 00:11:11.099
spencer-tb: the transaction gas limit reduction for Eip 7, 8, 2, 5,

30
00:11:11.700 --> 00:11:18.849
spencer-tb: and the release also includes new tests for the Max blob per tx limit, added to the pure daft IP,

31
00:11:19.450 --> 00:11:27.542
spencer-tb: and and also removes all the tests for Eip 7, 9 0, 7. Yeah, I guess

32
00:11:28.530 --> 00:11:35.009
spencer-tb: we might have another release based on the end of this call. But yeah, let's see, let's see

33
00:11:37.850 --> 00:11:44.540
Mario Vega: Thank you. Thank you. On the Dominitory side. I don't see one of us

34
00:11:45.270 --> 00:11:48.729
Mario Vega: in the call parry. Do you know if there's any updates? Yeah.

35
00:11:49.230 --> 00:12:18.090
Parithosh Jayanthi: Yeah. So there's mainly 2 things left we do have a Pr from Spencer for testing hive. So as soon as have a branch for us. Ideally. The branch name is Fusapnet 3 it should pick up all the images, and we should have hive tests running kurtosis should be running as well. I'll PIN a version that people can test out, but we haven't received client images from all the clients yet.

36
00:12:18.160 --> 00:12:32.680
Parithosh Jayanthi: And there are 2. Main, yeah, 2 main prs that still need to be like, we need to sort out ideally today. The 1st one is on the builder specs, and the second one is on engine. Get blob. C. 3.

37
00:12:33.144 --> 00:12:43.839
Parithosh Jayanthi: I think those are the main points for devnet 3. If all of this is true. As soon as we have client images, we're ready to launch ideally in 2 to 3 days.

38
00:12:44.020 --> 00:12:45.910
Parithosh Jayanthi: So before Acde.

39
00:12:50.030 --> 00:12:56.840
Mario Vega: Awesome great. Regarding the builder specs. There was comment.

40
00:12:57.294 --> 00:13:02.310
Mario Vega: That was made by Bharat, I think, is that is that relevant to the discussion. I'm not sure if

41
00:13:02.660 --> 00:13:05.079
Mario Vega: if if they are in this call.

42
00:13:05.300 --> 00:13:09.859
Mario Vega: but we can touch upon that topic later. If that's okay or do you want to go now?

43
00:13:09.860 --> 00:13:11.640
Parithosh Jayanthi: Wherever, wherever you want to schedule it.

44
00:13:12.100 --> 00:13:17.119
Mario Vega: Alright. Cool, cool. Okay. Thank you.

45
00:13:18.580 --> 00:13:30.100
Mario Vega: Anything else regarding Fussaka, or then the 3 house clients implementations coming along. Does anybody any anybody from any client team wants going to give an update

46
00:13:41.840 --> 00:13:45.050
Mario Vega: best who is ready pending. Get blocked between.

47
00:13:46.220 --> 00:13:53.459
Mario Vega: Get is also ready except except for the config endpoint. Red has a branch.

48
00:13:54.540 --> 00:13:57.500
Mario Vega: Get underscore, config and get blobs between.

49
00:13:58.510 --> 00:14:01.619
Mario Vega: Aragon is also ready without get blob. Cp. 3

50
00:14:04.878 --> 00:14:12.329
Mario Vega: lighthouse is ready. But coming back to yield clients. Anyone anybody from? Never mind here that wants to give an update.

51
00:14:22.960 --> 00:14:24.829
Mario Vega: Never mind, Brady. Okay.

52
00:14:29.960 --> 00:14:30.755
Mario Vega: Cool.

53
00:14:31.950 --> 00:14:39.189
Mario Vega: Lighthouse ready. Okay? And anyone from the rest of the cl clients who wants to give an update on readiness.

54
00:14:40.010 --> 00:14:41.839
Mario Vega: Anybody from from Teku

55
00:14:52.190 --> 00:15:00.830
Mario Vega: and Justin made the comment that there's not that many changes, for fuzeka losar is ready. Okay.

56
00:15:01.110 --> 00:15:03.599
Mario Vega: just missing. Builder. Api. Okay, thank you.

57
00:15:05.640 --> 00:15:11.340
Mario Vega: Alright. It seems like, I also granting is ready. Okay, it seems like most clients are ready, and

58
00:15:11.550 --> 00:15:17.120
Mario Vega: it's looking good. I think there should be any blockers for the next 2 weeks.

59
00:15:17.651 --> 00:15:19.560
Mario Vega: Sorry the next 2 days.

60
00:15:21.090 --> 00:15:22.630
Mario Vega: Alright cool.

61
00:15:23.838 --> 00:15:31.400
Mario Vega: Next topic is gas limit testing updates Barry for this. Do you know who the person with context is?

62
00:15:31.400 --> 00:15:45.560
Parithosh Jayanthi: Yeah, I can go here. So one of the I guess biggest updates is that we've been. We've had all the client releases made for 45 million or most of the client releases made for 45 million.

63
00:15:45.870 --> 00:15:57.210
Parithosh Jayanthi: And enough validators have updated that roughly. A few minutes ago we had the 1st 45 million gas limit blocks on Mainnet. So congratulations everyone that's definitely good news.

64
00:15:58.155 --> 00:16:24.539
Parithosh Jayanthi: That being said over the weekend we were working on puff devnet 2. And we had this one weird issue with Bezu, where the image with the wrong MoD X. Pricing got pushed onto the performance tag. And as a result, we've had non finality for the last one or 2 days. The issues core issues, mostly a config mistake.

65
00:16:24.650 --> 00:16:35.360
Parithosh Jayanthi: But we're still trying to sync up bezoo and figure and just ensure that it isn't anything else. And in the meantime we are working on getting finality back up there.

66
00:16:35.974 --> 00:16:54.190
Parithosh Jayanthi: Other than this. There's been a couple of other work streams. So we have a new sync testing tool. It's called syncor. And the 1st run of syncs of all the nodes are going on now. So in the next couple of days we should have a good baseline metric. For how long it takes to sync.

67
00:16:54.460 --> 00:17:19.199
Parithosh Jayanthi: There's been a lot of work by Carlos from the stateless team to try and get us all the metrics we want with the State plot network. So puff devnet 2 is almost at 2 x mainnet state as well. So we should be able to run the sync or tool against it and get sync information for 2 X Mainnet State. We have a new Rpc testing tool as well.

68
00:17:19.349 --> 00:17:25.668
Parithosh Jayanthi: and Rpc testing tool just is so far a proof of concept. We're gonna start reaching out to

69
00:17:26.170 --> 00:17:44.229
Parithosh Jayanthi: node operators to try and get a sense of what workloads they have so that we can benchmark them against all the clients, and then make a preliminary report, for this is how clients perform at 36, or well at 45 million and then we should have stronger Rpc benchmarks as well for the future.

70
00:17:45.040 --> 00:17:50.319
Parithosh Jayanthi: I think that's everything on the gas limit side. Maybe Camille has something else to add.

71
00:17:51.220 --> 00:17:56.989
Kamil Chodoła: Yeah. In meantime, we are working on extended gas benchmarks, opcodes, benchmarks.

72
00:17:57.584 --> 00:18:14.945
Kamil Chodoła: For now we focus quite a lot on all modex because of some additional repricing which were made, and to ensure that it is fine. But yeah, this is like, from benchmarking point of view, it's almost accomplished, and we are moving all of our sources now to

73
00:18:15.380 --> 00:18:29.379
Kamil Chodoła: all of our forces, now to stateful testing, which is like unexplored ground right now, where we had a Johan with who made some tests on Perfnet. But we want to make it fully reproducible in the same way as we do with Opcodes

74
00:18:29.410 --> 00:18:46.029
Kamil Chodoła: already in contact with his team. We had a very nice discussion last week, and right now we are trying to summarize that with, together with Martin from our team to to make a document on how? How the full integration of of opcodes benchmarking with Es should work moving forward.

75
00:18:46.110 --> 00:18:53.990
Kamil Chodoła: And what is the end goal for that we have some ideas. We want to test as much as possible right now on top of Mainnet, or even Bloatnet State.

76
00:18:54.540 --> 00:19:14.950
Kamil Chodoła: And yeah, this is like current goal. And hopefully, next few weeks we'll have much more extensive tests, which will give us much more insights from from this point of view, because computational side seems like is already quite well covered. So we can focus on something which will bring much more value. And then we'll start exploring more edge cases.

77
00:19:18.770 --> 00:19:19.859
Mario Vega: Thank you. Marcian.

78
00:19:21.995 --> 00:19:26.269
Marcin Sobczak: I would just like to say that Tony prepared

79
00:19:26.860 --> 00:19:46.429
Marcin Sobczak: about modex changes and network impact. So just based in on the chat. There is nothing surprising like after free xing the price, 100% of calls are affected but there are like great insights on the chat so and take a look.

80
00:19:53.950 --> 00:19:54.720
Mario Vega: Thank you.

81
00:19:56.220 --> 00:20:04.102
Mario Vega: Alright. I think there was a question regarding the get blocks. B, 3. Readiness.

82
00:20:05.030 --> 00:20:08.468
Mario Vega: But before that I think it's just a nice

83
00:20:09.040 --> 00:20:21.709
Mario Vega: that. We discussed blotnet. I think there was one person that wanted to discuss this. I think it's a good place to start discussing that C. Peris. Are you in the call?

84
00:20:22.060 --> 00:20:22.490
CPerezz: Yep.

85
00:20:22.490 --> 00:20:26.570
Mario Vega: Do you want? All right? Yeah, yes. Let's let's yeah.

86
00:20:26.870 --> 00:20:45.435
CPerezz: Sure. Yeah. So I I'll be very quick. We are approaching 2 x main net state in Blobnet. And ideally, we want to rerun syncing tests. And we want to start also trying to run compaction testing to see how much we can stress

87
00:20:45.880 --> 00:21:11.559
CPerezz: adding and removing state. And how does it play with compaction? In order to be sure, we can reach 100 million gas limit safely. And for that we needed some metrics implemented by teams. So far, I'm gonna comment. The ones that we are missing or for the things that we haven't heard such that maybe they can get this ping and and they can update or or give us some some feedback.

88
00:21:12.034 --> 00:21:17.680
CPerezz: From syncing we are missing any information from Besu and Aragon.

89
00:21:18.152 --> 00:21:31.908
CPerezz: And from never mind, I know they are reporting healing from blocks not in Grafana, and wanted to basically know if there's any way to get that from Grafana, as getting data from from blocks is

90
00:21:32.500 --> 00:21:43.380
CPerezz: a lot harder and requires a lot more integration for for the tooling that I mean, we would prefer to not spend the time on so maybe Camille or Ben can say something about

91
00:21:44.044 --> 00:21:49.719
CPerezz: never mind. And maybe there's someone from baseline that can basically say anything about their metrics.

92
00:21:51.640 --> 00:21:59.620
Kamil Chodoła: From that reminder. I think that this should not be a huge thing to to add a metric for healing, so we'll try to push for for that metric.

93
00:22:00.260 --> 00:22:01.380
CPerezz: Opia. Thank you.

94
00:22:02.310 --> 00:22:03.440
CPerezz: A 1 million.

95
00:22:05.382 --> 00:22:13.030
milen | Erigon: Yeah. So I responded, last week, and I've added all the metrics for Aragon. So they're in the Grafana

96
00:22:13.870 --> 00:22:14.810
milen | Erigon: already.

97
00:22:15.780 --> 00:22:16.120
CPerezz: Okay.

98
00:22:16.120 --> 00:22:18.630
milen | Erigon: Including including including Syncing.

99
00:22:20.320 --> 00:22:21.560
CPerezz: Compaction, tool.

100
00:22:21.880 --> 00:22:25.559
milen | Erigon: We don't really have this concept of.

101
00:22:25.560 --> 00:22:26.869
CPerezz: Okay. Fair. Enough. Yeah.

102
00:22:26.870 --> 00:22:31.620
milen | Erigon: We have the metrics that are analogous to that.

103
00:22:31.820 --> 00:22:32.520
milen | Erigon: Yeah.

104
00:22:32.980 --> 00:22:34.560
CPerezz: Okay. Awesome. Thank you.

105
00:22:34.560 --> 00:22:40.149
milen | Erigon: And actually, yeah, they've been quite helpful already. I think we've spotted a few issues. So

106
00:22:40.320 --> 00:22:43.060
milen | Erigon: this, this effort is quite useful.

107
00:22:44.160 --> 00:22:56.789
CPerezz: Thank you. Don't want to be so insisting. But if at some point you reach some conclusions on the issues you saw, please reach out such that we can lock all of them.

108
00:22:57.360 --> 00:23:06.649
milen | Erigon: Yeah, we're we're still looking into it. But I will definitely update you with like a summary. Once we figure out what's happening.

109
00:23:07.250 --> 00:23:08.000
CPerezz: Thank you.

110
00:23:08.530 --> 00:23:09.399
milen | Erigon: Yeah. No worries.

111
00:23:11.690 --> 00:23:12.580
Mario Vega: Machine.

112
00:23:13.400 --> 00:23:18.379
Ameziane Hamlat: Yeah, thanks. On pesos side, we do have the matrix on sync.

113
00:23:18.440 --> 00:23:46.430
Ameziane Hamlat: but it seems they are like removed when we start the node. So we need to check our implementation, to be sure that the metrics are are persisted, because I see we have them on few nodes, and we don't have them on other nodes. So we need to. We need to double check. We do have some metrics on compaction.

114
00:23:46.570 --> 00:23:47.185
Ameziane Hamlat: But

115
00:23:48.480 --> 00:23:58.180
Ameziane Hamlat: so so what's the the kind of metric we are looking on compaction. Is it like the the impact in terms of time, or in terms of.

116
00:23:58.460 --> 00:24:23.724
CPerezz: Yeah, I just send a link to a Hackmd which basically has the summary I will update on now. But for a quick description in compaction. We need to start and end time. And we want also to get I/O performance when we are and when we are not in compaction especially best, worst and average. Read and write times for each block for every

117
00:24:24.620 --> 00:24:33.269
CPerezz: operation that basically removes or stores stuff into interstate into the dream. So insertion, removal type basically.

118
00:24:33.790 --> 00:25:02.050
Ameziane Hamlat: Okay, yeah. So start and time compaction. We we do have them. But we have them like under a set of set of metrics that we we don't usually enable, because they have some overhead like a lot of metrics. So we need maybe just extract that one outside, like the the set of those metrics. And and we'll double check the the rest of the matrix, and we'll update.

119
00:25:02.830 --> 00:25:07.040
CPerezz: Awesome. I'll get in touch offline to to follow up. Thank you very much.

120
00:25:10.020 --> 00:25:13.070
CPerezz: That should be it for, blonded Mario.

121
00:25:13.310 --> 00:25:13.990
Mario Vega: Alright. Thank you.

122
00:25:13.990 --> 00:25:21.780
Parithosh Jayanthi: Mention if clients could. Please make sure that all the metrics changes are pushed to the performance branch, because that's what we're running on the block net.

123
00:25:25.990 --> 00:25:36.299
Mario Vega: Thank you. Awesome. Yeah. Going back to the get. Blob. dB, 3. I see role. Do you want to add some context to this question?

124
00:25:37.670 --> 00:25:59.900
Raúl Kripalani: Yeah. I think in in general like this, Els have most of them have implemented the the Api sales have nothing to do here, and in general, I'm seeing some favorable reactions in the chat to just merging the spec change so that Els can merge their implementation branches and move on. I think that's what I would propose, and we can close this topic.

125
00:26:03.540 --> 00:26:11.609
Mario Vega: I see Dustin the main counterpoint. Do you want to, Dustin? Do you want to expand on this in any way?

126
00:26:12.230 --> 00:26:14.136
Dustin: Sure. Yeah,

127
00:26:15.350 --> 00:26:16.340
Dustin: So

128
00:26:17.410 --> 00:26:28.040
Dustin: I understand. And I agree, very based on, you know, as as best as I understand where this is going that get Bob 3 3 is is ultimately something like it is ultimately probably what we want.

129
00:26:28.060 --> 00:26:50.500
Dustin: What I fundamentally disagree about is entwining this with the Fusaka fork, because essentially, as I have have written, but obviously this is a weirdly threaded environment. So I'll summarize here and to say, like the Els can can merge what they want, and it's and it's and it's great. I I hope

130
00:26:50.640 --> 00:26:58.740
Dustin: that if we that that at some point the Els do, if we are moving in this direction, do merge such such a Pr.

131
00:26:58.890 --> 00:27:02.510
Dustin: Where I I would distinguish here, though, is that

132
00:27:03.060 --> 00:27:20.020
Dustin: treating it as part of Fusaka, it is effectively, not from my perspective, if it's not been tested in a very similar way as the rest. And we have recent experience with, you know, simple seeming things that were not tested.

133
00:27:20.150 --> 00:27:21.830
Dustin: and they didn't go very well.

134
00:27:22.260 --> 00:27:23.940
Dustin: And so

135
00:27:24.130 --> 00:27:34.729
Dustin: that that that's sort of the the gap or gulf here for me is the idea. Can I just shove this last minute thing in and don't worry about it. It's like we can't rely on that.

136
00:27:34.900 --> 00:27:41.600
Dustin: We, Nimbus can't rely on this. I can't speak for other cls, but like, yeah.

137
00:27:42.530 --> 00:28:03.470
Raúl Kripalani: Yeah, I think the operative point here specifically for me is that we did wanna make sure that while people while peered as and in general, blobs are are in the refactors. There are fresh for people. They just get this particular change in so that we don't have to context, switch it later and

138
00:28:03.470 --> 00:28:16.759
Raúl Kripalani: incurring the coordination overhead, of getting releases of Els out and doing an off cycle engine. Api change, and so on. And and yeah, this this, as as we all know, v. 3,

139
00:28:16.760 --> 00:28:39.489
Raúl Kripalani: is not exercising Fusaka's code part specifically, this is more of kind of like an A. A, I would say, smart way of like trying to offload a context switch from the future, which is gonna be coming so that we can just get this work done when it's a simple thing that it's actually, I agree with you. It's simple.

140
00:28:39.490 --> 00:28:59.117
Raúl Kripalani: I am. I'm not very privy to what happened in in Holeski. I wasn't. I wasn't there at the time. But in this particular, in this particular case we have the guarantee that this path is not gonna be used. And what if in consensus from consensus? So I don't see how it could have an destructive impact?

141
00:28:59.480 --> 00:29:10.049
Raúl Kripalani: But yeah, other than that I would. The the thing that I've proposed is is creating some hive tests so that we can test this separately. Directly with with that test suite.

142
00:29:13.550 --> 00:29:13.930
Mario Vega: Thank you.

143
00:29:13.930 --> 00:29:22.470
Dustin: But okay, okay, so what? What I would, what I would would right like

144
00:29:22.780 --> 00:29:29.880
Dustin: this is why we question, is that kind of, as Marius is just saying in chat is like, there's there's

145
00:29:30.320 --> 00:29:31.390
Dustin: hmm!

146
00:29:32.430 --> 00:29:34.930
Dustin: If it's Glamsterdam, then there's no

147
00:29:35.190 --> 00:29:38.390
Dustin: rush to get into Fusaka by definition, if yeah.

148
00:29:38.390 --> 00:29:48.450
Dustin: But clearly it's not. But clearly it's not right, because otherwise that that this coordination problem would would doesn't really exist. You can coordinate in Amsterdam around Amsterdam

149
00:29:48.590 --> 00:30:15.881
Dustin: so that that either it is not meant to be in Fusaka, and therefore this is a pointless push now, or I mean again, clients can merge what they want, but from a spec perspective, I don't really care deeply what Pr is best you merges, or something like that, I mean, I hope they're good Prs, but like from from like as far as get 3 but in terms of including in a spec or or not what I would.

150
00:30:16.690 --> 00:30:30.159
Dustin: What I do care is is this considered to be part of of Fusaka or not? And what I would argue is that it should not be given that we are running into like the spec freeze and the last devnet.

151
00:30:30.330 --> 00:30:35.340
Dustin: and no testing, and that that to me, just doesn't work

152
00:30:35.660 --> 00:30:43.059
Dustin: like that. We cannot consider anything like that to be part of for soccer as a spec.

153
00:30:47.330 --> 00:30:48.090
Raúl Kripalani: Right.

154
00:30:49.300 --> 00:31:16.920
Raúl Kripalani: I mean the I think the rationale here, and just to kind of like explain for everybody. The the facade slash, glam, stam slash in the middle. Sort of like thing here. That. Yeah, it's this. V. 3 won't be consumed for Fasaka, but we aim to consume it through optimizations and the cl and the cl, and specifically the peer to peer layer before Glamsterdam. So that's what kind of like creates the extra coordination challenge midway.

155
00:31:16.970 --> 00:31:31.160
Raúl Kripalani: And the the bet that we're taking here is that by doing this now we'll remove X-ray for everybody later. And it is done and given that this operation is not consumed in any way.

156
00:31:31.570 --> 00:31:52.070
Raúl Kripalani: Because it is exposed only through the engine. Api. The engine Api is privileged, and it is only consumed by the Cl. If the Cl. Does not consume it, which is agree, it's it's not part of the Fosaka spec for the Cl. So it's not gonna be consuming it. Therefore there is no risk here. Other than possibly the implementation risk

157
00:31:52.585 --> 00:31:57.450
Raúl Kripalani: which is what we are aiming to test by hive tests, and

158
00:31:57.590 --> 00:31:59.720
Raúl Kripalani: I think that is sufficient testing.

159
00:32:00.150 --> 00:32:20.022
Matthew Keil: I I think the thing that's being missed here, though, is that there is risk. And it's from a process perspective. You know, the the biggest issue we had in the last work was, get last thing in, get last thing in. It's not going to get used. It's just a minor change, and I think this sets a precedent of trying to sneak things in under the wire

160
00:32:20.430 --> 00:32:37.060
Matthew Keil: when it's not going to get used. And to speak to Dustin's credit. I mean that that feels like just it. It makes the process messy. And that really is the biggest concern. It's not so much whether it gets used or from a technical perspective. But I think if we want to be able to ship

161
00:32:37.060 --> 00:33:00.800
Matthew Keil: hard forks on regular schedules, and we want to get used to that. This. That's how that's how releases are done, at least on our team. And I know they were done in the web. 2 world is that you have a hard date. Specs get in by that date. If it misses it, it's in the next release. And because there's always going to be this incremental one more thing, and that that to me, is the biggest issue here, not so much the complexity or the

162
00:33:00.800 --> 00:33:05.010
Matthew Keil: how it gets rolled out, or or even the merit of the feature.

163
00:33:07.560 --> 00:33:18.650
Mario Vega: I I absolutely agree. So. I think, this is contentious enough to not be further discussed in this call. I think at the very least. I would defer this discussion to acde

164
00:33:19.299 --> 00:33:29.839
Mario Vega: if we're not sure if we're gonna implement something in in Infozaka. I don't think this is the place to discuss it.

165
00:33:29.980 --> 00:33:32.560
Mario Vega: But yeah, that's my opinion. Pari.

166
00:33:33.440 --> 00:33:44.039
Parithosh Jayanthi: Yeah, maybe to play the contract. Let's say we don't include it right now, and we assume that it's going to go down the approach of get blobs. We want

167
00:33:45.450 --> 00:34:02.089
Parithosh Jayanthi: assuming we have a single el as well as cl implementing this in the future, and we deploy it asynchronously on the network. Would that still work out for us long term? Or would we then be locked until Glamsterdam, before we can actually make use of this feature.

168
00:34:03.709 --> 00:34:16.259
Parithosh Jayanthi: Also note that we have this we have this other concept system. We have a Bpo fork. So there's sort of another sync level between Fusaka and Amsterdam that we never had in the past.

169
00:34:17.056 --> 00:34:39.559
Parithosh Jayanthi: Ideally, we're not making any code changes there, and it's only Bpo. But if let's say, guest as well as lighthouse, make a release with using this feature, and that, would the Bpo fork would imply that every guest and lighthouse node on the network has implemented this feature. Would they then be able to use it? Or is it a useless feature until the whole network uses it.

170
00:34:42.330 --> 00:35:00.719
Raúl Kripalani: Yeah. So from the perspective of the optimization that we're planning, this would be at the Cl level. And basically clients that are supporting the gossip, sub partial messages feature that uses the partial blobs return from the El would be able to

171
00:35:01.315 --> 00:35:14.709
Raúl Kripalani: use this optimized path when reconciling columns with each other. Essentially. So basically, the goal here is to minimize the band superfluous bandwidth usage here by

172
00:35:14.710 --> 00:35:39.130
Raúl Kripalani: that would be incurred by transmitting columns that include cells for blobs that deals already have because they are in the elm pool. And that's the that's the goal here. So basically, this is being shipped as a as an extension, and that extension on the gossip sub level is discovered and then used only if both clients are are supporting it, so this can be shipped.

173
00:35:39.522 --> 00:35:52.559
Raúl Kripalani: As an optimization implementation level optimization that has no potential. That's the way that we planning it. Would be having no or at least envisioning it would be having no spec changes necessary.

174
00:35:54.190 --> 00:36:01.589
Raúl Kripalani: On the on the sales side of things, and the idea was to have the Els ready to support this from from the get go.

175
00:36:04.080 --> 00:36:05.240
Mario Vega: Francesco.

176
00:36:07.530 --> 00:36:10.902
Francesco: Yeah, I just wanted to say that, I think in

177
00:36:11.360 --> 00:36:34.089
Francesco: sure, when he was last week. I don't know. Last Thursday we, he said, and this has been going on for really like a long time, that we would make a final decision today. And I think we should really stick to that like, if we cannot make a decision, then let's just default to not doing it. If we otherwise. Yeah, let's try to make an explicit decision. We don't need to spend all the rest of the ball talking about it, but it would really be good to just end this today. I think.

178
00:36:35.740 --> 00:37:05.069
Parithosh Jayanthi: Yeah, I think if the consideration is on the testing front, we're happy to acknowledge or commit to adding some testing bandwidth from our side to make this happen. I'm guessing the testing teams also. Okay, with that. But yeah, I don't want to speak for the process decision, of course, but if it's purely about testing, and that we agree that no Cl would roll out any change in the future without going through the regular testing process. Then I think we can accommodate that from the testing side.

179
00:37:06.720 --> 00:37:16.070
Mario Vega: Yeah, I mean, we can do it definitely. The problem is that we don't have it exactly now. So I don't know how much is gonna delay. I would I would. I would love

180
00:37:16.270 --> 00:37:19.969
Mario Vega: rather to have this test already for definitery. But that's not the case.

181
00:37:21.420 --> 00:37:24.193
Mario Vega: So yeah, I'm not. I'm not confident.

182
00:37:25.290 --> 00:37:29.239
Mario Vega: we we're gonna have sufficient testing for definitely, in my opinion.

183
00:37:34.520 --> 00:37:55.210
Raúl Kripalani: So just just one more thing to note here the decision ends up being not to include this. Then I think we need a decision on what's gonna happen with the version? That's on master right now, which does introduce a schema change that Cls would need to support which I don't know if they have an implementation change already, for my my understanding is that they they don't.

184
00:37:58.240 --> 00:38:01.849
Mario Vega: Is there a pr. For for this? Do you have a link.

185
00:38:02.090 --> 00:38:20.209
Raúl Kripalani: This is merged in master, but, as far as I know, no Cl has implemented it. So this, this Pr that we're discussing the one that includes gets Bob v. 3 would revert reverts that change on master to the behavior that cl's implement today, and then adds the V 3 endpoint.

186
00:38:28.090 --> 00:38:32.799
Mario Vega: Does any cl have any input on that? Do we know if it's like implemented.

187
00:38:34.390 --> 00:38:36.119
pawan: We haven't implemented it.

188
00:38:40.450 --> 00:38:42.760
Mario Vega: Is that the case for all other Cls.

189
00:38:44.040 --> 00:38:47.180
Matthew Keil: We have not either. We're just using v. 2 as it is.

190
00:38:48.030 --> 00:38:50.389
Manu: Time for prison. We haven't implemented it.

191
00:38:51.710 --> 00:38:54.630
Dustin: Same, for Nimbus have not implemented it.

192
00:39:04.690 --> 00:39:09.160
Matthew Keil: I mean that in and of itself feels like that makes the decision, at least for now.

193
00:39:09.370 --> 00:39:11.960
Matthew Keil: But yeah.

194
00:39:12.230 --> 00:39:21.300
Parithosh Jayanthi: Maybe expanding on Francesco's point. So this would imply that we stick to get blobs v. 2. And we basically don't do anything with get blobs. V. 3. Right now

195
00:39:21.420 --> 00:39:22.340
Parithosh Jayanthi: for a sec.

196
00:39:22.580 --> 00:39:23.980
Parithosh Jayanthi: The right reading.

197
00:39:24.490 --> 00:39:28.639
Mario Vega: That feels like the safest way, and the correct reading at the moment.

198
00:39:41.650 --> 00:39:50.800
Parithosh Jayanthi: Yeah, maybe someone can respond to the message Kapria mentioned as well get blouse. V, 2. Allowing partial responses or not.

199
00:39:53.740 --> 00:40:03.260
Raúl Kripalani: It would be a no, it's an it would be. It would go back to all or nothing. Get block speed 2. Which is prior to merging the Pr. That I just linked in the chat.

200
00:40:09.470 --> 00:40:18.919
Mario Vega: Sounds good. Okay? So then, just to summarize, get balls, be 2 with all or nothing, and it's going to be reverted in, master, and we're going to stick for that

201
00:40:19.090 --> 00:40:20.330
Mario Vega: on devnetary.

202
00:40:23.100 --> 00:40:23.920
Mario Vega: All right.

203
00:40:24.230 --> 00:40:28.130
Mario Vega: Great thanks. Everyone.

204
00:40:29.860 --> 00:40:37.390
Mario Vega: Yeah, I think. The next topic. If that's if that's okay, unless there's any any other opinion.

205
00:40:37.720 --> 00:40:42.220
Mario Vega: Next topic to discussion is a point brought up by Mikhail

206
00:40:42.520 --> 00:40:49.020
Mario Vega: regarding the usage of safe blocking the engine. Api response. Michael, do you want to expand on this.

207
00:40:50.638 --> 00:40:52.550
Mikhail Kalinin: Yeah, thanks. Hi, everyone.

208
00:40:53.000 --> 00:40:58.590
Mikhail Kalinin: I will not go much into the details of the Confirmation rule. It has been already announced before.

209
00:40:58.620 --> 00:41:23.039
Mikhail Kalinin: Just give a brief context. There is a Pr, there is a paper with the Confirmation rule algorithm. There is a Pr open at Pr to the consensus tax which implements this algorithm. And recently, we did work on a slightly modified version of this algorithm, which is

210
00:41:23.100 --> 00:41:27.600
Mikhail Kalinin: more efficient computationally wise and easier to implement.

211
00:41:27.760 --> 00:41:31.170
Mikhail Kalinin: And currently recently, the

212
00:41:31.970 --> 00:41:47.532
Mikhail Kalinin: there is a pro project started a week ago on prototyping this algorithm in lighthouse. So there is a work towards having the Confirmation rule delivered to Mainnet. And

213
00:41:49.440 --> 00:41:59.490
Mikhail Kalinin: One of the things that's we need to decide is how how we will actually provide this confirmed block

214
00:41:59.770 --> 00:42:08.599
Mikhail Kalinin: to to the, to the blockchain data consumers, and historically it was supposed to be

215
00:42:08.740 --> 00:42:11.729
Mikhail Kalinin: the safe block was introduced.

216
00:42:11.920 --> 00:42:26.249
Mikhail Kalinin: and was supposed to be set to something closer to the head that we think that is confirmed. So basically, it was supposed to be set to the confirmed block. But this work.

217
00:42:27.493 --> 00:42:28.600
Mikhail Kalinin: Yes. But

218
00:42:29.681 --> 00:42:38.510
Mikhail Kalinin: there was no actually, the algorithm that would provide this data. And we, we used justified.

219
00:42:38.930 --> 00:42:50.733
Mikhail Kalinin: or some clients use and realize justified block for for the safe one and yeah, should. And and the main question is, should we

220
00:42:51.320 --> 00:42:56.689
Mikhail Kalinin: actually overload the save block and to use it for

221
00:42:57.364 --> 00:43:07.809
Mikhail Kalinin: to pass the confirmed block to it. Or should we introduce a new block tag to engine Api Json or Pcpi

222
00:43:08.755 --> 00:43:12.229
Mikhail Kalinin: which what we use for for the confirmed bulk.

223
00:43:12.550 --> 00:43:16.300
Mikhail Kalinin: So I don't know. Also, the

224
00:43:17.370 --> 00:43:18.839
Mikhail Kalinin: One of the question is

225
00:43:19.060 --> 00:43:27.720
Mikhail Kalinin: obviously block is actually used by data consumers. Can we figure out, can we get this information or not?

226
00:43:27.990 --> 00:43:35.799
Mikhail Kalinin: And maybe it is somehow used by the clients? And yeah, all these questions need to be.

227
00:43:36.200 --> 00:43:41.329
Mikhail Kalinin: all these things need to be considered to make this decision.

228
00:43:42.120 --> 00:43:48.209
Mikhail Kalinin: So yeah, that's that's about it. I don't know if people have any opinion here and

229
00:43:48.810 --> 00:43:54.320
Mikhail Kalinin: and want to express it now, or should we move this discussion to

230
00:43:55.076 --> 00:44:01.870
Mikhail Kalinin: probably discord to some other venue? So much open to your suggestions.

231
00:44:02.280 --> 00:44:04.809
Mario Vega: Thank you. Yes, Terrence, you have an opinion.

232
00:44:05.540 --> 00:44:28.110
terence: Yeah, thanks for the questions. I guess I'll answer a few questions in line. So I think, like, if the concern today is for disparity. The disparity already exists today. Right? Because prison is already passing unrealized. Justify for safe block cash. But I think there are other clients that's passing by justify. So there is this disparity here today.

233
00:44:28.110 --> 00:44:38.879
terence: and then, on the presume side, I have a fast Confirmation branch. I have been testing it since couple of days ago, just because I think there is some renewed interest on fast confirmation.

234
00:44:38.880 --> 00:44:49.370
terence: And what I ended up doing is that I added a client flag on the prism side to allow the node operator to specify whether they want

235
00:44:49.844 --> 00:45:03.690
terence: fast confirmation or unreal is justified or justified, or some future algorithm to be passed as the safe block patch. So this ends up to be a client flag on the prism side that people can use.

236
00:45:03.830 --> 00:45:13.079
terence: and in terms of consumer. I guess I can answer for arbitral micro software just because I have a little idea how it works

237
00:45:13.421 --> 00:45:21.949
terence: they use safe block hash to essentially allow layer to to consume layer, one message. So when when a batch poster post a batch.

238
00:45:21.950 --> 00:45:45.670
terence: or when someone submit a message from layer, one to layer 2, or when layer 2 learns a layer, one block price that delay is essentially the safe block cache. So today's unrealized justify, but with the same block cash they will they? They they should be able to consume the message in the optimistic case in under 30 seconds. So that's 1 use case in terms of

239
00:45:46.250 --> 00:46:02.860
terence: what the plan you say block hashes for prism. We don't use it for anything internally. It's except for passing it to the El, and I cannot answer for the El. So yeah, someone might want to answer. There.

240
00:46:06.500 --> 00:46:15.009
Mikhail Kalinin: Great thanks a lot, Terrence. And you've mentioned that our bedroom use is safe. It means that if we

241
00:46:15.858 --> 00:46:25.330
Mikhail Kalinin: start passing the confirmed block fast confirmed block instead of justified it, could affect their security models right.

242
00:46:25.650 --> 00:46:49.660
terence: Exactly. But that is a note, operate this choice that is basically to be specific, that that is the sequences choice. They have to make right. So there's 1 thing I have been essentially testing is just to make sure there's no reorg. There's some there to accept, reorg. They don't really like reorg and stuff like that. So for them a reorg will be pretty bad. So I've been testing I

243
00:46:49.660 --> 00:46:57.449
terence: I don't want this to be like a I miss a software, but on my end, if there's a reorg that happens. But yes, if there's a reorg, then

244
00:46:57.580 --> 00:46:59.620
terence: the sequence of where we work.

245
00:47:04.290 --> 00:47:05.470
Mario Vega: Thank you. Marius.

246
00:47:07.050 --> 00:47:15.480
Marius van der Wijden: Yeah. So as I, as I kind of wrote in the chat, I think we are significantly underutilizing safehood.

247
00:47:16.400 --> 00:47:29.000
Marius van der Wijden: It should be like the default thing when when people are building applications that are like they don't like need finality, but that can rely on this pseudo finality.

248
00:47:29.590 --> 00:47:36.530
Marius van der Wijden: And I think for that to make safe hat really useful, it should be as as soon as possible.

249
00:47:37.350 --> 00:47:42.340
Marius van der Wijden: And so, as far as I understand this new rule,

250
00:47:43.700 --> 00:47:52.270
Marius van der Wijden: would be much faster than the than the than the justified and so

251
00:47:52.410 --> 00:47:56.080
Marius van der Wijden: I do. I do like the idea of giving the node operator

252
00:47:56.977 --> 00:48:07.960
Marius van der Wijden: control over what the safe head should be depending on on their use case. And yeah. So I I think

253
00:48:08.310 --> 00:48:10.770
Marius van der Wijden: if I would like to CC alls.

254
00:48:11.040 --> 00:48:14.660
Marius van der Wijden: implement this new fast confirmation rule.

255
00:48:16.050 --> 00:48:22.449
Marius van der Wijden: And yeah, I guess from the, it is a mostly Cr only change.

256
00:48:22.740 --> 00:48:25.699
Marius van der Wijden: It doesn't really impact the eo, we will mark

257
00:48:26.020 --> 00:48:32.800
Marius van der Wijden: whatever the Cl. Tells us is safe, we will mark that as safe for for the Rpc, so, yeah.

258
00:48:36.810 --> 00:48:49.200
Mario Vega: Thank you, Miguel. Where do you want to take this conversation? I it sounds like it should be to the execution. Apis a modification. There, at least.

259
00:48:49.320 --> 00:48:53.690
Mario Vega: Do you think opening a Pr would be the proper follow up?

260
00:48:54.260 --> 00:48:55.459
Mario Vega: Or how do you feel.

261
00:48:56.670 --> 00:49:07.839
Mikhail Kalinin: Yeah, it's a good question. If we decide to to reuse safe then basically, as Mario said, it's it's mostly CEO side. It's mostly a kind of

262
00:49:08.562 --> 00:49:14.549
Mikhail Kalinin: all the work. Actually, what would happen on sales side? We don't need to change anything on El

263
00:49:15.331 --> 00:49:24.700
Mikhail Kalinin: if we? If we do make this decision, then probably there's not much to discuss.

264
00:49:25.350 --> 00:49:31.880
Mikhail Kalinin: But if we want to debate at it, I don't know. If we decide? Yeah, yeah, probably.

265
00:49:33.060 --> 00:49:37.332
Mikhail Kalinin: Let's try to follow up and discord on this.

266
00:49:38.000 --> 00:49:46.219
Mikhail Kalinin: I'm mostly interested in. Is there anybody that think that we should not touch safe and change its semantics.

267
00:49:52.260 --> 00:49:53.100
Marius van der Wijden: The only.

268
00:49:53.100 --> 00:49:55.949
Mario Vega: Yeah, no, thank you. Yeah. I'm sorry. Maurice.

269
00:49:56.429 --> 00:50:00.620
Marius van der Wijden: Yeah. The only thing that I can think of is like big Rpc providers.

270
00:50:01.474 --> 00:50:08.420
Marius van der Wijden: Who would like to expose them? That to the users to justify to the users.

271
00:50:09.630 --> 00:50:10.640
Marius van der Wijden: But

272
00:50:12.600 --> 00:50:17.599
Marius van der Wijden: I don't know. I think it would be their decision what to what they will mark as safe then

273
00:50:17.760 --> 00:50:20.809
Marius van der Wijden: and right now, if they run 2 cls.

274
00:50:21.620 --> 00:50:26.019
Marius van der Wijden: there might be a difference between what they mark as safe already, so

275
00:50:26.420 --> 00:50:33.639
Marius van der Wijden: it it could also be flip flopping, depending on the load balancing so. But I think this is for the big Rpc. Providers to figure out.

276
00:50:37.550 --> 00:50:50.500
Mario Vega: Alright. So I think if we can follow up this up on discord, and I think bringing this up to Acd would make definitely make it reach a bigger audience that needs to have a say on this. And opinion.

277
00:50:50.680 --> 00:50:51.940
Mario Vega: does that sound? Okay.

278
00:50:52.970 --> 00:50:54.909
Mikhail Kalinin: Yeah. Sounds good. Sounds good.

279
00:50:56.070 --> 00:50:57.330
Mario Vega: All right. Perfect.

280
00:50:57.790 --> 00:51:11.319
Mario Vega: Yeah, thank you. Yeah. There are 2 topics left. One is the builder. I think there was some discussion in the chat. But Bara was the 1st one to bring it up. Do you want to expand on this.

281
00:51:11.750 --> 00:51:21.271
Bharath: Yeah, I mean, so I think we raised it. There seems to be consensus and client devs on the semantics of the Pr. And on the

282
00:51:22.130 --> 00:51:28.841
Bharath: like under the timing, in the sense like just to give a tld around the Pr. We're introducing new V 2 api in the relay

283
00:51:29.240 --> 00:51:42.710
Bharath: which basically doesn't. Return the execution payload and the blobs right? This is barely for like scaling and network bandwidth. So as we increase the number of blobs, and we're also like different seems to be broadcast on the semantics, that is.

284
00:51:43.246 --> 00:51:46.449
Bharath: the Api returns like a 2, 2, not 2

285
00:51:46.840 --> 00:52:12.970
Bharath: success. If the if the blinded block which is sent is valid, and it publishes the block in an asynchronous fashion. So that's there. So I'm raising it here to 1st of all, understand if there are any concerns about it. Secondly, if there are no concerns we are planning like this probably should be something we can target for like Devnet 3

286
00:52:13.385 --> 00:52:27.969
Bharath: so we're currently implementing that in the flash bots like Mev boost relay. And hopefully, we can get that live for net 3. So and like, hopefully, we can test it with the clients implementing the V 2 Api, so yeah, just putting on the stage like there are any concerns related to that.

287
00:52:28.270 --> 00:52:29.150
Bharath: and stuff.

288
00:52:38.495 --> 00:52:42.080
Mario Vega: Any other context? Pari, do you? Do you have any context on this

289
00:52:45.840 --> 00:52:52.240
Mario Vega: regarding we should like introduce it in Devon tree or not, or I feel like it's like very close to.

290
00:52:54.680 --> 00:53:04.699
stokes: Yeah, I I think we should merge it. There's work underway to have this change in the web stack and everything. And then, yeah. I'll just move forward.

291
00:53:09.440 --> 00:53:10.490
Mario Vega: Okay, thank you.

292
00:53:10.830 --> 00:53:12.149
Mario Vega: Sounds good.

293
00:53:13.043 --> 00:53:16.496
Mario Vega: And yeah, the last 2 topics are,

294
00:53:17.360 --> 00:53:32.640
Mario Vega: I think. Clc, I think that's that's that's 1 of the the last topic, and also the block has 60 million. If we want to touch upon the topic today. So the 1st one is that the Cl set up code was bumped to 5.

295
00:53:32.810 --> 00:53:37.470
Mario Vega: And Rakita, do you have context on the

296
00:53:39.780 --> 00:53:45.499
Mario Vega: if I understand correctly, there's data that shows that it might be unnecessary. But if you want to expand on that.

297
00:53:46.010 --> 00:53:55.410
draganrakita: Yeah, physically, at least in my mind previously. Clc is very similar to any other bitwise operators.

298
00:53:55.550 --> 00:54:00.779
draganrakita: instructions of codes. So it was changed for me. It was bumped to be more similar to the move.

299
00:54:01.490 --> 00:54:10.420
draganrakita: It was bumped from 3 to 5 gas. It's not that big of the deal. We can always reprice it in the next half fork. But

300
00:54:11.583 --> 00:54:18.830
draganrakita: I have created few benchmarks to check that hypothesis, and it seems Clc. Is even.

301
00:54:19.070 --> 00:54:31.430
draganrakita: It deserves even lower gas than tree, so I would like, if to see if clients are open to changing this, to to be back to the tree gas.

302
00:54:32.750 --> 00:54:37.210
draganrakita: I shared those benchmarks inside the okor dev chat in discord.

303
00:54:47.250 --> 00:54:48.020
Mario Vega: Thank you.

304
00:54:48.180 --> 00:54:48.760
Mario Vega: Yeah.

305
00:54:48.760 --> 00:54:53.090
draganrakita: I'm not sure if clients have an appetite for this change.

306
00:55:03.280 --> 00:55:06.190
Mario Vega: Yeah, I think the main problem is that we are very close to

307
00:55:07.540 --> 00:55:13.180
Mario Vega: finalizing. So I don't think a roll rollbacking. This change is like really a possibility at this point.

308
00:55:14.860 --> 00:55:17.349
Mario Vega: I don't know if everybody still feel the same way.

309
00:55:18.720 --> 00:55:20.000
Mario Vega: But that's my opinion.

310
00:55:20.140 --> 00:55:20.900
Mario Vega: Yeah.

311
00:55:21.450 --> 00:55:28.249
draganrakita: Yeah, it's basically one. Characters don't even line from 5 to 3.

312
00:55:29.980 --> 00:55:34.609
draganrakita: I'm up to changing it. I'm not sure if anybody else is.

313
00:55:38.730 --> 00:55:44.270
Mario Vega: Yeah, to raise Marius's point. regarding benchmarks.

314
00:55:44.570 --> 00:55:51.000
Mario Vega: it feels like dragon mentions that he has benchmark for this. Is that correct? Or

315
00:55:51.450 --> 00:55:54.629
Mario Vega: do you have this for all the clients? Or is this just rep.

316
00:55:54.920 --> 00:55:59.750
draganrakita: There is bytecode that can be found in repo.

317
00:55:59.920 --> 00:56:04.530
draganrakita: But the fastest batch project I could do is basically from our evm.

318
00:56:05.600 --> 00:56:13.649
draganrakita: So I did it in the code. And I did it in the code speed. That basically shows amount of the

319
00:56:14.350 --> 00:56:16.460
draganrakita: time spent on every upload.

320
00:56:16.780 --> 00:56:24.969
draganrakita: And I compare this output that I got from the outputs, from the different topcodes, and it is more similar to other bitwise opcodes.

321
00:56:25.810 --> 00:56:30.730
draganrakita: So it seems that Batchpark is correct. Now there are different limitations and different

322
00:56:31.520 --> 00:56:34.790
draganrakita: depending on implementation. You will have different execution.

323
00:56:36.010 --> 00:56:41.030
draganrakita: but either way seems correct to to use tree gas here.

324
00:56:44.540 --> 00:56:51.260
Mario Vega: So just to summarize. I mean, I think this change was done a week or 2 ago

325
00:56:51.350 --> 00:57:14.739
Mario Vega: in regards of keeping things safe right? Because we don't really have much benchmark, that many benchmark for every single client team. So if I understand correctly, your benchmarks are only for red, so we would need to do a deeper like analysis on benchmarking for the rest of the clients before rolling it back. In my opinion, so I would echo Maris on this that we don't

326
00:57:14.960 --> 00:57:21.400
Mario Vega: want to change it, because it's very late in the process. But if anybody else feels opposed to that, just please

327
00:57:21.530 --> 00:57:28.189
Mario Vega: speak up from the other El clients would be nice to hear. Yeah.

328
00:57:31.650 --> 00:57:40.189
Ben Adams: I mean, it's very simple to change. I mean, just revert the previous pr that increased it.

329
00:57:42.690 --> 00:57:46.419
Ben Adams: But don't feel any particular way on it.

330
00:57:50.810 --> 00:58:00.799
Mario Vega: Yeah, the the change is not the concern. I mean, I think that the change is super simple even in the test is simple, but I think benchmarking is the main problem that we have now, and we don't have.

331
00:58:00.930 --> 00:58:08.260
Mario Vega: and up benchmarks for this from the East Side. We're working on benchmarks, but we're not quite ready, because the framework's not

332
00:58:08.500 --> 00:58:11.539
Mario Vega: fast enough to deliver the benchmarks yet.

333
00:58:13.130 --> 00:58:17.349
draganrakita: We didn't even have benchmark that pushed it from 3 to 5.

334
00:58:18.460 --> 00:58:21.980
draganrakita: The data that I have shows that it's even less than 3.

335
00:58:22.550 --> 00:58:27.730
draganrakita: But either way, it's not big of the deal. The main thing is, we have Cls included.

336
00:58:28.500 --> 00:58:33.670
draganrakita: So if clients are not up to to the change, it's fine to have it. 5.

337
00:58:43.450 --> 00:58:46.840
Mario Vega: Yeah, I was still in to leave it as is on 5.

338
00:58:47.210 --> 00:58:48.090
Mario Vega: But yeah.

339
00:58:48.380 --> 00:58:56.030
Mario Vega: open. I think I think we should leave it for for dignity. And yeah, consider it for for Dumpster, for reduction.

340
00:59:02.328 --> 00:59:08.599
Mario Vega: Kev for your question. I'm not sure for the answer to be honest.

341
00:59:14.090 --> 00:59:15.702
Mario Vega: Yeah, okay, Marius.

342
00:59:16.590 --> 00:59:20.870
Mario Vega: So you're saying like, it's 5 times yeah.

343
00:59:22.680 --> 00:59:28.910
Mario Vega: it's 5 times worse than ad. Right? Do you want to expand on that on get the site.

344
00:59:29.150 --> 00:59:34.260
Marius van der Wijden: Yeah, I literally just did this in the last 2 min. I I wrote a benchmark.

345
00:59:34.540 --> 00:59:39.150
Marius van der Wijden: and from what I can see it is.

346
00:59:39.640 --> 00:59:43.519
Marius van der Wijden: do we have one benchmark for adding 64 Byte

347
00:59:44.020 --> 00:59:49.830
Marius van der Wijden: and and that is like 5 times faster.

348
00:59:53.730 --> 00:59:57.849
Marius van der Wijden: Then cl, z, and even the multiplication is like.

349
00:59:58.955 --> 01:00:03.060
Marius van der Wijden: at least 4 times 4 and a half times faster than than clc.

350
01:00:03.220 --> 01:00:07.159
Marius van der Wijden: so maybe there's something weird with our clc implementation.

351
01:00:08.536 --> 01:00:12.153
Marius van der Wijden: But yeah, it seems like.

352
01:00:13.130 --> 01:00:19.539
Marius van der Wijden: at least for us. It's not in the same vicinity as the other codes.

353
01:00:21.960 --> 01:00:30.580
Marius van der Wijden: But, as I said, I I wrote the benchmark just now. So maybe there's something wrong with with my benchmark. But I would like to.

354
01:00:32.630 --> 01:00:36.855
Marius van der Wijden: Yeah, I would would love it if we had some

355
01:00:38.863 --> 01:00:42.940
Marius van der Wijden: if we had like a full benchmarking suit for this, and I think that is.

356
01:00:43.400 --> 01:00:46.280
Marius van der Wijden: feels like an oversight that we don't have this right now.

357
01:00:48.400 --> 01:00:55.919
Mario Vega: Yeah, I agree. So how this I think the main question right now is benchmarking. I think we can work on that this week

358
01:00:56.360 --> 01:00:59.700
Mario Vega: and do benchmarking against all the clients.

359
01:00:59.950 --> 01:01:16.660
Mario Vega: and I would lean towards changing the gas price upwards instead of downwards. So I feel like leaving it as 5 is the correct decision at the moment, and then we can, after the benchmarking, we can decide on whether bumping it because of security concerns

360
01:01:16.790 --> 01:01:19.160
Mario Vega: rather than just lowering it. Now.

361
01:01:21.480 --> 01:01:23.890
Mario Vega: does that sound fine by everyone?

362
01:01:30.380 --> 01:01:31.390
Mario Vega: All right.

363
01:01:31.840 --> 01:01:51.390
Mario Vega: Cool. Yeah. We only have 5 min left. I think if I'm not, if I didn't miss anything from the from the chat. I think the last discussion is or at least was brought up, is the 60 million gas question at the moment. I don't remember who posted the message. But do you want to expand on the

364
01:01:51.680 --> 01:01:54.219
Mario Vega: whether we want to go on that today or not?

365
01:01:55.464 --> 01:02:15.009
Kamil Chodoła: It was me actually, just wanted to, maybe brought the discussion, as we already hit 45 and 60 is not a matter of any further eaps, at least, for now we do not know about anything which we need to be repriced to hit 60

366
01:02:15.260 --> 01:02:21.149
Kamil Chodoła: before Fusaka. We know about some optimizations needed to be made by some real clients.

367
01:02:21.450 --> 01:02:29.609
Kamil Chodoła: But maybe anyone is having any doubts or anything like this to to see, or at least make any kind of temp check if we

368
01:02:29.720 --> 01:02:37.049
Kamil Chodoła: should try to to reach it before Fusaka, or there is anything else which anyone have in mind

369
01:02:37.380 --> 01:02:38.470
Kamil Chodoła: against that.

370
01:02:42.670 --> 01:02:56.710
Kamil Chodoła: for sure. What we know right now is that we need to optimize a little bit more modex libraries in go implementations. But this is a ongoing work, and we have a lot of benchmarks around that.

371
01:02:57.540 --> 01:03:02.030
Kamil Chodoła: So yeah, so we know how how much we need to improve around modex.

372
01:03:02.860 --> 01:03:11.200
Kamil Chodoła: But yeah, except of that, there is not much. Things which feels like are any risky.

373
01:03:17.250 --> 01:03:19.069
Marius van der Wijden: I don't.

374
01:03:19.280 --> 01:03:24.410
Marius van der Wijden: Oh, maybe the receipt stuff, because.

375
01:03:25.670 --> 01:03:32.229
Marius van der Wijden: like, if I remember correctly, the receipt stuff breaks around. 72.

376
01:03:32.830 --> 01:03:37.380
Marius van der Wijden: My goodness, a million gas clocks.

377
01:03:38.270 --> 01:03:41.070
Kamil Chodoła: And last recall, it was 85.

378
01:03:41.490 --> 01:03:43.729
Marius van der Wijden: Oh, oh, okay, then,

379
01:03:44.290 --> 01:03:46.000
Kamil Chodoła: Kuwari also mentioned that here.

380
01:03:46.430 --> 01:03:50.490
Marius van der Wijden: But with the with the with the

381
01:03:53.910 --> 01:03:59.759
Marius van der Wijden: with the refund bump, you can probably get that down right by like 20%.

382
01:04:00.100 --> 01:04:01.660
Marius van der Wijden: That's valid. Yeah.

383
01:04:06.040 --> 01:04:08.190
Mario Vega: Ben, do you want to add something or.

384
01:04:09.550 --> 01:04:17.760
Ben Adams: Yeah, I was just gonna say that the receipts is the blocker on getting to 100. It's not not a problem for 65.

385
01:04:22.560 --> 01:04:25.660
Kamil Chodoła: So generally, I put that in a chat. And

386
01:04:25.810 --> 01:04:33.210
Kamil Chodoła: even we have those few minutes additionally, but just wanted to throw a topic. And maybe we can think about it throughout the week

387
01:04:33.690 --> 01:04:39.439
Kamil Chodoła: and get back on that and add it to our agenda next week to to discuss and see.

388
01:04:40.460 --> 01:04:49.610
Kamil Chodoła: because at least. Personally, I don't see any like big blockers. Instead of some general performance improvements

389
01:04:49.740 --> 01:04:57.629
Kamil Chodoła: to to reach it before actually, Fusaka will come in place and solve some of these issues.

390
01:04:58.630 --> 01:05:11.040
Kamil Chodoła: which would be nice because we still don't want to probably go in one big jump between 45 to I don't know 100, after addressing modex repricings.

391
01:05:11.500 --> 01:05:14.420
Kamil Chodoła: would be nice to have something in in meantime.

392
01:05:14.550 --> 01:05:17.740
Kamil Chodoła: and 60 feels like a good stop which we can

393
01:05:17.970 --> 01:05:20.979
Kamil Chodoła: pretty safely achieve prior to that.

394
01:05:25.590 --> 01:05:27.099
Mario Vega: Alright. Thanks thanks for bringing it.

395
01:05:27.100 --> 01:05:31.470
Kamil Chodoła: Growth is also a good point from from Marius, which is being worked on.

396
01:05:33.690 --> 01:05:38.270
Mario Vega: Yep, perfect. Yeah, I think I think it's a it's a it's a nice topic to bring up.

397
01:05:38.855 --> 01:05:41.899
Mario Vega: I think next week we can be

398
01:05:42.492 --> 01:05:53.130
Mario Vega: well, maybe not today. But in the in the coming weeks we can have more more information on this. But it's nice for it to be brought up so we can have it in the back of our minds.

399
01:05:53.862 --> 01:05:56.820
Mario Vega: No need for a decision right now.

400
01:05:59.980 --> 01:06:08.269
Mario Vega: Cool. Okay. Any other topics. We only have 1 min, but if there's anything like alarming that we have to race right now.

401
01:06:08.710 --> 01:06:10.199
Mario Vega: please speak up.

402
01:06:13.280 --> 01:06:21.339
Mario Vega: Otherwise I think we can wrap it up here. Alright thanks everyone.

403
01:06:25.640 --> 01:06:27.399
Mikhail Kalinin: Thanks, so much.

404
01:06:27.860 --> 01:06:28.610
Dmitrii Shmatko: Care about.

405
01:06:29.450 --> 01:06:30.130
Antoine James: Thank you. Everyone.

406
01:06:32.200 --> 01:06:33.080
Marius van der Wijden: Thanks. Brett.

