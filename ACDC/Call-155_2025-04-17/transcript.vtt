WEBVTT

1
00:13:00.710 --> 00:13:02.040
stokes: Hello, everybody!

2
00:13:02.780 --> 00:13:05.040
stokes: Let's give people a few minutes

3
00:13:05.270 --> 00:13:07.059
stokes: to join, and we'll get started.

4
00:13:44.130 --> 00:13:48.390
stokes: Can somebody confirm? They can hear me just checking my audio.

5
00:13:48.390 --> 00:13:48.740
Barnabas Busa: No.

6
00:13:48.740 --> 00:13:49.300
Josh Davis: Yep.

7
00:13:49.440 --> 00:13:50.830
stokes: Okay, thank you.

8
00:13:52.680 --> 00:13:58.260
stokes: Had some issues this week. Okay, let's give it one more minute. We'll kick things off.

9
00:14:26.190 --> 00:14:30.030
stokes: Okay, let's see, Josh, are you helping with the stream today.

10
00:14:31.000 --> 00:14:32.340
Josh Davis: Yep ready when you are.

11
00:14:32.690 --> 00:14:33.980
stokes: Yup, okay, let's go.

12
00:14:36.230 --> 00:14:37.250
Josh Davis: You're alive.

13
00:14:38.000 --> 00:14:39.179
stokes: Okay, thanks.

14
00:14:39.570 --> 00:14:41.110
stokes: Hello, everyone.

15
00:14:41.660 --> 00:14:49.836
stokes: This is Acdc, 1, 55. The agenda is here in the chat.

16
00:14:50.340 --> 00:14:53.230
stokes: It's issue 1434 on the Pm repo.

17
00:14:53.830 --> 00:14:58.469
stokes: So today we have a few things to switch on for Petra.

18
00:14:58.740 --> 00:15:00.639
stokes: a number of things for Fussaka.

19
00:15:00.900 --> 00:15:03.629
stokes: And yeah, let's just go ahead and get started.

20
00:15:04.050 --> 00:15:11.800
stokes: So with Petra, I'm not sure if there's any testnet updates worth covering.

21
00:15:12.380 --> 00:15:15.780
stokes: As we all know, Mainnet is coming up may 7.th

22
00:15:16.030 --> 00:15:24.060
stokes: And yeah, we had said previously, we would aim for client releases for Petro magnet next week.

23
00:15:24.170 --> 00:15:28.830
stokes: the 21st of April blog post a few days after. That.

24
00:15:29.530 --> 00:15:32.950
stokes: Is, everyone feeling good about this.

25
00:15:33.230 --> 00:15:39.769
stokes: Any issues client teams want to bring up with releases? Or do we all feel like we can make that in time?

26
00:15:56.370 --> 00:16:05.559
stokes: Okay, I'll assume everyone's ready, because no one's chiming in otherwise. Oh, yeah, Mario.

27
00:16:05.830 --> 00:16:32.209
Mario Vega: Yeah, maybe if if that was a question for Cl depths only. But I can give an update from testing and what we were doing on the El side. Basically, we've been writing a lot of new tests and just reviewing tests. But everything looks good so far, what we've been doing is that everything that we write or think about? We just run it against all clients, and if we find something we report it. But so far, it's looking good. And we are more confident that

28
00:16:32.350 --> 00:16:38.079
Mario Vega: than previous weeks about the coverage. So yeah, just wanted to chime in to say that.

29
00:16:40.700 --> 00:16:45.069
stokes: Cool thanks, one quick reminder.

30
00:16:45.570 --> 00:16:50.070
stokes: So we had tried to put in to place a little organization

31
00:16:50.732 --> 00:16:55.737
stokes: for the main net fork. Just in the event, we need any sort of instant response.

32
00:16:56.270 --> 00:16:59.909
stokes: So there's this document here that I linked again on the Pm repo.

33
00:17:00.300 --> 00:17:09.010
stokes: And essentially, it's just having point, people from each client team. Just so in the event, we need to get in touch with someone we know who that is.

34
00:17:09.349 --> 00:17:13.460
stokes: It would be great if you could add some contacts

35
00:17:13.780 --> 00:17:16.680
stokes: in the next few days on this document, just as a Pr.

36
00:17:16.869 --> 00:17:20.150
stokes: and yeah, so take a look at that.

37
00:17:21.750 --> 00:17:27.490
stokes: Otherwise any other pector stuff that we want to get into at the moment.

38
00:17:33.270 --> 00:17:36.381
stokes: I think people generally feel good about it

39
00:17:37.280 --> 00:17:42.790
stokes: and are making progress with releases. So okay.

40
00:17:44.820 --> 00:17:50.319
stokes: If there are no other pector things, then let's turn to Fusaka.

41
00:17:50.480 --> 00:17:56.169
stokes: So with Usaka to kick us off. We have purdos with Devnet 6.

42
00:17:56.560 --> 00:17:59.219
stokes: Devnet 6 is live.

43
00:17:59.825 --> 00:18:04.109
stokes: Maybe Perry or someone would like to give an update just on how that's going.

44
00:18:05.490 --> 00:18:10.817
Barnabas Busa: Yeah, previous agnostics have launched approximately a week ago. And

45
00:18:12.150 --> 00:18:21.430
Barnabas Busa: we seem to be having some problems now, just like started a few epochs ago. It's

46
00:18:21.750 --> 00:18:35.010
Barnabas Busa: basically a few clients are having some issues, especially Nimbus, to have issues. But they said that the Esi also seems to be struggling. So

47
00:18:36.080 --> 00:18:40.490
Barnabas Busa: I haven't had too much time this week to that deep into it.

48
00:18:41.210 --> 00:18:44.239
Barnabas Busa: but maybe some of the client teams can give an update.

49
00:18:52.780 --> 00:18:54.260
stokes: Anyone have anything to share.

50
00:19:00.190 --> 00:19:06.179
Barnabas Busa: I know that in, for example, for us, there was some block processing time issues.

51
00:19:12.630 --> 00:19:14.400
Barnabas Busa: This is for peerless. Yeah.

52
00:19:15.270 --> 00:19:15.900
stokes: Yeah.

53
00:19:17.440 --> 00:19:20.540
stokes: Okay, was this related to this all proof computation.

54
00:19:23.780 --> 00:19:31.669
Roman: Not really it it just for unknown reasons. The block processing time jump

55
00:19:32.120 --> 00:19:34.829
Roman: sometimes even up to 40 seconds.

56
00:19:36.220 --> 00:19:44.420
Roman: Unclear. Why? Because none of the changes happened in in the live sync, so I expect their resource, exhaustion.

57
00:19:48.670 --> 00:19:49.370
stokes: Okay?

58
00:19:52.810 --> 00:19:59.030
stokes: So if you look at the spec, there's a few open prs mainly around Apis.

59
00:19:59.430 --> 00:20:03.180
stokes: I don't know if there's any open questions to discuss on these at the moment.

60
00:20:06.010 --> 00:20:08.600
stokes: I know we touched on them, some on the breakout this week.

61
00:20:13.220 --> 00:20:13.930
saulius: There's check.

62
00:20:23.290 --> 00:20:23.960
stokes: Okay?

63
00:20:25.020 --> 00:20:32.299
stokes: If not, then I assume everyone's busy with Petra. Which soon people will be focused on pure dos.

64
00:20:32.570 --> 00:20:38.409
stokes: And yeah, otherwise we'll focus on the open Prs and keep working towards Devnet. 6.

65
00:20:39.760 --> 00:20:44.389
stokes: One thing that did come up was this Bpo eip.

66
00:20:44.660 --> 00:20:48.269
stokes: and it proposes a configuration so that we can say.

67
00:20:48.380 --> 00:20:51.580
stokes: for example, at this epoch the ball parameter should look like this.

68
00:20:52.050 --> 00:20:55.239
stokes: and there was a question of exactly how this configuration looks.

69
00:20:55.780 --> 00:21:00.370
stokes: There was some conversation on discord. There's a few different suggestions.

70
00:21:00.760 --> 00:21:10.719
stokes: We touched on this during the breakout this week, and I thought we had agreed to essentially have a list of objects or records and Yaml, at least on the Cl. Side.

71
00:21:11.230 --> 00:21:14.950
stokes: but did want to bring this up. Just so we can finalize the decision today.

72
00:21:15.900 --> 00:21:22.859
stokes: Did anyone have any issues with what we settled? Yeah, Gabe has a link here in or example here in the chat.

73
00:21:23.340 --> 00:21:28.349
stokes: So you would have the key. And then, yeah, just this list of the relevant data.

74
00:21:30.260 --> 00:21:31.919
stokes: Anyone have any problems with this?

75
00:21:33.400 --> 00:21:38.439
stokes: I think one thing in particular is like Yaml support per client. Just in the event that

76
00:21:38.600 --> 00:21:43.820
stokes: there's issues parsing this. For some reason everyone feel good about this.

77
00:21:46.630 --> 00:21:50.220
Barnabas Busa: There's also some discussion about potentially having this in a separate file.

78
00:21:51.865 --> 00:21:56.970
Barnabas Busa: I'm not sure what was the decision about that? Or do we just want to include this in the config.

79
00:21:58.370 --> 00:22:05.820
Justin Traglia: I would just like to config or included in the config not a separate file I was, I take that suggestion back.

80
00:22:06.710 --> 00:22:12.879
Barnabas Busa: Okay. So there was another discussion about how we could. How how could the user override these

81
00:22:13.800 --> 00:22:27.660
Barnabas Busa: in case of an emergency override needing to happen because we're writing a list element seems like a weird

82
00:22:27.820 --> 00:22:29.010
Barnabas Busa: way to do it.

83
00:22:31.120 --> 00:22:36.860
stokes: Yeah, I would imagine. Well, yeah, I guess if you wanted to, you could just edit it yourself.

84
00:22:37.450 --> 00:22:42.480
stokes: But I would imagine then clients would just ship with new configs, so you would pull some new release.

85
00:22:43.280 --> 00:22:47.260
stokes: You could even just imagine providing the configuration and replacing just that.

86
00:22:49.710 --> 00:23:08.469
Parithosh Jayanthi: I guess the question there is, if we expect a Ppo to be going badly and we want to emergency cancel it. Would we do so with the new client release? Or would we do so with the flag? I guess if it's with a flag, then we're talking about an override approach. And if it's with a new release, then yeah, it's a new config, and it doesn't really matter. Then.

87
00:23:14.970 --> 00:23:15.590
stokes: Do go ahead.

88
00:23:15.590 --> 00:23:15.980
stokes: I'm not.

89
00:23:15.980 --> 00:23:16.670
stokes: Answer.

90
00:23:17.764 --> 00:23:35.429
Dustin: I want to question the premise. I don't want to spend too much time on this, because I know I've done this a bit in discord. The emergency release thing is not going to happen. I'm I'm going to stay that more or less on the record, I think, not as a prescriptive thing, but as a descriptive thing.

91
00:23:35.730 --> 00:23:59.470
Dustin: the the coordinate. We couldn't get this coordinated for Holeski in time. A bunch of people on a single telegram group on a timescale of minutes, and if you put the time scales involved here, it's a lot of things that go wrong go wrong on the scale of minutes to hours, and then you go from there to what weeks, days, weeks, and at that point that's just not

92
00:24:00.430 --> 00:24:08.500
Dustin: that coordination can't happen. I'm sorry. Please stop. I'm sorry. I'll rephrase. I think that, allowing this

93
00:24:08.990 --> 00:24:21.730
Dustin: fantasy again, I will use that word very deliberately of of an emergency release to guide the design of this in ways that compromise the design in general is, is misguided.

94
00:24:27.680 --> 00:24:30.210
stokes: Do you have an alternative that you would prefer.

95
00:24:33.139 --> 00:24:36.309
Dustin: Well, what it means is that

96
00:24:36.620 --> 00:24:48.809
Dustin: to the extent that including it in this, in the say, a pre-existing configuration, if the only issue there was that it doesn't allow for an emergency override to me. That's just like a non issue.

97
00:24:49.030 --> 00:24:59.019
Dustin: So it doesn't really create another alternative as much as as it eliminates one of the putative reasons for preferring a separate file.

98
00:25:04.460 --> 00:25:08.939
stokes: Yeah, I mean, the separate file bit is kind of a detail. It sounds like you're questioning

99
00:25:09.270 --> 00:25:11.309
stokes: the whole Bpo idea itself.

100
00:25:12.550 --> 00:25:13.760
Dustin: Well, that, too.

101
00:25:14.260 --> 00:25:24.060
Dustin: I've started taking that a bit as a fait accompli at this point I'll be honest. But yeah, I'm not. I'm not particularly convinced about Bpos in this context, either. That's true.

102
00:25:24.784 --> 00:25:43.220
Parithosh Jayanthi: Maybe one more clarifying parameter. I'm not expecting Bpo values to be chosen such that a past Bpo has failed, and we need to schedule a new one to reduce the blob count. But rather, let's say we go from 6 blobs to 9 blobs, and we see a degradation of

103
00:25:43.250 --> 00:26:08.090
Parithosh Jayanthi: 5%. And this is a maximum number we had expected, and we have another Bpo for scheduled for about 2 months from now that we have roughly some amount of time to cancel, said future Bpo. So this can be achieved with conflicts being shipped at different times, and you have plenty of time to react because any Bpo section chosen any value chosen needs to allow for enough

104
00:26:08.090 --> 00:26:15.609
Parithosh Jayanthi: time to react as well as be fine grained enough to allow for monitoring to judge the next how the next Bpo. Could go.

105
00:26:15.610 --> 00:26:16.370
Parithosh Jayanthi: So

106
00:26:16.710 --> 00:26:29.549
Parithosh Jayanthi: that being said, Would you still oppose that being declared as an emergency? Because, yes, it is an emergency as in, we need to delay the future fork. But no, it isn't an emergency that you need to make a release today.

107
00:26:30.520 --> 00:26:32.439
Parithosh Jayanthi: It's about cancelling a future fork.

108
00:26:33.720 --> 00:26:44.939
Dustin: No, I would not categorize that an emergency. If if it's in the timeline of when releases are feasible to coordinate, then it's not an emergency by at least a definition. I would see.

109
00:26:45.180 --> 00:27:02.999
Parithosh Jayanthi: Okay? So I would rephrase the earlier point. As this is not an emergency, but having the ability to either override or ship a new config. It sounds like the preference would be to just ship a new config, and we choose Bpo values such that we can always cancel the future one with ample warning.

110
00:27:05.590 --> 00:27:10.210
Dustin: Give. Given everything that would be something I can live with.

111
00:27:14.910 --> 00:27:15.560
stokes: Okay.

112
00:27:18.830 --> 00:27:24.020
stokes: So circling back to this configuration, are we good with this?

113
00:27:26.450 --> 00:27:32.210
stokes: It sounds like, yeah, this structure here, and the standard config that we all have.

114
00:27:32.610 --> 00:27:38.920
stokes: In the event we need to change it. There would just be a new configuration that a user of a client would get in some way

115
00:27:43.180 --> 00:27:46.479
stokes: do we feel like we need to also have like a command line override.

116
00:27:47.270 --> 00:27:50.230
stokes: I mean that to me would be more this emergency situation. But

117
00:27:50.930 --> 00:27:56.750
stokes: it's like another code path to test. And yeah, it it would be tricky to coordinate

118
00:28:01.200 --> 00:28:02.020
stokes: Henrico.

119
00:28:03.920 --> 00:28:07.029
Enrico Del Fante (tbenr): Generally okay, is. The only thing that you want to

120
00:28:07.270 --> 00:28:12.769
Enrico Del Fante (tbenr): point out is that adding that in the main configuration

121
00:28:15.030 --> 00:28:22.620
Enrico Del Fante (tbenr): there is a slightly impact on the on the begin. Api spec endpoint that returns

122
00:28:23.050 --> 00:28:37.779
Enrico Del Fante (tbenr): all the configuration. And we have this structured array. Then we we need to make sure that we render in Jazzon this Bpo schedule, and we don't break any Vc.

123
00:28:38.310 --> 00:28:42.570
Enrico Del Fante (tbenr): That because Vc. Essentially is not.

124
00:28:43.100 --> 00:28:49.319
Enrico Del Fante (tbenr): it's not interested in this information, or for some reason it may may not expect the

125
00:28:49.510 --> 00:28:54.560
Enrico Del Fante (tbenr): edge as an object in the response, as a nested schedule. So

126
00:28:54.870 --> 00:28:58.199
Enrico Del Fante (tbenr): yeah, we need to make sure that we don't break anything.

127
00:29:00.650 --> 00:29:01.910
stokes: Yep, that makes sense.

128
00:29:02.291 --> 00:29:06.869
Barnabas Busa: Just translate to Jason, anyway. So I don't see a problem here.

129
00:29:08.590 --> 00:29:11.665
Enrico Del Fante (tbenr): Yeah, I mean on on the Vc side,

130
00:29:12.580 --> 00:29:19.410
Enrico Del Fante (tbenr): can talk about only only tech. I don't think there is any problem, but any any tooling that consumes

131
00:29:19.570 --> 00:29:28.699
Enrico Del Fante (tbenr): that endpoint. I don't know how is designed and what are the assumptions there, so.

132
00:29:32.450 --> 00:29:35.749
Barnabas Busa: Well, I mean, if we make a decision today about the structure, then

133
00:29:36.190 --> 00:29:39.810
Barnabas Busa: it should give them plenty of time to deal with this later.

134
00:29:43.540 --> 00:29:47.110
stokes: Yeah. And I mean, this is something that will up here in testing.

135
00:29:47.310 --> 00:29:49.269
stokes: I guess, like one issue is, if

136
00:29:50.550 --> 00:29:56.360
stokes: you know, some implementation treats users like unexpected keys and causes an error or something. But

137
00:29:56.950 --> 00:29:58.539
stokes: I I think we'll be okay.

138
00:30:01.650 --> 00:30:07.560
stokes: Cool. So we'll go with this format that gave player in the chat.

139
00:30:07.820 --> 00:30:10.119
stokes: We will put that in the config. Yaml.

140
00:30:10.770 --> 00:30:12.650
stokes: Yeah, Mark, we are.

141
00:30:13.650 --> 00:30:14.110
ethDreamer (Mark): Okay.

142
00:30:14.110 --> 00:30:16.209
stokes: And no no cli, for now.

143
00:30:16.210 --> 00:30:23.019
ethDreamer (Mark): That is currently what is in the IP, or at least like very closely approximating it. The

144
00:30:23.180 --> 00:30:34.477
ethDreamer (Mark): tricky thing is just like the config file is technically a yaml file, but we have never had anything that was like a nested array or anything like that. But that is valid. Yaml

145
00:30:34.930 --> 00:30:56.160
ethDreamer (Mark): But client teams should watch out for that. I I do think it's worth doing it that way, because this may not be the only time that the consensus side has to specify a sort of array like object in the config. And the El side already does it regularly. So if we do have problems with that. It's it's worth fixing.

146
00:30:58.650 --> 00:31:00.789
stokes: Yeah. And again, I think it will.

147
00:31:01.090 --> 00:31:04.639
stokes: I mean, this sort of thing will come up immediately in testing. So we should know

148
00:31:12.250 --> 00:31:17.579
stokes: Justin. Now, should we? Backfill? Didn't have an Electra limits? We need to do Electra, for sure.

149
00:31:19.640 --> 00:31:22.660
stokes: You mean like, include those in the Bpo schedule.

150
00:31:23.880 --> 00:31:26.340
Justin Traglia: And the blob schedule. Yeah.

151
00:31:29.500 --> 00:31:31.059
stokes: Why would we need to do that?

152
00:31:32.844 --> 00:31:35.689
Justin Traglia: So we don't need Dinet. But we do need Electra.

153
00:31:36.110 --> 00:31:40.640
Justin Traglia: I believe. I mean, like, if we just want to use a like a get blob. I get

154
00:31:40.830 --> 00:31:45.260
Justin Traglia: Max Pops per block limit function like it'll need the

155
00:31:46.600 --> 00:31:51.100
Justin Traglia: electro blobs on it which we're using. And truly, at the beginning.

156
00:31:56.480 --> 00:31:57.470
stokes: Yeah.

157
00:31:58.950 --> 00:31:59.650
Justin Traglia: And.

158
00:31:59.650 --> 00:32:07.100
stokes: Yeah, I was thinking about this is, it would just go live after Socca. So Electra would be in place and then slide up for Sokka. And

159
00:32:07.270 --> 00:32:12.829
stokes: sure maybe the there's like the same data in this in this list. But.

160
00:32:14.500 --> 00:32:18.449
Justin Traglia: To be clear. I'm not suggesting that we change how like Alexa works.

161
00:32:20.090 --> 00:32:21.340
Justin Traglia: I'll explain it later.

162
00:32:23.130 --> 00:32:23.740
stokes: Okay.

163
00:32:25.522 --> 00:32:27.569
Barnabas Busa: Regarding testing it would

164
00:32:27.830 --> 00:32:41.349
Barnabas Busa: maybe be a bit problematic then, because we could assume that we're starting with the app, or we can assume that we start from Electra. So then how would you specify that we are starting from the app, or we starting from Electra? If

165
00:32:41.540 --> 00:32:44.839
Barnabas Busa: we just say next blobs per block is whatever.

166
00:32:45.400 --> 00:32:46.980
Barnabas Busa: So I can see that feel.

167
00:32:47.710 --> 00:32:50.349
Barnabas Busa: Then we might need to backfill all the way.

168
00:32:52.350 --> 00:32:57.379
stokes: Because the current shared us. Devnets are on top of Deneb and not Electra.

169
00:32:57.660 --> 00:33:00.129
Barnabas Busa: No, no, they are on top of Elektra.

170
00:33:01.545 --> 00:33:09.839
Barnabas Busa: That like what's gonna be the 1st one, and then it's gonna be epoch 0 and the specific Xbox per block

171
00:33:10.790 --> 00:33:16.770
Barnabas Busa: that we we might have more Bpo schedule in in the future.

172
00:33:17.080 --> 00:33:18.930
Barnabas Busa: And we might have

173
00:33:19.060 --> 00:33:29.440
Barnabas Busa: flu at epoch 0 eventually. And we're gonna have, whatever the next star will be at epoch 0. And then we can have a mismatch of mixed flops per block

174
00:33:29.970 --> 00:33:31.960
Barnabas Busa: scheduling scheme.

175
00:33:34.110 --> 00:33:37.950
stokes: Why would there be a mismatch that would sound like in configuration? Error

176
00:33:44.850 --> 00:33:50.719
stokes: like it should be fine. Just have like, yeah. Epoch. 0 is like the fuller set, and then you just go from there.

177
00:33:53.850 --> 00:34:02.309
Justin Traglia: A slightly different question. Are we going to use the blob schedule for, like future hard forks? It might be what Barnabas is asking

178
00:34:04.500 --> 00:34:08.409
Justin Traglia: so like, for I don't know if we decide to raise the

179
00:34:08.960 --> 00:34:11.629
Justin Traglia: up on that in the future. After Bpo Forks.

180
00:34:14.100 --> 00:34:20.540
Barnabas Busa: Yeah, like, do we want to touch anything else ever? Or is it only gonna be the Max blobs per block

181
00:34:20.730 --> 00:34:22.520
Barnabas Busa: at that specific epoch.

182
00:34:25.659 --> 00:34:30.059
stokes: This should be fine for Fusaka, and

183
00:34:30.549 --> 00:34:35.239
stokes: it could change in the future. I don't really see a reason why at the moment, but it could.

184
00:34:48.669 --> 00:34:54.459
stokes: Okay, cool. I think that's sorted.

185
00:34:55.789 --> 00:34:58.859
stokes: And that does kind of tie into the next point.

186
00:34:59.239 --> 00:35:03.179
stokes: So we have parados.net 6, and

187
00:35:03.439 --> 00:35:06.469
stokes: we should be looking towards Fusaka Devnet 0,

188
00:35:06.849 --> 00:35:11.359
stokes: especially as Pector goes live. That will be the next devnet to focus on.

189
00:35:12.469 --> 00:35:21.449
stokes: We talked about this, some on the breakout this week, and it sounds like there's agreement for for socket of net 0 just on the cl side

190
00:35:21.669 --> 00:35:27.169
stokes: to be pure dust. Mnet 6, and then also go ahead and include the Bpo eip.

191
00:35:27.559 --> 00:35:37.339
stokes: So that would, you know, imply that's implemented and working. And we do have some like initial configuration and data for how we want the socket 0 to look like.

192
00:35:39.039 --> 00:35:41.489
stokes: I guess there's a few things here.

193
00:35:43.029 --> 00:35:47.839
stokes: I guess one, then, is like, Do we want to move this eip to Sfi.

194
00:35:48.229 --> 00:35:50.439
stokes: or do we want to handle that later?

195
00:35:51.069 --> 00:35:53.839
stokes: It's Eip 7, 8, 9, 2.

196
00:35:56.329 --> 00:36:00.399
stokes: I don't have a link handy, but it's there.

197
00:36:03.529 --> 00:36:13.989
stokes: and yeah, this is maybe administrative at this point. But it sounds like we are going ahead and scheduling this Bpo eip for inclusion.

198
00:36:15.609 --> 00:36:17.919
stokes: Should we just go ahead and do that formally?

199
00:36:27.909 --> 00:36:35.219
stokes: Okay, Armas has a question no reason to do for sake of 0 if we don't have Eos?

200
00:36:35.659 --> 00:36:40.449
stokes: Yeah, the intent is to have some version of Uf ready for for soccer. Devnet 0.

201
00:36:41.503 --> 00:36:43.849
stokes: I don't know if we want to touch on that today.

202
00:36:45.019 --> 00:36:51.839
stokes: but I think we should aim for this to have 0 again with pure dos. Devnet 6 and vpo

203
00:36:52.870 --> 00:36:58.129
stokes: we had suggested on the breakout this week to aim for somewhere around May 20th

204
00:36:59.199 --> 00:37:01.339
stokes: for for socket dot 0.

205
00:37:02.079 --> 00:37:04.669
stokes: Does that timeline sound reasonable to everyone?

206
00:37:06.470 --> 00:37:22.480
Barnabas Busa: I think the timeline is a bit more questionable at this point, and if we don't like, if we don't include the latest version of it, then I don't think we should do, and we should just do Bpo with.

207
00:37:23.850 --> 00:37:28.639
Barnabas Busa: because there's no there's no reason to have an old version of the OS.

208
00:37:29.375 --> 00:37:33.300
Barnabas Busa: Pushed on top of this this branch.

209
00:37:35.650 --> 00:37:36.420
stokes: Yeah.

210
00:37:38.170 --> 00:37:50.950
stokes: I hear that I would think we try to get everything ready I don't know if Dan or any of persons here today. But this is something I guess we can discuss next week, if not today.

211
00:37:51.270 --> 00:37:55.899
stokes: And I do think we should push for this it'd be good to have a

212
00:37:56.580 --> 00:38:01.009
stokes: even if not completely stable, but a devnet 0 up as soon as possible.

213
00:38:02.750 --> 00:38:09.440
stokes: yeah. And sure, you know, if it looks like Uf isn't ready. Then we'll probably do what you're suggesting. Suggesting Barnabas.

214
00:38:12.840 --> 00:38:16.920
stokes: Yeah, Perry says, as far as he knows, the timelines should align.

215
00:38:25.730 --> 00:38:33.169
stokes: and no one seems to have any issues with this May 20th approximate date. So I think we should have that in the back of our minds.

216
00:38:40.680 --> 00:38:41.450
stokes: Okay?

217
00:38:42.290 --> 00:38:48.829
stokes: And to be clear, it looks like there are enough comments in the chat to go ahead and sify

218
00:38:49.170 --> 00:38:56.780
stokes: Eip 7, 8, 9, 2. So I can go ahead and make that change later today to the Meta eip.

219
00:38:57.750 --> 00:39:06.219
stokes: And that tease us up to the next agenda item, which is the Cfi set for Fusaka.

220
00:39:06.980 --> 00:39:14.539
stokes: So to recap we currently have pure dos sfied, meaning it is shipping

221
00:39:15.283 --> 00:39:21.579
stokes: we just moved the Bpo eip to Sfi from Cfi, meaning the Bpo eip is shipping

222
00:39:22.420 --> 00:39:29.319
stokes: from there. There are a number of Cfi eips to discuss.

223
00:39:29.590 --> 00:39:35.419
stokes: We had touched on this last Acdc and yeah, essentially, just given

224
00:39:35.740 --> 00:39:44.180
stokes: the timing of different eips when they are proposed, and essentially having the deadline for Fussaka Cfi.

225
00:39:44.390 --> 00:39:47.199
stokes: we wanted to revisit those today.

226
00:39:47.550 --> 00:39:54.660
stokes: so we should go ahead and make a final Cfi call perfect soccer today.

227
00:39:55.160 --> 00:40:00.879
stokes: And again from last call and looking at the Meta eip.

228
00:40:01.360 --> 00:40:11.280
stokes: the only real eip that stuck out today to discuss for Cfi. Is this eip? 7, 9, 1, 7. This is the proposal. Look ahead, Eip.

229
00:40:11.590 --> 00:40:17.590
stokes: There were a number of other ones that we essentially lean towards Dfi for Fusaka

230
00:40:17.960 --> 00:40:25.300
stokes: again, acknowledging that we essentially want to exclusively focus on pure dos and eof for this work.

231
00:40:26.010 --> 00:40:33.119
stokes: So given that context, let's touch on 7, 9, 1, 7.

232
00:40:33.600 --> 00:40:39.020
stokes: Would we like to Cfi it, or otherwise move to Dfi. On this call

233
00:40:45.160 --> 00:40:49.709
stokes: Asgar says, Dfi. 7, 9, 1, 7, and Dfi the others?

234
00:40:56.040 --> 00:40:57.530
stokes: Okay, so we don't know.

235
00:40:59.074 --> 00:41:23.545
Dmitry Gusakov: From here back. Yeah. So I just want to make a short note regarding 7, 6, 8, 8, yes, is usually so, or together with the mixed bytes team we are currently working on a like a detailed research on the actual effects and the actual impact of implementing this eap

236
00:41:24.230 --> 00:41:31.619
Dmitry Gusakov: the research is aimed at understanding, who is currently using for 7, 8, 8, which is

237
00:41:32.265 --> 00:41:39.540
Dmitry Gusakov: beacon root on execution layer, which is directly connected to 7, 7, 6, 8, 8,

238
00:41:39.660 --> 00:41:58.970
Dmitry Gusakov: and the preliminary outcome is that currently Eigenlayer, Lido, and one more protocol which I cannot remember by heart is actively using this eap. And there is, like around 10 or more protocols who are currently working on

239
00:41:59.180 --> 00:42:01.309
Dmitry Gusakov: implementing for 7, 8, 8

240
00:42:01.510 --> 00:42:09.290
Dmitry Gusakov: into their protocols. And again, I want to point out that without 7, 7, 6, 8, 8,

241
00:42:09.440 --> 00:42:17.550
Dmitry Gusakov: they all will have to do. Some sort of a maintenance should become State change which

242
00:42:17.690 --> 00:42:20.080
Dmitry Gusakov: it most likely would in Fasaka.

243
00:42:20.410 --> 00:42:31.889
Dmitry Gusakov: So just want to point out again that by including 7, 6, 8, 8 into Fusaka, we will save a lot of time and effort on the

244
00:42:32.460 --> 00:42:43.269
Dmitry Gusakov: up layer for the app layer developers. And again, the the actual research, unfortunately, is not ready by today, but it will be published, I believe, this week.

245
00:42:46.710 --> 00:42:48.490
stokes: Okay, thank you.

246
00:42:51.370 --> 00:42:54.395
stokes: Let's just circle back to that.

247
00:42:55.110 --> 00:43:00.629
stokes: because I do want to make a decision on 7, 9, 1 7, is anyone

248
00:43:00.780 --> 00:43:03.319
stokes: in favor or against Cfi?

249
00:43:03.850 --> 00:43:06.899
stokes: I would like to hear from clients. Frederick.

250
00:43:08.610 --> 00:43:16.950
Radek: Hi, so yeah, I already wrote on discord some time ago that I am weekly against

251
00:43:17.450 --> 00:43:25.720
Radek: because of the, you know, not because the the vip itself is technically, you know, something's wrong with it.

252
00:43:25.910 --> 00:43:27.569
Radek: But because of the

253
00:43:28.330 --> 00:43:52.600
Radek: you know what we agree agreed on of how we are going to, you know, work from now on in terms of scheduling forks and including stuff. And I'm looking right now at teams diagram where there was a minus one. And N and N. Plus one, I can share it with you. It's in the all core magicians. And if you look at that, if you look at the 1st diagram from this post

254
00:43:53.300 --> 00:44:13.309
Radek: for fork, and we can propose eips between testnet and mainnet releases for the previous fork. So in that terms, it's perfectly fine, in my opinion, to include the cip, but I think we also agreed that we shouldn't include eips that are like not like

255
00:44:13.330 --> 00:44:23.800
Radek: change something in the consensus if we don't have testnets that have been running with many clients, and they are working, and for the cip we had 0.

256
00:44:23.960 --> 00:44:27.780
Radek: And so that's why I am slightly against including the cip.

257
00:44:30.280 --> 00:44:31.240
stokes: Right?

258
00:44:32.150 --> 00:44:33.290
stokes: Yeah.

259
00:44:34.160 --> 00:44:37.579
stokes: So I hear you with the point that.

260
00:44:37.730 --> 00:44:43.219
stokes: yeah, like, what we should be very careful to do is not include a bunch of vips into a fork

261
00:44:43.350 --> 00:44:51.790
stokes: without due diligence. We saw with Petra that that was problematic. So I don't think anyone wants to do that.

262
00:44:52.490 --> 00:45:06.909
stokes: I think at the same time, the way that we now have the setup of Pfi to Cfi. To Sfi it seems like Cfi. Is this like conditional approval that it's worth looking at in more depth, and that's where. Then we do the due diligence

263
00:45:07.893 --> 00:45:18.570
stokes: and then maybe just like round this out, like we wouldn't put this into. Say, if we saw nets until everything else has essentially been proved out to be stable, right? So

264
00:45:18.750 --> 00:45:21.229
stokes: we would still focus on pure dos, and eof

265
00:45:21.600 --> 00:45:25.259
stokes: only when that's the case, would we then circle around to the Cfi side?

266
00:45:25.580 --> 00:45:33.080
stokes: And I'm not really making a general claim about the cip in particular. But that's the high level process. So

267
00:45:33.370 --> 00:45:35.050
stokes: I think it's helpful context.

268
00:45:38.920 --> 00:45:49.751
stokes: And yeah, okay, I think, taking the comments on the call and in the chats were like net neutral.

269
00:45:54.870 --> 00:45:58.220
stokes: There's like a number of weekly in favor weekly against.

270
00:45:59.048 --> 00:46:13.669
sean: So the lighthouse team were weakly in favor. I think it does introduce a feel to the Beacon State, where, like we wouldn't have any beacon state changes otherwise. So that is like a reason not to do it, but

271
00:46:14.410 --> 00:46:16.110
sean: weekly and fear prototype.

272
00:46:16.970 --> 00:46:22.670
ethDreamer (Mark): Not to do it for other teams. I mean, we already have the infrastructure. But other teams may not necessarily have

273
00:46:23.240 --> 00:46:29.480
ethDreamer (Mark): put in the boilerplate code to have changes to the Beacon state. So, and if that's like a huge

274
00:46:29.600 --> 00:46:34.020
ethDreamer (Mark): amount of undertaking that would delay the fork, then we can understand that.

275
00:46:42.270 --> 00:46:45.619
Barnabas Busa: How hard is it to implement this vip?

276
00:46:46.310 --> 00:46:55.779
Barnabas Busa: Because if it's really just done under one day, and it could be included in the next subnet without any problem from every single cld.

277
00:46:56.550 --> 00:47:06.160
Barnabas Busa: then it wouldn't like delay the fork, but if it takes like weeks and weeks of effort, then it should be not included.

278
00:47:06.530 --> 00:47:27.549
Tim Beiko: And I don't think I would push back against including it in the next devnet until we have tiered as an Eof, even if it's a 1 day thing like, I think this is how we got screwed in Petra. We should make sure we have a stable thing that works and then decide if we want to add more. So obviously, how long it takes makes a difference. But I I think once we have

279
00:47:27.840 --> 00:47:36.960
Tim Beiko: academic 0, 0, we can look at the Cfi vips and decide, okay, which ones make sense to add the fuse. Academic one. But

280
00:47:37.380 --> 00:47:42.152
Tim Beiko: yeah, let's let's not include it already.

281
00:47:47.050 --> 00:47:53.570
Barnabas Busa: I'm not saying to include it, I'm saying to keep it as Cfi, just not yeah. Fire it.

282
00:47:57.330 --> 00:48:04.030
Lin Oshitani | Nethermind: Yeah, I'm interested in what like the Cfi thing they consider needs to be included. Because.

283
00:48:04.230 --> 00:48:08.639
Lin Oshitani | Nethermind: like, I completely agree that pure desk is top priority like without that.

284
00:48:09.150 --> 00:48:13.839
Lin Oshitani | Nethermind: like all roll ups based or not, based like on skill.

285
00:48:14.490 --> 00:48:20.440
Lin Oshitani | Nethermind: but like being considering as in like, as long as it doesn't interfere or like

286
00:48:21.310 --> 00:48:29.160
Lin Oshitani | Nethermind: with pure desk scheduling, we can consider it for inclusion. I think there'll be a good position, and I'm happy if there

287
00:48:32.080 --> 00:48:37.330
Lin Oshitani | Nethermind: and yes, it's gonna be very like useful for be confirmations.

288
00:48:39.800 --> 00:48:45.610
Lin Oshitani | Nethermind: It's a relatively small team. So yeah, introduce student people are.

289
00:48:48.470 --> 00:48:51.079
Lin Oshitani | Nethermind: yeah, opposed to even considering it.

290
00:48:58.790 --> 00:49:06.909
stokes: Okay, I think, given the input and the fact that this is only Cfi and not Sfi.

291
00:49:07.470 --> 00:49:11.569
stokes: it seems like it's okay to move ahead with Cfi for this today.

292
00:49:12.620 --> 00:49:14.069
stokes: Is that okay? With everyone.

293
00:49:19.960 --> 00:49:20.790
Potuz: Elect.

294
00:49:21.630 --> 00:49:22.230
stokes: Yeah.

295
00:49:22.900 --> 00:49:27.160
Potuz: Oh, I'm not sure I I can't raise my hand. I'm driving middle of nowhere.

296
00:49:27.220 --> 00:49:52.970
Potuz: so I just want to mention. I'm not sure because this was cutting off. But including this and testing this would be quite a big change in that. It is the only thing that changes the Beacon state when there was another eip that was mentioned, as if this was going to be something surely to happen in Fuzaka that we would change the Beacon state, but so far out of the eips that we're considering. Nothing touches the Beacon State.

297
00:49:53.140 --> 00:50:00.720
Potuz: And I think the crucial question we should be asking ourselves now is, do we really want to change that structure just because of the cip?

298
00:50:00.930 --> 00:50:04.340
Potuz: Because of this feature? Do we want to change the beacon state.

299
00:50:06.570 --> 00:50:07.230
Amir: Thankfully.

300
00:50:07.910 --> 00:50:09.490
Amir: Tell them poet is.

301
00:50:15.200 --> 00:50:19.429
ethDreamer (Mark): I suppose the answer to that question would depend on where other clients are

302
00:50:19.930 --> 00:50:23.990
ethDreamer (Mark): in, in how prepared they are to change the beacon state.

303
00:50:27.730 --> 00:50:31.569
stokes: Right. That sounds like it might be easier for some clients than others.

304
00:50:36.490 --> 00:50:41.510
Dmitry Gusakov: Well given, even though we don't have such a process yet.

305
00:50:42.020 --> 00:50:59.600
Dmitry Gusakov: Of consider like of specifying something for the hard fork after the next hard fork, and given the common bipartis, that and many others, that with the current scope of ssified Eaps there will be no changes to Beacon State. If we can agree, say.

306
00:50:59.730 --> 00:51:04.340
Dmitry Gusakov: of sifying this eip for the Glamsterdam

307
00:51:04.910 --> 00:51:29.639
Dmitry Gusakov: that might work. So if we 100% sure that there's no changes to beacon State Infosaka, which means that there's no issue to address, at least in this hard fork, and we can sfi now it for the next hard fork. I think it will solve solve the issue that might pop up should some changes to the State appear in Fusaka.

308
00:51:32.320 --> 00:51:37.860
stokes: Right, and I guess this kind of gets to. I think Ongar was trying to prompt either Justin or Lynn

309
00:51:38.180 --> 00:51:45.020
stokes: like, how bad is it to hold off on the zip or the Procomm's use case.

310
00:51:45.890 --> 00:51:49.520
stokes: because it seems like that was the main use case that the cip would support.

311
00:51:51.510 --> 00:52:03.739
Lin Oshitani | Nethermind: Yeah, I can give some context around the pre confirmation. So like pre confirmations like, without this cip, what would happen is that we would like. What we are discussing right now is basically having the oracle.

312
00:52:04.800 --> 00:52:08.649
Lin Oshitani | Nethermind: Oh, a close to or like trusted oracle solution which would like

313
00:52:08.920 --> 00:52:14.220
Lin Oshitani | Nethermind: make ensure that the lookout is available in the Avm. And there's

314
00:52:15.020 --> 00:52:17.540
Lin Oshitani | Nethermind: which is like it will work.

315
00:52:18.140 --> 00:52:20.869
Lin Oshitani | Nethermind: and we can have reconfirmations. But

316
00:52:21.880 --> 00:52:26.860
Lin Oshitani | Nethermind: yeah, it's kind of a hacky solution, I would say, and awesome.

317
00:52:27.310 --> 00:52:28.459
Lin Oshitani | Nethermind: They're not a you.

318
00:52:30.898 --> 00:52:35.029
Lin Oshitani | Nethermind: And once we have the cip like, we'll have the look ahead completely available in the

319
00:52:35.420 --> 00:52:42.010
Lin Oshitani | Nethermind: Evm. And a stable way which would remove all the need of hacks, and we'll really simplify

320
00:52:42.700 --> 00:52:44.079
Lin Oshitani | Nethermind: the protocol that we have.

321
00:52:48.730 --> 00:52:49.470
stokes: Reddick.

322
00:52:51.216 --> 00:52:58.350
Radek: Yeah. So I actually think I changed my position to slightly in favor. But

323
00:52:58.880 --> 00:53:10.709
Radek: I would just like to state that similarly to the attestation eip in the previous fork, which was supposed to be easy, but turned out to be huge. I don't expect this one to be as big. I

324
00:53:10.760 --> 00:53:22.020
Radek: hope it will actually be as simple as you know, the people who have already implemented it are saying, but what I think we should like agree on is that if

325
00:53:22.020 --> 00:53:41.689
Radek: we start working on it and start having definites for it, and it turns out that it actually is more involved than we initially thought, and you know there's this and that, and you know whatnot, etc. And we see that it's growing and growing. We should make a decision to roll back, and you know, not

326
00:53:41.810 --> 00:53:57.610
Radek: continue, and you know, try to push it and try to to complete everything so that it's ready and just say, Okay, it. It turned out to be more complicated than we thought. Let's move back and schedule it for the for Amsterdam, and not try to push it for Fussaka.

327
00:53:59.670 --> 00:54:05.109
stokes: Yeah, no, I think that makes a lot of sense. And that seems generally the same page that everyone's on.

328
00:54:05.300 --> 00:54:06.740
stokes: Matthew.

329
00:54:08.860 --> 00:54:29.129
Matthew Keil: I definitely want to just verbally. Second, what Tim said, that we don't want to get ourselves into the same situation that we had with jamming things in. And even though this isn't a jam, we don't know the scope. Let's get what's on the current roadmap in. Get the devnets running, and then, if there's still time, we can always add stuff in.

330
00:54:33.500 --> 00:54:38.729
stokes: Right? And so, yeah, I mean, at least, that's how I'm thinking about the use of Cfi here is

331
00:54:39.150 --> 00:54:45.710
stokes: it allows us to make this call later. Obviously, that means that there's like some initial due diligence. And if it

332
00:54:46.130 --> 00:54:51.419
stokes: becomes problematic in the way Radek and others are suggesting, then definitely, it would not be specified.

333
00:54:54.000 --> 00:55:13.020
Matthew Keil: But I think the biggest thing is is to not take away dev velocity from the current development and the current feature set and just keep focus and keep keep scope small so that we're all going in the same direction. And we can make sure that we're gonna get the next work, both quickly and smoothly.

334
00:55:13.873 --> 00:55:23.909
stokes: Yeah, I mean, that's why I like this pattern of basically only having sfi things on devnets only once, we feel good about those. And they're stable. Do we consider other things?

335
00:55:27.190 --> 00:55:37.630
stokes: Okay? So I think, taken all together, then it sounds like there is at least week support for Cfi and the cip. 7, 9, 1, 7. So let's go ahead and do that.

336
00:55:37.630 --> 00:55:45.601
ethDreamer (Mark): I also just wanted to point out, like one of the concerns of this vip was just that it might

337
00:55:46.860 --> 00:55:53.899
ethDreamer (Mark): you know, burden epoch processing a little bit more because you have to calculate all the next epoch proposers

338
00:55:54.150 --> 00:56:11.699
ethDreamer (Mark): at epoch processing time. But I did some measurements with lighthouse, and that doesn't appear to be a concern, even like lighthouse, even the naive implementation. I I hadn't used caches that we have, and the fact that we have Tree States makes the proposal calculation extra slow without those caches.

339
00:56:12.223 --> 00:56:24.909
ethDreamer (Mark): But it was only making epoch processing about 2 to 3% slower. But I'll see with caches, and I think it may not be necessary in other clients that don't need tree States to use caches. So.

340
00:56:29.320 --> 00:56:30.690
stokes: Okay, thanks.

341
00:56:32.775 --> 00:56:38.380
stokes: Yeah. So yeah, maybe just to summarize like week support to Cfi. So we'll go ahead and do that.

342
00:56:38.620 --> 00:56:47.445
stokes: Everyone is saying that essentially, at the 1st sign of any complications, we just essentially deify it for Fusaka.

343
00:56:48.160 --> 00:56:53.510
stokes: So we would not, Sfi. It would not move on to any devnets, and we would move forward.

344
00:56:56.890 --> 00:57:05.240
stokes: Okay, then we did have one other eip to touch on. Dimitri wanted to

345
00:57:05.740 --> 00:57:13.169
stokes: discuss 7, 6, 8, 8. And yeah, I mean, I think it's essentially the same conversation we just had for this eip

346
00:57:13.896 --> 00:57:21.860
stokes: just to be clear. This eip is about the stable containers. And the main thing is, it keeps these generalized indices in the

347
00:57:22.140 --> 00:57:26.050
stokes: proof part of Sse stable. Yeah.

348
00:57:26.730 --> 00:57:33.799
stokes: we had touched on this last Acdc. And again, I think, given like scope considerations. And the fact that we do want to focus on

349
00:57:34.050 --> 00:57:36.560
stokes: paired us pretty exclusively.

350
00:57:37.828 --> 00:57:41.509
stokes: Yeah, essentially, there wasn't that much support to Cfi list.

351
00:57:42.280 --> 00:57:46.989
stokes: We're here. So anyone would anyone like to see if I it's

352
00:57:47.090 --> 00:57:49.020
stokes: or do we think we should not.

353
00:57:55.240 --> 00:58:01.539
Dmitry Gusakov: I mean again rolling back to the previous comment. So if there's no changes to the state.

354
00:58:01.660 --> 00:58:04.060
Dmitry Gusakov: there's no need for this eap.

355
00:58:04.280 --> 00:58:11.960
Dmitry Gusakov: which is great. If the previous one would be included, I would hide the

356
00:58:12.600 --> 00:58:15.350
Dmitry Gusakov: recommend, including, like both of them.

357
00:58:15.600 --> 00:58:22.479
Dmitry Gusakov: So the 7 9 whatever, and this one, if not, then it's like it's fine to

358
00:58:22.690 --> 00:58:24.010
Dmitry Gusakov: to keep it for later.

359
00:58:27.880 --> 00:58:28.720
stokes: Yeah.

360
00:58:29.260 --> 00:58:47.120
stokes: I mean, yeah. So the obvious issue is, we have this like, kitchen sink situation where we're like, okay, we put this one. Then we need this other one, and then you know it. Cascades, which you know, I think everyone is very aligned that we don't want to add a bunch of vips to Visaco.

361
00:58:48.640 --> 00:58:52.330
stokes: Yeah, so

362
00:58:54.420 --> 00:59:03.969
stokes: yeah, just kind of summarizing the chat here. Like, I think, following the previous argumentation, we just had like, it would make sense to Cfi. But I think then it's kind of as I'm saying.

363
00:59:04.380 --> 00:59:08.930
stokes: it starts to feel worse if we have all these things that could potentially go in.

364
00:59:11.760 --> 00:59:26.889
Dmitry Gusakov: So just again, just just one suggestion from my side. If we Cfi like the previous 1, 7, 9 1 7, then we also did. Cfi. 7, 6, 8, 8. If we not, then let's Dfi both of them.

365
00:59:27.180 --> 00:59:28.469
Dmitry Gusakov: and then we are good.

366
00:59:40.160 --> 00:59:47.119
stokes: Okay. So does anyone disagree with this approach that we should see if I, both or neither.

367
00:59:48.171 --> 00:59:53.460
sean: I I disagree. I think we should just see if I the proposed look ahead, and not 7, 6, 8, 8.

368
00:59:54.170 --> 00:59:58.830
sean: I just think it's a simpler change. And I think it's yeah valuable.

369
01:00:04.480 --> 01:00:10.429
Radek: If the proposal look ahead, one has benefits without the other one, then let's include just one.

370
01:00:10.560 --> 01:00:13.650
Radek: If it doesn't have any benefits without the other one.

371
01:00:13.850 --> 01:00:15.860
Radek: Let's not include any of them.

372
01:00:16.080 --> 01:00:18.240
Enrico Del Fante (tbenr): Yeah, as far as I understood.

373
01:00:18.390 --> 01:00:24.030
Enrico Del Fante (tbenr): it, does have benefits on one side, but then creates problem on other sides. So

374
01:00:24.200 --> 01:00:26.830
Enrico Del Fante (tbenr): it's not the same use case.

375
01:00:26.830 --> 01:00:34.310
ethDreamer (Mark): My my understanding is that even if we include 7, 9,

376
01:00:34.800 --> 01:00:42.060
ethDreamer (Mark): when ain't the the proposal? Look at Eip that we're not going to break proofs for the Beacon State, because we're not crossing a power of 2 boundary.

377
01:00:42.410 --> 01:00:45.370
ethDreamer (Mark): and if that's the case, then

378
01:00:45.480 --> 01:00:48.720
ethDreamer (Mark): we don't. There's not like a huge motivation to put

379
01:00:48.850 --> 01:00:55.110
ethDreamer (Mark): 7, 6, 8, 8 in this fork, because, no matter what there needs to be, at least one

380
01:00:55.730 --> 01:00:59.810
ethDreamer (Mark): time that the app layer is gonna need to update their proofs

381
01:01:00.100 --> 01:01:07.490
ethDreamer (Mark): when we include stable containers hopefully, exactly one time. My hope is that we can include stable containers

382
01:01:07.710 --> 01:01:15.469
ethDreamer (Mark): when we make a change to the Bea state that breaks proofs so that they only ever have to do this one more time.

383
01:01:15.950 --> 01:01:19.530
ethDreamer (Mark): But right now my understanding is that even if we include

384
01:01:22.100 --> 01:01:32.199
ethDreamer (Mark): 7, 9, 1, 7, that we're not going to break the proofs. And so this is going to be the exact same amount of work for the app layer, whether we include 7, 6, 8, 8, or not in this form. Well, actually.

385
01:01:33.550 --> 01:01:37.939
ethDreamer (Mark): there, there they would have to update their proof sooner if we included it in this fork. But

386
01:01:38.760 --> 01:01:41.969
ethDreamer (Mark): either way it needs to be at least once more and hopefully, exactly once more.

387
01:01:55.260 --> 01:01:55.930
stokes: Okay.

388
01:01:56.670 --> 01:01:59.219
stokes: Anyone want to speak strongly to coupling them.

389
01:02:02.920 --> 01:02:05.949
Enrico Del Fante (tbenr): So I if I'm if we are sure that

390
01:02:06.340 --> 01:02:13.680
Enrico Del Fante (tbenr): introducing that doesn't break anything on the proof side makes sense to separate them.

391
01:02:13.810 --> 01:02:20.599
Enrico Del Fante (tbenr): but from from from from technical perspective. As I also said, you wrote, we are kind of

392
01:02:20.870 --> 01:02:28.090
Enrico Del Fante (tbenr): okay to bundle them, because we have already oh.

393
01:02:28.580 --> 01:02:38.499
Enrico Del Fante (tbenr): an implementation of 7, 6, 8, 8. But problem is, I don't know if other clients ever have everything already for 7, 8, 8, 10,

394
01:02:38.730 --> 01:02:39.620
Enrico Del Fante (tbenr): 7, 6, 8.

395
01:02:39.620 --> 01:02:40.020
stokes: Yeah.

396
01:02:40.020 --> 01:02:43.090
Enrico Del Fante (tbenr): Maybe delays for other reasons.

397
01:02:43.330 --> 01:02:44.070
Enrico Del Fante (tbenr): Fork.

398
01:02:44.900 --> 01:02:51.000
stokes: Yeah, my understanding is, there's provisional support across various as the implementations. But this is something that

399
01:02:51.200 --> 01:02:54.589
stokes: is like very low layer and touches. Yeah.

400
01:02:55.220 --> 01:02:58.960
stokes: Oh, it only touches Sz code. But

401
01:02:59.190 --> 01:03:02.300
stokes: that's used as like a foundational layer for many things.

402
01:03:03.760 --> 01:03:09.069
stokes: So okay, yeah, Matt.

403
01:03:10.020 --> 01:03:16.750
Matthew Keil: So I think, from a broader ecosystem perspective. And I think this is something that really we should reflect on is

404
01:03:17.030 --> 01:03:41.850
Matthew Keil: we want to get to faster forks. We want to get to more regular forks, and there's nothing that stops us from just getting the small feature set that's nearly ready out now and then in 3 months. We do those 2, you know, if we, if we can get to this fast iteration of forks and really get ourselves into that mindset. All of these eips are much easier to get included.

405
01:03:41.850 --> 01:03:49.810
Matthew Keil: and maybe as a trial, we just get this one out quickly and just keep it limited, and then that might set a precedence going forward.

406
01:03:52.060 --> 01:04:20.770
Dmitry Gusakov: Yeah, that that's a very good comment. But again, what we should keep in mind is that we, if we move to a faster, hard works, and if we do not have stable containers, then each and every fast hard work would require this shitty maintenance, which is a huge pain in the ass. So if we really want to move, to have to fast hard works, we also should think about like not introducing complications and hurdles for

407
01:04:20.790 --> 01:04:50.619
Dmitry Gusakov: applications. So I fully agree that if in this hard work, if Infosaka, there's no changes to be considered, no changes to proofs, it's perfectly fine, then we include stable containers into the next hard fork, and then we can move like at any pace we want, because at least this part will be solved. But if we will not solve this part, and we will just transition to a fast, hard forks, and then, for example, each and every of them, or some of them will change the way. How proofs work

408
01:04:50.620 --> 01:05:02.970
Dmitry Gusakov: it would create like enormous pain for the applications that's also important to keep in mind. So it's not just about being fast on the core side, but it's also thinking about applications and making it.

409
01:05:03.190 --> 01:05:12.640
Dmitry Gusakov: not creating additional complications for them. With this increased speed of hard forks, but in general I'm I'm fully for the increased speed of Hard Fork.

410
01:05:15.270 --> 01:05:15.940
stokes: Frederick.

411
01:05:16.610 --> 01:05:21.640
Radek: Yeah. So if I understand math correctly.

412
01:05:22.520 --> 01:05:32.450
Radek: This this proposal was, you know, we're working on pure das, we're working on some other small eaps. These other eips are ready. We can ship them in maybe 3 months. And

413
01:05:32.620 --> 01:05:52.450
Radek: I wanted to push back a little on that from engineering perspective. Because if we are working on pure das as the main eap, we are slowly merging stuff into our, you know, core code modifying sometimes very core functions and a lot of changes. And then, even if you have these other eips ready, then

414
01:05:52.870 --> 01:06:12.330
Radek: how do we? How do we release our clients? We would have to roll back all the you know. For example, peer does call so it doesn't interfere, and that it breaks nothing or maintain forks for every eip, and then somehow merge them together. It would be a nightmare, in my opinion, so I don't think this is something realistic.

415
01:06:12.900 --> 01:06:36.729
Matthew Keil: That's exactly what I'm saying, though, is like right now, we're so focused on the big 2 like, really, it's pure das and eof on both sides. And anything that gets in the way of that will take away development velocity from us, actually getting those features 100% across the line. And that's that's exactly what I'm talking about. Radek, like. If we stay laser focused and make sure that we're all aligned towards those goals.

416
01:06:36.960 --> 01:06:48.340
Matthew Keil: we can get it done quickly. It might only be a few months before we're ready for the F. Fork, and then it could possibly be a few months for the G. Fork after that, but I think

417
01:06:48.530 --> 01:06:59.959
Matthew Keil: limiting the scope so that we're all moving in alignment towards each one of these forks, I think, is critical in order to be moving, moving the ecosystem forward as whole.

418
01:07:00.420 --> 01:07:14.919
Matthew Keil: It's also more predictable for all the consumers, and I and I also agree with stable containers critical. But again, like, we already have the development velocity of where we're going for now. And you just you just have to choose what's what's the priority.

419
01:07:19.480 --> 01:07:22.379
Radek: Okay. I apologize. I misunderstood you. Sorry.

420
01:07:26.820 --> 01:07:27.590
stokes: Okay.

421
01:07:28.240 --> 01:07:31.380
stokes: So then, following the discussion.

422
01:07:32.040 --> 01:07:43.180
stokes: it sounds like 7, 9, 1, 7 won't impact the proofs. So then we lean towards, not Cfi and 7, 6, 8, 8, because there just will be no change.

423
01:07:43.570 --> 01:07:45.559
stokes: We can handle it in a future fork.

424
01:07:46.000 --> 01:07:53.580
stokes: So then we'd Cfi 7, 9, 1, 7, and yeah, basically, defi everything else sounds good.

425
01:08:03.770 --> 01:08:06.900
stokes: Okay, thank you. Everyone.

426
01:08:09.300 --> 01:08:15.349
stokes: Okay. So then, yeah, the Fusaka Vip set should be sorted.

427
01:08:15.870 --> 01:08:24.070
stokes: And there was one more thing on the agenda. And yeah, I guess. Is there anything else on Fusaka?

428
01:08:24.399 --> 01:08:28.619
stokes: This last point was around the builder Apis and the Med workflow?

429
01:08:28.790 --> 01:08:35.310
stokes: It's something I did want to bring up. But yeah, I guess before that, any other for soccer comments.

430
01:08:41.380 --> 01:08:45.170
stokes: okay, so then, yeah, this last thing.

431
01:08:45.319 --> 01:08:51.779
stokes: this came up when we were working on the builder Apis for Fusaka.

432
01:08:51.920 --> 01:08:58.600
stokes: I believe. I think it was Francis who originally made the Pr, let me just double check.

433
01:08:58.950 --> 01:09:06.830
stokes: Yeah, so essentially, we have the builder Apis, and we are updating them for for Fussaka, where

434
01:09:07.432 --> 01:09:26.499
stokes: the main change was, I think, the cell proofs but either way, that was not the issue the issue was that jimmy, then was looking at this and raised the question, you know what happens as we're thinking about this Api in terms of very high blob counts right? So today, there's like a relatively small number of bobs.

435
01:09:26.620 --> 01:09:29.910
stokes: Even with Fussaka, we could get to like quite a large number.

436
01:09:30.130 --> 01:09:34.220
stokes: And the question, then, is essentially the scalability of this Api.

437
01:09:34.630 --> 01:09:38.599
stokes: So how this has worked since the merge is that

438
01:09:39.279 --> 01:09:47.420
stokes: if I choose to use web boost, I, as a proposer, give my signature to the relay, and I get back the execution payload

439
01:09:47.670 --> 01:09:53.459
stokes: with the Neb, we added the blobs. So then it makes sense to then also add the blobs to this Api as well.

440
01:09:53.750 --> 01:09:58.540
stokes: And now the question is, as we increase the blog count. What happens?

441
01:09:58.850 --> 01:10:02.430
stokes: This is potentially an issue, because it's a synchronous Api

442
01:10:03.082 --> 01:10:14.269
stokes: so you would again, as a proposer, you would call the relay and get back the execution payload and all these blobs. And I think it was something that like.

443
01:10:14.380 --> 01:10:22.289
stokes: say, there's 72 blobs which is potentially a balance for Visaka. I think it was something like 10 MB of data in the response.

444
01:10:23.220 --> 01:10:35.029
stokes: The concern is, you know, if I'm using my boost, I might also be like a relatively under resourced mode. And so now the question is like, is this even valuable, or the right way to think about this?

445
01:10:35.550 --> 01:10:37.639
stokes: And there's a number of things to do here.

446
01:10:37.800 --> 01:10:53.969
stokes: or that could be done. So one of them is a pretty radical change where we just actually have. We don't have this Api at all where there's no response. What this means is that the the relay itself is entirely responsible for gossiping the block and blobs

447
01:10:54.080 --> 01:10:55.140
stokes: on their end.

448
01:10:55.915 --> 01:11:03.609
stokes: We could leave the status quo, where again the relay just returns all the data to the proposer, who then also gossips the data on their end.

449
01:11:04.090 --> 01:11:16.460
stokes: There's a sort of middle ground where you return the payload to the proposer, and then we have some other way to distribute bobs that could be sort of an asynchronous Api with the relay between the proposer.

450
01:11:16.925 --> 01:11:23.819
stokes: Also, someone brought up the point. I get blobs, and you could imagine that you might not even need to get the blobs from the relay

451
01:11:25.090 --> 01:11:34.589
stokes: point being there's a concern about this Api. There's a couple of things to do here. And I wanted to get feedback on different these different ideas.

452
01:11:35.749 --> 01:11:41.569
stokes: Does anyone have any initial response or reaction? Or also questions.

453
01:11:54.430 --> 01:11:56.620
stokes: does anyone feel like we need to change the Api.

454
01:11:59.050 --> 01:12:04.770
stokes: because that was the the original concern that basically, it would be too much data for a proposer to download in time.

455
01:12:06.900 --> 01:12:08.290
Barnabas Busa: It is too much data.

456
01:12:09.400 --> 01:12:10.010
stokes: Okay.

457
01:12:12.950 --> 01:12:13.820
stokes: Parents.

458
01:12:14.500 --> 01:12:32.524
terence: I mean, this is also like an issue today with regarding to time out right, because relay will time out or will apply some delay before returning. The data. And typically client side has this time I thought, time out threshold. So it's a little confusing sometimes when you see, like an error from a relayer saying that

459
01:12:33.120 --> 01:12:58.549
terence: Or seeing some error on the valid client saying that we failed to propose a block because of relayer, didn't return the block on time, and it's a scary log. But if you look at beacon blocks forward, your block is actually proposed. It's actually released by the relay on time and stuff. And this happens today quite frequently, and then it's not nice we should fix it. And I think this is kind of we can probably like kill, like 2 birds with one stone here like this, will also resolve that.

460
01:13:03.210 --> 01:13:06.100
stokes: And to be clear. Your suggestion is just to return. Nothing.

461
01:13:08.300 --> 01:13:25.979
terence: I mean, I don't have a good answer. I need to study this problem more. I think you return something, but not like. But don't rely on proposer to like gossip, the blog kind of if if that makes sense. Yeah, I need to think about this more.

462
01:13:26.340 --> 01:13:27.139
stokes: Okay. Yeah.

463
01:13:27.140 --> 01:13:27.700
terence: I mean, that's.

464
01:13:28.880 --> 01:13:33.820
stokes: That does makes sense. Yeah, okay.

465
01:13:35.650 --> 01:13:41.709
stokes: So I'm at least hearing. We think we should revisit this Api for Fusaka.

466
01:13:41.850 --> 01:13:44.039
stokes: which might be enough for today.

467
01:13:44.250 --> 01:13:51.640
stokes: I've reached out to a number of different builders and relays to get their perspective as well. They're kind of in progress of reviewing this?

468
01:13:53.630 --> 01:13:54.420
stokes: Yeah.

469
01:13:59.870 --> 01:14:02.209
stokes: Anyone feel like we should leave it alone.

470
01:14:11.260 --> 01:14:15.910
stokes: Okay, just going off the chat here. It seems like people generally think we should do something.

471
01:14:18.950 --> 01:14:26.229
stokes: There's a question. Let's see, would this impact the trust assumptions based by pure dos?

472
01:14:26.340 --> 01:14:28.289
stokes: If we have a handful of relays?

473
01:14:29.190 --> 01:14:35.059
stokes: Yeah, I mean, the relays would be responsible for getting the data out as well right? Because otherwise builders wouldn't use them.

474
01:14:37.490 --> 01:14:39.249
stokes: So short answer is, No.

475
01:14:44.900 --> 01:14:54.070
stokes: okay. That was helpful. I'll probably well, I will keep getting input from different relays and builders.

476
01:14:54.210 --> 01:14:56.760
stokes: And yeah, that will end up.

477
01:14:56.910 --> 01:14:59.710
stokes: probably with some kind of diff to this pr.

478
01:14:59.890 --> 01:15:01.609
stokes: and we can move forward from there.

479
01:15:05.290 --> 01:15:09.750
stokes: Let's see, I believe that was everything on the agenda. So yeah.

480
01:15:10.420 --> 01:15:14.019
stokes: any closing comments. Otherwise we'll wrap up for the day.

481
01:15:27.140 --> 01:15:30.620
stokes: Okay, then, thank you, everyone. I'll see you next time.

482
01:15:35.390 --> 01:15:36.150
Mario Vega: By, the.

483
01:15:36.150 --> 01:15:37.050
Ansgar Dietrichs: Thank you. Goodbye.

484
01:15:38.460 --> 01:15:39.200
Dankrad Feist: I know.

