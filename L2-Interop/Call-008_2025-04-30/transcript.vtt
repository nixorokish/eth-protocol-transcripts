WEBVTT

1
00:08:10.570 --> 00:08:12.939
Orest Tarasiuk (t1): Hey, guys, hey, everyone.

2
00:08:50.170 --> 00:08:51.070
Joshua Rudolf: Hello!

3
00:08:52.320 --> 00:08:53.630
Joshua Rudolf: How's everybody?

4
00:08:55.080 --> 00:08:56.150
Orest Tarasiuk (t1): Gosh!

5
00:08:56.960 --> 00:08:58.639
Joshua Rudolf: Thanks all for joining.

6
00:09:00.210 --> 00:09:02.259
Joshua Rudolf: We'll get started here in a minute.

7
00:10:04.950 --> 00:10:21.879
Joshua Rudolf: All right. I think we can get started. This is the L. 2 interrupt working group on today's call. We will be focused, I think, exclusively. We'll see how it goes on. Chain specific addresses and a few significant

8
00:10:22.040 --> 00:10:31.450
Joshua Rudolf: updates and revamps around that chunk of work that I'm really excited by. And I think we'll hope to

9
00:10:31.450 --> 00:11:01.250
Joshua Rudolf: yeah. Move this in a really positive direction. Change specific addresses. Aka. Interoperable addresses has been a topic that many of us have been discussing for quite a while now, and I think we're all excited to kind of take this to the to the next level and kind of get things finalized. So yeah, big. Shout out to everyone who has been working on this chunk of work for a long time and shout out to some of the wonderland team who is here today, who has jumped into this

10
00:11:01.310 --> 00:11:18.269
Joshua Rudolf: chunk of complex, messy work, and has really been great in helping push it along and get it to what I think. And hope is a much better state today. And and you know, thanks to all of the other work that they were able to use as a foundation for this. So yeah.

11
00:11:18.520 --> 00:11:33.449
Joshua Rudolf: I guess without further words, we can just jump right into the discussion and I'll hand it over to the Wonderland team to to give a bit of an overview on things and and anyone else, of course, feel free to jump in with questions. Raise your hand awesome.

12
00:11:37.780 --> 00:11:42.599
teddy | wonderland: Hello, everyone. I'm going to share my my screen real quick.

13
00:11:55.470 --> 00:11:58.490
teddy | wonderland: Can I get a thumbs up if you're seeing my screen? Okay.

14
00:11:59.730 --> 00:12:00.570
TiTi (Wonderland): Yeah.

15
00:12:01.200 --> 00:12:02.280
teddy | wonderland: Oh, okay, yes, sir.

16
00:12:04.380 --> 00:12:12.379
teddy | wonderland: Hello, everyone. I'm Teddy from Wonderland. I've been leading the the efforts on what

17
00:12:12.590 --> 00:12:17.950
teddy | wonderland: it was initially named cross-chain addresses, and

18
00:12:18.380 --> 00:12:25.000
teddy | wonderland: I have sort of 2 documents to show you for this call. The 1st one is

19
00:12:25.670 --> 00:12:30.630
teddy | wonderland: this one that was sort of a recommended reading.

20
00:12:32.103 --> 00:12:37.409
teddy | wonderland: Which T. Is going to share in the chat if you haven't seen it already.

21
00:12:37.750 --> 00:12:40.279
teddy | wonderland: But we are not going to

22
00:12:40.400 --> 00:12:50.370
teddy | wonderland: to go over this one. It's just important that you know it exists, and that you can refer back to it if you want to onboard yourself. To this

23
00:12:51.500 --> 00:12:58.719
teddy | wonderland: and the other one is sort of the my presentation of the subject.

24
00:12:59.180 --> 00:13:06.669
teddy | wonderland: We have been working with Erc. 7, 8, 2, 8, which has

25
00:13:08.630 --> 00:13:12.820
teddy | wonderland: was proposed sometime late last year.

26
00:13:14.870 --> 00:13:26.079
teddy | wonderland: and initially we tried to sort of overhaul it. It has some history. It initially started as a text representation, and we tried to also

27
00:13:26.530 --> 00:13:36.070
teddy | wonderland: define a binary one, then make it only binary. Then we went back to text. It's really a bunch of context that doesn't really matter

28
00:13:37.228 --> 00:13:48.730
teddy | wonderland: other than the fact that we chose to split the standard. Basically the standard defined. This

29
00:13:48.930 --> 00:13:54.179
teddy | wonderland: address at chain bound checksum.

30
00:13:54.810 --> 00:14:04.400
teddy | wonderland: we format for chains and defined a few name ways to have better representation of that than raw addresses or raw chain ids.

31
00:14:05.200 --> 00:14:15.090
teddy | wonderland: And we also have the need for and for a

32
00:14:15.190 --> 00:14:19.429
teddy | wonderland: like. The idea is for this to serve the needs of 2 groups of people.

33
00:14:19.810 --> 00:14:27.070
teddy | wonderland: those working with wallets and any other software that wants to display

34
00:14:27.420 --> 00:14:30.429
teddy | wonderland: an address chain combo to a user

35
00:14:30.920 --> 00:14:44.270
teddy | wonderland: on a fundamental level this, the scope for this is very simple. It's just okay. People know about addresses, and we have to also strap a chain Id on top of that. So people know.

36
00:14:44.400 --> 00:14:47.589
teddy | wonderland: and where that address actually lives?

37
00:14:49.193 --> 00:15:01.289
teddy | wonderland: But then you got the needs of the wallets that I already mentioned, and the smart contracts which is people working on the intents, cross message, passing resource logs, verticals

38
00:15:01.780 --> 00:15:04.469
teddy | wonderland: where they need

39
00:15:04.660 --> 00:15:16.590
teddy | wonderland: like a concise representation, because every every byte counts, and also they need some other guarantees, such as

40
00:15:16.900 --> 00:15:23.430
teddy | wonderland: knowing that a given address can have 2 possible representations which the

41
00:15:24.690 --> 00:15:28.820
teddy | wonderland: and for which a text format is not really optimal.

42
00:15:29.620 --> 00:15:39.120
teddy | wonderland: So we decided to to serve the needs of 2 different groups of people. We're gonna going to define 2 different standards.

43
00:15:43.270 --> 00:15:51.620
teddy | wonderland: The idea with Erc 7, 9, 3, 0 is to be the and

44
00:15:52.920 --> 00:15:59.669
teddy | wonderland: to be the binary representation standard. I'm going to refresh this because I have some other examples of this.

45
00:16:02.300 --> 00:16:11.259
teddy | wonderland: There we are. So we intend this one to be the binary one for

46
00:16:12.986 --> 00:16:15.470
teddy | wonderland: for use within smart contracts.

47
00:16:15.630 --> 00:16:20.269
teddy | wonderland: And it defines basically a payload with

48
00:16:20.520 --> 00:16:27.629
teddy | wonderland: with a version, a chain type and chain reference, a chain type, chain reference and address fields

49
00:16:28.030 --> 00:16:33.290
teddy | wonderland: which would be which would map to

50
00:16:33.700 --> 00:16:47.519
teddy | wonderland: to address at a chain. Basically, version is an internal internal thing. So we can extend this standard in the future. Chain type vaguely matches to a kite

51
00:16:47.830 --> 00:16:56.089
teddy | wonderland: namespace and change reference is the the guy preference. So what chain

52
00:16:56.650 --> 00:17:00.719
teddy | wonderland: within that ecosystems within that ecosystem we're talking about.

53
00:17:01.990 --> 00:17:06.520
teddy | wonderland: and address is the address specific to that chain which we all already know.

54
00:17:10.960 --> 00:17:24.510
teddy | wonderland: so this standard is mostly concerned with the binary binary payload. But in order to bridge the gap between these standard and 7, 8, 2, 8, and keeping them both compatible

55
00:17:25.160 --> 00:17:29.599
teddy | wonderland: is this also defines a very basic

56
00:17:29.880 --> 00:17:40.619
teddy | wonderland: text representation, which is also which could also be useful, for when you don't actually have the means to. I don't know. Resolve any Uns name, or perform some other

57
00:17:41.669 --> 00:17:51.319
teddy | wonderland: like more advanced logic, or you are just a developer trying to to troubleshoot stuff, discuss a text representation as well.

58
00:17:53.120 --> 00:17:54.430
teddy | wonderland: M.

59
00:17:55.800 --> 00:17:56.980
teddy | wonderland: And

60
00:17:57.960 --> 00:18:06.970
teddy | wonderland: this text representation is actually what lets you plug into 7, 8, 2, 8, and keep the 2 standards convertible between each other.

61
00:18:08.070 --> 00:18:09.163
teddy | wonderland: So they

62
00:18:12.530 --> 00:18:19.960
teddy | wonderland: the target audience for 7, 8 to 8 is anything that interacts with humans and which could benefit from

63
00:18:20.280 --> 00:18:27.360
teddy | wonderland: having more readable and memorable names, and it

64
00:18:30.170 --> 00:18:32.759
teddy | wonderland: The biggest of it is that

65
00:18:33.470 --> 00:18:40.520
teddy | wonderland: we define the like. Every name of this format, from 7, 9, 3 0 is

66
00:18:41.170 --> 00:18:44.460
teddy | wonderland: like a compatible with this one.

67
00:18:44.820 --> 00:18:48.659
teddy | wonderland: So you can still use a raw address if you want.

68
00:18:49.300 --> 00:18:57.720
teddy | wonderland: but it also defines that you can put hierarchical names within the address or the chain field.

69
00:18:58.240 --> 00:19:04.940
teddy | wonderland: and we actually strapped some semantics on top of this of these hierarchy. So you can have

70
00:19:05.140 --> 00:19:12.920
teddy | wonderland: the idea is that the top level domain defines. How are you actually supposed to resolve them?

71
00:19:13.620 --> 00:19:17.830
teddy | wonderland: To resolve that name into something that's

72
00:19:18.120 --> 00:19:21.470
teddy | wonderland: not ambiguous, and that you can follow as a.

73
00:19:22.030 --> 00:19:26.120
teddy | wonderland: and you can actually the reference back into a chain id or into an address.

74
00:19:26.992 --> 00:19:33.570
teddy | wonderland: The idea with this is basically to create an introduction level app.

75
00:19:33.980 --> 00:19:41.410
teddy | wonderland: So currently, we have a centralized registry of chain names like mapping from chain names to chain ids.

76
00:19:41.860 --> 00:19:46.280
teddy | wonderland: And instead of maintaining that in the future. We would maintain

77
00:19:46.780 --> 00:19:54.980
teddy | wonderland: a list like a list of protocols, to name chains, and to name addresses on those chains

78
00:19:55.830 --> 00:19:58.969
teddy | wonderland: which would be hopefully a much shorter list.

79
00:19:59.670 --> 00:20:05.770
teddy | wonderland: And the way you do you know which one to use is by this top level domain. So in this example.

80
00:20:07.710 --> 00:20:11.499
teddy | wonderland: we have a Alice that is@coolchain.short.

81
00:20:12.030 --> 00:20:18.209
teddy | wonderland: cool chain, dot shirt. It has the Tld short, which means we should use the the short list.

82
00:20:18.800 --> 00:20:25.219
teddy | wonderland: which is what we currently using, for example, Erc 3, 7, 7 0

83
00:20:25.750 --> 00:20:32.150
teddy | wonderland: and Alex dot, if has a dot, if dot top level domain, which is, which means it's

84
00:20:32.550 --> 00:20:35.439
teddy | wonderland: it should be resolved via regular ens.

85
00:20:37.325 --> 00:20:40.550
teddy | wonderland: It's worth noting that a

86
00:20:40.800 --> 00:20:44.400
teddy | wonderland: while. This standard allows for the use of ens.

87
00:20:44.810 --> 00:20:48.870
teddy | wonderland: It's not entirely coupled to it.

88
00:20:49.650 --> 00:20:59.729
teddy | wonderland: So the idea is that you could have an some other tld which maps to using some other naming registry.

89
00:20:59.950 --> 00:21:03.870
teddy | wonderland: If in the future a somebody

90
00:21:04.240 --> 00:21:13.849
teddy | wonderland: wants to to use something other than Dns, and also in the in the case that's crucial for the case of naming chains.

91
00:21:14.310 --> 00:21:15.153
teddy | wonderland: since

92
00:21:17.600 --> 00:21:32.499
teddy | wonderland: it would be very cool to use a decentralized list of chains as proposed in Erc. 775. But that is currently not possible, because 775 is actually pretty far from reaching production.

93
00:21:33.100 --> 00:21:36.280
teddy | wonderland: So in this other example that I have.

94
00:21:36.770 --> 00:21:41.780
teddy | wonderland: this is this is more of a more made up because

95
00:21:42.100 --> 00:21:44.889
teddy | wonderland: we can't use your c. 7, 75 yet.

96
00:21:45.010 --> 00:21:48.790
teddy | wonderland: but the idea would be that you can say.

97
00:21:49.570 --> 00:21:56.480
teddy | wonderland: use, roll up dot, l 2 dot e, as the chain as the chain part, and then

98
00:21:56.670 --> 00:22:05.149
teddy | wonderland: the dot d would mean that you use Erc. 7, 75 to resolve that to an actual chain. 80.

99
00:22:05.760 --> 00:22:09.540
teddy | wonderland: And this also showcases that you could use.

100
00:22:10.380 --> 00:22:11.390
teddy | wonderland: M.

101
00:22:11.550 --> 00:22:20.369
teddy | wonderland: You could still use addresses like raw addresses or raw chain ids like they would show like you would do with 7, 8, 3 0.

102
00:22:21.095 --> 00:22:27.749
teddy | wonderland: So you can use these for things that don't that are not actually named.

103
00:22:28.150 --> 00:22:32.510
teddy | wonderland: And you can represent things without going through a naming registry.

104
00:22:34.679 --> 00:22:35.509
teddy | wonderland: These.

105
00:22:35.670 --> 00:22:38.250
teddy | wonderland: This is a work in progress.

106
00:22:38.800 --> 00:22:45.098
teddy | wonderland: We are there are a few

107
00:22:46.190 --> 00:22:55.470
teddy | wonderland: a few things that we're trying to to define is especially the reverse. Resolutions of addresses on other chains is something that is

108
00:22:57.000 --> 00:23:04.740
teddy | wonderland: currently being implemented by Ens, and we have some, and

109
00:23:05.800 --> 00:23:17.200
teddy | wonderland: we have some some comments and some needs from from them, and it would also be, and

110
00:23:17.340 --> 00:23:20.969
teddy | wonderland: very cool to see Erc 775 moving forward.

111
00:23:21.280 --> 00:23:31.520
teddy | wonderland: So we can so we can decentralize the naming of chains as well, and these

112
00:23:33.010 --> 00:23:39.040
teddy | wonderland: this centralized list of naming resolvers also called the name registry registry.

113
00:23:39.897 --> 00:23:45.509
teddy | wonderland: Is something that we have not created yet. And for now we're

114
00:23:46.050 --> 00:23:49.000
teddy | wonderland: debating the possibility of using the

115
00:23:49.940 --> 00:23:53.629
teddy | wonderland: of using the same repo as as the chain list.

116
00:23:55.430 --> 00:23:59.459
teddy | wonderland: And this is the part where I

117
00:24:00.660 --> 00:24:11.900
teddy | wonderland: where I ask you for for stuff, and it's where we're having. We're wanting to to get these Crcs

118
00:24:12.450 --> 00:24:19.469
teddy | wonderland: like finalized as soon as possible. Our goal would be for them to be in a final call status in the next.

119
00:24:19.870 --> 00:24:21.590
teddy | wonderland: like 2 weeks from now.

120
00:24:23.040 --> 00:24:30.239
teddy | wonderland: So we will really appreciate your feedback on on any of this.

121
00:24:30.890 --> 00:24:38.670
teddy | wonderland: and in particular I would like to. I would like to ask you to use the eat magicians, forums.

122
00:24:39.020 --> 00:24:42.130
teddy | wonderland: the threads we have links for

123
00:24:42.330 --> 00:24:49.460
teddy | wonderland: probably 2 of them here, and they are also in the in the other document, and Tt. Probably share them in the chat already.

124
00:24:50.450 --> 00:24:57.950
teddy | wonderland: and the idea is that for every sort of minor change that that we have to the Ercs.

125
00:24:58.270 --> 00:25:05.590
teddy | wonderland: we use different prs, so, for example, like making

126
00:25:05.910 --> 00:25:14.869
teddy | wonderland: 7, 8, 2, 8 be a text representation of 7, 9, 3 0 addresses was its own Pr. And any feedback that you have

127
00:25:15.140 --> 00:25:20.420
teddy | wonderland: that you that you make on on those Prs will be.

128
00:25:21.220 --> 00:25:23.720
teddy | wonderland: will be hard to follow on if they are not

129
00:25:24.994 --> 00:25:35.840
teddy | wonderland: if they are not properly archived. So we would like to have all the feedback happen on the on the Forum, so we don't have to then track another

130
00:25:35.940 --> 00:25:43.640
teddy | wonderland: like hugely huge list of different Prs that you have to read to get up to speed, and also

131
00:25:45.143 --> 00:25:51.770
teddy | wonderland: like we will like for people to onboard themselves to this be without having

132
00:25:52.020 --> 00:25:55.359
teddy | wonderland: to, I don't know. Go through a telegram group or something.

133
00:25:55.940 --> 00:25:57.800
teddy | wonderland: So it's easier on everybody.

134
00:25:58.610 --> 00:26:08.319
teddy | wonderland: So yeah, we're doing. We're doing interoperative analysis. And we we want your help with this. So I haven't gone through the

135
00:26:08.660 --> 00:26:09.710
teddy | wonderland: the chat.

136
00:26:11.570 --> 00:26:16.619
teddy | wonderland: Is there is there any questions that you guys have on this.

137
00:26:24.570 --> 00:26:34.949
nikita: Yes, one question. Probably you've covered this, or maybe you've covered this. I've joined late. But why do we need the checksum in the

138
00:26:35.170 --> 00:26:38.130
nikita: machine representation of addresses.

139
00:26:40.764 --> 00:26:48.670
teddy | wonderland: No, we we don't. Actually, the the checksum is only for meant for displaying it on.

140
00:26:49.590 --> 00:26:55.819
teddy | wonderland: for displaying the text representation to humans. The machine address does not have a check zone.

141
00:26:55.950 --> 00:27:07.920
teddy | wonderland: It assumes that, however you transmit that information has the yeah has the capability of a

142
00:27:08.400 --> 00:27:12.739
teddy | wonderland: knowing. If you got the same message in as out

143
00:27:13.010 --> 00:27:20.510
teddy | wonderland: like, if you were to share it in a QR. Code, for example, the QR. Code has its own redundancy. If you were to send it over. Tcp, Tcp has

144
00:27:21.070 --> 00:27:28.470
teddy | wonderland: everything that Tcp has, and it's the checksum is only relevant in context where it's possible that

145
00:27:28.650 --> 00:27:40.109
teddy | wonderland: a user like had a typo or pass like has something different on their

146
00:27:40.620 --> 00:27:45.419
teddy | wonderland: like. The the naming schemes can get very

147
00:27:45.970 --> 00:27:49.780
teddy | wonderland: like can get sophisticated in the future.

148
00:27:50.240 --> 00:27:51.300
teddy | wonderland: So

149
00:27:51.460 --> 00:28:02.059
teddy | wonderland: you would want to. Perhaps you could have text representations which are different for the same actual address. And the way the checksum is defined is

150
00:28:02.160 --> 00:28:06.160
teddy | wonderland: that it only hashes over the

151
00:28:06.830 --> 00:28:14.990
teddy | wonderland: the chain and address part it does not concern itself with, for example, which naming resolver you're using.

152
00:28:15.740 --> 00:28:25.659
teddy | wonderland: So you could have, like the same address be represented in text in 2 ways, and but the check zone will be the same, so you would be prompted to look into it

153
00:28:26.240 --> 00:28:32.449
teddy | wonderland: like the ideas for it also to not make the the representations as opaque.

154
00:28:35.340 --> 00:28:37.198
nikita: Okay, yeah, this makes sense.

155
00:28:37.740 --> 00:28:57.710
nikita: though, there is one thing that I'm concerned about, like as a user, if it's if I'm typing a name as a user. I want something simple, like just alphanumerics. But if I have to type at the end some checksum which is like a hash or something like that. That would be very hard for me, especially even if, though I'm like.

156
00:28:58.130 --> 00:28:59.390
teddy | wonderland: Kind of it.

157
00:28:59.390 --> 00:29:00.140
nikita: Person.

158
00:29:01.340 --> 00:29:02.682
teddy | wonderland: Now that they

159
00:29:03.670 --> 00:29:11.669
teddy | wonderland: you will not type the check zone, not as a not as a layperson, and not as the nerdest of all developers.

160
00:29:12.368 --> 00:29:18.500
teddy | wonderland: The ux that we envision is that you use like you type the name.

161
00:29:18.950 --> 00:29:25.869
teddy | wonderland: and from that name they actually the wallet, at least with ens, which is what I researched so far.

162
00:29:26.130 --> 00:29:32.470
teddy | wonderland: The the wallet can then figure out where the bye.

163
00:29:33.650 --> 00:29:39.409
teddy | wonderland: on which chains there is an address available for that name.

164
00:29:39.720 --> 00:29:41.619
teddy | wonderland: and then it can list them.

165
00:29:42.210 --> 00:29:49.579
teddy | wonderland: So you pick from the select, and then you get the. You get the checks on the the wallet, computes the checks on for you.

166
00:29:49.920 --> 00:29:56.359
teddy | wonderland: So if you are somewhere, that if you, for example, saw the address in a pamphlet.

167
00:29:57.470 --> 00:30:05.979
teddy | wonderland: you you could type and and say, Yeah, that's that's the same checksum. I did. I did everything okay. And then, like, send a donation or whatever.

168
00:30:08.650 --> 00:30:15.300
nikita: Okay, okay, I see. Thank you. So the checksum just to I, I just read it and verify in another place. Yeah.

169
00:30:16.330 --> 00:30:23.070
teddy | wonderland: Yeah, I see some hands up. Would you like to go next.

170
00:30:24.340 --> 00:30:37.708
Yuliya | Matter Labs: Yeah, just, I had a comment, specifically on this. I think the team did a really good job taking the initial proposal to now splitting into 2 machine readable, and then the human readable that

171
00:30:38.507 --> 00:30:50.330
Yuliya | Matter Labs: leverages that this is very solid. Well thought out, I think we should push to get this, you know. Done as soon as possible. Support the 2 week. Timeline. Awesome, awesome job.

172
00:30:52.160 --> 00:30:53.030
Yuliya | Matter Labs: that's all.

173
00:30:54.180 --> 00:30:56.050
teddy | wonderland: Okay. Thank you very much.

174
00:30:56.300 --> 00:31:00.520
frangio: My. My question is, if you can give a short update or comment on the

175
00:31:00.680 --> 00:31:09.230
frangio: integration with chain agnostics, proposals. Some of this is being proposed as a keep. Is that right? Comment on that.

176
00:31:10.700 --> 00:31:13.620
teddy | wonderland: Yes, I'm actually really glad that you asked.

177
00:31:13.730 --> 00:31:20.589
teddy | wonderland: The idea is that these standards support

178
00:31:21.640 --> 00:31:24.880
teddy | wonderland: support ethereum addresses, but they are not limited to that.

179
00:31:25.210 --> 00:31:38.140
teddy | wonderland: They can support both chains within the ethereum ecosystem, which are not Evm. And I know have larger addresses, such as Aztec or Starnet Stalkernet.

180
00:31:38.510 --> 00:31:44.429
teddy | wonderland: and they can also support things like are completely outside of the ethereum ecosystem.

181
00:31:45.300 --> 00:31:47.949
teddy | wonderland: Mostly because there are some

182
00:31:48.760 --> 00:31:59.510
teddy | wonderland: like we were inspired for that for other tooling which already supports it, and it's based off ethereum, such as ens with encip. 9

183
00:32:01.950 --> 00:32:12.430
teddy | wonderland: So in order, we want this to be extensible to as many chains. l. 1 SL. 2 s. Alt. l. 1 s. As possible.

184
00:32:13.591 --> 00:32:17.560
teddy | wonderland: So for that we need to

185
00:32:18.110 --> 00:32:21.479
teddy | wonderland: have a like, we need to have a place

186
00:32:22.290 --> 00:32:32.480
teddy | wonderland: where we agree on the text representations like on how to map the text representations of addresses to a binary payload, because that's

187
00:32:32.710 --> 00:32:43.709
teddy | wonderland: for them. For some cases that's pretty easy, and for some other cases there are some alternatives in the case of ethereum. You could. I don't know. You could argue over

188
00:32:44.390 --> 00:32:54.960
teddy | wonderland: if you want to use Aip 55 canon utilization of of capitalization, or

189
00:32:57.160 --> 00:33:01.049
teddy | wonderland: or or similar things. And I don't know. Bitcoin has several other types.

190
00:33:01.620 --> 00:33:11.149
teddy | wonderland: So the idea is that we defined a guy profile, which is Skype 3, 3, 5 0

191
00:33:11.900 --> 00:33:23.090
teddy | wonderland: which is currently in draft. And it's receiving feedback. We didn't link from it from the presentation. But the other, the other document actually includes it.

192
00:33:24.660 --> 00:33:30.589
teddy | wonderland: But yeah. So there there are Skype 3, 5 0, which defines

193
00:33:31.390 --> 00:33:36.209
teddy | wonderland: a profile of what a change should define, as

194
00:33:36.500 --> 00:33:41.730
teddy | wonderland: are their text representations, their binary representations, and how to map it between the 2,

195
00:33:42.470 --> 00:33:52.469
teddy | wonderland: and then they type. Namespaces for every chain are completed later.

196
00:33:52.720 --> 00:34:01.340
teddy | wonderland: So if you're not familiar with how Casa works, it's sort of a

197
00:34:02.400 --> 00:34:05.260
teddy | wonderland: meta specification. So you can have

198
00:34:05.880 --> 00:34:15.399
teddy | wonderland: a specification of How does, for example, type 10 is a specification of how an address looks, and then.

199
00:34:28.929 --> 00:34:30.679
Filip @ status.network: I don't think we can hear you.

200
00:34:36.050 --> 00:34:39.599
Joshua Rudolf: Teddy, you think we lost you, are you?

201
00:34:41.590 --> 00:34:42.630
TiTi (Wonderland): Oh! Hey!

202
00:34:46.050 --> 00:34:48.089
Joshua Rudolf: We'll see if Teddy comes back in a second.

203
00:34:49.335 --> 00:34:49.770
TiTi (Wonderland): Okay.

204
00:34:55.989 --> 00:35:02.779
Joshua Rudolf: While we wait any other feedback from. I see there's a few other L 2 teams, wallet teams.

205
00:35:03.251 --> 00:35:05.610
teddy | wonderland: Sorry. Can you hear me?

206
00:35:05.610 --> 00:35:06.569
Joshua Rudolf: Yep, you're back now.

207
00:35:07.010 --> 00:35:07.950
teddy | wonderland: Oh, okay.

208
00:35:09.120 --> 00:35:09.579
Joshua Rudolf: We lost you.

209
00:35:09.580 --> 00:35:16.090
teddy | wonderland: Yeah. So some. How much did you lose that? It was the Kype part clear.

210
00:35:17.280 --> 00:35:20.640
Joshua Rudolf: I think we lost about the past 30 to 60 seconds.

211
00:35:21.090 --> 00:35:22.300
teddy | wonderland: Oh, okay.

212
00:35:24.178 --> 00:35:33.659
teddy | wonderland: so yeah. The the ideas for that types are meta specifications of what should address like, what should change.

213
00:35:34.010 --> 00:35:41.950
teddy | wonderland: specify to comply with in the case of kite, 350 is the mapping from

214
00:35:42.610 --> 00:35:45.510
teddy | wonderland: a text to

215
00:35:46.190 --> 00:35:52.439
teddy | wonderland: from text to binary, and from binary to text. In the case of 7, 9, 3, 0

216
00:35:52.560 --> 00:35:56.580
teddy | wonderland: in the context of 7, 8, 3, 0. So

217
00:35:57.100 --> 00:36:04.049
teddy | wonderland: what we did is we defined the guy 350, and then we defined the namespaces

218
00:36:04.200 --> 00:36:07.710
teddy | wonderland: for both Ethereum and Solana

219
00:36:08.384 --> 00:36:15.180
teddy | wonderland: the Solana. One was not for any particular reason other than supporting some other chain to

220
00:36:15.900 --> 00:36:23.980
teddy | wonderland: sort of to test that we that we could. And so then I was particularly easy on how they define their

221
00:36:24.410 --> 00:36:26.369
teddy | wonderland: their addresses under chain. Ids.

222
00:36:28.060 --> 00:36:32.260
teddy | wonderland: But yeah, both of these things are as open prs.

223
00:36:33.990 --> 00:36:38.570
teddy | wonderland: so you can. You can chime in on any any feedback that you that you have.

224
00:36:41.130 --> 00:36:41.910
frangio: Cool thanks.

225
00:36:49.350 --> 00:36:55.889
teddy | wonderland: Okay, any other questions you you I have, or you ask, or anything I miss from the chat.

226
00:36:56.850 --> 00:37:11.560
Victor | RISC Zero / Boundless: Yeah, sure, I have a question. You see, you have this, like the the text format kind of looks like an email address which is nice in some ways, but also like raises the the question of like, How do you avoid collisions with? You know Tld is defined by Icann

227
00:37:11.700 --> 00:37:13.790
Victor | RISC Zero / Boundless: and potential confusion. There.

228
00:37:19.220 --> 00:37:20.630
teddy | wonderland: You mean?

229
00:37:21.610 --> 00:37:28.949
teddy | wonderland: Yeah, confusion between addresses and email addresses.

230
00:37:32.050 --> 00:37:32.480
Victor | RISC Zero / Boundless: Yeah.

231
00:37:32.480 --> 00:37:38.269
teddy | wonderland: We like. We didn't think of that. To be honest and.

232
00:37:38.270 --> 00:37:38.940
Victor | RISC Zero / Boundless: Okay.

233
00:37:39.300 --> 00:37:51.319
teddy | wonderland: And we mentioned that they would appear in very different context. One thing off the top of my head, which could be fine, which we to define an Mx record or something akin to that, that

234
00:37:52.120 --> 00:38:00.170
teddy | wonderland: where you can make the email address map to the actual blockchain address.

235
00:38:01.220 --> 00:38:06.200
teddy | wonderland: So you can actually fix that while making them the same. But that's that's just speculation on my part.

236
00:38:07.402 --> 00:38:11.620
teddy | wonderland: No, we didn't envision they could.

237
00:38:12.440 --> 00:38:20.499
teddy | wonderland: They could collide, and the idea is to not an actual mitigation to to that which is not really

238
00:38:21.020 --> 00:38:31.159
teddy | wonderland: and and yeah, an actual mitigation to to that, to that is the fact that the

239
00:38:31.850 --> 00:38:38.670
teddy | wonderland: we would have a centralized list of these name resolvers, and the idea would be to not

240
00:38:39.411 --> 00:38:43.019
teddy | wonderland: use Tlds, that I can also use this

241
00:38:44.060 --> 00:38:49.520
teddy | wonderland: so that can get it out out of the way. And in the case of naming registries.

242
00:38:49.780 --> 00:38:57.669
teddy | wonderland: so far it has been in their best interest to not collide with Icann, so I don't know I can, does not provide that if

243
00:38:58.637 --> 00:39:04.660
teddy | wonderland: address and the dot if Tld for Ens was chosen because

244
00:39:04.810 --> 00:39:06.719
teddy | wonderland: there isn't 1 in in Igan.

245
00:39:07.030 --> 00:39:12.099
teddy | wonderland: So I don't think that's gonna because of the Tlds. I don't think it's going to be a big issue.

246
00:39:13.230 --> 00:39:39.450
Victor | RISC Zero / Boundless: Yeah. One thing I will say, like the idea that they're not going to appear in the same context. I don't think is probably true. I I think people do already, you know, want to send, you know. Send Crypto to an email address, and if you have that, the case where you have a, you know, a 2 line on a transaction that can take either an email address or one of these names. It could exactly. It could totally be the exact same context.

247
00:39:41.180 --> 00:39:47.620
Victor | RISC Zero / Boundless: the as far as not planning. If I can like. Yeah, Dot, if probably at this point I can, would not probably

248
00:39:48.115 --> 00:39:58.070
Victor | RISC Zero / Boundless: endorse a Tld at this point, because they are probably I'm guessing aware of the fact that it's major. It's used by so many people in this space.

249
00:39:58.340 --> 00:40:05.630
Victor | RISC Zero / Boundless: I guess. Basically, I would be concerned with other kinds of Tlds that might appear, and that future collisions could occur.

250
00:40:07.811 --> 00:40:17.839
teddy | wonderland: Yes, we will have to sort of the Ef. Would have to approve of that collision by adding it into the name registry registry. Basically.

251
00:40:18.910 --> 00:40:24.959
Victor | RISC Zero / Boundless: Well, I'm just gonna say, it's like, you know, some the members of the community of this community decide to use

252
00:40:25.080 --> 00:40:32.469
Victor | RISC Zero / Boundless: some need. New tld, you know, dot chain, and then I can later approves a dot chain tld owned by some corporation.

253
00:40:33.710 --> 00:40:56.612
Joshua Rudolf: I could. I was just gonna jump in really quick, Teddy, I think the the email collision topic, I think, is a good one, and is something that we touched on a long time ago. Actually, when when we were 1st sort of debating usage of the at sign versus colon versus other sort of syntax and so I think it. I do think it's something that

254
00:40:57.070 --> 00:41:10.270
Joshua Rudolf: is still a concern, I think. And, Teddy correct me if I'm I guess, misunderstanding, or if you disagree. But I think the way I guess the way that I think that we're thinking about this is that the way that we've set things up now

255
00:41:10.470 --> 00:41:26.550
Joshua Rudolf: allows us to have some flexibility. We don't. We don't need to answer this question in the immediate term around the specific syntax, and maybe we do in the very near future decide to move away from at to avoid this email collision issue.

256
00:41:26.670 --> 00:41:27.385
Joshua Rudolf: But,

257
00:41:28.270 --> 00:41:38.609
Joshua Rudolf: I don't know, not not to say that we shouldn't discuss it right now, but I'm wondering if it's something that we should maybe have a separate sort of venue to discuss more specifics around syntax and.

258
00:41:38.610 --> 00:41:49.440
teddy | wonderland: This is the sort of thing that would be a good fit for the for the forum because there's also the the argument that using a colon

259
00:41:50.390 --> 00:41:58.040
teddy | wonderland: would include would mean having ambiguities with Caif 10, which would be more frequent.

260
00:41:58.610 --> 00:42:03.330
teddy | wonderland: But yeah, the Forum is probably the best place to go in depth into that.

261
00:42:05.590 --> 00:42:06.810
Joshua Rudolf: Yeah, makes sense to me.

262
00:42:07.520 --> 00:42:10.450
Joshua Rudolf: There's a couple of questions from Frangio in the chat as well.

263
00:42:14.290 --> 00:42:22.569
frangio: Yeah, just the one about the timeline, I think, is the only really important one. This thing about email collisions. Do we need to decide this in the next 2 weeks. Essentially.

264
00:42:24.737 --> 00:42:33.370
teddy | wonderland: Yes, because the Erc, like the the Erc, still do not define the and.

265
00:42:33.530 --> 00:42:39.449
teddy | wonderland: like the naming registries we're going to use, and they do not define the

266
00:42:42.420 --> 00:42:51.419
teddy | wonderland: how future chains are going to be serious, which that allows us to move the standard faster. But it does define the grammar of what names look like.

267
00:42:51.780 --> 00:43:00.930
teddy | wonderland: So this is one of the items that should be resolved within 2 weeks. But I am, and

268
00:43:01.150 --> 00:43:05.520
teddy | wonderland: like I have the time to discuss it, and I'm confident we can. We can figure it out.

269
00:43:25.680 --> 00:43:39.570
TiTi (Wonderland): Okay. Anyone else has any questions that they would like us to address right now, else we can move this conversation to the Forum, and we will be addressing all the feedback during these 2 weeks, as Teddy mentioned.

270
00:43:39.800 --> 00:43:44.300
TiTi (Wonderland): So let us know. I hope this was very helpful for you to get contacts on both Sanders.

271
00:43:44.560 --> 00:43:48.870
TiTi (Wonderland): and we really appreciate you taking the time and providing feedback on it.

272
00:43:54.060 --> 00:44:06.339
Joshua Rudolf: Thank you so much, Teddy and Tt. For walking us through and answering a bunch of questions. This is great. Any other questions feedback right now. Otherwise we can. Yeah move it to the Forum like like Tt mentioned.

273
00:44:11.230 --> 00:44:15.080
Joshua Rudolf: cool? If not, then we can end the call there.

274
00:44:15.740 --> 00:44:17.170
Joshua Rudolf: Thank you so much. Everybody.

275
00:44:20.300 --> 00:44:21.580
Orest Tarasiuk (t1): Thank you.

276
00:44:21.580 --> 00:44:22.180
Orest Tarasiuk (t1): Bye, bye.

277
00:44:22.490 --> 00:44:24.149
teddy | wonderland: See you in the Forum.

