WEBVTT

1
00:06:10.390 --> 00:06:11.520
Ahmad Bitar | Nethermind: Hey, Josh.

2
00:06:14.200 --> 00:06:14.850
Joshua Rudolf: Hey? Am I.

3
00:06:15.350 --> 00:06:15.850
Jaack: There!

4
00:06:16.910 --> 00:06:18.350
Joshua Rudolf: How are you guys?

5
00:06:28.360 --> 00:06:29.650
Joshua Rudolf: How's everybody?

6
00:06:39.220 --> 00:06:44.680
Joshua Rudolf: Too many ais better way for me to block all the AI's.

7
00:07:00.570 --> 00:07:01.550
Joshua Rudolf: Hey, Jacob.

8
00:07:05.960 --> 00:07:10.259
Joshua Rudolf: how are you on time, Jacob, I know you said. You only have a think. You only have a few minutes.

9
00:07:13.020 --> 00:07:14.189
Joshua Rudolf: Can you hear me, Jacob?

10
00:07:14.500 --> 00:07:22.680
Jacob l Boundless: I can hear you now. Sorry I yeah, I'm going through the the classic, you know, Macbook permission acceptance on zoom.

11
00:07:22.910 --> 00:07:24.060
Joshua Rudolf: No worries.

12
00:07:25.090 --> 00:07:26.170
Joshua Rudolf: Time to.

13
00:07:26.410 --> 00:07:27.619
Jacob l Boundless: For your presentation.

14
00:07:27.950 --> 00:07:32.230
Jacob l Boundless: Yeah. Do you mind like giving me access? Just so I can make sure I can like share my screen.

15
00:07:32.230 --> 00:07:38.080
Joshua Rudolf: Yes, we'll do alright, and.

16
00:07:40.390 --> 00:07:41.130
Jacob l Boundless: Perfect.

17
00:07:43.280 --> 00:07:44.579
Joshua Rudolf: Get started in a minute.

18
00:07:47.210 --> 00:07:48.279
Jacob l Boundless: How are you doing.

19
00:07:48.870 --> 00:07:50.030
Joshua Rudolf: Doing well.

20
00:07:50.740 --> 00:07:52.449
Joshua Rudolf: Thanks for coming on the call.

21
00:07:53.160 --> 00:07:54.310
Jacob l Boundless: Copy.

22
00:07:55.650 --> 00:07:57.920
Joshua Rudolf: Excited to learn more about the 6.

23
00:07:57.920 --> 00:07:59.310
Joshua Rudolf: No, Colon.

24
00:07:59.310 --> 00:08:00.030
Jacob l Boundless: There we go.

25
00:08:03.750 --> 00:08:09.500
Jacob l Boundless: Marketing will be happy that you're saying that as the name the the dev name got killed 2 weeks ago.

26
00:08:09.660 --> 00:08:15.459
Jacob l Boundless: Sad, which I actually think I still call it the dev name in in this presentation. So which

27
00:08:15.850 --> 00:08:17.180
Jacob l Boundless: y'all will appreciate.

28
00:08:17.450 --> 00:08:19.079
Joshua Rudolf: We'll get a peek behind curtains.

29
00:08:25.110 --> 00:08:37.209
Joshua Rudolf: Well, yeah, let's get started. Welcome to the interrupt working group. Call. This is call Number 12 in the series. We have a few presentations today and some good updates.

30
00:08:37.510 --> 00:08:41.899
Joshua Rudolf: So I will share the agenda in the chat.

31
00:08:42.039 --> 00:08:48.170
Joshua Rudolf: And if you're watching the recording, this is issue 1, 6, 2, 6 in the Pm. Repo.

32
00:08:49.580 --> 00:08:53.300
Joshua Rudolf: Awesome. Well, starting off with Jacob, and boundless.

33
00:09:00.300 --> 00:09:02.829
Jacob l Boundless: can everyone see my screen?

34
00:09:04.100 --> 00:09:30.500
Jacob l Boundless: Perfect? Yeah, thanks for having me on excited to chat about sort of like an effort, you know, currently going on in the boundless ecosystem to sort of help move more trustless. Interop forward! Who am I? My name's Jacob. I'm the product. Lead at boundless where we're sort of, you know, trying to democratize access to Ck infrastructure and just make it in general easier

35
00:09:30.500 --> 00:09:54.029
Jacob l Boundless: to use. I think we're all familiar with Zk, at this point. It definitely hasn't been the easiest thing to use for the past 4 or 5 years, but we think we're making strides and hopefully making it more accessible. You might have seen us on Twitter if you see Barry's that's probably us. I apologize if it's overwhelming at times. But here's a quick diagram of what almost actually is

36
00:09:54.040 --> 00:10:09.360
Jacob l Boundless: boundless is a set of, you know, just like on chain off chain, and a novel, cryptographic, primitive. That again just makes Zk infrastructure happy to chat, offline more about people that are interested in using it, but don't want to get bogged down in all the details right now.

37
00:10:11.160 --> 00:10:26.689
Jacob l Boundless: here's sort of where we are in our journey. We went to like Main Beta a few weeks ago, and a big focus for us was, you know, we have this new piece of tech. We wanna like try to help solve an open problem. Instead of you know, just

38
00:10:26.740 --> 00:10:44.449
Jacob l Boundless: having people send sort of like fake proofs to the market and whatnot. And we wanted to attack this problem, which I think this group is going to be really familiar with right like, it is really hard to read the state of ethereum unless you're running a full node, you know, in the past. This has

39
00:10:44.450 --> 00:11:03.559
Jacob l Boundless: force people to use alternative solutions which are not the most trustless. So you know, like multi sigs oracles. And then there have been some great attempts at, you know, some light clients with this. So people have tried Helios, which is a good attempt. The economic security does not match that of ethereum.

40
00:11:03.580 --> 00:11:07.309
Jacob l Boundless: And this is, you know, sort of what we set out to do

41
00:11:07.480 --> 00:11:20.629
Jacob l Boundless: and solve. And we've had what I sort of refer to as the Zk syzygy occur. And 1st of all, if there's 1 thing to take away from this presentation, it is the word syzygy.

42
00:11:20.910 --> 00:11:44.470
Jacob l Boundless: it's an alignment of celestial bodies, and in 3D. Space, and we've had some great things happen over the past fun. So we had a new version of the R. 0 vm. Come out. It's now 5 x faster. I'll give you a sneak, peek. We might get a similar performance bump with v. 3, which we're planning on releasing in the upcoming months. The next is the boundless market.

43
00:11:44.610 --> 00:11:53.019
Jacob l Boundless: What really is happening here is we're moving from on-demand aws cost, which is what we've historically priced people at to on-prem

44
00:11:53.757 --> 00:12:04.790
Jacob l Boundless: hardware where these, you know providers are now, in regions of the world where electricity, you know at times, is even subsidized by the government which we're seeing, you know.

45
00:12:04.880 --> 00:12:33.300
Jacob l Boundless: it's sort of insane, like another, probably magnitude in cost reduction, and the last, and probably most important, and is now my favorite eip ever, which is Eip. 7,549, which took attestations out of the Sin Committee, which then reduces the amount of signatures we have to validate when generating these proofs. And this was a 100 X cost reduction for us which we love. We thank anyone that worked on that.

46
00:12:33.980 --> 00:12:55.529
Jacob l Boundless: So the solution right? That we sort of come up with here is what we're calling, you know formally is the signal ethereum. Now. Originally it was called Ccasper. But it's this full validity proof that an epoch has been finalized in ethereum. We call it a full Zk consensus client.

47
00:12:55.890 --> 00:13:16.040
Jacob l Boundless: We're not running the full, like, you know, beacon chain client within the Zk, vm, we're not doing the Stfs. So it's really more of like a full finality client. The reason why we say it's a full Zk consensus client is because you are you know, checking the full validator set. So you're having the same validator set that secures ethereum

48
00:13:16.040 --> 00:13:27.560
Jacob l Boundless: back these proofs as well. And the output of this program is you get that checkpoint block hash and you are guaranteed that this is a checkpoint block hash at the

49
00:13:27.700 --> 00:13:36.069
Jacob l Boundless: end of 2 epochs in which the epoch 2 2 epochs ago is is finalized by that validator ethereum set

50
00:13:36.846 --> 00:13:49.029
Jacob l Boundless: the todr right. We're just taking Casper finality gadget running it inside of a Ckvm. Checking that the exits entries are are being dealt with properly and and updating that

51
00:13:50.290 --> 00:14:06.650
Jacob l Boundless: the good thing here is okay. You have this like block ash. And we have this other library that makes it really simple to interact with this. We have this library steel, where it essentially makes it, you know, easy to run solidity code. So we use alloy. We transpile that Evm bytecode into risc 5 Byte code so it can run in our system.

52
00:14:06.650 --> 00:14:26.420
Jacob l Boundless: So now, solidity is obviously very good for interacting with on-chain state and doing work and like that. So you can sort of take that existing logic ingest that verifiable block hash that we generated with Ccasper and then compute over that data. So in practice, this sort of looks like, okay, I'm going to take these proofs.

53
00:14:26.420 --> 00:14:43.889
Jacob l Boundless: I can take this block hash to any chain regardless of an L 2 or an alternative. l. 1. Take that verifiable block hash and start computing over ethereum state, not just over what that current block hash is, but we also have the ability to look back in time.

54
00:14:44.030 --> 00:15:04.530
Jacob l Boundless: So you can look back all the way to Denkun. Currently, you can look at events within these blocks as well, and you can do ranges. So you don't have to just look at one single block. You can sort of look at events over a range of blocks as well to sort of what I call endlessly compute over ethereum state, regardless of where you are.

55
00:15:05.200 --> 00:15:14.629
Jacob l Boundless: And the cool thing here is that it doesn't stop at ethereum. We wanted to start with ethereum, because it's been a long known pain point with some of our partners.

56
00:15:15.230 --> 00:15:24.779
Jacob l Boundless: To be honest, it's the hardest one to do, not from a cost perspective, but from a technical complexity perspective. I think we've all dealt with ethereum consensus in the past.

57
00:15:24.860 --> 00:15:46.200
Jacob l Boundless: It's complicated. Big shout out to the multiple consensus teams. We talked to big shout out to the multiple people at the Ef that helped us in this process. But the good thing is going to an Ll. 2 can be actually much easier. You're confirming, much less right? You're like, sort of just verifying that a

58
00:15:46.450 --> 00:15:58.650
Jacob l Boundless: sequencer on that L. 2. It's signing off on blocks, and they're included in the da layer. And we've actually started to prove some more chains already. We just haven't publicly announced it yet, but we're hoping to make those available as well.

59
00:15:59.566 --> 00:16:15.950
Jacob l Boundless: And again, you know, I think in the past Zk has been more expensive. But we're just having this cascading, compounding effect of improvements with, you know, open markets and and better software. And you know, possibly like a 6 fpgas, that even now, to prove

60
00:16:16.310 --> 00:16:20.299
Jacob l Boundless: these roll ups is not too bad. So this was a metric, you know, we took

61
00:16:20.430 --> 00:16:29.049
Jacob l Boundless: last or in March, which is probably already outdated, and I should update this. And you know we're proving a base transaction for 1 100th of a cent.

62
00:16:29.270 --> 00:16:37.190
Jacob l Boundless: So it's starting to become economically feasible. And and with the boundless market. We can sort of subsidize these costs for people to start using before.

63
00:16:37.820 --> 00:16:53.940
Jacob l Boundless: And sort of what we envision with all of this. Yeah, I can answer questions at the end. So what we envision all this is, you know. If you remember, a few years ago there was like sort of this vitalic blog post around the proof. Singularity.

64
00:16:54.070 --> 00:16:58.299
Jacob l Boundless: Once we start proving a chain, we can sort of combine these proofs

65
00:16:58.510 --> 00:17:18.780
Jacob l Boundless: and imagine, you know, we're proving arbitrum one. In a theory, Mainnet. We now have one proof that represents that state, and if you have that proof on OP mainnet, you can now start talking to both those chains in a trustless way, just by reading this block hash. So we sort of prove a chain. And now you get outbound gateways to every other chain.

66
00:17:22.940 --> 00:17:31.789
Jacob l Boundless: so we think this, you know, can lay the foundation, for you know, more trustless interoperability. A bonus here is, we can start to get sort of

67
00:17:31.790 --> 00:17:54.870
Jacob l Boundless: like clients for each chain, which we find interesting for wallet providers less relevant to this group. But you know, if we paired this consensus proof and execution proof. Technically, you could verify this proof in the browser. You can actually do this on our website right now. And you're now tracking that the ethereum validator set is, you know, honestly providing you block hashes and whatnot, and can be safer for wallets. Possibly.

68
00:17:55.220 --> 00:18:17.170
Jacob l Boundless: So we think, you know, with this we reduce bridging cost by, you know, not having to pay sort of like fees on multi sigs and whatnot we reduce trust because you're not trying to. You're not. You're now trusting the validator set in our Zk system to be fair, but not a small group of people, and we think we can start to open new applications, you know, doing cross-chain queries and whatnot.

69
00:18:17.460 --> 00:18:46.870
Jacob l Boundless: Our commitment here is to maintain this fully working Ck client to operationalize it, which we're in the process of doing right now, we want to audit, maintain it. So even in the next fork, we'll continue to work. And then we're actually gonna try running it as a public good for as long as possible. We ran a little donation campaign, and we raised over 900 K. Usd. To cover the proving cost. Cool thing is on the market right now.

70
00:18:47.090 --> 00:18:58.019
Jacob l Boundless: People just do them for free, which is, which is really nice. And then we also have this additional, you know mainnet incentive that'll help subsidize proving as well. So

71
00:18:58.350 --> 00:19:08.379
Jacob l Boundless: you know, it's really hard to say how these costs will adjust over time. It is an open market. We don't control it, so I can't, like.

72
00:19:08.590 --> 00:19:20.789
Jacob l Boundless: you know, fix it, or or anything. But I think at this point I I'm willing to say that these proofs will be up and running for at least the next year. And that might be, you know, just being underestimating everything.

73
00:19:21.932 --> 00:19:49.089
Jacob l Boundless: You know, we're working with a great set of partners as well. Everyone on this list is is interested in integrating it and supporting us. And we're pretty much open to working with anyone at this point. So if you want to, you know, use this. I'm in the this interrupt group, feel free to reach out to me. Happy to provide an Api key and assistance in in integrating this into anyone's protocols.

74
00:19:50.690 --> 00:19:54.569
Jacob l Boundless: Yeah, that's the that's the presentation.

75
00:19:54.700 --> 00:20:01.070
Jacob l Boundless: I can start going through question questions.

76
00:20:02.460 --> 00:20:03.710
Orest Tarasiuk (t1): Chat, or Jill.

77
00:20:04.270 --> 00:20:05.150
Jacob l Boundless: Yeah.

78
00:20:06.600 --> 00:20:21.189
Jacob l Boundless: so yeah, what are the latencies of the proofs? Great question. So currently, most of the latency at full tilt actually comes from the need to wait 12 min for an epoch to finalize.

79
00:20:22.870 --> 00:20:27.920
Jacob l Boundless: I am personally a huge fan of 3 slot finality

80
00:20:28.070 --> 00:20:35.840
Jacob l Boundless: for this purpose of improving that that is just my opinion. I understand there's trade-offs here, but that is actually most of the latency.

81
00:20:35.940 --> 00:20:42.389
Jacob l Boundless: The cool thing also is, we're not actually proving bound on any giant proofs anymore. We're we're bound on execution.

82
00:20:42.640 --> 00:21:02.859
Jacob l Boundless: So the execution for this proof at Max Tilt takes about 12 to 15 min. But you can sort of start that before the epoch finalizes and whatnot, we do have a set of improvements coming that should greatly improve this. We're releasing a v 3 really soon. That gives like a 3 x bump to the executor performance.

83
00:21:02.860 --> 00:21:19.399
Jacob l Boundless: And then Jordi, by Lena and the Z team have done just phenomenal work around this. And we're huge fans of what they're doing around like getting this execution up to up to Gigahertz, essentially, which could reduce that 16 min of execution down to just a few.

84
00:21:21.420 --> 00:21:28.950
Jacob l Boundless: But yes, definitely is a trade off with this approach of you need to wait the 12 min for the epoch to be finalized. And I understand that's.

85
00:21:28.950 --> 00:21:36.000
Orest Tarasiuk (t1): And another 15 min for the execution? Or why don't you just execute continuously generate traces, and then prove.

86
00:21:36.390 --> 00:21:41.938
Jacob l Boundless: Yeah, so we can paralyze essentially. So, it would be a 3 min that feature is not in. It's in a Pr right now.

87
00:21:42.340 --> 00:21:43.090
Jacob l Boundless: but yeah.

88
00:21:43.710 --> 00:21:52.789
Jacob l Boundless: great point. And it is a trade off when using this stuff. What's the proving time for a 30 million gas ethereum block

89
00:21:52.910 --> 00:21:55.030
Jacob l Boundless: on an H 100.

90
00:21:55.946 --> 00:22:21.763
Jacob l Boundless: So with these proofs, we're, we're really the the gas of a block does not change anything, because the 95% of the proving time just goes from checking the 1 million validator keys. So the proofs, regardless of block size, are pretty similar. I think they fluctuate one to 2% up down right now in total cycle costs. But it's

91
00:22:22.970 --> 00:22:26.130
Jacob l Boundless: that thank you for the kind words heart

92
00:22:27.309 --> 00:22:40.780
Jacob l Boundless: for the l. 2 proofs. That will then be dependent on execution size. Currently, you know, we can do a batch of, I think, a batch of

93
00:22:41.100 --> 00:22:42.570
Jacob l Boundless: maybe like

94
00:22:43.645 --> 00:22:50.960
Jacob l Boundless: I think it's like a hundred 50 blocks on base right now is 20 billion cycles. So that would take

95
00:22:51.140 --> 00:23:19.900
Jacob l Boundless: 5 to 10 min if you started reducing the batches like, let's say you just want to prove like one block that a transactions occurred that is probably getting around those real time proving numbers that you're you're seeing around. So 8 to 10 seconds, we should have more clarity soon on what those actual numbers are. We actually just got our like data center set up. We'd only been running stuff in the cloud, and we're hoping to post some numbers around that that soon.

96
00:23:21.610 --> 00:23:26.349
Jacob l Boundless: What's the best? Yep, that's my telegram. Feel free to reach out.

97
00:23:27.123 --> 00:23:35.856
Jacob l Boundless: Nice to see you again, Jim, do you match old light client Api, basically. Json, Rpc, supported.

98
00:23:36.480 --> 00:23:41.081
Jacob l Boundless: we don't have any out of the box. Json, rpc, support.

99
00:23:41.880 --> 00:24:06.989
Jacob l Boundless: right? With, like, how easy to migrate from? Helios. Okay? So yeah, yeah, so we actually are working on this as well. So we have the proof. And we have that audited and whatnot. And we're trying to get the times down right now. But we also are going to provide an Edm contract where you could sort of like set an anchor. You have to set like a trusted anchor, essentially just right with any other like client. And then you'll just like upload those.

100
00:24:07.090 --> 00:24:24.870
Jacob l Boundless: If you are on a co-located chain of a boundless market, you actually don't even have to like, verify the proof you could just like call call the auction where it's occurring. If it's on a chain that the boundless market is not on, which is not on many right now. You just have to grab the proof from the market and submit it yourself to the chain.

101
00:24:25.790 --> 00:24:27.719
Jacob l Boundless: So we're we're really trying to like.

102
00:24:27.940 --> 00:24:38.440
Jacob l Boundless: I mean, I I'm a product person we're really trying to like, get the full out of the box solution. I'm also, you know, completely open to feedback on other things that might be useful to to make this more usable from you all.

103
00:24:39.379 --> 00:24:49.230
Jacob l Boundless: What's the latency for? Just the Evm. Oh, no, answered dreams. Shorter batch submissions, yes, 100% aligned.

104
00:24:50.350 --> 00:24:54.199
Jacob l Boundless: Yeah. Any any other questions.

105
00:25:04.460 --> 00:25:05.390
Jacob l Boundless: Sweet?

106
00:25:06.080 --> 00:25:18.640
Jacob l Boundless: Yeah. Thank you. Guys again, this is really short, happy to answer any other details. And again, we really just view this as a public good for the the ethereum ecosystem and wider.

107
00:25:19.010 --> 00:25:30.339
Jacob l Boundless: That's there's not really any like catch. You can see that the proofs being generated on the market right now, and we just want to get it in the hands of as many people as possible. That's the that's the dream around this.

108
00:25:31.530 --> 00:25:32.419
Joshua Rudolf: This is great.

109
00:25:32.610 --> 00:25:37.130
Joshua Rudolf: Thanks so much, Jacob. Maybe we can have you back in a in a month or 2 for some updates on.

110
00:25:37.130 --> 00:25:49.409
Jacob l Boundless: On how things are going. Yeah, yeah. And yeah, just reach out to me if there's any feedback or or things that like might be interesting for people to use. I'm all ears to make it as easy as possible to use.

111
00:25:50.680 --> 00:25:58.999
Joshua Rudolf: Awesome cool up. Next on the agenda we have some updates on the open, intense framework.

112
00:25:59.310 --> 00:26:02.609
Joshua Rudolf: Maybe we can start with Pepe if you're available.

113
00:26:03.570 --> 00:26:12.100
Pepe Blasco: Yeah. Hello, Josh, thank you for the intro so sadly. I don't have such a fancy presentation as Jacob. Sorry for that. I mean.

114
00:26:13.200 --> 00:26:36.439
Pepe Blasco: that's the problems are going. Second, I guess so I will assume a lot of you are already familiar with the oif, the open, intense framework. But just a quick summary is basically as a way to standardize intents, to facilitate interaction between clients, solvers and different people in the in the ecosystem in the space.

115
00:26:36.570 --> 00:27:01.219
Pepe Blasco: So it's been going for a while. It's a public goods initiative as well, where different companies are collaborating. I see people in this call that I've been meeting and having conversations with in different groups, and I want to share a little bit on the current status and progress, because we are in a very pivotal point of of the development.

116
00:27:01.760 --> 00:27:11.600
Pepe Blasco: So first, st we have been doing or suggesting some changes into a 7, 6, 8, 3 standard, which

117
00:27:11.750 --> 00:27:16.959
Pepe Blasco: is basically optimizing for performance and completeness. So

118
00:27:17.090 --> 00:27:30.220
Pepe Blasco: I'm not sure if anyone here, or checking the recording is actively using this standard or similar ones, or are considering using this standard. So you have a wallet or a cross chain

119
00:27:30.470 --> 00:27:31.540
Pepe Blasco: product

120
00:27:31.640 --> 00:27:50.689
Pepe Blasco: feel free to reach out because we really wanna check that. All the changes we are doing are going towards like something practical and useful for everyone. So it's now your opportunity to really adapt things to make your life easier. And we wanna make it happen

121
00:27:51.346 --> 00:28:14.389
Pepe Blasco: aside from the standard itself, we are working on a set of tooling for the ecosystem, the main one obviously being the solid contracts. As a reference implementation and as as a core element in the ecosystem. We already talking with partners that are interested in in using these contracts, and therefore we've

122
00:28:14.520 --> 00:28:25.493
Pepe Blasco: adopted them already to be very modular, so we are very confident in the capacity of of the current architecture to a scale to different use cases,

123
00:28:26.240 --> 00:28:32.530
Pepe Blasco: from like cross chain swaps, payments, any kind of

124
00:28:32.730 --> 00:28:38.409
Pepe Blasco: and specifically cross chain utility can benefit from this.

125
00:28:38.890 --> 00:28:55.099
Pepe Blasco: We are also working on some off chain systems, and the most clear one being a reference implementation of a solver. So very quick summary of what an intent is to to be able to understand this

126
00:28:55.100 --> 00:29:13.679
Pepe Blasco: user will say, I want to receive 100 Usdc on base by giving 100 usdt. On ethereum. So someone will pick that intent, fulfill it. And once that fulfillment is proven, then they will unlock the the money deposited on the original chain.

127
00:29:13.790 --> 00:29:42.069
Pepe Blasco: So there are different players in the space. Most of them participate in this forum. My sillify we have across. We have, like more people in the in the space but we are creating a baseline solver so that new chains, new ecosystems can onboard fully by like their own, and flowing. This expanding in a molar way and having a basic solver.

128
00:29:42.410 --> 00:30:01.459
Pepe Blasco: We obviously aim at this being competitive and good, but it is not a direct kind of competition of taking out the different players in the space. The oif is an open, intense framework, and that means that it will empower everyone in the in the ecosystem.

129
00:30:01.830 --> 00:30:16.790
Pepe Blasco: Along with that, the the that solver we are also standardizing some Apis and building sdks around it Apis mainly. Now for off-chain components. So

130
00:30:16.790 --> 00:30:33.429
Pepe Blasco: you probably caught up if you want to send 100 usdt from ethereum to 100 Usdc. On base. There will be a fee somewhere in order to get that fee in order to understand what the different solvers are going to offer you. We are

131
00:30:33.570 --> 00:30:52.720
Pepe Blasco: standardizing an Api that can connect to those different solvers so that wallets and users don't have to be implementing 5 different interfaces for connecting to a different protocols, and rather have a unified one that is fully compatible with with every single player.

132
00:30:52.910 --> 00:30:54.000
Pepe Blasco: And

133
00:30:54.370 --> 00:31:07.070
Pepe Blasco: along with this, obviously, when you get the quote, you will get several quotes, and you will be able to submit that intent. We are also working on that along with status updates and more quality of life elements.

134
00:31:08.130 --> 00:31:13.919
Pepe Blasco: This, when we are talking about all of this, we identified the clear need of

135
00:31:14.380 --> 00:31:23.830
Pepe Blasco: some sort of aggregation service. So we are also working on an aggregator service that is fully of chain to help

136
00:31:24.090 --> 00:31:48.729
Pepe Blasco: applications communicate with all the different players in the ecosystem through this aggregator. This is fully optional. Okay? Like, I understand, because we internally have also had a lot of discussions about risk for centralization. This is a fully optional model. You can still connect to the solver or put your intents on chain. This is just a helper element

137
00:31:48.730 --> 00:31:54.759
Pepe Blasco: for players in the space that may want to integrate more easily for for their users.

138
00:31:54.760 --> 00:32:19.421
Pepe Blasco: So, as you can see, we are building in different areas. I will recommend, and I will ask if you are building in this ecosystem, or, if you are interested in participating, please reach out to to Joshua, to Josh directly. He's coordinator. A lot of things we can get in touch, and the next couple of weeks are gonna be pivotal. We do have

139
00:32:20.100 --> 00:32:37.129
Pepe Blasco: a pretty good speed in terms of of development and pretty high expectations for deliveries over the next couple of quarters. So if you want to join the party, feel free to reach out, and we are super happy to collaborate with everyone in the space.

140
00:32:40.430 --> 00:32:49.259
Joshua Rudolf: Thanks so much, Pepe. A great update. I think we have one of the other key oif contributors in the room, Jim, if you're available. Did you want to share anything?

141
00:32:49.540 --> 00:33:07.490
Jim | LI.FI: Yeah, I mean, I think Pepe said it the best. So I won't kind of repeat it. But yeah, if anyone's interested in collaborating. I think we shared some details there, and we'll we'll certainly refine the process, I think, just like some more tactical updates on our side. We have been working on

142
00:33:07.909 --> 00:33:21.180
Jim | LI.FI: having the oaup support, the finalized 7, 6, 8, 3 specification. So that's been a a big effort for us. Want to make sure that that comes out of the box. And of course we're adhering to

143
00:33:21.260 --> 00:33:25.349
Jim | LI.FI: standardized interfaces across the whole ecosystem.

144
00:33:25.490 --> 00:33:49.830
Jim | LI.FI: And then the second thing is that we are also working really deeply with the Wonderland team and on the Kohaku wallet. I know big kind of requirement has been multi chain inputs. So the ability to, if you have a similar asset on different chains, be able to express an intent that basically combines all of that. And I think that kind of solves the issue that

145
00:33:49.940 --> 00:34:19.079
Jim | LI.FI: I think we discussed a few months back around this, like fanning out of assets. It's like, if you have a home chain. But you start doing a bunch of intents on some other chains. You slowly start accumulating assets on a ton of other chains that maybe you don't want assets on the finalized state. And so this is kind of just like a simple, cleanup method to simplify that complexity. So that's something that we're working hard to add to the oef, because we know it's a huge potential Ux problem in the future.

146
00:34:26.630 --> 00:34:32.670
Joshua Rudolf: There's a question from for Breece in the chat. Maybe I guess I could try to answer it. Maybe Pepe or Jim.

147
00:34:32.670 --> 00:34:53.700
Pepe Blasco: Yeah, let me open it. It's the plan, for I have to support. Non, evm, change from the get. Go right now, for, like the very 1st milestones, probably not, since the main implementations for the contracts are in solid. But we already have in the code base, I think, mostly inherited from the 5, or a calls from like

148
00:34:54.040 --> 00:35:08.330
Pepe Blasco: Bitcoin, for instance. So via standards, the concept is ready. If a player, or like in this case, if coinbase were to be interested in non evms, I'm pretty sure we can have the conversation to like.

149
00:35:08.470 --> 00:35:15.279
Pepe Blasco: adapt roadmaps, timelines, and and priorities to to accommodate for real world needs.

150
00:35:20.380 --> 00:35:50.170
Hart Lambur: I might also add to Fabrice's question, there would be a need to like create a 7, 6, 8, 3 standard for non evm, too, like like an Svm standard, which I think is a new thing. I don't think anyone's created like a standard across Evms yet. So I'm excited to do that. I think it'd be fun. But yeah fabric, I think there's there's something that should get done there, and it's very much on people's roadmap. It's just a kind of a new thing, too.

151
00:35:50.930 --> 00:36:01.779
Pepe Blasco: Yeah, just just for reference, our aggregator implementation is using. The cross chain standard address.

152
00:36:01.980 --> 00:36:11.520
Pepe Blasco: I don't remember the exact number of the standard, but it already is prepared for Bitcoin, stellar, Cardano.

153
00:36:11.750 --> 00:36:14.359
Pepe Blasco: All their ecosystems, non evm, based.

154
00:36:27.750 --> 00:36:34.510
Joshua Rudolf: Cool. Okay, I think that was a solid update on the oif. Unless there's anything else we can keep on going

155
00:36:35.880 --> 00:36:39.729
Joshua Rudolf: next up. I think we have some words from t. 1.

156
00:36:41.610 --> 00:36:46.388
Orest Tarasiuk (t1): Yeah, thank you so much, Josh. Thank you guys for having me again.

157
00:36:46.980 --> 00:37:00.880
Orest Tarasiuk (t1): I'm super happy. We've just had Jacob from boundless, because at t 1 we are trying to also find a niche on the whole spectrum of trade-offs between like this

158
00:37:00.880 --> 00:37:18.179
Orest Tarasiuk (t1): super hard core native interoperability and the full on, trust me. Bro models and this is I think, basically in the same vein as Jacob's assumptions. Hey? How can we make

159
00:37:18.240 --> 00:37:31.530
Orest Tarasiuk (t1): and daps living on this one l. 2, maybe one that already exists, probably based on, or arbitrum or super chain or whatnot. Talk to adapt living on another l. 2 that already exists.

160
00:37:31.650 --> 00:37:47.200
Orest Tarasiuk (t1): and and and be realistic and pragmatic about it today, and not hoping that all of the big L twos adopt our fancy based and and native. Roll up in architectures tomorrow.

161
00:37:47.650 --> 00:37:59.529
Orest Tarasiuk (t1): And so we try to bring that about in a slightly different manner where we, instead of focusing on trustlessness with zk

162
00:38:00.231 --> 00:38:14.559
Orest Tarasiuk (t1): where we like like, I guess boundless. Try and bring block hashes from different L twos into your home chain. We instead focus on the straight up spectrum on being fast

163
00:38:14.710 --> 00:38:15.543
Orest Tarasiuk (t1): and

164
00:38:17.470 --> 00:38:44.179
Orest Tarasiuk (t1): I guess nowadays, when when you say fast, you can't really have this aspiration of waiting for finality from the perspective of Deal one. That is the 12.8 min for an epic finalization. If you want to have a real use. Case a la 7, 6, 8, 3 you know. Couple of seconds of delay for bringing stuff, cross chain.

165
00:38:44.290 --> 00:38:51.689
Orest Tarasiuk (t1): And so instead, at at at the one we try and find a way of bringing about

166
00:38:51.790 --> 00:39:19.669
Orest Tarasiuk (t1): what what they would call permissionless interoperability or opt in free composability between existing L. Twos and the l. 1 via having some metrics of When do we deem a certain state in a certain contract on a certain chain as sufficiently finalized, and we expose that to some sort of shared infrastructure, cross chain, infrastructure.

167
00:39:19.960 --> 00:39:36.324
Orest Tarasiuk (t1): and this shared view. We aim to actually prove to the l. 1 and every l 1 block. So the idea here is that if you are able to have your

168
00:39:37.040 --> 00:39:41.930
Orest Tarasiuk (t1): question infrastructure, layer reorg, together with the l. 1.

169
00:39:42.100 --> 00:40:07.019
Orest Tarasiuk (t1): If the l. 1 ever were to reorg, you don't need to wait for l. 1's finality to credit, for instance, deposits, or to credit any events that you listen for on the l. 1 to your chain, because, you know, you will reorg so it's fine. And so the only thing you still need to care about is proving to the l. 1 the thing that happened in your chain.

170
00:40:07.090 --> 00:40:24.550
Orest Tarasiuk (t1): And so we try and make this possible via using tes that actually are able to prove basis and arbitrums and optimisms state to the l 1 in a matter of milliseconds rather than 15 min.

171
00:40:25.050 --> 00:40:30.340
Orest Tarasiuk (t1): And so, yeah, the whole idea is, instead of the current, infra

172
00:40:30.772 --> 00:40:59.439
Orest Tarasiuk (t1): situation where we have those different roll ups, and we can go via the l. 1, and have a full on native interop, but at the expense of waiting for for hours basically, or only being restricted to having solve us fill very application specific intents. We want to create this layer that would have a view into other roll ups and convince the l. 1 about its view of the other roll ups.

173
00:41:00.010 --> 00:41:12.154
Orest Tarasiuk (t1): Now, yeah, what is interesting about this approach? I would say. An interesting item is the how to make this secure, and so

174
00:41:12.680 --> 00:41:35.099
Orest Tarasiuk (t1): of course, these can be broken and they will. And so you don't want to just have a tee convince Dl one about arbitrum state right arbitrum holds a lot of Tvl, and you want to enable your users to be able to tap into it without being bound by the security of a of an enclave.

175
00:41:35.120 --> 00:41:42.880
Orest Tarasiuk (t1): And so to that end, we came up with this idea of having different roles

176
00:41:43.130 --> 00:42:06.079
Orest Tarasiuk (t1): for people who are running, maybe just a sequencing node that orders transactions and is crypto economically secured using something like abs. And then there's a separate role just executing those blindly sequenced transactions that are, for instance, hey, bring me this

177
00:42:06.380 --> 00:42:18.180
Orest Tarasiuk (t1): arbitrum contracts and methods. Output for a given arbitrum block into the cross-chain liquidity layer.

178
00:42:18.510 --> 00:42:48.030
Orest Tarasiuk (t1): and they would be doing this within a trusted execution environment. But in a way that's reproducible. So the critical item here, in order to actually be able to apply crypto economic security is to know what the output is supposed to be in a deterministic manner, such that if someone breaks this determinism they'd be able to be attributed this fault to

179
00:42:48.120 --> 00:42:52.530
Orest Tarasiuk (t1): which enables you to slash them, for instance, so detect it after the fact.

180
00:42:52.720 --> 00:43:13.150
Orest Tarasiuk (t1): And this is unfortunately something you can't have with confidentiality, with using for instance, tes for confidentiality, because leaking information is not attributable, but claiming that arbitrum's smart contract. ABC had this output at this block height is an attributable offense.

181
00:43:13.530 --> 00:43:42.830
Orest Tarasiuk (t1): And so this is a second role that you can envision where a crypto economic budget can be applied. And now your otherwise glass ceiling for security would be the the stake. And so you don't want to be bound by that, either. And so and this design I propose a trade off that kind of complements boundlesses, maybe, and that we only require SDK

182
00:43:43.000 --> 00:43:53.199
Orest Tarasiuk (t1): of a State transition in in the system. Once the value at risk approaches the crypto economic security budget.

183
00:43:53.300 --> 00:44:08.649
Orest Tarasiuk (t1): And so this enables the system to proceed under most circumstances, and only every now and then require this like super strongly aggregated Zkp to reset the value at risk counter.

184
00:44:08.780 --> 00:44:21.370
Orest Tarasiuk (t1): and it would only need to be halted should some situation, some user require a very, very valuable set of transactions to happen very fast, one after the other.

185
00:44:22.050 --> 00:44:40.779
Orest Tarasiuk (t1): And so, yeah, this is the idea I wanted to present to you guys and get your feedback. Get your thinking, and my aspiration is to try and fill all of the potential niches on the trend of spectrum and hopefully have something for every apps, needs.

186
00:44:47.870 --> 00:44:48.750
Joshua Rudolf: Just one quick question.

187
00:44:48.750 --> 00:44:50.010
Orest Tarasiuk (t1): Any questions.

188
00:44:50.010 --> 00:44:54.520
Joshua Rudolf: Yeah. Sorry if I missed this. What is the next big milestone for you guys? If you're able to share.

189
00:44:55.200 --> 00:45:20.209
Orest Tarasiuk (t1): Oh, yes. So the next big mess, and for us is actually going to be bringing what we have life on testnet today. A an Erc 7, 6, 8, 3 testnet that allows Phyllis to be repaid roughly in a matter of seconds rather than the otherwise common. 1 h, ish delay

190
00:45:20.320 --> 00:45:21.440
Orest Tarasiuk (t1): to Mainnet.

191
00:45:21.660 --> 00:45:42.340
Orest Tarasiuk (t1): So bring that to my net. And this is just a demo of what you can do with the primitive of this sort, where basically, any developer may require that t 1 bring any fact about any supported chain to their home chain.

192
00:45:42.800 --> 00:46:08.679
Orest Tarasiuk (t1): And so one way of using this primitive is to convince, and a 7, 6, 8, 3 escrow contract about the fact that the fill happened on the foreign chain. Right? And then the second big milestone is gonna be expanding. The use cases, or like adding more use cases that in particular allow developers to require rights

193
00:46:08.720 --> 00:46:16.209
Orest Tarasiuk (t1): to happen in this asynchronous way in this best effort way. That is a fundamental

194
00:46:16.590 --> 00:46:25.416
Orest Tarasiuk (t1): barrier to not having a shared sequencer, but that seems, in my estimation to be a good trade off in terms of

195
00:46:25.920 --> 00:46:27.420
Orest Tarasiuk (t1): feasibility.

196
00:46:30.810 --> 00:46:33.530
Orest Tarasiuk (t1): Victor, you have your hand raised.

197
00:46:35.290 --> 00:46:51.320
Victor | RISC Zero and Boundless: Yeah, can you hear me question, basically, is like you mentioned the idea of of requesting Zkp when the value kind of like at risk reaches some kind of crypto economic security budget threshold.

198
00:46:51.785 --> 00:46:53.639
Victor | RISC Zero and Boundless: What I was thinking about there is.

199
00:46:53.770 --> 00:47:02.419
Victor | RISC Zero and Boundless: in addition to costs which kind of are definitely non-trivial, but also kind of lower than we expected, maybe a few years ago.

200
00:47:02.725 --> 00:47:14.269
Victor | RISC Zero and Boundless: There's the latency considerations as well, which are not which I think the latency I'm really thinking about is kind of the one I'm the one we talked about earlier, which is like, if you want to read from

201
00:47:14.270 --> 00:47:35.100
Victor | RISC Zero and Boundless: ethereum l. 1, and you want to use a Ckp to do so. You don't really have a way to do so unless until you wait for a finality, or you. Maybe you accept a smaller subset of the consensus set like a smaller set of associations. But then you don't get the same security guarantees. Basically, that consensus itself has a latency that seems like it would be

202
00:47:35.706 --> 00:47:41.669
Victor | RISC Zero and Boundless: going beyond the thresholds that you're trying to achieve with your architecture.

203
00:47:42.670 --> 00:47:46.540
Victor | RISC Zero and Boundless: Have you been, I guess. What are your thoughts on that? Sorry for my, as a question.

204
00:47:47.180 --> 00:47:51.043
Orest Tarasiuk (t1): Yeah, excellent. So let me paraphrase, if I got correctly

205
00:47:51.670 --> 00:48:05.219
Orest Tarasiuk (t1): maybe you can have this like fast interop with the l. 1. But you will be bound by the fact that the l. 1 needs finality because otherwise it could reorg. Is this is this part of the question.

206
00:48:05.830 --> 00:48:23.219
Victor | RISC Zero and Boundless: Which obviously you could you discuss addressing that by the idea of having the L 2 reorg with the l. 1. And I guess I'm curious what your thoughts about how that plays with the kind of zk, as needed way of doing things.

207
00:48:23.900 --> 00:48:41.550
Orest Tarasiuk (t1): Yeah, okay, I see. I see. Yes. So, yeah, how we treat real. We react together with the other one. So that's taken care of doesn't work for the real life, but it works for change. How we how this is compatible with on demand. Ckp is in in the nature

208
00:48:41.550 --> 00:48:58.470
Orest Tarasiuk (t1): of this variant of a kind of multi prover system. I'm not suggesting an architecture like Vitalik and Nethermind and Surge and Tyco people are suggesting when it comes to combining te and zk

209
00:48:58.590 --> 00:49:02.130
Orest Tarasiuk (t1): to mean, Hey, we need some quorum.

210
00:49:02.420 --> 00:49:09.629
Orest Tarasiuk (t1): so that we deem what they say as true instead, what I'm suggesting is, we trust, the tee.

211
00:49:09.880 --> 00:49:18.640
Orest Tarasiuk (t1): and, to be precise, we trust the quorum of stake restaked towards the tee enabled avs

212
00:49:20.000 --> 00:49:24.950
Orest Tarasiuk (t1): up until what the restaked slashable stake is.

213
00:49:25.390 --> 00:49:35.019
Orest Tarasiuk (t1): and as the system detects that the statements made based on this trust level

214
00:49:35.300 --> 00:49:39.000
Orest Tarasiuk (t1): are becoming so valuable in aggregate

215
00:49:39.140 --> 00:49:44.400
Orest Tarasiuk (t1): that they would soon exceed the crypto economic budget beneath it.

216
00:49:44.740 --> 00:49:52.780
Orest Tarasiuk (t1): The system would incentivize market participants to voluntarily also submit a Zkp on top.

217
00:49:53.040 --> 00:49:58.419
Orest Tarasiuk (t1): and if the Zkp ever is submitted, it would reset the value at risk to 0,

218
00:49:58.550 --> 00:50:13.300
Orest Tarasiuk (t1): and it may never be submitted. At which point I think the situation you might be having in mind would happen where the system would need to halt in order not to exceed the crypto economic security.

219
00:50:14.060 --> 00:50:25.740
Orest Tarasiuk (t1): So the idea Tldr is, let us only require a Zkp when needed when needed is based on a crypto economic calculation, and we try to make it rare.

220
00:50:26.950 --> 00:50:46.070
Victor | RISC Zero and Boundless: Yeah. And that makes sense. I think what what my! The core of my question may be like. It's not clear me what that Zkp attests to so, for example, like in the downless case, we're talking about the face, the with the signal attesting to the finality gadget going through. So the Casper finality gadget we're is what we're running

221
00:50:46.310 --> 00:50:50.330
Victor | RISC Zero and Boundless: versus in this case. If you haven't reached finality yet.

222
00:50:50.540 --> 00:50:54.789
Victor | RISC Zero and Boundless: it's unclear to me what you would use zk to attest to.

223
00:50:56.560 --> 00:51:08.770
Orest Tarasiuk (t1): I think Josh might be signaling. We have 3 more speakers to go, but I would love to take this offline. Please hit me up on my telegram or my twitter. I put both links in in the chat. Thank you, guys.

224
00:51:10.850 --> 00:51:12.690
Joshua Rudolf: Thanks. Yeah. Sorry to cut you guys short.

225
00:51:13.130 --> 00:51:21.839
Joshua Rudolf: Cool up. Next we have route scan and interoperable addresses. Aka chain specific addresses. Hey, Jack.

226
00:51:24.350 --> 00:51:26.040
Joshua Rudolf: you're muted if you're talking.

227
00:51:26.560 --> 00:51:28.249
Jaack: Oh, yeah, sorry. Can you hear me?

228
00:51:32.050 --> 00:51:33.680
Jaack: Can you see my screen.

229
00:51:34.670 --> 00:51:35.320
Joshua Rudolf: Perfect.

230
00:51:36.090 --> 00:51:41.045
Jaack: Okay, yes. So we

231
00:51:44.270 --> 00:51:53.578
Jaack: As as block explorers, we, we are heavily focused on like and and watching how the

232
00:51:54.350 --> 00:51:57.590
Jaack: you know the ethereum interrupt is is going forward.

233
00:51:57.780 --> 00:52:11.619
Jaack: And also we, we've had a lot of issues in general when it comes to indexing more and more chains, especially under a unified interface which we have.

234
00:52:12.259 --> 00:52:21.270
Jaack: There were some issues that I also, you know, commenting on the specific on some on some specific

235
00:52:21.860 --> 00:52:27.320
Jaack: erc, that's been added, or that's been, you know, merged as a draft

236
00:52:28.160 --> 00:52:37.449
Jaack: and and so I you know, I thought the best idea would be to actually, you know, get in and dive deep onto some ears to give our feedback.

237
00:52:37.500 --> 00:53:00.139
Jaack: and so that the drcs are aligned not only to wallets, Sdks and info providers like Rpc. Providers, but also for box that need to ultimately show analysts, users and developers what's happening and help them debug

238
00:53:01.185 --> 00:53:06.010
Jaack: so, after you know, after going to interrupt lis.

239
00:53:06.210 --> 00:53:10.460
Joshua Rudolf: Real quick. I think you might need to adjust your screen placement. I can kind of cut off right now.

240
00:53:11.010 --> 00:53:15.040
Jaack: Oh, can only see half of your screen better now.

241
00:53:15.220 --> 00:53:15.770
Joshua Rudolf: No, maybe.

242
00:53:15.770 --> 00:53:19.840
Orest Tarasiuk (t1): And maybe make it full screen or something. It's because your screen is huge.

243
00:53:20.120 --> 00:53:22.990
Joshua Rudolf: There we go. Okay, this is better still, small.

244
00:53:22.990 --> 00:53:25.569
Jaack: True full screen. But let me see.

245
00:53:25.780 --> 00:53:28.300
Jaack: let me try and change it. Oh, yes.

246
00:53:29.330 --> 00:53:34.459
Jaack: can you hear? Can you see now better? I don't know why. It was simply

247
00:53:35.043 --> 00:53:55.426
Jaack: sharing the the whole screen. Okay, so so I was, I was saying, we were we're actually looking at many. That account for, interruptes cross chain addresses, and I believe the most one, the the biggest one that I believe is not

248
00:53:55.870 --> 00:54:08.519
Jaack: you know, considerable valued as much as we walk. Explorers 1, 2. Is your C. 7, 7, 8, 5. That it's on chain and on chain identifiers for for chain ids

249
00:54:08.570 --> 00:54:31.730
Jaack: and and so we right now we're trying to understand how to you know. Make it interact with all the other Ercs, especially Erc, 7, 7, 8, 6 about, you know, standard format for crossing messages, and the idea would actually be to like, establish the best way

250
00:54:31.790 --> 00:54:35.589
Jaack: to unify the

251
00:54:36.790 --> 00:54:44.430
Jaack: unify. The interface of the 7, 7, 8, 6, that is now being merged a few days ago, I believe.

252
00:54:44.957 --> 00:54:52.439
Jaack: With with what is currently the draft being added of the Rc. 7, 7, 8, 5,

253
00:54:53.005 --> 00:55:17.750
Jaack: and the the main issue about this discrepancy is that 7, 7, 8, 6 takes into account that there's there's a simple like no mentor and definition. Given to chains like arbitrum dot Eve, for example. But there's no way of classifying those chains.

254
00:55:17.840 --> 00:55:27.975
Jaack: So if I want to send Josh one eve from OP mainnet to to

255
00:55:29.960 --> 00:55:55.040
Jaack: arbitrum. Let's say I can say, Josh dot, if at arbitrum, to send to Josh in a human readable manner, and that's what 7, 7, 8, 6, and 7, 9 3 0. Talk about but what it isn't talked about and it isn't discussed and described in the in the specifics is actually what is the second part of the

256
00:55:55.560 --> 00:56:08.511
Jaack: second part of the address. So we all know that interrupts need to be like, we need to have a specific routing for different chains. And we need to know how to choose between. Like, for example, which Usdc, we need to

257
00:56:08.980 --> 00:56:25.500
Jaack: we need to choose from an array of, or of possible Usdc, that I have on my wallet. And of course, we need also to account for the fact that the

258
00:56:26.230 --> 00:56:32.669
Jaack: the destination address and the destination chains need to be clear from the user side of its side.

259
00:56:32.860 --> 00:56:41.319
Jaack: But and so these 7, 7, 8, 6, and 7, 9, 3 0 solve most of these problems. But the thing is.

260
00:56:41.670 --> 00:56:51.370
Jaack: we have a chance through 7, 75 of like solving, not, I mean.

261
00:56:51.510 --> 00:56:56.490
Jaack: and don't necessarily mean solving, but like solidifying

262
00:56:56.600 --> 00:57:16.549
Jaack: what is now a very precarious method of classifying evm chains, and possibly beyond evm, because right now, the classification of chains like which which id you do? Do I have which Rpc. And box store link

263
00:57:16.790 --> 00:57:23.350
Jaack: is maintained through a Github repo that it's not actively maintained. But it's just

264
00:57:23.560 --> 00:57:37.354
Jaack: open for maintenance when a new, when a new chain comes in and outs a Pr using their data and instead, we have a chance through 775 to actually

265
00:57:39.050 --> 00:57:46.510
Jaack: use ens, or a specific naming, maybe a genetic naming, naming service to

266
00:57:47.290 --> 00:57:52.499
Jaack: create an object of a chain because an object of a chain has

267
00:57:53.490 --> 00:57:58.638
Jaack: their Rpcs. It's Rpcs has a name exchange id

268
00:57:59.600 --> 00:58:24.951
Jaack: some other genetic identifications that can be non evm or evm, and it can have, like a specific attestation that that solves to. How many block explorers are there, and it solves to how many Rpc providers what's their name? And and all kinds of stuff that right now through 7, 7, 8, 6, and 7, 9, 3 0 is not is not

269
00:58:25.400 --> 00:58:41.009
Jaack: you know. Discuss, because it's simply a 7, 9, 3 0 is simply a chance to say arbitrum is this trendy? And that's and that's it. But 7, 75 is actually to be seen as a dictionary for chains.

270
00:58:41.170 --> 00:58:59.289
Jaack: And when it comes to Evm adoption, and and we we've been, you know, we've been struggling with this because we've for the past 6 months. We've been working on the state of the market report by, you know, accounting for how many developers are using and developing how many chains? Josh, you have a question.

271
00:58:59.910 --> 00:59:01.580
Joshua Rudolf: Yeah, sorry to interrupt. And yeah, sorry to be.

272
00:59:01.580 --> 00:59:02.199
Jaack: Yeah, no. No.

273
00:59:02.200 --> 00:59:07.950
Joshua Rudolf: But I just wanted to. Yeah, see if just wanted to flag that maybe we only have one or 2 min left for this. So if you wanted to get to another part.

274
00:59:07.950 --> 00:59:08.440
Jaack: Yeah.

275
00:59:09.530 --> 00:59:16.820
Jaack: yeah, yeah, it's just it's not specifically like, it's just this is just the article. And of course, you can see this in the

276
00:59:16.990 --> 00:59:37.300
Jaack: in the in the link that is being shared within the agenda but the but the main idea is for for us, as route scan to start to champion 7, 7, 8, 5, something that so they can. It can really be like this dictionary of chains that can then be used by by any provider. It can also be used to do heavy research

277
00:59:37.300 --> 00:59:47.679
Jaack: about like, what's actually the state of evm chains being developed. And what is actually the evm adoption. That's now a open questions. Open question, I believe.

278
00:59:47.880 --> 00:59:50.630
Jaack: So. Yeah, thank you. Thank you.

279
00:59:52.510 --> 00:59:58.959
Joshua Rudolf: Thanks, Jack. That was a great overview, much appreciated, and is a good segue to

280
00:59:59.180 --> 01:00:15.549
Joshua Rudolf: what we're going to talk about next, and we may have time for questions at the end. But yes, we have the unruggable team here as well as Wonderland, but maybe we can start with unruggable on their work on the 7, 8, 2, 8 resolver. And yeah apologies. We don't have a lot of time. But see what we can get to.

281
01:00:19.710 --> 01:00:23.210
Ndeto | Unruggable: Hey, everyone! My name is Martin

282
01:00:23.740 --> 01:00:39.819
Ndeto | Unruggable: from unwraggable. We're an independent R&D farm within Ens and the work we presenting today is part of our research, our interop research with a specific focus in

283
01:00:40.080 --> 01:00:43.170
Ndeto | Unruggable: Ens based identity.

284
01:00:43.450 --> 01:00:46.757
Ndeto | Unruggable: So I am here to talk about

285
01:00:47.980 --> 01:00:51.159
Ndeto | Unruggable: Eip 7, 8, 2, 8.

286
01:00:52.100 --> 01:00:54.129
Ndeto | Unruggable: just going to share my screen.

287
01:01:02.988 --> 01:01:04.580
Ndeto | Unruggable: Just a second. Sorry.

288
01:01:24.380 --> 01:01:26.089
Ndeto | Unruggable: Are you able to see my screen.

289
01:01:30.110 --> 01:01:31.170
Orest Tarasiuk (t1): Yep, we can.

290
01:01:33.170 --> 01:01:33.600
Ndeto | Unruggable: Dawson.

291
01:01:34.970 --> 01:01:36.370
Ndeto | Unruggable: So

292
01:01:38.310 --> 01:01:45.519
Ndeto | Unruggable: I think I'm going to skip most of this because, it's been covered in the in the previous

293
01:01:46.490 --> 01:01:56.737
Ndeto | Unruggable: presentations. But yeah, basically, eip 7, 8, 2, 8 introduces a chain specific, human readable addresses. And

294
01:01:57.720 --> 01:02:05.840
Ndeto | Unruggable: this is powered by ens. IP. 11 and erc, 22, 3, 0 4,

295
01:02:06.340 --> 01:02:17.870
Ndeto | Unruggable: which basically allow you to resolve a certain identity to a specific chain. That is, you know, vitalik dot eth on a very on a on the base chain.

296
01:02:18.200 --> 01:02:27.775
Ndeto | Unruggable: and this spec is powered by ens infrastructure. So what

297
01:02:28.820 --> 01:02:37.553
Ndeto | Unruggable: What the resolver really does here is that it works with the coin types that have been specified by ens,

298
01:02:38.950 --> 01:02:45.190
Ndeto | Unruggable: ensip 11, that is, for evm chains, and vip, 44 constants for

299
01:02:45.400 --> 01:02:50.172
Ndeto | Unruggable: non evm chains to get such coin types. That is

300
01:02:50.820 --> 01:03:13.420
Ndeto | Unruggable: for example, ethereum. You'd get a 60 and Polygon 966, and you'd supply this along with an ens identity like Vitalik dot earth to resolve this person's specific chain identity. So what I wanted to present today was the resolver.

301
01:03:14.630 --> 01:03:21.889
Ndeto | Unruggable: We have the Ens. 7, 8, 2, 8 resolver that we've built. And it's basically

302
01:03:22.690 --> 01:03:27.659
Ndeto | Unruggable: a library that allows you to visualize and just

303
01:03:28.570 --> 01:03:32.629
Ndeto | Unruggable: play around with valid 7, 8, 2, 8 addresses.

304
01:03:33.635 --> 01:03:35.949
Ndeto | Unruggable: And it works with a centralized

305
01:03:36.760 --> 01:03:46.740
Ndeto | Unruggable: chain list repo at the moment to resolve these addresses and at the moment it's compliant

306
01:03:47.940 --> 01:03:50.259
Ndeto | Unruggable: with the spec. And

307
01:03:51.790 --> 01:03:58.569
Ndeto | Unruggable: yeah, what we really need at the moment, I guess the ask coming into this was to find

308
01:03:58.730 --> 01:04:04.249
Ndeto | Unruggable: people to collaborate on this with along with 7, 7, 8, 5. As we move.

309
01:04:04.450 --> 01:04:12.859
Ndeto | Unruggable: 7, 8, 2, 8 from a centralized registry. That's chain list to having a decentralized registry. So

310
01:04:13.970 --> 01:04:25.776
Ndeto | Unruggable: if you want to have a look at you know the spec, play around, resolve some names, see how it works. Feel free to just visit the repo and

311
01:04:26.890 --> 01:04:28.663
Ndeto | Unruggable: yeah, contribute.

312
01:04:30.180 --> 01:04:45.653
Ndeto | Unruggable: And yeah, open any issues you find as well. And we are looking forward to any collaboration with some of the guys on the call route scan and Wonderland to work on these initiatives which are really just

313
01:04:46.700 --> 01:04:49.360
Ndeto | Unruggable: quite important to the interop road map.

314
01:04:49.770 --> 01:04:51.419
Ndeto | Unruggable: I'll stop there. Thank you.

315
01:04:55.780 --> 01:04:56.639
Joshua Rudolf: Thanks so much.

316
01:04:57.860 --> 01:05:03.919
Joshua Rudolf: So when I have 2 min left, I think we have the axle team here, Axel. But if

317
01:05:04.390 --> 01:05:09.540
Joshua Rudolf: yeah, we can. We can spend a minute or 2 here, or we can wait until the next call. Maybe I'll leave it to

318
01:05:10.060 --> 01:05:11.949
Joshua Rudolf: you, Ash, if you're.

319
01:05:11.950 --> 01:05:17.770
Ash Ahmed: Yeah, we we can do a super quick thing now, and maybe we could dive more into the tech on the next call. But we could just do a quick demo thing right now.

320
01:05:17.990 --> 01:05:18.969
Joshua Rudolf: Yeah, that'd be great.

321
01:05:19.380 --> 01:05:40.279
Ash Ahmed: Hey? Everyone. Yeah. Ash from Axel building stable coin savings, accounts, super consumer facing and love. All this tech. We did a lot of stuff with intense over the past few months and recognize a lot of people here. I'm going to shut up, and then we have dev on our team who can do a super quick, demo and talk through it. Lots of stuff with tes, lots of stuff with 7,683! Why, 7,702 wallets are better than smart accounts. Stuff like that.

322
01:05:41.470 --> 01:05:43.890
Dev: Hey? Ash? Yeah, thanks.

323
01:05:44.150 --> 01:05:55.689
Dev: So, yeah, we were using 7,702 wallets using alchemy to batch all transactions together for our previous product we were initially using.

324
01:05:55.880 --> 01:06:15.999
Dev: We were initially using sequential processing and also Eos. So we had to take account of all the gas. So this was the most convenient thing for us. I'm currently into these positions. I'm going to just withdraw, and we're seeing transaction times of 300 ms end to end.

325
01:06:16.430 --> 01:06:35.310
Dev: So I can already go to the block processor. And I know that these have gone through additionally, the volume that we can transfer through this through this architecture is beyond insane. We deposited around 100 K. Usdc. And it cost us one cent for the entire process.

326
01:06:35.310 --> 01:06:59.950
Dev: This is in conjunction with our belief that every user should be able to export their wallets. I don't think you'll be able to see this, but we can export private keys, and users will have access to all of these pools. So if they go to Morpho's website and log in through the wallet that they export through us, they'll be able to do anything that they want to with their wallet. And the way we're detecting wallet balances is where

327
01:07:00.030 --> 01:07:27.103
Dev: parsing all Erc 20 and Erc 4, 6, 2 6 logs, so that we make sure that all these all these actions, even if they happen not on our platform, are caught. And we'll have an accurate, an accurate depiction of the user's current status. So yeah, this is honestly like insanely fast. We we were surprised, right? And I think we can handle up to at least

328
01:07:27.920 --> 01:07:33.209
Dev: at least a few 1,000 users in in concurrency if if you want to.

329
01:07:33.686 --> 01:07:37.490
Dev: If when we did our stair stacing. So, yeah, and that's all.

330
01:07:42.090 --> 01:07:46.339
Joshua Rudolf: Perfect thanks. If you want to drop your contact information in the chat.

331
01:07:48.290 --> 01:07:50.260
Joshua Rudolf: and people can follow up with you, Async.

332
01:07:51.200 --> 01:07:52.849
Joshua Rudolf: Much everybody for joining.

333
01:07:53.820 --> 01:07:54.849
Joshua Rudolf: See you next time.

334
01:07:55.690 --> 01:07:56.020
Jaack: Thank you.

335
01:07:56.140 --> 01:07:56.820
Orest Tarasiuk (t1): Thank you.

336
01:07:56.820 --> 01:07:58.740
Orest Tarasiuk (t1): Guys, enjoy. Bye, bye.

