00:08:43	Ahmad Bitar:	Sry
00:08:48	JosepBove:	Reacted to "Sry" with 😂
00:08:50	Mohammad Jahanara:	Reacted to "Sry" with 😂
00:08:53	cyp:	Reacted to "Sry" with 😂
00:09:47	cyp:	would alice@rolllup-name.eth work?
00:09:53	lightclient:	are there other tlds than eth?
00:10:14	Arjun:	Reacted to Sry with "😂"
00:10:27	cyp:	Replying to "are there other tlds..."

yes related to my question: if eth is the only acceptable tld, then we can abstract it
00:10:39	Yoav:	Replying to "are there other tlds..." 

 Sepolia for example will be a separate one
00:10:45	Mohammad Jahanara:	Reacted to "Sepolia for example ..." with 👍
00:10:58	lightclient:	Replying to "are there other tlds…"
we could also assume the same tld is used for rollup id and user
00:11:09	lightclient:	Replying to "are there other tlds…"
eg lightclient.rollupX.eth
00:11:41	lightclient:	Replying to "are there other tlds…"
subdomains were created for this
00:11:48	Nam:	Reacted to "subdomains were crea..." with 👍
00:11:52	Rahul Kothari:	Is this  depending on ENS, which doesn’t support non EVM L2s?
00:11:58	Arjun:	Replying to "are there other tlds..." 

 The problem is that this^ would conflict with projects adding existing subdomains

E.g. hotwallet.optimism.eth
00:12:03	frangio:	Reacted to "Is this  depending o..." with ➕
00:12:05	donnoh | L2BEAT:	Reacted to "Sepolia for example ..." with 👍
00:12:13	Arjun:	Replying to "are there other tlds..." 

 Vs hotwallet.eth on optimism
00:12:25	cyp:	Replying to "are there other tlds..."

hmm so if i have cyprien.eth, i would automatically get cyprien.optimism.eth, cyprien.snt.eth etc. ?
00:12:49	Rahul Kothari:	Reacted to "Sry" with 😂
00:12:54	Grant Southey | Linea:	cyprien.eth@optimism ?
00:12:57	cyp:	Replying to "are there other tlds..."

the issue is that base and linea already released their own subdomain
00:13:00	Yoav:	Replying to "are there other tlds..." 

 Probably safer to use fully qualified names and not make assumptions. The cost of mistakes can be high.
00:13:06	Hudson Jameson:	CAIP = https://chainagnostic.org/
00:13:10	donnoh | L2BEAT:	Reacted to "Probably safer to us..." with 👍
00:13:15	cyp:	Reacted to "CAIP = https://chain..." with 👍
00:13:19	Arjun:	Reacted to Probably safer to us... with "👍"
00:13:33	cyp:	Reacted to "Probably safer to us..." with 👍
00:13:49	Ivo Kubjas:	Reacted to "Probably safer to us..." with 👍
00:13:58	cyp:	Reacted to "The problem is that ..." with 👍
00:13:59	Yoav:	Replying to "are there other tlds..." 

 And on testnet it's a separate tls altogether. Might not make sense to register L2 testnets on L1 mainnet
00:14:17	frangio:	also relevant link: https://namespaces.chainagnostic.org/
00:14:42	Skele | Wonderland:	+1 to diferentiating between low-level and user-facing
00:14:44	Andreas Freund (He/Him):	why not use W3C DIDs? -- https://entethalliance.org/w3cs-did-and-vc-technology-can-help-with-ethereums-three-transitions/
00:14:54	frangio:	Reacted to "+1 to diferentiating..." with 👍
00:16:45	frangio:	are DIDs optimizing for human readability?
00:17:21	Jorge Valdeiglesias:	How would this be in DID format? alice.eth@rolllup-name.eth
00:17:24	Andreas Freund (He/Him):	yes.
00:17:38	Andreas Freund (He/Him):	using the "alsoknownas" data property
00:17:41	Mohammad Jahanara:	Will there be any dependence on ENS governance if we adopt an ens-based standard?
00:18:08	Rahul Kothari:	Reacted to "Will there be any de..." with ➕
00:18:09	cyp:	Reacted to "Will there be any de..." with 👆
00:18:11	Rahul Kothari:	Reacted to "Will there be any de..." with 👆
00:18:17	donnoh | L2BEAT:	Reacted to "Will there be any de..." with ➕
00:18:28	Vitalik Buterin:	(in case people are curious what DIDs look like)
00:18:51	Jorge Valdeiglesias:	Reacted to "(in case people are ..." with 🙏
00:18:58	Allan | Offchain Labs:	Reacted to "(in case people are ..." with 🙏
00:19:41	donnoh | L2BEAT:	so did:optimism.eth:vitalik.eth?
00:19:45	Vitalik Buterin:	Don't the ENS-based approaches already not enshrine ENS in some sense, in that `name.eth` resolution is a very self-contained thing, and so they would be free to just go support eg. `name.crypto`
00:19:56	Vandan Parikh:	MetaMask has been following the discussions pretty closely.
00:19:58	Andreas Freund (He/Him):	if you want a DID for only one chain you can put alice.eth@rolllup-name.eth into the "alsoKnownAs" property
00:20:10	Vitalik Buterin:	Replying to "so did:optimism.eth:..."

That's one way to do it, the other way is did:eth:optimism:vitalik.eth
00:20:10	esk3nder.eth:	No ens governance dependency, names cannot be revoked
00:20:17	cyp:	Reacted to "That's one way to do..." with 👍
00:20:39	Mohammad Jahanara:	Reacted to "No ens governance de..." with 👍
00:20:40	Judeblockchain:	Reacted to (in case people are ... with "🙏"
00:20:43	Vitalik Buterin:	And:
00:20:50	cyp:	Replying to "so did:optimism.eth:..."

does not look too bad
00:21:08	cyp:	Replying to "so did:optimism.eth:..."

also allows for testnets and different tlds
00:21:09	Vitalik Buterin:	Everyone else using hierarchical addressing with colon as separator is a pretty decent argumetn for us doing the same
00:21:19	donnoh | L2BEAT:	Reacted to "That's one way to do..." with 👍
00:21:24	Joshua Rudolf:	Reacted to "Everyone else using ..." with 👍
00:21:25	Judeblockchain:	Reacted to No ens governance de... with "👍"
00:21:26	Luca Cosivi:	Reacted to "Everyone else using ..." with 👍
00:21:44	donnoh | L2BEAT:	Reacted to "Everyone else using ..." with 👍
00:21:53	Yoav:	Reacted to Everyone else using ... with "👍"
00:21:53	cyp:	Reacted to "Everyone else using ..." with 👍
00:22:06	Mohammad Jahanara:	Reacted to "Everyone else using ..." with 👍
00:22:23	Andreas Freund (He/Him):	if you want to have one DID for all chains then you attach it at the key level -- for example did:web:pubkey#alice.eth@rolllup-name.eth
00:22:33	Nam:	Reacted to "Everyone else using ..." with 👍
00:22:36	Nicolas Consigny:	Having an ERC that goes for eth:chain:address, allows a CAIP-10-style format is a plus to have
00:22:49	Judeblockchain:	Reacted to Everyone else using ... with "👍"
00:22:56	Vaibhav | SOCKET:	Might be dumb question, but is there scope to add support for a new address-type at solidity level? Do ppl think it’s worth a separate effort?
00:23:11	Vitalik Buterin:	Replying to "if you want to have ..."

Need to have a field for the signature algorithm too, we want to de-enshrine ECDSA esp because quantum will kill it in a decade anyway
00:23:22	Rahul Kothari:	on the ENS integration: does it mean every address would need to have an ens if they want to do cross chain?
00:23:29	Vitalik Buterin:	Replying to "on the ENS integrati..."

no
00:23:33	Orest Tarasiuk (t1):	Can’t hear you
00:23:39	cyp:	Reacted to "Need to have a field..." with 👍
00:23:41	Vitalik Buterin:	Replying to "on the ENS integrati..."

ENS should be strictly optional, BOTH for the address and the chain
00:23:53	Rahul Kothari:	Reacted to "ENS should be strict..." with 👍
00:23:54	cyp:	Reacted to "ENS should be strict..." with 👍
00:23:54	donnoh | L2BEAT:	Reacted to "ENS should be strict..." with 👍
00:24:10	frangio:	Replying to "on the ENS integrati..."

if the chain part is not registered on ENS would it just be the integer chain id?
00:24:16	Grant Southey | Linea:	Reacted to "ENS should be strict..." with 👍
00:24:55	esk3nder.eth:	Reacted to "ENS should be strict..." with 👍
00:25:09	Vitalik Buterin:	Replying to "on the ENS integrati..."

chainid for L1s, and ethereum address that contains the config contract for L2/L3s
00:25:37	Yoav:	Reacted to chainid for L1s, and... with "👍"
00:26:02	Christian Montoya:	My question too +1
00:26:15	frangio:	Replying to "on the ENS integrati..."

is there an ERC for config contracts?
00:26:25	Yoav:	Replying to "on the ENS integrati..." 

 Right, but it means we'll need to standardize a config contract ABI rather than use ENS records for things like bridge contract and light client contract
00:26:33	esk3nder.eth:	Answer is no
00:26:38	jacob | shape:	Reacted to "That's one way to ..." with 👍
00:26:39	Vitalik Buterin:	Replying to "on the ENS integrati..."

(though I think as the ethereum group, we should design  the standard for ethereum only, and if eg. binance want to copy the standard and do s/eth/bnb/g, that is their right)
00:26:56	Mohammad Jahanara:	Are we aiming for the address resolution to be on-chain verifiable?
00:27:19	Vitalik Buterin:	Replying to "Are we aiming for th..."

yes this should be a 100% requirement imo
00:27:25	Andreas Freund (He/Him):	for DIDs -- https://www.w3.org/TR/did-core/ where alice.eth@rolllup-name.eth lives would be in the verificationMethod property -- alice.eth@rolllup-name.eth
00:27:26	esk3nder.eth:	Reacted to "yes this should be a..." with ❤️
00:27:28	Mohammad Jahanara:	Reacted to "yes this should be a..." with ❤️
00:27:30	cyp:	Reacted to "yes this should be a..." with 👍
00:27:33	Vandan Parikh:	MetaMask will probably be open to some prototyping around chain-specific addresses at the Wallet API-level as we are implementing some CAIP standards.
00:27:33	Yoav:	Reacted to (though I think as t... with "👍"
00:27:35	Andreas Freund (He/Him):	https://www.w3.org/TR/did-core/#verification-methods
00:28:05	Filip Pajic | Status Network:	Replying to "on the ENS integrati..."

would it allow for different resolvers? do you mean ens be optional on that level or just optional for address resolution?
00:28:05	donnoh | L2BEAT:	Reacted to "yes this should be a..." with 👍
00:28:25	Mohammad Jahanara:	Sorry you go ahead
00:29:22	Grant Southey | Linea:	I can ask internally about assisting wrt prototyping
00:29:46	Yoav:	Replying to "on the ENS integrati..." 

 It could be optional on both levels. E.g. 0x1234...@0x5678... would also be valid. The right part will be the config contract (which we have yet to standardize)
00:29:47	Vaibhav | SOCKET:	Down to do it at SOCKET
00:29:48	Skele | Wonderland:	happy to collab from the Wonderland side regarding implementation experimentation
00:29:59	esk3nder.eth:	Reacted to "Down to do it at SOC..." with ❤️
00:30:01	Vaibhav | SOCKET:	Reacted to "Down to do it at SOC..." with ❤️
00:30:20	Bo Du:	To make the addressing work with config contracts (e.g. have verifiability of a chain ID within L2s/3s), wouldn’t the chain ID need to be bound to the bridge contract address of the L2 on the L1 and the L3 on the L2?

For example, chain ID could be a hash of the bridge contracts addresses from L1 to L*. 

This would allow the chain IDs to be cryptographically verifiable by all rollups trusting the same L1.
00:31:28	Vitalik Buterin:	Replying to "on the ENS integrati..."

There are different ways to do this. What I had in mind is:

THe "base standard" is eg. `eth:0x12345:0x67890`, where `0x12345` is the config contract of the L2 on L1, and 0x67890 is your address on L2.

Then if a user wants to do `eth:optimism.eth:vitalik.eth`, or `eth:myl2.crypto:myname.crypto` they are welcome to
00:31:28	Mark | OP Labs:	you only need to care about the crypto scheme if its interactive like mimblewimble to send to an address?
00:31:45	Hudson Jameson:	(though I think as the ethereum group, we should design  the standard for ethereum only, and if eg. binance want to copy the standard and do s/eth/bnb/g, that is their right)
I disagree. Ethereum should be the most important to target, but aiming for a balance of easy for ethereum to accomplish and generalizable for most or all major non-EVM chains is better. So like, we focus on us but make sure to get other chains to sign on or help.
00:31:48	Vitalik Buterin:	Replying to "To make the addressi..."

> To make the addressing work with config contracts (e.g. have verifiability of a chain ID within L2s/3s), wouldn’t the chain ID need to be bound to the bridge contract address of the L2 on the L1 and the L3 on the L2?

Yes
00:31:56	iannorden:	Reacted to "To make the addressi..." with 👏
00:32:00	Vitalik Buterin:	Replying to "To make the addressi..."

This is part of the reason why many people want 256 bit chain IDs
00:32:17	Mohammad Jahanara:	Also happy to help with prototype from Scroll’s side!
00:32:35	Nicolas Consigny:	On the core contracts you could have the config
00:32:51	kalmanlajko | matterlabs zksync:	Reacted to "This is part of the ..." with 👍
00:32:54	Bo Du | Polymer:	Reacted to "This is part of the ..." with 👍
00:33:06	frangio:	ERC-7785
00:33:11	CJ Cobb:	Reacted to "(though I think as t..." with ☝️
00:33:21	jiajunzeng:	Elytro is happy to dedicate one dev to work on prototyping around chain-specific addresses from smart contract wallet’s perspective
00:33:29	esk3nder.eth:	Reacted to "Also happy to help w..." with ❤️
00:33:34	Vitalik Buterin:	Replying to "(though I think as t..."

I guess I'm not worried about them because if we do the ethereum standard right, it _should_ be very easy and natural for other EVM chains to just copy-paste it
00:33:46	Vitalik Buterin:	Replying to "Elytro is happy to d..."

❤️
00:33:56	esk3nder.eth:	Reacted to "Elytro is happy to d..." with ❤️
00:33:59	Parthasarathy Ramanujam:	Chain specific addresses will be disabled in 7702?
00:34:01	esk3nder.eth:	Replying to "Elytro is happy to d..."

Amazing!
00:34:12	Joxes | Wonderland:	Reacted to "I guess I'm not worr..." with ☝️
00:34:34	Vitalik Buterin:	Replying to "(though I think as t..."

But it doesn't hurt to pass the proposed standards through eg. bnb people to see what they think about that path
00:34:55	cyp | status.network:	Reacted to "(though I think as t..." with ☝️
00:35:01	cyp | status.network:	Reacted to "I guess I'm not worr..." with ☝️
00:35:03	frangio:	Replying to "Chain specific addre..."

what do you mean?
00:37:49	jiajunzeng:	Reacted to "Also happy to help w..." with ❤️
00:38:18	Skele | Wonderland:	+1
00:38:38	cyp | status.network:	(could we save this chat content? - a lot of good points here)
00:38:50	Nicolas Consigny:	Replying to "(could we save this ..."

will do yes
00:38:55	cyp | status.network:	Reacted to "will do yes" with ❤️
00:38:56	jacob | shape:	Reacted to "(could we save thi..." with 👍
00:39:02	Andreas Freund (He/Him):	what about this spec? https://entethalliance.github.io/crosschain-interoperability/draft_crosschain_techspec_messaging.html
00:39:12	Christian Montoya:	Reacted to "(could we save this …" with 👍
00:39:59	Joshua Rudolf:	Reacted to "Elytro is happy to d..." with ❤️
00:40:58	frangio:	Replying to "what about this spec..."

seems very opinionated about the specific protocol used for verification
00:42:23	Bo Du | Polymer:	Reacted to "seems very opinionat..." with 👍
00:42:29	Ellie Davidson:	Reacted to "seems very opinionat..." with 👍
00:43:09	Andreas Freund (He/Him):	Replying to "what about this spec..."

just says one of the proof formats. I think one can certainly add more
00:43:18	Vitalik Buterin:	Where do standards for bridges (ie. verifying a message coming in from another chain) come in to this?
00:43:27	Vaibhav | SOCKET:	I wonder how true the premise of “everything needs general message passing” is? 

I personally think its proofs, at the lowest level, for eg Across doesn’t use message passing for cross-chain intents

We might instead want a general interface for cross-chain proofs instead that messaging-protocols and intents etc can build on top of
00:43:46	Peter Kim | Polymer:	Reacted to "I wonder how true th…" with 👍
00:44:03	jacob | shape:	Reacted to "Where do standards..." with ➕
00:44:05	iannorden:	Reacted to "I wonder how true th..." with 👍
00:44:05	Ellie Davidson:	Replying to "Where do standards f..."

I didn’t specify that part, but most of the ERCs have a “proof” field.  Chains / bridges can choose to put whatever proof they want to use.
00:44:27	cyp | status.network:	Replying to "Where do standards f..."

each bridge has its own system - that’s why protocols like layerzero try to disseminate their own standard
00:44:40	Ellie Davidson:	Replying to "Where do standards f..."

Some might use something a light client can verify, like IBC, some might be nothing and rely on the verification to happen at settlement time, etc.
00:44:48	cyp | status.network:	Reacted to "Some might use somet..." with 👍
00:44:49	Ahmad Bitar:	Replying to "Where do standards f..." 

 This is more of an impelementation details rather than an interface level thing to solve
00:45:19	cyp | status.network:	Reacted to "I wonder how true th..." with 👍
00:45:32	Ahmad Bitar:	Replying to "Where do standards f..." 

 Simply, a bridge can whitelist certain addresses to recieve messages from and each address corresponds to a chain that it want to interop with
00:45:40	Bo Du | Polymer:	Just FYI, Superchain native interop doesn’t require a message to be explicitly sent on the origin chain.

Any event on any origin chain can be used as a “message”. The application just provides enough information on the destination chain to locate the originating event/log. 

This verification is handled within the rollup node client itself in the Superchain. 

This pull based model is very different from existing message passing protocols and standards (e.g. IBC). Messaging is push based.
00:45:44	Ellie Davidson:	Replying to "Where do standards f..."

The proof field of the interface should be agnostic, though.
00:45:49	Ellie Davidson:	Reacted to "Simply, a bridge can..." with 😁
00:45:55	Arjun:	Replying to "I wonder how true th..." 

 General message passing is just an interface to an underlying proof system.

There's no way for us to know a priori what kinds of proof systems can exist, but we can instead define the structure of the payload (the message) that proof systems would validate
00:46:08	donnoh | L2BEAT:	Reacted to "Just FYI, Superchain..." with 👍
00:46:10	donnoh | L2BEAT:	Reacted to "Just FYI, Superchain..." with ➕
00:46:23	kalmanlajko | matterlabs zksync:	Reacted to "Just FYI, Superchain..." with 👍
00:46:25	Ellie Davidson:	Reacted to "General message pass..." with 👆
00:46:39	Vitalik Buterin:	Pull-based is definitely better in many cases where it's possible, because it's synchronous and doesn't require a proof
00:46:46	donnoh | L2BEAT:	Reacted to "Pull-based is defini..." with 💯
00:46:47	Vitalik Buterin:	(especially L2 reading L1, L3 reading L2...)
00:46:51	Vaibhav | SOCKET:	Reacted to "Pull-based is defini..." with 💯
00:46:51	Allan | Offchain Labs:	Reacted to "Pull-based is defini..." with 💯
00:46:52	Mohammad Jahanara:	Reacted to "I wonder how true th..." with 👍
00:46:54	jacob | shape:	Reacted to "General message pa..." with 👍
00:47:00	Bo Du | Polymer:	Reacted to "Pull-based is defini..." with 💯
00:47:03	Ellie Davidson:	Reacted to "Pull-based is defini..." with 💯
00:47:05	Nam | Hyperlane:	Replying to "I wonder how true th..."

Agree with Arjun 🙂
00:47:06	Parthasarathy Ramanujam:	Replying to "Chain specific addre..."

I am wondering how the auth/delegation of 7702 will be compatible with chain specific address? Lest someone auth to an external chain address.
00:47:09	Nam | Hyperlane:	Reacted to "General message pass..." with 👆
00:47:10	Mohammad Jahanara:	Reacted to "General message pass..." with 👍
00:47:22	Ahmad Bitar:	Reacted to Pull-based is defini... with "👍"
00:47:39	Skele | Wonderland:	Replying to "Pull-based is defi..."

the first messaging primitive we are psoposing is to separate verification from execution. that tackles this problem
00:47:40	Ellie Davidson:	Replying to "Pull-based is defini..."

Yes, agree!  This is why ERC 7841 is pull based, but can be used to build a push based design if people want to.
00:47:53	Joxes | Wonderland:	Reacted to "Pull-based is defini..." with 💯
00:47:55	Bo Du | Polymer:	Reacted to "I wonder how true th..." with 👍
00:48:13	Vitalik Buterin:	Another worry I have here, is that by default we get "bridges" that needlessly add too many trust assumptions (eg. custodians, multisigs). We should be able to do all the interop that we need, at least within the ethereumverse (L1 and L2/L3s), fully trustlessly, and that requires some explicit standardization
00:48:26	esk3nder.eth:	Reacted to "Another worry I have..." with 👍
00:48:30	Luca Cosivi:	Reacted to "Another worry I have..." with 👍
00:48:33	cyp | status.network:	Reacted to "Another worry I have..." with 👍
00:48:51	donnoh | L2BEAT:	Reacted to "Another worry I have..." with 👍
00:48:56	Ellie Davidson:	Reacted to "Another worry I have..." with 👍
00:49:06	Marissa Posner:	Reacted to "Another worry I have..." with 👍
00:49:07	Ellie Davidson:	Reacted to "Another worry I have..." with 💯
00:49:11	Jack Chuma:	Reacted to "Another worry I ha..." with 👍
00:49:28	Joshua Rudolf:	https://ethereum-magicians.org/t/erc-7802-crosschain-token-interface/21508
00:49:36	Matt Cutler | Blocknative:	We would be happy to contribute to any gas-specific Interop efforts. Please DM me!
00:49:38	Mohammad Jahanara:	Reacted to "Another worry I have..." with 👍
00:49:43	Nicolas Consigny:	Replying to "Another worry I have..."

Imo we should spend more time on building atomic swaps through frost / musig2
00:49:46	Judeblockchain:	Reacted to Another worry I have... with "👍"
00:49:55	Bo Du | Polymer:	Reacted to "Another worry I have..." with 👍
00:50:06	cyp | status.network:	Replying to "Another worry I have..."

atomic swaps are a subset of the issue
00:50:20	Ellie Davidson:	Reacted to "atomic swaps are a s..." with 👆
00:51:27	frangio:	Reacted to "This is more of an i..." with 👍
00:51:40	Peter Kim | Polymer:	Reacted to "Another worry I have…" with 💯
00:51:58	iannorden:	Replying to "(especially L2 readi..."

For this we just need to standardize around an EIP-4788-like ring buffer that is updated by the sequencer with info about the L1 (or L2) origin of the nascent L2 (or L3) block
00:52:11	frangio:	Replying to "Pull-based is defini..."

pull/push are kind of overloaded terms, what do you mean here and how does it relate to being synchronous?
00:53:06	Ellie Davidson:	Link to my slides in case anyone wants: https://docs.google.com/presentation/d/1_IqFC3x9q2zbh7wfMDsiuXc7r3dZ9WWAiWKn3JNBIuY/edit?usp=sharing
00:53:18	Joshua Rudolf:	Reacted to "Link to my slides in..." with 🙏
00:53:19	jiajunzeng:	Reacted to "(especially L2 readi..." with 👍
00:53:23	Arjun:	Replying to "Another worry I have..." 

 Is this necessarily true? A push based interaction can still be verified by Ethereum and executed using a shared sequncer
00:53:44	Judeblockchain:	Reacted to yes this should be a... with "👍"
00:53:57	Vaibhav | SOCKET:	Replying to "I wonder how true th..."

Messaging imho is a developer facing abstraction over proofs and not exactly proof-standardisation

I think we can strip down a lot from message-passing if we want to just proof-standardisation
00:54:30	Bo Du | Polymer:	Reacted to "Messaging imho is a ..." with 👍
00:54:55	cyp | status.network:	Replying to "I wonder how true th..."

how would you make it future proof? multiple types of proofs already exist and more will be invented
00:55:05	CJ Cobb:	Replying to "I wonder how true th..."

Across is still pretty much using message passing under the hood, it’s just abstracted away from the user
00:55:15	Ellie Davidson:	Replying to "I wonder how true th..."

I agree with Nam and Arjun - we shouldn’t try to standardize the proof system.  This is really closely tied to the messaging protocol and whether it is a sync or asynchronous protocol.
00:55:29	Luca Cosivi:	Reacted to "General message pass..." with 👆
00:56:07	Ellie Davidson:	Reacted to "Across is still pret..." with 👆
00:56:12	Arjun:	Replying to "I wonder how true th..." 

 how would you make it future proof? multiple types of proofs already exist and more will be invented

I think you future proof it by being unopinionated about everything except proof payload (message)
00:56:13	cyp | status.network:	Replying to "I wonder how true th..."

@Ellie Davidson even in a pull-based system? it’s more a question of interface
00:56:57	cyp | status.network:	Reacted to "how would you make i..." with 👍
00:57:00	Arjun:	Replying to "I wonder how true th..." 

 A pull based system still has standardized message formats that need to be consumed by providers (shared sequencers, builders, etc)
00:57:11	Luca Cosivi:	Reacted to "Across is still pret..." with 👆
00:57:33	Ellie Davidson:	Replying to "I wonder how true th..."

Yes, even in a pull based system.  Sync message passing may not have any proof along with it because it will be verified later at settlement time, some designs may want to use a Merkle proof, an out-of-chain protocol like LayerZero or Hyperlane will want their own kind of message validity proof.
00:57:50	Ellie Davidson:	Reacted to "A pull based system ..." with 👆
00:58:09	cyp | status.network:	Reacted to "Yes, even in a pull ..." with 👍
00:58:11	cyp | status.network:	Reacted to "A pull based system ..." with 👍
00:58:57	Yoav:	With chain specific addresses and gas abstraction, the wallet can be its own relayer.
00:58:58	Arjun:	Reacted to Yes, even in a pull ... with "👍"
00:59:13	frangio:	i've been thinking along these lines and i think it's very promising
00:59:20	Allan | Offchain Labs:	Reacted to "With chain specific ..." with 👀
00:59:22	cyp | status.network:	Replying to "With chain specific ..."

iirc status is already working on it with waku
00:59:44	Bo Du | Polymer:	Replying to "I wonder how true th..."

Messaging is a push based UX layer on top of some proof system. 

Pull based systems require some form of “proof request”. For example, supplying identifying information for an event on an origin chain is a “proof request”. 

Whether the pull based “proof request” is checked natively within the rollup node client (and by the settlement contracts) or by some other means is another issue.
01:01:14	Yoav:	Replying to "With chain specific ..." 

 Once we have L1SLOAD or REMOTESTATICCALL there's no need to trust an off chain relayer. A paymaster on L2 will allow the wallet to transact on L2 from a deposit in L1 or another L2. Hence no relayer needed
01:01:41	kalmanlajko | matterlabs zksync:	Reacted to "pull/push are kind o..." with 👍
01:01:50	Nam | Hyperlane:	Replying to "With chain specific ..."

You would think that’s true for Rollup bridges too right, but wallets don’t actually do this?
01:02:43	Andreas Freund (He/Him):	I think you need 3 separate standards: Messaging -- Pull & Push (same schema) and proof protocol
01:02:53	Vaibhav | SOCKET:	Reacted to "I think you need 3 s..." with ❤️
01:02:56	Yoav:	Replying to "With chain specific ..." 

 Currently it's only possible for 4337 accounts but with 7702 coming soon, every eoa will be able to use 4337 paymasters. Then every wallet could do it
01:04:06	Nam | Hyperlane:	One thing I didn’t mention is that developers are choosing today, and we want them to choose options that doesn’t lock them into a vendor that is being king made
01:04:20	Nam | Hyperlane:	Across a set of execution environments and proof systems
01:04:39	frangio:	push/pull are overloaded, we need to clarify and agree on definitions
01:04:50	kalmanlajko | matterlabs zksync:	Reacted to "push/pull are overlo..." with 👍
01:04:54	Marissa Posner:	Reacted to "push/pull are overlo..." with 👍
01:05:05	Skele | Wonderland:	agree frangio, what do you think about validation/execution ?
01:06:00	frangio:	Replying to "agree frangio, what ..."

this is an important separation i agree and the standards should decouple them
01:06:10	Nam | Hyperlane:	Replying to "agree frangio, what ..."

Most are right?
01:06:15	frangio:	Replying to "agree frangio, what ..."

not sure this is what others mean by push/pull though
01:06:32	Nam | Hyperlane:	Action items?
01:06:42	cyp | status.network:	Replying to "agree frangio, what ..."

there is the notion of read vs. execute also i guess
