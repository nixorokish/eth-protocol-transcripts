WEBVTT

1
00:04:28.150 --> 00:04:29.220
Orest Tarasiuk (t1): Hi, guys.

2
00:06:05.680 --> 00:06:06.530
Joshua Rudolf: Hello.

3
00:06:07.150 --> 00:06:10.100
Orest Tarasiuk (t1): Welcome, everybody. Sorry, I'm late here.

4
00:06:10.150 --> 00:06:11.640
Joshua Rudolf: Thank you all for joining.

5
00:06:11.960 --> 00:06:14.949
Joshua Rudolf: I think we can just get started here in a second.

6
00:06:15.690 --> 00:06:17.729
Joshua Rudolf: Sorry, let me just get organized really quickly.

7
00:06:24.260 --> 00:06:26.990
Joshua Rudolf: Make sure we have our guests on the call.

8
00:06:30.020 --> 00:06:35.369
Joshua Rudolf: I think I see Martin here from Unruggable. You may be first up, if that's okay with you.

9
00:06:40.700 --> 00:06:41.530
Ndeto | Unruggable: True thing.

10
00:06:44.810 --> 00:06:47.080
Joshua Rudolf: Do we have anyone from Wonderland?

11
00:06:50.870 --> 00:06:56.179
Joshua Rudolf: Yes, I see a skelly… Cool. Alright, let's get started here in a second.

12
00:06:58.310 --> 00:06:59.740
Joshua Rudolf: Here's the agenda.

13
00:07:04.870 --> 00:07:08.520
Joshua Rudolf: All right, welcome to the L2 Interop Working Group.

14
00:07:08.850 --> 00:07:21.240
Joshua Rudolf: We have a few things on the agenda today, starting off with updates and discussion on the ENS-based chain registry, moving over from the GitHub list.

15
00:07:21.420 --> 00:07:25.640
Joshua Rudolf: Which is something that has, yes, been in the works discussion for a long time now.

16
00:07:25.650 --> 00:07:41.520
Joshua Rudolf: And I think we are finally making good headway here. So anyways, we can… we'll talk more about this, and Unruggable, Wonderland, many others have been contributing to the discussion here. Agenda item number two is some, work happening around.

17
00:07:41.520 --> 00:07:46.119
Joshua Rudolf: multi-proving on the L2 side, and accelerating the…

18
00:07:46.410 --> 00:08:04.609
Joshua Rudolf: eventual shift to, getting rid of the 7-day windows, pragmatic fast finality. Vitalik wrote a post about this a while back, it's linked in the agenda. And then last up is, presentation and discussion on Permit 3, some recent work from ECHO.

19
00:08:04.900 --> 00:08:07.839
Joshua Rudolf: Cool. Starting off, with Martin, whenever you're ready.

20
00:08:11.300 --> 00:08:13.030
Ndeto | Unruggable: Great, hi everyone.

21
00:08:13.230 --> 00:08:23.020
Ndeto | Unruggable: My name is Martin, I'm from Unruggable. We're an independent R&D farm within ENS, and yeah, we've been working on

22
00:08:23.310 --> 00:08:26.739
Ndeto | Unruggable: The on-chain registry as part of the broader…

23
00:08:27.020 --> 00:08:35.680
Ndeto | Unruggable: internal proposals. So, let me take it back. So… Erc7785.

24
00:08:35.780 --> 00:08:49.219
Ndeto | Unruggable: proposes the derivation of a 32-byte chain ID, and it also proposes that a human-friendly name for that chain, that is, something like base.l2.f.

25
00:08:49.400 --> 00:08:59.310
Ndeto | Unruggable: resolves to this specific chain identifier. So, we've been working to validate this, and we've built,

26
00:09:00.410 --> 00:09:07.239
Ndeto | Unruggable: a proof of concept, that works with ENS, that is ENS compliant, and…

27
00:09:08.000 --> 00:09:26.700
Ndeto | Unruggable: has, you know, it's brought out a few things. I'd like to… I've sent you the link right now. You can check out that demo. I'd like to maybe just go through the process of registering one chain while I share my screen, just to take you through it all.

28
00:09:26.780 --> 00:09:35.789
Ndeto | Unruggable: And then, from there, we can discuss what it is that we've, you know, we've concluded from this validation that we've done.

29
00:09:35.910 --> 00:09:38.759
Ndeto | Unruggable: So, let me just share my screen.

30
00:09:42.510 --> 00:09:50.090
Ndeto | Unruggable: Okay, so… To start off, the…

31
00:09:50.400 --> 00:10:01.929
Ndeto | Unruggable: ERC proposes using several attributes that will be hashed to get the chain identifier, and that is what we have here on these fields.

32
00:10:02.400 --> 00:10:07.319
Ndeto | Unruggable: We can have the chain name, like, maybe, let's talk with Optimism.

33
00:10:09.590 --> 00:10:14.800
Ndeto | Unruggable: We can have the settlement chain ID, which is Ethereum. The chain ID is going to be one.

34
00:10:14.900 --> 00:10:22.299
Ndeto | Unruggable: The version is something that the chains themselves decide. Roll-up contract, this is where they…

35
00:10:22.470 --> 00:10:32.239
Ndeto | Unruggable: the L2 state anchor, where it lives on the L1. And then, the namespace. Now, these are attributes that are coming from Kype.

36
00:10:32.350 --> 00:10:44.650
Ndeto | Unruggable: And, EVM chains are basically categorized as EIP155, and then the chain reference in this case will always be the chain ID, so for this case, Optimism, it's going to be 10.

37
00:10:45.770 --> 00:10:50.880
Ndeto | Unruggable: based… on this EIP155,

38
00:10:50.930 --> 00:11:10.550
Ndeto | Unruggable: namespaces, it will automatically derive a coin type which is used by ENS to resolve to different addresses. So, I'm going to just simulate this call. It's going to fail, reason being, we already have an optimism that exists. So, what we can do is, we can just do an Optimism 2, and then change the

39
00:11:11.250 --> 00:11:12.980
Ndeto | Unruggable: change the chain ID.

40
00:11:13.120 --> 00:11:16.870
Ndeto | Unruggable: We can simulate it, and now it gives us the 32…

41
00:11:19.110 --> 00:11:23.080
Ndeto | Unruggable: by its, chain identifier, so I'm just going to go ahead and,

42
00:11:25.080 --> 00:11:31.360
Ndeto | Unruggable: I'm just going to go ahead and try to… Change this,

43
00:11:33.000 --> 00:11:40.200
Ndeto | Unruggable: to register this, and then we can move on. I hope you can't see my wallets.

44
00:11:45.110 --> 00:11:46.190
Ndeto | Unruggable: There we go.

45
00:11:57.910 --> 00:11:58.670
Ndeto | Unruggable: Okay.

46
00:11:59.490 --> 00:12:01.430
Ndeto | Unruggable: So, let's try this…

47
00:12:08.220 --> 00:12:10.010
Ndeto | Unruggable: Okay, fine.

48
00:12:10.290 --> 00:12:21.020
Ndeto | Unruggable: So that's going to create… that's going to register our optimism to chain, and it's going to derive the chain identifier that ERC7785.

49
00:12:21.190 --> 00:12:33.760
Ndeto | Unruggable: specifies. So once we have this, we have two contracts in this architecture. The first one is the registry that's going to store all the information that we just put in, and then we have a resolver.

50
00:12:34.050 --> 00:12:46.469
Ndeto | Unruggable: If you go to assign now here, the resolver work is very simple. We use Optimism 2, which was our chain name, and we assign it to the chain ID. We can check if it exists, it doesn't.

51
00:12:47.870 --> 00:13:06.109
Ndeto | Unruggable: And that's really the process. You first register it in the registry, and then after that, you assign it in the resolver, and then that's it. You should be able to resolve this name to its chain identifier and its chain attribute. So this… this is how we will be replacing the…

52
00:13:06.140 --> 00:13:08.430
Ndeto | Unruggable: Centralized release.

53
00:13:08.640 --> 00:13:16.979
Ndeto | Unruggable: Let's just wait for this to go through. There we go. And if we go to Resolve, and we want to check what we just recorded.

54
00:13:17.240 --> 00:13:24.609
Ndeto | Unruggable: Yeah, and we resolve the chain. We're going to get back all the information that we had put in

55
00:13:24.660 --> 00:13:43.150
Ndeto | Unruggable: While registering this chain. So you can see the name, chain ID, rollout. The coin type was derived automatically. So, that's just an overview of how we're going… you know, we would register a chain, and how we will be resolving it to its 7785 chain identifier.

56
00:13:45.220 --> 00:13:56.309
Ndeto | Unruggable: One thing to point out is that, as it stands, ERC7785 does not use the attributes that you see here.

57
00:13:56.310 --> 00:14:13.969
Ndeto | Unruggable: These attributes have been modified to include, mostly these Skype 2 attributes, mostly because of its connection to another standard. So, anyone who's really interested, everything is on this land page, the original proposal, the spec, the

58
00:14:14.430 --> 00:14:16.789
Ndeto | Unruggable: Source code for the registry.

59
00:14:17.380 --> 00:14:23.620
Ndeto | Unruggable: the Kype 2 aspects, and all the other resources.

60
00:14:23.730 --> 00:14:36.820
Ndeto | Unruggable: Yeah, what we would like most feedback on is the actual update for the spec, the ERC775 spec, and just general feedback on the registry architecture.

61
00:14:37.280 --> 00:14:43.959
Ndeto | Unruggable: Yeah, just those two, the spec and the registry and the architecture that we've put in there. Yeah, thank you.

62
00:14:46.600 --> 00:14:48.089
Ndeto | Unruggable: I'll take any questions.

63
00:14:48.560 --> 00:14:49.480
Joshua Rudolf: Thanks, Martin.

64
00:14:49.640 --> 00:14:50.940
Joshua Rudolf: Any questions?

65
00:14:50.940 --> 00:14:51.830
Jaack: Yep.

66
00:14:52.080 --> 00:14:52.949
Joshua Rudolf: Go ahead, sir.

67
00:14:53.270 --> 00:14:55.240
Jaack: actually… oh.

68
00:14:55.610 --> 00:14:58.239
Jaack: Yeah, I actually have a few questions.

69
00:14:58.610 --> 00:15:00.930
Jaack: So, the first one is…

70
00:15:01.050 --> 00:15:11.319
Jaack: the settlement chain ID, isn't it better to use the resolved ENS name or the hash instead of the chain ID? Because…

71
00:15:11.670 --> 00:15:16.790
Jaack: So, the issue is right now that we have chain IDs, That may collide.

72
00:15:17.200 --> 00:15:27.059
Jaack: I don't know, I know that that is extremely, you know, improbable, let's say, but still, isn't it better to move from chain IDs altogether?

73
00:15:27.710 --> 00:15:35.490
Jaack: In the future, and so not use chain IDs as a requirement As an attribute.

74
00:15:38.360 --> 00:15:39.870
Jaack: to do the linking, I mean.

75
00:15:42.070 --> 00:15:52.630
Ndeto | Unruggable: I'm not sure I understand, what you mean in terms of the chain IDs. Do you mean it, like, as an attribute in the computation, or general.

76
00:15:52.630 --> 00:16:04.150
Jaack: Yeah, yeah. Like, when you, when you input the settlement ID, and you say 1, because that is Ethereum, it's mainnet, why use that instead of the

77
00:16:04.330 --> 00:16:07.670
Jaack: hash, or the ENS name of Mainnet.

78
00:16:09.850 --> 00:16:14.110
Ndeto | Unruggable: I don't see why not. I think these are things that,

79
00:16:14.330 --> 00:16:18.830
Ndeto | Unruggable: ultimately looking for feedback on. I'm not an author of the ERC,

80
00:16:19.470 --> 00:16:34.299
Ndeto | Unruggable: But those are the questions we're trying to raise here, because, on top of… we're trying to validate why are these attributes used, and why were they selected. So, you know, really like… would really like to hear your opinion on that as well.

81
00:16:34.900 --> 00:16:46.240
Jaack: Yeah, yeah, yeah. And also, I believe I, I already asked this, but I don't remember when. Is this going to work for any L1 or L2, or just for Ethereum roll-ups?

82
00:16:48.110 --> 00:16:57.289
Ndeto | Unruggable: So, a very sweet side effect of introducing Kype to attributes is that

83
00:16:57.560 --> 00:17:12.579
Ndeto | Unruggable: this would support non-EVM chains, because that exists for pretty much all chains. So, if we were to adopt this standard and include those Skype 2 attributes, that is the namespace and the chain ID,

84
00:17:12.760 --> 00:17:17.989
Ndeto | Unruggable: we would be able to support, as a side effect, both EVM and non-EVM chains, yeah.

85
00:17:18.890 --> 00:17:25.819
Jaack: Yeah, because that… that is actually… I'm not even talking about non-EVM, but just, like, for example, a roll-up on BNB.

86
00:17:26.270 --> 00:17:30.780
Jaack: that is still all in CDM, but everything is…

87
00:17:30.780 --> 00:17:32.000
Ndeto | Unruggable: Okay. Not Ethereum.

88
00:17:33.160 --> 00:17:39.470
Jaack: So, yeah, that… and there… there's a lot… there's a lot of, use case… like, it's not, like,

89
00:17:39.860 --> 00:17:51.039
Jaack: like, more than 10% of the chains, but still, I believe that we shouldn't… like, since the GitHub repo is actually the place where everything gets in.

90
00:17:51.210 --> 00:17:57.070
Jaack: that everything EVM gets in, we shouldn't be, you know, leaving every… like, leaving

91
00:17:57.350 --> 00:18:03.940
Jaack: anything behind. Otherwise, the GitHub repo will still be used for some specific edge cases, you know?

92
00:18:04.310 --> 00:18:11.589
Jaack: there shouldn't be any reason to use the GitHub repo. So, yeah, I'm just gonna, you know, provide some feedback in the

93
00:18:11.700 --> 00:18:13.950
Jaack: In the, in the, in your repo as well.

94
00:18:14.290 --> 00:18:25.650
Jaack: So, thank you, thank you for now. And also, the last, the last question would be, can you provide, like, an example of how the transaction is being, like, displayed? Maybe you have,

95
00:18:25.970 --> 00:18:30.390
Jaack: Because I saw that there's… that is a transaction, so that is not an attestation.

96
00:18:30.990 --> 00:18:33.040
Jaack: So you need ETH to…

97
00:18:33.570 --> 00:18:34.120
Joshua Rudolf: Boop.

98
00:18:34.220 --> 00:18:41.790
Joshua Rudolf: Yeah, sorry to cut you off, Jack. I just want to be mindful of time. Maybe we could move this last part, maybe async to the chat, is that okay?

99
00:18:41.790 --> 00:18:43.180
Jaack: Yum. Yeah, yeah.

100
00:18:43.780 --> 00:18:55.800
Joshua Rudolf: Okay, yeah, sorry to cut you guys off, but, maybe just to, yeah, keep moving things along, I do want to give things, give it over to Skelly, I think, from Wonderland team, maybe has a few things to… to add.

101
00:18:57.460 --> 00:19:00.659
Skele | Wonderland: Sure, just to continue with the…

102
00:19:02.000 --> 00:19:12.669
Skele | Wonderland: I mean, with the questions here, some of the concerns, I mean, we agree. The main idea for the chain list to be on-chain is to be able to fully deprecate

103
00:19:12.790 --> 00:19:21.879
Skele | Wonderland: Any, say, third-party… Dependency, that being GitHub or whatever, basically, and allow…

104
00:19:22.260 --> 00:19:28.109
Skele | Wonderland: I don't know, composability, et cetera, et cetera, to be, basically to live on-chain.

105
00:19:28.380 --> 00:19:37.129
Skele | Wonderland: The… this is basically why, we built, both 7828 and 7930.

106
00:19:37.340 --> 00:19:55.050
Skele | Wonderland: is to be able to accommodate for all and any chains. There are some limitations that we've been raising regarding ENS only allowing you to register 32 bytes. We, are circumventing that on the resolver implementation that we already did.

107
00:19:55.370 --> 00:20:04.819
Skele | Wonderland: That's being internally audited, by the Wonderland Security team right now. Their repo is public, though. I will show the link in a bit.

108
00:20:04.990 --> 00:20:16.900
Skele | Wonderland: So you can check that out. Obviously, it's a non-standard resolver for UNES, just because it needs to go above the 32 byte limit, right?

109
00:20:17.070 --> 00:20:18.840
Skele | Wonderland: That being said.

110
00:20:19.820 --> 00:20:26.670
Skele | Wonderland: On top of that resolver, you can just extend that, let's say wrap that to basically

111
00:20:27.130 --> 00:20:31.810
Skele | Wonderland: You know, create a subset of domains that use

112
00:20:32.350 --> 00:20:40.449
Skele | Wonderland: I don't know, the… whatever ERCs that you want to use, and that should work. You can also extend that.

113
00:20:40.540 --> 00:21:00.539
Skele | Wonderland: To be able to add different properties to whatever you're registering, those being the portal address, the, you know, fault proof, this and that, or whatever, additional, parameter. Those, ideally, should be under an ERC, so people, know

114
00:21:00.690 --> 00:21:04.689
Skele | Wonderland: How to basically quote and what to expect.

115
00:21:04.810 --> 00:21:06.240
Skele | Wonderland: Back as a value.

116
00:21:06.460 --> 00:21:19.049
Skele | Wonderland: But yeah, so that's it. We'll be showing you guys, some links, and, like, whatever effort the guys from Rockaball are doing, it would be just supported.

117
00:21:19.410 --> 00:21:24.710
Skele | Wonderland: On the resolver that we built, so… That should be fine.

118
00:21:33.000 --> 00:21:51.989
Joshua Rudolf: Any comments or questions? Anything, maybe throwing it back to Unruggable guys? We can also, maybe this is… I don't know how relevant or interesting this is to the larger group. I think we've been meaning to schedule a smaller call for a while now with Unruggable, Wonderland, anyone else who wants to join, of course. So maybe we move some of this conversation over there.

119
00:21:53.050 --> 00:21:55.349
Thomas Clowes | Unruggable - ENS: Josh, if I'm okay to quickly jump in.

120
00:21:55.350 --> 00:21:56.209
Joshua Rudolf: Sure, of course.

121
00:21:56.210 --> 00:22:05.750
Thomas Clowes | Unruggable - ENS: Just for context, I'm Thomas from Unruggable. Yeah, the work Martin's been doing on this, we're obviously engaging with Josh and the team at Wonderland.

122
00:22:05.750 --> 00:22:20.210
Thomas Clowes | Unruggable - ENS: But this demo is kind of a proof of concept of a registry contract and a fully ENSIP spec-compliant resolver for resolving these chain IDs

123
00:22:20.210 --> 00:22:31.500
Thomas Clowes | Unruggable - ENS: on a subdomain of whatever ENS name is chosen to go with. So L2.eth was one that was discussed, cid.eth was another one.

124
00:22:31.590 --> 00:22:44.729
Thomas Clowes | Unruggable - ENS: in terms of Jack's questions, I think, kind of, the reason that a lot of these parameters have been included in the derivation of the 7785 chain ID is sort of,

125
00:22:44.730 --> 00:22:48.649
Thomas Clowes | Unruggable - ENS: So that you can interchangeably work with any of these values.

126
00:22:48.650 --> 00:23:10.029
Thomas Clowes | Unruggable - ENS: Assuming that you have that 7785 chain ID. So our registry allows you to convert between all of them, so if, for whatever reason, you need, a CAPE2 identifier, for example, you can get that from a 7785 chain identifier. Same with the 7930 and the coin type.

127
00:23:10.030 --> 00:23:22.899
Thomas Clowes | Unruggable - ENS: As defined within ENS specifications. Yeah, I think that in terms of 7785, obviously, lots of people have been contributing to that,

128
00:23:23.170 --> 00:23:41.910
Thomas Clowes | Unruggable - ENS: to the development of that spec, but basically that's kind of, I guess, the outstanding thing. Exactly what parameters go into the generation of that hash are up for debate, but we kind of need to agree on it. Ultimately, like, the CAPE2 hash can be used for non-EVM chains, for example.

129
00:23:41.920 --> 00:23:57.789
Thomas Clowes | Unruggable - ENS: But the, the standard chain ID 1 for Ethereum mainnet standalone, is not particularly clear for non-EVM chains. So yeah, as Martin suggested, it would be ideal if people could kind of have a look at

130
00:23:57.790 --> 00:24:10.520
Thomas Clowes | Unruggable - ENS: the registry and resolver contract that we've built, as well as these specifications, 7785 and 7930 as well, and comment now so that we kind of do it right first time.

131
00:24:14.060 --> 00:24:14.740
Jaack: Yeah.

132
00:24:15.560 --> 00:24:21.799
Jaack: Yeah, no, sorry to camera, but it's just, yeah, the thing about the chair idea was actually

133
00:24:22.200 --> 00:24:30.380
Jaack: if we find a way to standardize, chain identification, like the EVM chain ID across

134
00:24:30.690 --> 00:24:46.389
Jaack: chains that are non-EVMs as well, like, I don't know, there's a PATA chain ID, or a Cosmos chain also has some kind of string that is attached to a chain identification, so we can just hash that into a unified, into a unified hash.

135
00:24:46.560 --> 00:25:01.859
Jaack: all the chain ID, and not the number of the chain ID, like, it's EVM. I don't know if it's… it sounds, like, convoluted, but for example, this makes… makes sense for a possible L2 building on Cosmos, whatever that may mean.

136
00:25:01.860 --> 00:25:09.960
Jaack: But we know that some weird stuff has been happening lately of L2 becoming L1, so L1 becoming L2, so,

137
00:25:10.100 --> 00:25:13.139
Jaack: So what I mean is simply, like, not using

138
00:25:13.250 --> 00:25:25.530
Jaack: the EVM-biased chain ID, but instead using a generalized hashed, maybe, chain ID, like the type 2, for,

139
00:25:26.090 --> 00:25:35.080
Jaack: for, actually using settlement, like, prereferencing chains between each other. This… And that's just it.

140
00:25:37.090 --> 00:25:52.989
Thomas Clowes | Unruggable - ENS: Yeah, yeah, I agree. I think, like, even things like the roll-up address makes the kind of naive assumption that, roll-ups will all continue to work in the same way in the future, and that non-EVM chains work in similar ways.

141
00:25:52.990 --> 00:25:59.409
Thomas Clowes | Unruggable - ENS: There's kind of outstanding questions, for example, what exactly goes into that role address field.

142
00:25:59.410 --> 00:26:06.060
Thomas Clowes | Unruggable - ENS: for a chain that doesn't post state routes to L1, for example. I mean…

143
00:26:06.070 --> 00:26:16.179
Thomas Clowes | Unruggable - ENS: Yeah, these chain identifiers for interop could, in practice, be just a hashed version of the CAPE2 identifier, for example.

144
00:26:16.610 --> 00:26:18.670
Thomas Clowes | Unruggable - ENS: then, yeah, I mean…

145
00:26:19.660 --> 00:26:34.230
Thomas Clowes | Unruggable - ENS: Yeah. Martin and I have discussed this a lot. There's elements of 7785 where you kind of think to yourself, actually, do we need this? Does this solve the problem? Does it create more problems? And that's why, yeah.

146
00:26:34.280 --> 00:26:53.580
Thomas Clowes | Unruggable - ENS: we need to kind of continue to have conversations about it, and people need to be kind of proactively engaging in the conversation, rather than sort of when it's getting to that stage of being very close to completion, people sort of coming out of the woodwork sort of late in the day. We want to kind of have that conversation up front.

147
00:26:54.790 --> 00:27:02.830
Jaack: Yes, yes, I'd be happy to help with our experience in, you know, indexing chains across different ecosystems.

148
00:27:05.940 --> 00:27:13.359
Joshua Rudolf: Okay. Well, maybe on that note, we can, yeah, move on to the next agenda item, if that's okay?

149
00:27:15.010 --> 00:27:19.859
Joshua Rudolf: Alrighty, we have DMART here from Flash Boss team, who has been waiting patiently for…

150
00:27:20.740 --> 00:27:24.510
Joshua Rudolf: some, discussion on multiproving. DMARS, whenever you're ready.

151
00:27:25.830 --> 00:27:28.229
dmarz: Yes, hello, everyone.

152
00:27:28.450 --> 00:27:31.590
dmarz: Let me share my screen.

153
00:27:33.810 --> 00:27:38.610
dmarz: cool, yeah, so I think there's, like…

154
00:27:38.640 --> 00:27:58.939
dmarz: A bunch of disclaimers to add here. We work with a bunch of roll-ups, L2 teams at FlashBots, and, you know, there's, you know, certainly conflict of interest. I think I'll get out of the way before, when we, like, officially kick off this effort. But yeah, I wanted to basically talk about how we're gonna start a working group to accelerate L2 multi-proving.

155
00:27:59.250 --> 00:28:14.449
dmarz: And, you know, in particular, this is something that Ethereum in general has been very excited about, something we're hearing that institutions are very excited about as well to, you know, ensure the highest quality of security on their assets on Ethereum.

156
00:28:14.450 --> 00:28:20.999
dmarz: And so I put together this document, which I believe is on the agenda, and I'll just share in the chat as well.

157
00:28:21.000 --> 00:28:25.079
dmarz: And it outlines a few of the, sort of.

158
00:28:25.080 --> 00:28:31.650
dmarz: Opinions, that we want to take with this group, in order to move it forward and maximize success.

159
00:28:31.800 --> 00:28:50.590
dmarz: So yeah, the North Star here for us is, like, to make multi-proving the default security model for Ethereum L2s, with non-trivial value. And that doesn't mean everyone needs to do it, but we do want to kind of create this, like, very, you know, wrapped up package that people should be able to use.

160
00:28:50.640 --> 00:29:01.080
dmarz: And so there's a lot of ways we can do this, but I want to, share these, like, three goals that we want to start with, is, like, one… so we want to take the Pareto principle. I think there are…

161
00:29:01.080 --> 00:29:13.259
dmarz: an insane amount of roll-up architectures and teams, and I think that's super exciting, and I don't want to, you know, belittle any of the work there, but our goal is to focus on, like, the top 80% of TVL first.

162
00:29:13.260 --> 00:29:16.030
dmarz: In this, like, work stream.

163
00:29:16.140 --> 00:29:22.940
dmarz: And that doesn't mean we can't, eventually, expand to more, or it doesn't mean that, like.

164
00:29:23.200 --> 00:29:37.009
dmarz: other chains and stacks as well can't, fall along and, like, contribute to this effort. But, like, when we're making decisions, like, we want to ensure that, like, decisions are not blocked if they're, like, outside of this 80%, at least for the first phases.

165
00:29:37.100 --> 00:29:53.029
dmarz: We want to take a research engineering approach, so our, you know, the goal of the working group is not to have the finalized architecture, in the sort of, like, first sprint or phase, but we want to progress via POCs to uncover unknown unknowns.

166
00:29:53.030 --> 00:30:03.230
dmarz: And not designed for the unstate by day one. And then another concrete thing… this is gonna be very hard to do, but, like, we want to try and keep logos out of this as possible, and that's why I will…

167
00:30:03.470 --> 00:30:14.460
dmarz: do a bunch of conflict of interest sharing and all these things at first. But yeah, we really want to make it about shared marketing. Whoops, nope, that's the wrong word. We want to make it about shared architecture, not marketing.

168
00:30:14.490 --> 00:30:24.529
dmarz: And so yeah, that being said, I think because of the 80%, we'd love to start kicking off an OP stack Multiprover POC and an Arbitrum Orbit Multiprover POC.

169
00:30:24.640 --> 00:30:41.339
dmarz: And as well, another one of the more extremes we want to enable is a design goal… design goals document for a multi-prover market interface. So there's a lot of interesting questions there, similar to, like, PBS on Ethereum L1 or L2s, where, like.

170
00:30:41.540 --> 00:30:57.310
dmarz: how many provers is the ideal structure for liveness? What are the ideal liveness properties we want? You know, should, like, the cost burden be on the user, or should it be socialized? These types of questions we want to, like, dig into and have, like, an opinionated

171
00:30:57.310 --> 00:31:01.949
dmarz: design document that we can propose to the community. And then longer term, we want to, you know.

172
00:31:02.320 --> 00:31:11.400
dmarz: Expand to greater than 90% after that, converge on a generalized multi-prover architecture, and build a shared open source codebase, if possible.

173
00:31:13.600 --> 00:31:31.189
dmarz: Yeah, so the rest of the document, I won't go through it, but it's sort of… we explain why, you know, the risks of a single prover, multi-proving as the solution, what it enables. There's a document from Vitalik, which is the architecture that we most likely will go towards, but it's this pragmatic fast finality.

174
00:31:31.270 --> 00:31:36.880
dmarz: And I can share that document here as well, if you haven't read it.

175
00:31:37.240 --> 00:31:41.289
dmarz: Oh, that's not… Here you go.

176
00:31:42.940 --> 00:31:54.800
dmarz: Yeah, and so I sort of mentioned the North Star about this, and the TLDR above, some of the guiding principles, and then our immediate goals for POC phase.

177
00:31:55.020 --> 00:32:10.899
dmarz: Cool, so that's it. I'd love to answer any questions, and what we want to do is start assigning, basically, a coordinator for each of the POCs in the POC phase, and then we'll try to set up, like, some type of call, and we'll report progress back to this call as well.

178
00:32:11.020 --> 00:32:17.669
dmarz: And yeah, we'll try to do all of our updates in the L2 Interop GitHub repo and the Telegram chat.

179
00:32:17.880 --> 00:32:19.450
dmarz: Yeah, that's it from Nina.

180
00:32:23.070 --> 00:32:27.050
Joshua Rudolf: There's a question from Nam in the chat, sorry if I… did you already answer that, DMARS? Maybe I missed…

181
00:32:27.550 --> 00:32:39.819
dmarz: Oh, sorry, I missed it. The proof system for the built-in canonical roll-up bridges, or for applications using the multi-prover. Yeah, the goal would be for the canonical roll-up bridges at first.

182
00:32:40.000 --> 00:32:49.059
dmarz: And on top of that, like, for the POCs, I think the goal would actually to just be to, like, have, like, a parallel bridge. So I think that's…

183
00:32:49.480 --> 00:32:51.960
dmarz: I'm not sure what the…

184
00:32:52.120 --> 00:33:08.129
dmarz: Or at least that's how I've seen a lot of the ZK-proving teams have developed their initial versions, was they just had, like, a parallel bridge that was, like, ZK-proven. So I think it would be great if, for the POCs, we, like, get that to testnet and validate that in, like, a semi-production setting.

185
00:33:11.160 --> 00:33:14.650
dmarz: Would be very interesting. Yeah, I guess that may be… If that's the wrong focus.

186
00:33:15.360 --> 00:33:23.959
Nam: Yeah, I'm sure that could be a debate in and of itself, but, I think it's… it seems to me what you're saying is that the, like, the kind of, like.

187
00:33:23.960 --> 00:33:38.529
Nam: the production end goal, which I recognize is not part of research engineering, but, like, the eventual goal would be for, let's say, base optimism arbitrums, like the canonical roll-up bridges to basically move to this multi-prover system, and specifically within their interface.

188
00:33:40.630 --> 00:33:42.150
dmarz: Yes, exactly, yes.

189
00:33:47.330 --> 00:33:48.050
Nam: Cool.

190
00:33:49.940 --> 00:33:52.020
Joshua Rudolf: Any other questions? Comments?

191
00:33:57.000 --> 00:34:02.429
Joshua Rudolf: Thank you for coming on the call and sharing this. Looking forward to future updates on the multi-proving work.

192
00:34:07.530 --> 00:34:09.250
Joshua Rudolf: Alright, up next.

193
00:34:09.370 --> 00:34:12.179
Joshua Rudolf: Permit 3 from the ECHO team.

194
00:34:16.400 --> 00:34:17.219
Shahrukh Rao: Alright?

195
00:34:17.489 --> 00:34:20.029
Shahrukh Rao: Let me just share my screen.

196
00:34:24.360 --> 00:34:41.809
Shahrukh Rao: Alright, can you guys see my screen? Looking good? All right. Hey everybody, my name is Shah Rukhrau, I'm product lead at Eco. Long-time listener, first-time presenter, so bear with me. Today we're going to be talking about something that we've been working on internally called Permit 3.

197
00:34:41.820 --> 00:34:50.690
Shahrukh Rao: I'm gonna share these links in the chat after I present, so just, I'm gonna… so, I'm just gonna share the screen for now, but…

198
00:34:50.750 --> 00:35:00.329
Shahrukh Rao: And I want to reserve most of the time in this call for the time that we have to address some of the technical feedback, and I want to give a shout-out and a thank you for

199
00:35:00.330 --> 00:35:12.119
Shahrukh Rao: the people who did, start the feedback loop in Telegram, thank you so much for raising the concerns and some of the changes, proposed changes. We really want to address those directly, hopefully, if you have time in the call.

200
00:35:12.120 --> 00:35:27.430
Shahrukh Rao: But for those who are not aware, who are not caught up with Telegram, I'll just start with a quick TLDR of what Permit 3 is, and why we built it, and then I'm going to kick it to Kuril, who's one of the lead engineers that helped build Permit 3 to address some of those implementation decisions.

201
00:35:27.430 --> 00:35:42.359
Shahrukh Rao: So, quick TLDR of why we built Permit 3 is that Eco is obsessed with creating single-click stables and experiences. And we want to… and we are Ethereum first, and what we found is, increasingly, with the proliferation of L2s.

202
00:35:42.380 --> 00:35:50.969
Shahrukh Rao: Our users that want to enable… that want to do stablecoin actions have their balances spread across multiple source chains. And…

203
00:35:51.350 --> 00:36:02.049
Shahrukh Rao: the extent of the best technology that we have seen so far, to allow, like, really smooth interactions is Permit 2, but Permit 2, in essence, is domain constrained.

204
00:36:02.160 --> 00:36:16.219
Shahrukh Rao: And really, the UX, the single-click UX we want to achieve, kind of breaks apart with a fragmented balance if it's spread across multiple input chains. And so Permit 3 was built directly to address that problem directly.

205
00:36:16.390 --> 00:36:25.740
Shahrukh Rao: And quite simply, Permit 3 is a protocol that allows people to do cross-chain token approvals and transfers with a single signature.

206
00:36:25.750 --> 00:36:36.860
Shahrukh Rao: how this works, if I want to Eli 5 it, and then Kirill can go into more detail, is that we… if a permit tree is set up once on sourcing for the user.

207
00:36:37.130 --> 00:36:49.760
Shahrukh Rao: If a user has multiple… their balance is spread across multiple source chains, in the applications that we build, we can abstract their balances into a single global balance, and then with a single signature.

208
00:36:49.860 --> 00:36:55.909
Shahrukh Rao: Do any desired action they want, regardless of the number of source chains that their balances may be on.

209
00:36:55.940 --> 00:37:04.480
Shahrukh Rao: And you can think of it very simply as an extension… extension of the same pattern as permit 2, but in a multi-chain setting.

210
00:37:04.480 --> 00:37:20.740
Shahrukh Rao: So, what happens on the backend when a user creates a permit 3 signature is that you can think of it quite simply as, like, nested permits that solvers in the eco intent protocol can then unpack on the relevant source chains, and then create intents on behalf of the user.

211
00:37:20.970 --> 00:37:34.420
Shahrukh Rao: And those intents can either do the desired action directly, when message sender is not a concern, on the target chain, or what Bermith3 can allow you to do is create intents to transfer the funds

212
00:37:34.500 --> 00:37:47.679
Shahrukh Rao: To the user, to the user's wallet on the destination chain, and then use the final permit to actually do the desired action for the user, so that you can preserve the message sender and the attribution, which is very important for payments.

213
00:37:47.730 --> 00:38:06.539
Shahrukh Rao: So that's basically… it's a very… it's very simple, but very powerful, and it really allows us to create really nice experiences. So that's basically the TLDR for Permit 3. I'll stop here, and Kuril, if your mic is on, I'm gonna jump a little bit into GitHub, and

214
00:38:06.620 --> 00:38:19.350
Shahrukh Rao: maybe you can help walk them through some of the architecture in a little bit more detail, and then we can maybe save some time to address some of the feedback that we saw in Telegram, or any other feedback that people may have in the time that we have.

215
00:38:23.000 --> 00:38:23.680
Kiryl: Awesome.

216
00:38:27.350 --> 00:38:27.920
Shahrukh Rao: Alright.

217
00:38:28.930 --> 00:38:30.180
Shahrukh Rao: Great, go for it.

218
00:38:30.550 --> 00:38:49.249
Kiryl: Alright, so basically, you know, like, if you're familiar with permit to architecture, is, what they're trying to do is to create, like, a batch signing process, where in one batch, you can have, multiple allowances, and also, like, it can be allowances for multiple tokens, and then

219
00:38:49.250 --> 00:39:04.900
Kiryl: if you've been using Uniswap, knowingly or unknowingly, you've been already using Permit 2 a lot. And the general idea that instead of giving ERC20 allowance to the contract, that you're working with, for example, Uniswap router.

220
00:39:04.900 --> 00:39:22.320
Kiryl: You will just create, basically an infinite allowance to that Permit 2 contract, and then Permit 2 contract is your intermediary for creating, single signature allowances. So we're extending this idea for Permit 3 is…

221
00:39:22.320 --> 00:39:32.479
Kiryl: Now, instead of creating a batch of approvals for a single chain, we're basically creating several batches, one is for each EVM chain.

222
00:39:32.480 --> 00:39:42.610
Kiryl: And then we basically create a Merkle tree, from those batches, and requesting only one signal, user signature for that tree.

223
00:39:47.070 --> 00:39:53.159
Kiryl: Okay, so there is many things that you can do with PermitTree, and

224
00:39:53.160 --> 00:40:08.690
Kiryl: like, things that are different from Uniswap is the allowance system. So, with Uniswap, you can have, like, asynchronous nonsense, but you still, like, set an allowance as a final number. With Permit 3, the change that we did is to allow a synchronous nature

225
00:40:08.690 --> 00:40:19.420
Kiryl: for environments where you have, like, a lot of transactions, and a lot of authorization can be happening, and balance can be adjusted. So, in essence, Permit 3 allowances the…

226
00:40:19.520 --> 00:40:34.579
Kiryl: incremental, so there are rather operations like increase allowance and decrease allowance instead of setting allowance. And then for each chain, you create a batch, and batch inside of it can be also not,

227
00:40:34.670 --> 00:40:45.540
Kiryl: uniform, because in one batch, you can mix allowance increases, allowance decreases, and direct token transfers. And you can include as many tokens as you want.

228
00:40:45.620 --> 00:41:00.550
Kiryl: Then, like, you multiply it by amount of chains, and now you can have 5 chains, and for each of the chains, you can put a batch with, different tokens, different addresses, being created allowance, and then you…

229
00:41:00.880 --> 00:41:18.060
Kiryl: create a Merkle tree of the whole thing and create one signature. And one optimization that we also included here is we were thoughtful about gas cost and making sure that on the most expensive chains, e.g. Ethereum, we are

230
00:41:18.090 --> 00:41:37.839
Kiryl: trying to get as small Merkle proof as possible, so we're gonna save up on the call data on the gas used. And to do that, we're basically leaning heavy into using unbalanced Merkle tree, and in this case, for Ethereum, the amount of leaves that you need to supply for the proof is just one.

231
00:41:37.840 --> 00:41:50.390
Kiryl: And then for cheaper chains, they can be, like, down in, down… down the part in that balance tree, and in this case, we… we're not caring about, you know, the length of the, of the…

232
00:41:50.480 --> 00:41:52.040
Kiryl: Wrinkle-proof.

233
00:41:53.400 --> 00:41:59.599
Kiryl: Do you guys have any questions? Do you… do you want me to, like, elaborate in any of that?

234
00:42:06.390 --> 00:42:07.390
Joshua Rudolf: You're just one.

235
00:42:07.390 --> 00:42:08.340
Kiryl: Give me some more.

236
00:42:08.340 --> 00:42:17.459
Joshua Rudolf: I dropped a question in the chat, and sorry, this is also coming from me having not spent enough time digging into the documentation yet, but I'd be curious to hear more about just sort of the…

237
00:42:19.430 --> 00:42:34.930
Kiryl: So, trust assumptions for the off-chain system. You know, like, there was already a concern brought up that, like, oh, now we're building a Merkle tree, and the actual, like, underlying data is abdicated for… from the, wallet signing user.

238
00:42:34.930 --> 00:42:50.230
Kiryl: So, you know, like, the first… or actually the answer comes from the way you phrased the question, is trust assumptions. In many cases, users still trust the front end or any other application that it's using. Like, when you're creating a permit 2,

239
00:42:50.230 --> 00:43:05.119
Kiryl: signature, you're also not exposed to much of what's going on under the hood, and even if there is more exposure into the 712 signing with, like, MetaMask wallet, there is still a possibility to do some phishing attack if

240
00:43:05.120 --> 00:43:21.469
Kiryl: the front end or any other software that it used is malicious. And another aspect of it, we basically just released, you know, like, final public release of the Permit 3 happened yesterday, and in the future, we're thinking about working with wallet providers and making sure that

241
00:43:21.470 --> 00:43:44.479
Kiryl: they can be supporting 712 signatures with nested Merkle tree data structures. So, as right now, like, it is not ideal, but, you know, we are working on that, and we're seeing that in near future, as we get more traction and user adoption, the wall is going to be able to understand, you know, hashing of the substrates and organizing it into the Merkle tree, and presenting it with a nice UI.

242
00:43:48.820 --> 00:44:08.089
Kiryl: Cool. And just to give you, like, a little bit of idea why Permit 3 is so powerful for us, like, it, basically combines together nicely with the intent system that we are building, where, to create an intent, we're basically just doing user log into a unique wall… unique vault. So for each vault.

243
00:44:08.090 --> 00:44:20.030
Kiryl: For each intent, on the source chain, unique vault address is created, and then for user to create an intent, the only thing that is not… that is needed is to transfer that required token into the vault.

244
00:44:20.030 --> 00:44:43.580
Kiryl: And with Permit 3 and gasless system, all that it needs is to create allowance for that Vault, and then Vault is capable to pull from, you know, using, like, transfer from and pull from that allowance. And with Permit 3, in the gasless experience and a stablecoin experience, all user needs to do is sign a message that contains permits for a bunch of chains.

245
00:44:43.580 --> 00:45:04.600
Kiryl: And, those allowances that are created can be for different intent walls. And in this case, just with one signature, we can create as many actions as needed, on as many chains as needed. And that enables us to… to bring ethos of eco to… to any user, which is.

246
00:45:04.600 --> 00:45:11.089
Kiryl: With one signature, a user can create any amount of actions with stablecoins and achieve any amount of results.

247
00:45:11.460 --> 00:45:26.279
Marissa Posner: Can I… can I ask a question? Like, the worst case scenario, let's say, like, the spender does nothing, and… or just, like, drains my tokens and walks away, like, what recourse do, like, I as the user have to get my money back?

248
00:45:27.920 --> 00:45:41.990
Kiryl: As blockchain, you know, it's like, it's a simple cent with ERC20, or given allowance with ERC20. If an allowance is given to malicious actor and token is transferred, there is nothing can be done, because, permit 3, in essence.

249
00:45:41.990 --> 00:46:01.449
Kiryl: doesn't, you know, like, create balances or wrapping tokens anyhow, so it's only, like, managing allowances. And let's say if, if allowance was created, and then, like, some… for the contract, let's say a contract gets compromised, we support, a system of locking down the allowance.

250
00:46:01.450 --> 00:46:09.679
Kiryl: And it's similar as Permit2 does it, so you basically have an emergency path to disable allowances for a certain actor.

251
00:46:11.260 --> 00:46:28.450
Marissa Posner: Got it. So… so there's no recourse, I guess, in those… that case. Would you say that there's a… is there a way that enforces, like, I guess, settlement outcomes? Because, like, what if I say I want to do one thing, but something else happens instead? Is… is there a way to enforce that at all?

252
00:46:29.540 --> 00:46:45.729
Kiryl: I think not with Permit 3 directly, as I mentioned, because, you know, NHCRC20 allowance, whoever gives it to all equivalent token is done, but if we're talking about the whole eco ecosystem, we're pairing it with, our…

253
00:46:45.730 --> 00:47:10.270
Kiryl: intent, and our intents describing clear action that can happen, and then that action is abstracted away by, you know, behind that unique vault address. And then you basically create allowances for specific intents, rather than, like, huge, wide allowances for the whole smart contract. And then intent can only result into desired action, and if it does not happen.

254
00:47:10.400 --> 00:47:15.789
Kiryl: Before the deadline, then all the funds are refunded. So, I hope that… I hope that answers your question.

255
00:47:17.270 --> 00:47:18.399
Marissa Posner: Okay, got it.

256
00:47:25.950 --> 00:47:26.819
Joshua Rudolf: Any other questions?

257
00:47:26.820 --> 00:47:28.020
Kiryl: Alright.

258
00:47:28.530 --> 00:47:45.769
Kiryl: And just, you know, like, I hope no more questions on that part, you know, so now we sort of covered, you know, all this powerful experience of having one signature and being able to move as many ERC20 tokens on as many chains as you wanted, and…

259
00:47:45.770 --> 00:47:59.900
Kiryl: When we created Permit 3, we were, like, solely thinking about processing experience, and we were googling other Permit 3, like, ideas and implementations, and there was nothing, and then, like, at the late stage of the audit, somehow.

260
00:47:59.900 --> 00:48:16.850
Kiryl: two more Permit 3 projects came up that was done, like, some time ago, but never gained a traction, and a lot of, like, their innovation were to expand VNRC20 tokens. And that means supporting NFTs and supporting CRC1155,

261
00:48:16.850 --> 00:48:35.140
Kiryl: And we decided to hop on the train as well, and make sure that we are not competing on… with other, like, Permit 3 suggestions, but rather improving what came before. And what else we added is, with our Permit 3 system, in one signature, users could create allowances for ARC20 tokens.

262
00:48:35.140 --> 00:48:54.280
Kiryl: allowances for NFTs, and ERC1155 tokens as well. And allowance can be per unique NFT ID, or a user can say, I give, like, a wildcard allowance for 5 NFTs that I own from the whole collection.

263
00:48:54.280 --> 00:49:02.109
Kiryl: So, yeah, this is some additional bonus that we support right now. And in some future, we're also planning to bring, ARC

264
00:49:02.130 --> 00:49:06.569
Kiryl: basically NFTs and other, like, token senders to our,

265
00:49:07.340 --> 00:49:27.440
Kiryl: to our intents, and create, like, a whole ecosystem where, with one signature, a user can basically authorize any amount of any types of assets, and create any kind of complex cross-chain actions where a user just, you know, gaslessly creating one signature and covering everything. And also, like, I wanted to mention that

266
00:49:28.900 --> 00:49:41.409
Kiryl: We are utilizing the benefit of ERC7702, and if user, you know, completely trusts Eco, and they don't have smart accounts, smart wallet, or they can upgrade

267
00:49:41.410 --> 00:49:53.689
Kiryl: just do 7702 upgrade for Permit 3 approver, and what that thing does is it allows to create ERC20 approvals for user tokens to the Permit 3 contract.

268
00:49:53.690 --> 00:50:00.069
Kiryl: without any user, input in the future. So that means, like, with doing 7702 upgrade.

269
00:50:00.070 --> 00:50:15.689
Kiryl: user creating, like, infinite allowance for all their RC20 tokens for Permit 3 contract, and in this case, like, future tokens, all things like that can be just, you know, like, already available and be just behind one signature.

270
00:50:15.770 --> 00:50:26.299
Kiryl: And if user has a smart wallet, we also created a smart wallet module, so, like, any user can install that module to their smart wallet and also enable that behavior.

271
00:50:34.270 --> 00:50:34.960
Joshua Rudolf: Awesome.

272
00:50:35.820 --> 00:50:38.300
Joshua Rudolf: Well, thank you, ECHO team.

273
00:50:39.170 --> 00:50:40.679
Joshua Rudolf: It's great to learn more about it.

274
00:50:41.940 --> 00:50:43.230
Kiryl: Awesome. Thank you, guys.

275
00:50:44.270 --> 00:50:45.300
Shahrukh Rao: Thanks, everybody.

276
00:50:47.090 --> 00:50:50.189
Joshua Rudolf: Alright, I think that maybe brings an end to this week's call.

277
00:50:51.610 --> 00:50:52.850
Joshua Rudolf: Thank you all for joining.

278
00:50:53.050 --> 00:50:54.470
Joshua Rudolf: See you next time.

279
00:50:59.420 --> 00:51:00.350
Joshua Rudolf: Adios.

280
00:51:01.920 --> 00:51:02.719
Ian Norden: Thanks, guys.

