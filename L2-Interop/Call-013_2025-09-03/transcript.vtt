WEBVTT

1
00:12:48.680 --> 00:12:49.740
Joshua Rudolf: Hey, Lou.

2
00:12:51.920 --> 00:12:52.820
Doris Hernandez | Functor: GM.

3
00:12:54.310 --> 00:12:56.320
Joshua Rudolf: GM, how's everybody?

4
00:13:00.580 --> 00:13:02.310
Doris Hernandez | Functor: Saying goodbye to summer.

5
00:13:22.720 --> 00:13:24.549
Joshua Rudolf: We'll get started in a minute.

6
00:13:55.840 --> 00:13:56.880
Orest Tarasiuk (t1): Hey guys!

7
00:13:58.270 --> 00:13:59.100
Joshua Rudolf: Hello.

8
00:14:30.140 --> 00:14:34.590
Joshua Rudolf: All right, let's get started. I'm sure people will keep trickling in.

9
00:14:34.920 --> 00:14:46.779
Joshua Rudolf: Welcome to the L2 Interop Working Group. This is call 13 in the series, and it is PM Issue 1713 in the PM repo.

10
00:14:47.290 --> 00:14:49.829
Joshua Rudolf: I will share the agenda in the chat.

11
00:14:50.030 --> 00:15:03.229
Joshua Rudolf: And we can just dive into things, starting off with a recap and maybe brief Q&A of the protocol update 003 that went out last week on the Improve UX track.

12
00:15:05.540 --> 00:15:06.889
Joshua Rudolf: Go for it, Barnaby.

13
00:15:08.530 --> 00:15:11.070
Joshua Rudolf: Oh, you might need permission to share your screen if you want.

14
00:15:13.570 --> 00:15:19.230
Barnabé Monnot: Oh, that's okay, I can just talk. Maybe we can drop the link in the chat.

15
00:15:20.240 --> 00:15:37.499
Barnabé Monnot: So yeah, we had, like, a post last week from EF Protocol, our R&D teams working on Protocol and interop, laying out a set of projects that we intend, like, to take on to accelerate Ethereum interoperability.

16
00:15:37.880 --> 00:15:50.539
Barnabé Monnot: So, some of these projects that you see on this note, they are things that were already active, but I think the aim of the post was to try and frame them, like, with a greater sense of

17
00:15:50.630 --> 00:15:59.170
Barnabé Monnot: strategic purpose or direction that ties together, like, all of these different initiatives, and this is

18
00:15:59.170 --> 00:16:12.609
Barnabé Monnot: I'm speaking, like, from my perspective, like, how I understand this, and few of us in EF have, I would say, slightly different perspectives on this, but to me, the through line of all of this is trying to close the gap between

19
00:16:12.610 --> 00:16:26.729
Barnabé Monnot: what would be some kind of ideal, protocol interop, so Ethereum protocol interop, and effectively what we have today, in terms of our interoperability stack. And the gap that exists between the two

20
00:16:27.010 --> 00:16:29.389
Barnabé Monnot: To me, I frame it a little bit as…

21
00:16:29.440 --> 00:16:49.309
Barnabé Monnot: the gap between what Ethereum provides as settlement, like, what the Ethereum protocol provides, and what alternative settlements exist. So, for instance, Ethereum settlement is quite expensive, because you have to coordinate, like, this very large set of validators to come together and to sign off on, like, a route.

22
00:16:49.310 --> 00:16:53.299
Barnabé Monnot: And that takes time, that takes, like, coordination of billions of dollars.

23
00:16:53.340 --> 00:17:08.550
Barnabé Monnot: And so there's many ways to accelerate that and to, yeah, to have alternatives. So one of them is just third-party bridges, like, they have their own way of settling the messages and the value that transits through them.

24
00:17:08.599 --> 00:17:26.869
Barnabé Monnot: Either because they reduce, let's say, the economic security, or because they have their own trust or reputation, like, if you're… if you're Circle and you're doing your own, asset issuance, like, that's… yeah, you're backing that through… through your own, your own brand, essentially.

25
00:17:27.150 --> 00:17:43.679
Barnabé Monnot: that's one way. And another way to… to bridge the settlement gap, or to, like, almost, like, make it disappear, is through intents. Like, you… you… you essentially, like, move a settlement risk from the user to another party, which is the solver or the filler. And so…

26
00:17:44.280 --> 00:17:55.880
Barnabé Monnot: in my sense, the more we close the gap between the ideal Ethereum settlement and these other various forms of settlement, the better we can improve.

27
00:17:55.930 --> 00:18:11.869
Barnabé Monnot: interoperability, like, across the stack and for every types of use case. For instance, when we close the distance between Ethereum settlement and third-party bridges, I think that makes asset issuance on Ethereum become a stronger value proposition.

28
00:18:11.870 --> 00:18:27.979
Barnabé Monnot: when we close the gap between Ethereum settlement and between intents, we reduce the risk that third parties are taking on behalf of the user, and so we also reduce the cost, and we can make things more trustless. And so there's lots of benefits to doing that.

29
00:18:28.100 --> 00:18:31.800
Barnabé Monnot: And so, in the project that we have.

30
00:18:31.950 --> 00:18:40.349
Barnabé Monnot: The first stream is really about, laying down, like, some of the foundations of intent-based architecture, so…

31
00:18:40.390 --> 00:18:58.099
Barnabé Monnot: we think it's a good place to start, because this intent layer is, like, very close to the UX, like, it's been recognized as a very strong alternative for users to just, like, communicate operations that they want to do across chains. So this…

32
00:18:58.670 --> 00:19:02.629
Barnabé Monnot: centrality, I would say, almost, of, like, the intent layer makes it that

33
00:19:02.720 --> 00:19:21.979
Barnabé Monnot: it's a good place to push standards, for instance, from. Like, when you… when you bundle, like, other standards, like, interoperable addresses, cross-chain messaging, along with, like, these intents that… that realize, like, a lot of the information that the users communicate, yeah, that can be a very strong vector of adoption.

34
00:19:22.020 --> 00:19:32.750
Barnabé Monnot: And it still feels like at this intent layer, there's… there's a lot of greenfield designs that we… that we can explore. So, open intent framework, like, we are looking into different extensions, different,

35
00:19:32.950 --> 00:19:51.780
Barnabé Monnot: modules that can be added to strengthen its stack. The FM interoperability layer, EAL is another, like, new design that seeks to fill, like, some of the gaps of the existing, like, state of the art. So, yeah, there's… it does feel like there's a lot that we can improve, here.

36
00:19:52.270 --> 00:20:07.160
Barnabé Monnot: Another part that I think makes intents, like, fairly interesting to focus on is that the interface is likely very future-proof, so intents today are served with, like, these backends of solvers or fillers that have their

37
00:20:07.160 --> 00:20:14.880
Barnabé Monnot: own capital, but as the backends evolve, and for instance, like, with snackification and faster settlement.

38
00:20:14.940 --> 00:20:30.800
Barnabé Monnot: the interface remains, like, pretty much the same. Like, the user can still communicate their intent, like, the things that they want to do, through the same types of things that they would use today. And so, it can be very transparent, like, whenever we improve upon the backends, like, this can be immediately reflected to

39
00:20:30.800 --> 00:20:36.189
Barnabé Monnot: to the… to the user, so I think that's a really powerful, thing. So…

40
00:20:36.590 --> 00:20:47.039
Barnabé Monnot: starting from this intense, like, laying down, like, very strong foundations for, let's say, a unified, seamless Ethereum stack of interoperability.

41
00:20:47.210 --> 00:20:58.360
Barnabé Monnot: That's part one. And then part two is seeking as much as possible to close the gap between Ethereum settlement, where it is today, and where it should be in the future. And so…

42
00:20:58.500 --> 00:21:15.529
Barnabé Monnot: the main thrust here is essentially making settlement faster. So, for L1 itself, for instance, by reducing slot times, by having a more usable fast confirmation rule, which is something that I think will be presented in a month on this interop working group.

43
00:21:15.550 --> 00:21:29.559
Barnabé Monnot: And by having faster finality in the order of a few seconds rather than 13 to 19 minutes, as it is today. So I think this is really exciting and something that we should really accelerate to close the gap.

44
00:21:29.950 --> 00:21:35.070
Barnabé Monnot: That's for L1, and then for L2s, faster settlement, with…

45
00:21:35.150 --> 00:21:47.780
Barnabé Monnot: for instance, with 2 out of 3 finality mechanisms. Like, we think this is a really interesting option to explore for optimistic products to reduce the length of their withdrawal windows.

46
00:21:47.780 --> 00:21:55.510
Barnabé Monnot: That's one thing. Another thing that we also intend to explore quite a bit is snarkification of everything, like, that's going to be

47
00:21:55.510 --> 00:22:12.690
Barnabé Monnot: also the main first for other projects that we have going on in EF, and yeah, ZK proofs just allow us to get instant proofs and verifiable computation, and be able to make statements about what happened, like, on different domains, and since the costs are

48
00:22:12.690 --> 00:22:22.329
Barnabé Monnot: becoming lower and lower, I think this is something that we… we need to be, yeah, thinking proactively, like, how do we integrate this into the architectures of tomorrow? So…

49
00:22:22.390 --> 00:22:35.239
Barnabé Monnot: yeah, starting from intense, building up our waiver, and then closing the gap for ideal settlement on a few. And if we do that, I think we'll have… we'll be in a much better place than we are today.

50
00:22:44.670 --> 00:22:47.310
Joshua Rudolf: Awesome. Thanks, Barnaby. Any questions?

51
00:22:51.120 --> 00:22:57.890
Kalman Lajko: So… I had a quick question about, EIL. What is this Ethereum interpret layer exactly?

52
00:22:59.030 --> 00:23:04.280
Marissa Posner: Yeah, I can jump in there. Josh Barnaby, wanted me to take the, lead on that one?

53
00:23:04.280 --> 00:23:04.890
Barnabé Monnot: Please don't.

54
00:23:05.520 --> 00:23:19.869
Marissa Posner: So yeah, kind of as we outlined in the post, YAYL is this trustless, cross-L2 interop layer. So it's all about kind of having these multi-chain transactions, but while keeping the user in control and preserving Ethereum's core values.

55
00:23:19.920 --> 00:23:31.579
Marissa Posner: So just, I just put out, like, a tweet about it, I can share it in the chat, after I finish this, kind of clarifying what it is, what it isn't. And currently, we are still very early on.

56
00:23:31.580 --> 00:23:42.190
Marissa Posner: we care the most about, like, making sure that your ops stays aligned with Ethereum's core values, so we're just trying to figure out some more of the details on that. So, a more detailed spec.

57
00:23:42.190 --> 00:23:52.139
Marissa Posner: will be released mid-October, and then in November at DevConnect, we'll open things up for, like, broader community feedback, experimentation. We want to hear your guys' thoughts about it.

58
00:23:59.420 --> 00:24:07.850
Kalman Lajko: But will it be, like, Acclayer? Will it be, like, Chainlink? Will it be, like, any of these bridge solutions where multiple validators transfer information across chains, or…

59
00:24:10.050 --> 00:24:25.870
Marissa Posner: Yeah, we'll release more details, kind of, as we get closer, too, but I kind of, in my post, kind of talked about some of that, that, we are… it is only a solution for Ethereum and Ethereum's roll-ups. It is not a solution for Alt-L1s, for example.

60
00:24:29.240 --> 00:24:37.270
Doris Hernandez | Functor: Just to clarify, so this is, like, a cross-chain messaging protocol, in a way, or improving something like that, right? What is exposed in the…

61
00:24:38.180 --> 00:24:39.259
Doris Hernandez | Functor: In the block.

62
00:24:39.880 --> 00:24:45.569
Marissa Posner: It's a… it's a cross… yeah, I would say it's a cross-chain, transaction layer. It's kind of how we're thinking about it.

63
00:24:46.410 --> 00:24:46.970
Doris Hernandez | Functor: Okay.

64
00:24:46.970 --> 00:24:53.179
Mislav | Biconomy: And so this… transaction layer, I… I read a little bit in the post that it's…

65
00:24:53.290 --> 00:24:57.660
Mislav | Biconomy: basically executing transactions on multiple chains? Is this on the level of…

66
00:24:57.980 --> 00:25:05.869
Mislav | Biconomy: Sending messages from chains on execution, or is this being executed on the application layer, or is this something you can't share at this point?

67
00:25:06.240 --> 00:25:17.569
Marissa Posner: Yeah, that's something that is still an implementation detail that we are working through, and that will, go out, a more, like, detailed answer to that question will come out mid-October.

68
00:25:19.840 --> 00:25:20.920
Mislav | Biconomy: Alright, thanks.

69
00:25:31.400 --> 00:25:41.190
Doris Hernandez | Functor: Another question on this one, will this be… this EIL will be part of the protocol, will be something on top that users can implement, right? So, how would that look like?

70
00:25:41.810 --> 00:25:58.930
Marissa Posner: Yeah, that's a great question, that we can share. So it is not a… it's not something that will go into a hard work, for example, it does not require protocol, changes in that regard. It will be, there will be a bunch of ERCs, that kind of combine together to define the standards, around the protocol.

71
00:26:03.890 --> 00:26:06.459
Doris Hernandez | Functor: Okay, so basically only on the execution layer.

72
00:26:07.830 --> 00:26:08.700
Marissa Posner: Correct.

73
00:26:09.610 --> 00:26:10.440
Doris Hernandez | Functor: Thanks.

74
00:26:15.470 --> 00:26:25.619
Hudson Jameson: Quick question. Is there a reason that it isn't… that it's EVM only and not Alta L1? Just… is it just because this is built on Ethereum, so you're just keeping it EVM compatible?

75
00:26:26.020 --> 00:26:41.560
Marissa Posner: Yeah, I think the thinking was, like, you know, we work for the Ethereum Foundation, so we prioritize interoperability with Ethereum and Ethereum's roll-ups. There are complexities in implementation details, around Alt-L1s that they just wouldn't be compatible with.

76
00:26:41.560 --> 00:26:52.379
Marissa Posner: So… yeah, it wouldn't… it wouldn't work, but perhaps there's a way in the future someone could perhaps, like, build an adapter. Yeah, I don't know that it would be able to work, though.

77
00:26:53.270 --> 00:26:54.290
Hudson Jameson: Thank you.

78
00:26:58.080 --> 00:27:02.910
Nam: How do you think about, like, all the EVM L2s that are settling to Ethereum?

79
00:27:06.430 --> 00:27:16.650
Marissa Posner: Yeah, that, like, I would say that is not our main focus. Kind of our main focus of this is mostly on, like, Ethereum, and its roll-ups.

80
00:27:18.200 --> 00:27:21.389
Mislav | Biconomy: So, so what I'm getting from this, this is essentially on…

81
00:27:21.710 --> 00:27:29.830
Mislav | Biconomy: multi-chain extension of the relaying bundling part of, like ERC4337 and stuff similar to that.

82
00:27:32.310 --> 00:27:36.800
Marissa Posner: I can't comment on that at this time, but more details should be made available in October.

83
00:27:37.170 --> 00:27:38.050
Mislav | Biconomy: Alright, thanks.

84
00:27:38.410 --> 00:27:48.769
Jaack: Can I ask, last question? Is this only available for EVM rollups, or is this all roll-ups that settle on Ethereum?

85
00:27:50.650 --> 00:28:00.979
Marissa Posner: Right now… well, so the plan is EVM, to start. In the future, there might be a way for other roll-ups, but yes, the plan is EVM.

86
00:28:03.850 --> 00:28:26.999
Marissa Posner: And just so you know, we're not… we're not secretive. I see a comment in the chat. We're not secretive because, like, we are trying to hide something. We're secretive because we just haven't figured out all the implementation details, and ideally, this would have come out later, but this blog post was coming out, and it didn't feel right to have a post talking about how we're improving, like, crypto UX on Ethereum without talking about Ethereum Interop Layer, something that is going to become part of the conversation.

87
00:28:27.000 --> 00:28:38.800
Marissa Posner: towards the later end of this year, and so that's why we included it. Ideally, this would have, I think, waited until, mid-October when we come out with the post, so I'm so sorry for, like.

88
00:28:38.800 --> 00:28:41.839
Marissa Posner: not revealing all the details now, I know it must be so annoying.

89
00:28:42.950 --> 00:28:56.939
Hudson Jameson: It's totally understandable. I was gonna say, what's the best thing we can do in the meantime to either keep up with it or support any of the research behind it, or is there not really a way? Because there needs to be kind of a full coming-out party in October?

90
00:28:56.940 --> 00:29:20.889
Marissa Posner: Yeah, that's a great question. I think, like, once we post, mid-October, then we will really, like, be able to solicit feedback from the community, your ideas, how we can make it better. I'm sure there's some extensions, that we could write. Yeah, like, someone in the chat says, cross-VM support, for the implementation would be interesting, and, like, of course, like, all of that comes with once we share the implementation details and the specs, which is not finished, and things are still changing.

91
00:29:21.000 --> 00:29:35.029
Marissa Posner: So, yeah, once that is all out, we would love to have you guys, like, think of how you can break it, like, how, like, how it can be improved, like, things like that. I mean, we would like to think that it will be, tested as well.

92
00:29:41.360 --> 00:29:45.769
Joshua Rudolf: Cool, maybe one last question in the chat from Giorgios Merzo, did you want to touch on that one?

93
00:29:48.910 --> 00:30:06.539
Marissa Posner: Got it. Yes, oh yeah, is this related to the OAF initiative at all? Yeah, so, like, this does not contradict OAF. OAF will continue to exist, and it has, like, use cases that are best for it, and I think, like, Intents also have a use case.

94
00:30:06.600 --> 00:30:13.540
Marissa Posner: In that regard. So, yeah, this… this is not in contrast to OIF, this is a different, like, trans…

95
00:30:13.610 --> 00:30:15.789
Marissa Posner: transaction layer, I would say.

96
00:30:18.150 --> 00:30:24.400
Joshua Rudolf: Yeah, I'll just add that we're excited to continue supporting the OIF, and for the OIF to play a big role going forward as well.

97
00:30:26.690 --> 00:30:30.329
Joshua Rudolf: Any, any other questions on EIL or Vietnam?

98
00:30:30.730 --> 00:30:46.510
Nam: Yeah, maybe… maybe, zooming out a bit from the EIL, I'm… I'm wondering, like, like, there's a bunch of different, I guess, efforts going on, right, which is great, like, laid out in a blog post. For me, for example, I think, striking out is, like, the OIF,

99
00:30:46.510 --> 00:30:56.929
Nam: I think it's, like, 7786, now the EIL, and I'm wondering, like, if you guys have kind of, like, a view of, like, hey, like, if I'm, like, a, let's say, application developer, if I'm a DeFi developer.

100
00:30:56.930 --> 00:31:09.269
Nam: if I'm, like, an interop developer, like, how should I think about, basically, like, how to kind of, like, right, like, do so in an aligned, like, collaborate in an aligned manner, or, like, how am I supposed to, like, how would I…

101
00:31:09.280 --> 00:31:16.869
Nam: how should I think about, like, okay, if I built a lending protocol, right, like, I can rely on this being there, and this is the recommended path going forward.

102
00:31:16.920 --> 00:31:19.210
Nam: Or is that something that, yeah.

103
00:31:19.600 --> 00:31:21.230
Nam: Yeah, I guess that's maybe my question.

104
00:31:26.290 --> 00:31:29.620
Barnabé Monnot: I can give some thoughts… oh, sorry, Josh, go ahead.

105
00:31:29.620 --> 00:31:30.720
Joshua Rudolf: Yeah, go for it.

106
00:31:32.610 --> 00:31:48.960
Barnabé Monnot: Yeah, I think the ideal state would be having, like, clear user stories and use cases, and say, if you're building this, like, that's what the stack looks like. Like, OIF is, for instance, extremely modular, so it addresses, or at least is supposed to address, like, many different

107
00:31:49.100 --> 00:32:08.849
Barnabé Monnot: parts of the app stack, like, if it's more like the backend with solvers, or if it's more the interface, or the intent expression, and dissemination, etc. So, making clear, like, what's the right interface for which problem, and making the interface as

108
00:32:09.010 --> 00:32:15.129
Barnabé Monnot: agnostic as possible with, like, the backend that supports it. I think that would be…

109
00:32:15.130 --> 00:32:30.670
Barnabé Monnot: To me, at least, a clear win, because then you don't have to point people to, oh, there's, like, three different things that you should be thinking about and supporting, but say more, like, there's this one interface that you should be familiar with, and if you use the default, it's going to be great, and if you want to

110
00:32:30.870 --> 00:32:37.429
Barnabé Monnot: tweak the defaults, like, the interface allows you to do that. So, yeah, abstract away as much of the complexity as possible.

111
00:32:37.590 --> 00:32:51.729
Barnabé Monnot: abstraction is also good, because that allows you to have, I would say, less vendor lock-in and more, like, yeah, freedom to customize your own stack. So, personally, like, that's what I would support and where I want us to be.

112
00:32:51.730 --> 00:33:04.700
Barnabé Monnot: Within a couple of months, with, like, yeah, OIF being much further along in its development, EIL becoming more public and open source, so yeah, I think we'll get there pretty quickly.

113
00:33:05.150 --> 00:33:12.769
Nam: Gotcha. Maybe if I can repeat back, are you saying that, like, basically developers ideally should use the OIF, or intent interface, and…

114
00:33:12.790 --> 00:33:25.339
Nam: like, basically every kind of effort otherwise will kind of, like, support, right, like, faster, more trustless settlement of intents, but the kind of, like, the way app developers, as they should think primarily is, like, hey, you should use the YF.

115
00:33:26.100 --> 00:33:27.130
Nam: If you can.

116
00:33:28.340 --> 00:33:31.760
Barnabé Monnot: Right, right. They should… they should be given, like, a…

117
00:33:31.960 --> 00:33:45.689
Barnabé Monnot: a list of interfaces, and I would say many of them right now would be available, like, through OIF, or 77Xs, I don't know, that falls directly under OIF, but it's definitely related.

118
00:33:45.860 --> 00:33:48.179
Barnabé Monnot: Yeah, so having just, like.

119
00:33:48.370 --> 00:33:55.949
Barnabé Monnot: clear, signposts of what to use and when. But I would say, right now, OIF being available, like, that's a good start, yeah.

120
00:33:57.240 --> 00:34:12.319
CJ Cobb: Yeah, just piggybacking off what Nam is saying, are you going to target the interface layer, or are you going to just, like, use OIF and 7786, and then sort of innovate on just, like, the verification proof layer,

121
00:34:12.440 --> 00:34:13.549
CJ Cobb: side of it.

122
00:34:16.850 --> 00:34:18.380
CJ Cobb: Do you understand the question?

123
00:34:19.620 --> 00:34:20.590
Barnabé Monnot: Mmm…

124
00:34:20.830 --> 00:34:21.270
Joshua Rudolf: When you…

125
00:34:21.270 --> 00:34:31.270
Barnabé Monnot: So, you're asking, like, are we only going to design, like, interfaces and standards, or are we actually, like, going to propose, like, different mechanisms?

126
00:34:31.270 --> 00:34:49.209
CJ Cobb: But I'm asking, like, OIF and 7786 are two interfaces for cross-chain, and they sort of serve different use cases. Like, are… should we expect to see a third interface come out of this effort, or will EIL, like, integrate with those existing interfaces?

127
00:34:50.610 --> 00:34:51.860
Barnabé Monnot: Oh, I see. Yeah.

128
00:34:52.090 --> 00:34:53.839
Barnabé Monnot: I would point that to Marison.

129
00:34:54.900 --> 00:34:59.849
Marissa Posner: Yeah, again, I would say, like, more of those implementation details will come out in October.

130
00:35:02.420 --> 00:35:03.000
CJ Cobb: Okay.

131
00:35:10.840 --> 00:35:15.370
Joshua Rudolf: Okay, well, yeah, just to keep things going on the agenda, maybe we can, move on.

132
00:35:15.580 --> 00:35:20.540
Joshua Rudolf: And yes, we'll have more in weeks, not months here.

133
00:35:21.010 --> 00:35:24.410
Joshua Rudolf: on the EIL and others, thanks for your patience on this.

134
00:35:25.630 --> 00:35:32.539
Joshua Rudolf: Cool. Coming up next, ERC3643 on RWA tokenization.

135
00:35:33.240 --> 00:35:34.140
Joshua Rudolf: Dennis?

136
00:35:34.910 --> 00:35:54.310
Dennis O'Connell: Thanks, Josh. Hi, everyone. It's so nice to meet you. I recognize a lot of great faces. I have a hard stop at 10.30, so I do apologize, and I want to thank Josh and the Ethereum Foundation for being so fantastic. I'm going to give a… just a quick overview of how you guys

137
00:35:54.310 --> 00:35:57.430
Dennis O'Connell: I could get involved, as well as a,

138
00:35:57.430 --> 00:36:15.140
Dennis O'Connell: quick, summary of what ERC3643 is. So, I did have a deck prepared, but perhaps, Josh, in slower time, I could share that whole deck. What I do have for everyone is, because I know there's a lot of big brains here, a lot of really smart people, which I am not.

139
00:36:15.140 --> 00:36:29.889
Dennis O'Connell: how to get involved into, ERC3643. So what ERC3643 is about, it is a, a final Ethereum standard, passed in December of 2024.

140
00:36:29.890 --> 00:36:36.600
Dennis O'Connell: We have built a non-profit, technology non-profit group in Luxembourg.

141
00:36:36.600 --> 00:36:51.169
Dennis O'Connell: Around, the standard and getting people involved. And, we've had some… an interesting two years, in doing so. We, have over 120 institutional members.

142
00:36:51.170 --> 00:37:16.170
Dennis O'Connell: We have, billions of dollars, on public and private chains, used, on the asset, using the asset. And most recently, we were named by the SEC in the Project Crypto speech, as the only innovation-exempted standard. Don't worry, there'll be more, that can, that you can use to tokenize securities, and I'm happy to report that 7 other Latin American countries in the world have adopted

143
00:37:16.170 --> 00:37:17.920
Dennis O'Connell: to standard.

144
00:37:18.010 --> 00:37:42.950
Dennis O'Connell: The standard, it has wide adoption, overall. If you're in Europe, Middle East, or Asia, you generally can use, the standard. And so, how to get involved? How can you do that? So, Josh, asked me to put together a couple of projects that I think you guys would find interesting. Again, apologies for, the shortness of time I have, and I'm happy to come back next session and give, like, a full, full presentation.

145
00:37:43.730 --> 00:37:48.509
Dennis O'Connell: We have an on-chain ID project, so if anyone finds decentralized identity interesting.

146
00:37:48.660 --> 00:38:01.499
Dennis O'Connell: We have a Chainlink, ACE project, so if anyone finds data oracleization interesting, we have lots of policy work in the U.S. and the EU that we're doing with the Crypto Task Force, the Treasury Task Force, as well as NIST.

147
00:38:01.650 --> 00:38:06.640
Dennis O'Connell: We have a cross-chain project with Layer 0 between BASE and Polygon.

148
00:38:06.640 --> 00:38:31.110
Dennis O'Connell: We have a privacy project with Zama, we have a silent data applied blockchain, project for zero knowledge for INCO, we have an open Zeppelin reference implementation, and most exciting, we have a full DAO, full TRX DAO, that you can, you can get involved. So, if those of you who haven't seen, I think I'm sharing my screen, you can see 3643 here. This is our website that will go through,

149
00:38:31.110 --> 00:38:33.169
Dennis O'Connell: A lot of, the stuff.

150
00:38:33.170 --> 00:38:39.670
Dennis O'Connell: You can see our members reference here, who's here, and most importantly for this group, the docs.

151
00:38:39.670 --> 00:39:04.470
Dennis O'Connell: So, everything's open source, we have a white paper at GitHub, and we're looking for new members and new projects all the time, but the exciting thing is the T-Rex DAO. So, you can imagine ERC3643, it's a permission token standard. A lot of institutionals like to look at it, adopt it, a lot of policy work, but what about everybody else? What about, you know, the small DeFi team or the individual?

152
00:39:04.540 --> 00:39:08.000
Dennis O'Connell: Who wants to take the open standard and develop it and build it.

153
00:39:08.030 --> 00:39:30.030
Dennis O'Connell: well, T-Rex is gonna be for you. It's gonna be a full DAO community, Lucia Marketplace and grants, and the next grants, that will be able to support your idea, your project, to build on top of this RWA ecosystem standard. We do not force single standards. We are open standards. What are open standards? Well, open standards is a concept that

154
00:39:30.030 --> 00:39:38.189
Dennis O'Connell: Ethereum, which is the leading blockchain. The community has developed standards, VRC and EIP standards.

155
00:39:38.190 --> 00:39:45.659
Dennis O'Connell: And what we want to do is broaden those standards away from just the community, but actually into government, and actually into

156
00:39:45.660 --> 00:39:59.029
Dennis O'Connell: policy, which is very exciting, and we achieved that, this summer with ERC 3643. But open standards matter, and multiple, you know, multiple standards, so we don't have single winners, are very important. So.

157
00:39:59.060 --> 00:40:14.460
Dennis O'Connell: If you want to get involved about it, find out more, go to ERC3643.org. We have hundreds of different institutional members. If you're an interested individual, go to T-Rex Network. You can absolutely follow all of our exciting developments.

158
00:40:14.460 --> 00:40:29.410
Dennis O'Connell: On our, X account, our Twitter account, you can see Chairman Atkins announcing the standard, lots of cool stuff, featured in the White House report. Another great thing to check out is Dear Foundation was amazing, and has been really amazing, too.

159
00:40:29.410 --> 00:40:35.479
Dennis O'Connell: ERC3643, and we had the opportunity for the first time ever to present at ETHCC in CONS.

160
00:40:35.480 --> 00:40:46.350
Dennis O'Connell: with my other founder, Jill Kem, who's actually the technical mind behind ERC3643, which you guys can absolutely check out. So…

161
00:40:46.560 --> 00:41:04.960
Dennis O'Connell: Lots of good links, lots of great ways to get involved, lots of ways to find out more about the standard, build open standards, let's get excited about that. And I know this is an incredibly special community. I want to reserve some time for questions, so does anyone have any questions about what I've presented so far?

162
00:41:10.400 --> 00:41:27.410
Dennis O'Connell: If there's no questions, or Josh, I don't see any questions, but if there's no questions, I'll take the extra time, and I'll do… go through a little bit of the deck. Again, I do apologize that I'm so short on time today, but I'm very happy that Josh invited me. So I'll do a quick presentation, and if questions come up, feel free to interrupt me.

163
00:41:27.410 --> 00:41:33.210
Dennis O'Connell: So, like I said, it's a leading standard for permission tokens, not the only standard, but one of the leading ones.

164
00:41:33.210 --> 00:41:58.190
Dennis O'Connell: out there, where, you know, we have a huge collaboration of law firms, policy makers, blockchains, infrastructure providers, L2s, and of course, lots of, institutions, using our standard, including DTCC. Common tokenization framework, right? 1400, really great, never actually official standard, lots of different implementations by really smart people.

165
00:41:58.190 --> 00:42:17.369
Dennis O'Connell: but what we're solving for is not cleverness, it's standardization, right? And we all remember ERC20 days. There's a lot of ways to represent a token, but ERC20 was the one, and we kind of all moved on. I call it, like, a coral reef. You know, you set the standard, then you build, you build on top of it, and, and support Ethereum.

166
00:42:17.440 --> 00:42:41.849
Dennis O'Connell: It's a permission standard, so there's really no context of it, but most of the time, you want to… Chris, there's a lot of elevated gas and complexity. You really want to use this for, like, securities, although we could be used for lots of other things. We call it primary and secondary marketplace. That's a fancy way of saying you have to KYC… if you need to KYC or credit yourself to buy a particular asset, if you buy it from the issuer, it's primary.

167
00:42:41.850 --> 00:42:50.020
Dennis O'Connell: goodbye from the other investor is secondary. All we need to make sure is that whoever's receiving the tokens, has the correct identity.

168
00:42:50.030 --> 00:43:08.710
Dennis O'Connell: Here's a couple… and again, I'll share all the, deck with, with Joshua so he can throw it over, and I'd like to do a more, full presentation, at the next time, if that's possible. But we are official EIP standard, which you can definitely check out. We're hearing magicians as well, which you can take a look.

169
00:43:08.710 --> 00:43:28.330
Dennis O'Connell: We're building dashboards. A lot of people are like, hey, you know, $35 billion is a big number. Where's that coming from? Fully valid question. I wish it was easy to answer. We have a Dune Analytics dashboard. We all are working with RWA, XYZ team. A lot of issuers don't want to disclose, which is a problem.

170
00:43:28.330 --> 00:43:42.489
Dennis O'Connell: T-Rex going forward, the Dow will be totally transparent, but a vast majority of the assets tokenized are on EVM chains, mostly private pilots, but we have still a fairly healthy amount, which you could check out on Dune.

171
00:43:42.490 --> 00:44:02.539
Dennis O'Connell: As I mentioned, over 120 institutional members across the whole time, stack. Good news, membership is free, and it's no obligation. The ERC3643 is a community of people who care about permission tokens, token standards, and all that sort of stuff. So, if you have a really good project, or interesting L2 and you haven't joined us.

172
00:44:02.540 --> 00:44:07.099
Dennis O'Connell: Come on in, there's tons of great, cool stuff, cool people to meet and work on.

173
00:44:07.100 --> 00:44:30.599
Dennis O'Connell: We've been very busy with institutional adoption with, you know, Citi, JP Morgan, AB&MRO, recently in Fastenera, and we continue with DTCC. We won an award from Deloitte, we announced Chainlink, CRE, and then we even did a question, as I mentioned, with, with Layer Zero. We've been busy with regulatory, so as I mentioned, we have about 22 regulators I presented with, my partner, Daniel.

174
00:44:30.600 --> 00:44:34.739
Dennis O'Connell: On the adoption of open standards, specifically for 3643.

175
00:44:34.750 --> 00:44:59.200
Dennis O'Connell: And jurisdictional approval. So, you know, as of today, you can put the U.S. in a green circle, and we'll be adding 5 more Latin American countries in a green circle as well. What does this mean? If you have a security and you use 3643 in the US, you can now tokenize on Ethereum, and that means public and private securities. You go to the SEC, you say, hey, this is my filing.

176
00:44:59.200 --> 00:45:13.259
Dennis O'Connell: I'm using this standard, tell me what I need, and off we go. And so that's a lot of the work that I do on the regulatory policy side in DC. As I mentioned, if you want to get involved in that, we have lots of work to do, on that sort of side.

177
00:45:13.530 --> 00:45:25.470
Dennis O'Connell: even featured in regulatory papers, so if reading about how regulators interpret open standards, that's your thing. We have the HKMA, Singapore, FCA, and European securities Market.

178
00:45:25.480 --> 00:45:47.660
Dennis O'Connell: I will reserve another time to go through the technical architecture, but this is the architecture to fully decentralized smart contract infrastructure. You think of it like we took an ERC20, and we added a whole bunch of stuff on top of it, including a self-sovereign ID, on-chain ID, which usually gets a ton of questions. On-chain ID, big area for people to innovate in, so if you're interested in self-sovereign ID or identity.

179
00:45:47.660 --> 00:45:50.869
Dennis O'Connell: Go to T-Rex now, get involved, lots of cool stuff there.

180
00:45:50.870 --> 00:46:03.810
Dennis O'Connell: registry, modular compliance, and I'll go into how that works at another time, but it's a fully decentralized, architecture. Okay, I have to stop there. Any questions to this amazing group?

181
00:46:09.840 --> 00:46:12.520
Dennis O'Connell: Okay, I don't see, Josh, any questions?

182
00:46:12.520 --> 00:46:16.009
Joshua Rudolf: No, I think that's it, and people can get ahold of you via telegram?

183
00:46:16.870 --> 00:46:17.580
Dennis O'Connell: Yep, you can

184
00:46:17.580 --> 00:46:38.489
Dennis O'Connell: and you could go on the T-Rex DAO, which I encourage you to. Someone said, sad to say I'm too dumb to understand RWAs. So am I. So am I. Good. You're in good company. If you're too dumb to understand RWAs, you're in good company, which is why you should come join T-Rex DAO, and help us all become less dumb. We're, we're a big,

185
00:46:38.510 --> 00:46:45.999
Dennis O'Connell: 3643 exists because of the great community of Ethereum, and we want to encourage more people to come in and build what they need.

186
00:46:46.000 --> 00:47:06.990
Dennis O'Connell: Han says, still thinking about how the compliance part works, connecting to onshanoff today will look more connected to Telegram. Yes, please do, Han, I do apologize. I'm now way over time. I actually have another presentation I have to give to a regulator. So, Joshua, everyone, thank you so much for the time. Thank you for giving me the space to do a crash course.

187
00:47:06.990 --> 00:47:17.860
Dennis O'Connell: Please, I'll put some of the links down, or Joshua will give you some of the links I wish you could share with everybody, and get involved, and help build the future with open standards. Thanks, everybody!

188
00:47:17.860 --> 00:47:18.610
Joshua Rudolf: Thanks, Dennis.

189
00:47:19.880 --> 00:47:38.679
Joshua Rudolf: Cool. Up next, an update and discussion on chain-specific addresses, 7828, the L2 resolver spec that Wonderland and others are working on, and the move away from the GitHub list to an on-chain config, starting with ENS.

190
00:47:38.920 --> 00:47:43.889
Joshua Rudolf: Yes, I think we have… Skelly from Wonderland, do you want to start off?

191
00:47:44.520 --> 00:47:52.809
Skele | Wonderland: Yeah, definitely. Hey guys, so… regarding 7828, I think… We are…

192
00:47:53.930 --> 00:48:04.419
Skele | Wonderland: I mean, that's done, the ERC's done. If you guys have any comments, or you would like to learn more, there is the L2interrupt repo, there's a lot of information there.

193
00:48:04.570 --> 00:48:22.379
Skele | Wonderland: Ethereum magicians as well. Then, as well, similarly, 7930, thank you as well for all the feedback, as always. That's as well finalized. The cool thing now is this resolver Josh was mentioning.

194
00:48:22.460 --> 00:48:26.939
Skele | Wonderland: We do have some comments here as well,

195
00:48:27.130 --> 00:48:37.170
Skele | Wonderland: from the Unravel team, I think they are here as well on the call, so we'd love to hear from them as well. But the main goal is to, as a first step.

196
00:48:37.390 --> 00:48:51.280
Skele | Wonderland: move, or, let's say, deploy a resolver for ENS that already has pre-populated a somewhat clean list of what's currently on the chainlist GitHub repo.

197
00:48:51.400 --> 00:48:56.509
Skele | Wonderland: So we, have the contracts ready, everything, should be…

198
00:48:56.650 --> 00:49:03.469
Skele | Wonderland: public for you all to review. We can share the links later on the… Telegram group.

199
00:49:03.710 --> 00:49:06.919
Skele | Wonderland: With the script, obviously.

200
00:49:07.000 --> 00:49:21.160
Skele | Wonderland: For the script to work, if you ever went to the chainlist repo, all the namings are a mess, so next step is, let's find some cute names that the chains are going to be happy with, so that's going to be…

201
00:49:21.160 --> 00:49:27.860
Skele | Wonderland: Tough work, hopefully we can get that done, let's say soonish, right? So no…

202
00:49:27.900 --> 00:49:34.280
Skele | Wonderland: L2 or Jane, I don't know, it's sad that they ended up with an ugly name.

203
00:49:34.400 --> 00:49:43.090
Skele | Wonderland: Besides that, whenever we have everything populated, this, like, anybody, can check,

204
00:49:43.850 --> 00:49:54.729
Skele | Wonderland: yeah, locally, that the script and everything resolved correctly, and we'll create a proposal for the ENS, DAO to take ownership of that resolver.

205
00:49:55.110 --> 00:50:11.669
Skele | Wonderland: Later on, and probably you guys have questions on, okay, what if, I don't know, somebody wants to update or modify the records, etc, etc, the ownership part is not yet, defined. We are aiming to define this as a separate scope of work.

206
00:50:11.730 --> 00:50:24.820
Skele | Wonderland: If you have any ideas or any concerns regarding ownership, please let us know. We'll be working, and we'll let you guys, as well know when we start working on tackling these problems, soon enough.

207
00:50:25.350 --> 00:50:30.180
Skele | Wonderland: That's it. We had a question about a comment.

208
00:50:30.310 --> 00:50:35.859
Skele | Wonderland: Regarding the work from Unruggable, but…

209
00:50:44.230 --> 00:50:45.530
Joshua Rudolf: Think we lost you, Skelly

210
00:50:51.610 --> 00:50:55.860
Joshua Rudolf: I don't know, Mobius, if… You could… Finish Skelly's sentence.

211
00:50:56.160 --> 00:50:57.440
Joshua Rudolf: Yeah, we lost you.

212
00:50:57.960 --> 00:50:59.989
Skele | Wonderland: Oh, sure, yeah.

213
00:51:00.510 --> 00:51:10.810
Skele | Wonderland: Yeah, yeah, sorry, sorry. Yeah, just, I was saying that, if you wanted to present 7785, then we can go, and ask.

214
00:51:11.030 --> 00:51:13.840
Skele | Wonderland: Some questions that we had regarding that.

215
00:51:15.980 --> 00:51:20.190
Joshua Rudolf: Cool. Yeah, maybe we hand it over to the unruggable folks here.

216
00:51:22.540 --> 00:51:25.540
Ndeto | Unruggable: Yeah, hi, my name is Martin Leto, I'm…

217
00:51:26.550 --> 00:51:33.639
Ndeto | Unruggable: Representing Unruggable, we are an independent R&D farm that's embedded within the ENS DAO.

218
00:51:33.850 --> 00:51:36.210
Ndeto | Unruggable: And that is to say,

219
00:51:36.390 --> 00:51:41.069
Ndeto | Unruggable: We are here to represent some of the ANS-specific interests.

220
00:51:41.480 --> 00:51:46.379
Ndeto | Unruggable: There's, we've been doing…

221
00:51:46.570 --> 00:51:49.870
Ndeto | Unruggable: Some work on the registry, and

222
00:51:50.390 --> 00:51:53.639
Ndeto | Unruggable: Basically, there's two main things,

223
00:51:54.000 --> 00:52:00.729
Ndeto | Unruggable: that I would like to bring up. The first one is, It involves the resolver.

224
00:52:01.160 --> 00:52:03.680
Ndeto | Unruggable: Should be used for this registry.

225
00:52:04.050 --> 00:52:12.309
Ndeto | Unruggable: Because when we want to use ENS as the canonical registry for these chains.

226
00:52:12.440 --> 00:52:16.410
Ndeto | Unruggable: it introduces, some strict requirements. We need…

227
00:52:16.520 --> 00:52:29.220
Ndeto | Unruggable: to be able… we need to comply to some of the ENSIPs, that specify exactly how you resolve some of these chain records and,

228
00:52:29.540 --> 00:52:49.049
Ndeto | Unruggable: even maybe some… how we call… you know, the kind of data it takes, like the name hashes, or basically the DNS encoding. So, that is one key area that we need to be a lot about if we are working with ENS as the registry. It has its own…

229
00:52:50.510 --> 00:52:55.829
Ndeto | Unruggable: rules and compliance, so I can send…

230
00:52:57.820 --> 00:53:08.039
Ndeto | Unruggable: A couple of them, just to… Sure, the main ones, starting with ENS, IP10 here, which…

231
00:53:08.860 --> 00:53:15.400
Ndeto | Unruggable: Basically, it's, it's, it, it's the spec for how we do the resolving, and

232
00:53:15.790 --> 00:53:22.820
Ndeto | Unruggable: We will potentially need to introduce… another ENSIP that can help

233
00:53:23.020 --> 00:53:28.830
Ndeto | Unruggable: us resolve a name record, like a human-friendly name, like base.l2.f.

234
00:53:29.340 --> 00:53:41.100
Ndeto | Unruggable: We resolve the chain ID, and it gives us the 7785 chain identifier. So all this is to say, there's a lot of ENS-specific stuff that is going to be involved here.

235
00:53:41.400 --> 00:53:50.750
Ndeto | Unruggable: Moving on to my second point, Looking at the 7785 registry.

236
00:53:52.810 --> 00:53:58.539
Ndeto | Unruggable: We were trying to figure out, the logic behind

237
00:53:58.900 --> 00:54:04.879
Ndeto | Unruggable: The attributes that are used to derive this 7785 identifier, and…

238
00:54:05.790 --> 00:54:12.560
Ndeto | Unruggable: We wanted to, you know, some of them… Some of them,

239
00:54:15.610 --> 00:54:28.819
Ndeto | Unruggable: Oh, basically, let me, let me, let me send this, and then we can rephrase it. Looking at the 7785, spec, we are using different attributes, like the settlement ID,

240
00:54:29.280 --> 00:54:31.830
Ndeto | Unruggable: chain ID, we are using,

241
00:54:31.970 --> 00:54:35.590
Ndeto | Unruggable: The roll-up contracts, let me just send the link right now.

242
00:54:41.190 --> 00:54:44.219
Ndeto | Unruggable: Oh, sorry, let me open the right file.

243
00:54:46.470 --> 00:54:52.289
Joshua Rudolf: Skelly, I think you also had some… some thoughts on how… Maybe 7785 fits into this.

244
00:54:54.100 --> 00:55:04.170
Skele | Wonderland: Yes, yeah, so, regarding 7785, the way we envision the resolver is for it to be…

245
00:55:04.180 --> 00:55:20.220
Skele | Wonderland: Very, very flexible. So, not necessarily we are tying this up for, 7785, or any other, let's say, way in the future to come up with a struct, or any subsequent ERC slash

246
00:55:20.230 --> 00:55:33.469
Skele | Wonderland: ENSIP, to be able to define what extra data a chain can provide, that is useful for, I don't know, off-chain or smart contracts or whoever to resolve.

247
00:55:33.520 --> 00:55:45.299
Skele | Wonderland: Right? Just using, I don't know, for example, as you said, like, base.l2.dth, and you'll get the portal address, this and that, and et cetera, et cetera, et cetera, right? So you'll get a lot of the…

248
00:55:45.300 --> 00:55:57.430
Skele | Wonderland: the cool, very, very useful, addresses that sometimes are very sensitive, and people shouldn't go into, like, random websites to get those.

249
00:55:57.780 --> 00:56:15.249
Skele | Wonderland: The… the other thing is that since we don't yet know what those structs would look like, nor we have the information, nor we have the ownership mechanisms for those to be properly handled, this is why we are gonna…

250
00:56:15.840 --> 00:56:28.359
Skele | Wonderland: aiming to, just release, these more flexible, resolver for now, which will allow us to, wrap, wrap it,

251
00:56:28.900 --> 00:56:42.369
Skele | Wonderland: with any other, let's say, subsequent standard that we can all agree on, that would be useful for these chains to populate. Having said that, as well.

252
00:56:42.830 --> 00:57:00.020
Skele | Wonderland: I… I'm not sure I understand the requirement for having to create a specific ENS IP for something that already is an ERC, such as 7930 or 7828. Do you think,

253
00:57:00.380 --> 00:57:10.059
Skele | Wonderland: we should also create an ENSIP that standardizes or showcases how the resolver would work, rather than just doing the spec.

254
00:57:10.180 --> 00:57:13.739
Skele | Wonderland: Okay, perfect. Okay, we can do that, that should be pretty straightforward.

255
00:57:22.920 --> 00:57:23.360
Ndeto | Unruggable: Yeah.

256
00:57:23.360 --> 00:57:23.959
Skele | Wonderland: Oh my gosh.

257
00:57:25.160 --> 00:57:30.370
Ndeto | Unruggable: I want to say I do agree with what Skele is saying.

258
00:57:31.780 --> 00:57:36.810
Ndeto | Unruggable: We need it to be as minimal and as abstract as possible.

259
00:57:37.100 --> 00:57:44.819
Ndeto | Unruggable: I was just studying that we also needed to be NS compliant, which, we can help, that's our area of…

260
00:57:45.530 --> 00:57:47.290
Ndeto | Unruggable: The expertise, so yeah.

261
00:57:49.560 --> 00:57:57.539
Skele | Wonderland: Awesome. Yeah, as Josh said, like, yeah, we can take this on another call, and we can definitely work with you guys, so you can…

262
00:57:57.730 --> 00:58:08.169
Skele | Wonderland: I mean, you have all the assistance that you… all the assistance that you might need from our end. If you want to just champion that ENSAP, we love that.

263
00:58:12.990 --> 00:58:17.580
Joshua Rudolf: Okay, great. Anything else on this topic? Otherwise, we can keep moving?

264
00:58:21.080 --> 00:58:29.199
Joshua Rudolf: Cool. Up next, we have the Axile team on 7702 and transaction batching.

265
00:58:30.640 --> 00:58:45.049
Ash Ahmed: Yeah, thanks, Josh. Good to see everyone. Ash from Axel. We're building a pretty consumer-facing app focused on DeFi saving, kind of, so just making it really easy for people to get access to USDC and then earning yield on it, aggregate over a bunch of protocols, and then automate

266
00:58:45.050 --> 00:58:53.199
Ash Ahmed: the movement of funds between them. I'm here with Dev, who's gonna go through a lot of the technical challenges we've encountered. Tons of fun stuff, but yeah, I'll just pass it on to Deb.

267
00:58:53.810 --> 00:58:54.930
Dev: Thanks, Ash.

268
00:58:55.200 --> 00:59:03.149
Dev: So yeah, our product's goal is, savings accounts must die, and we're starting out with stablecoin investments.

269
00:59:03.160 --> 00:59:18.249
Dev: So, currently we're investing in 4 different protocols, all on base, and we're working on increasing protocols, to be also on Mainnet, Arbitrum, and Polygon. I'll get into what chains we're gonna support in a second.

270
00:59:18.430 --> 00:59:31.360
Dev: But the key features our platform, provides is all transactions are processed through a trusted execution environment, with the signer always being in an enclave, so no one can see the signer.

271
00:59:31.360 --> 00:59:39.480
Dev: All signatures are verifiable for user operations, in order to increase their yield per year.

272
00:59:39.560 --> 00:59:49.179
Dev: We've audited our entire application by Sherlock before we released into production last month. Yeah, so we have,

273
00:59:49.890 --> 01:00:04.149
Dev: Our goal is to have the best yield across all our competitors, not just through protocol diversification, but also through multi-chain, non-slippage deposits. That's our main goal at the end. Yeah.

274
01:00:04.150 --> 01:00:13.520
Dev: best non-speculative yield on stables, and we don't really have a budget because our operating cost for this application is incredibly low, as we'll see in one sec.

275
01:00:13.700 --> 01:00:22.410
Dev: So, current integrations include Morpho, Euler, Yo, Gauntlet Vaults, all in base, with an average APY of around 10%.

276
01:00:22.840 --> 01:00:38.249
Dev: Including rewards. So there's literally zero gas, thoughts on behalf of our users, because we wanted to be as non-crypto-native of an app as possible. So, yeah.

277
01:00:38.830 --> 01:00:50.199
Dev: Challenges on the technical side mostly include gas accounting and sequential processing. That's what we faced with our previous applications, previous iterations of our application.

278
01:00:50.280 --> 01:01:06.019
Dev: So for gas accounting, we always needed to ensure that, that the native gas token is… goes to zero, which is incredibly annoying for users and us, to manage. And sequential processing meant that we were waiting for transactions to…

279
01:01:06.130 --> 01:01:27.809
Dev: process one after the other. And we did, we moved to 433.7 wallets, with the session key management and, and having the session key in accordance with user, with user logins, because we don't want to, create session keys with unlimited permissions, and we also don't want

280
01:01:27.810 --> 01:01:36.220
Dev: that to be an issue on the user side, while also giving them access to their wallet. That was an entire,

281
01:01:36.220 --> 01:01:51.460
Dev: arc of just, trying different things with session keys, but ultimately, we decided it's best if users always have access to their wallets. With 4337, we realized that users would lose access to their wallets if us or Alban, the provider went down for even a day.

282
01:01:51.460 --> 01:02:09.549
Dev: So, yeah, and then cross-protocol integration and security and performance, these are some things that we focused on and, tried to make it as bleeding edge as possible. There's other market and operational reasons why we moved to the product, but that's maybe for another demo.

283
01:02:09.680 --> 01:02:23.559
Dev: So, I'll first start with the 7702 implementation. So, it's only available for all pector upgrade chains, which are currently, base, Arbitrum, all OP stack chains, and mainnet.

284
01:02:23.560 --> 01:02:32.480
Dev: For the most part. So we are, currently working on mainnet and album deposits for USDC.

285
01:02:32.480 --> 01:02:49.139
Dev: I'll get to that in one second again, but our goal is to have, user-owned EOA wallets with Quorum key signers, right? And, we can shift these signers every few months, or every few weeks, depending on, our operations.

286
01:02:49.140 --> 01:02:54.529
Dev: So, when the user first deposits money with us, we convert the wallets into 7702.

287
01:02:54.530 --> 01:03:11.919
Dev: Which are smart accounts, but that can also act as EOAs. We bundle all transactions so that all protocol deposits happen atomically within a matter of seconds. And for cross-chain compatibility, we are, currently working with Hooks and CCTP.

288
01:03:12.050 --> 01:03:15.780
Dev: So that, even cross-chain, we don't really need to…

289
01:03:16.000 --> 01:03:26.749
Dev: compose transactions one after the other, and we can just have a minimal amount of transactions and waiting between deposits.

290
01:03:27.020 --> 01:03:36.889
Dev: So, our implementation currently deposits into these protocols in around 400 milliseconds, including the trusted execution environment assigning.

291
01:03:37.100 --> 01:03:51.730
Dev: We've tried 7-figure stablecoin deposits, withdrawals across, this is inaccurate my math. This is 7 pools, and it's, the average cost is around 1 cent. So this screenshot was taken when there was a

292
01:03:51.730 --> 01:03:58.669
Dev: gas pipe on base, which meant we were paying a bit more, but I think it's still pretty impressive, considering you can have

293
01:03:58.670 --> 01:04:15.969
Dev: around, 14 transactions in one batch, including approvals to all of these pools to… sorry, including approvals to USDC to spend on these contracts. The previous approach, it was… with EOAs, it was a dollar in gas fees and a minute

294
01:04:15.980 --> 01:04:28.619
Dev: or more than processing time for just one pool. So this is incredible, progress, and the user can always access their funds through multi-factor authentication, which is also really, really important. If the user wants to.

295
01:04:28.620 --> 01:04:40.360
Dev: go on Euler and Morpho and withdraw, they can easily do it, and we'll still detect it, because we listen to ERC20 logs instead of, instead of making contract calls every

296
01:04:40.360 --> 01:04:57.190
Dev: every few seconds. So, on the user side, this results in gasless transactions and seamless multi-protocol deposits, as you'll see in our demo in one second. And, we have an average APY of 9%, including mobile protocols every day, in order to

297
01:04:57.190 --> 01:05:12.750
Dev: increase the yield for the user. On the DE implementation, we're using NITRO enclaves on AWS, so this, isolates our signing operations completely, so that no one can go into even the memory and see what's going on.

298
01:05:12.750 --> 01:05:17.939
Dev: We have an open-source signer implementation in the TE, which you can find on our GitHub.

299
01:05:18.120 --> 01:05:35.369
Dev: And, we also have custom policies enforced within the TE, and also on multiple other layers of our stack to ensure that all wallet operations either transact with a known user wallet or, one of these, 4626 wallets for now.

300
01:05:35.390 --> 01:05:58.849
Dev: And then, yeah, the round trip for this is around 200 milliseconds as well. Our upcoming features for the DE include reproducible builds and, attestations for Oracle pricing that we use for rebalancing. In order… if we want to move the user's funds into another vault, we need an attestation that that is indeed, that a condition indeed was met of a higher API or,

301
01:05:58.850 --> 01:06:01.620
Dev: Lower token price, one of these things.

302
01:06:02.190 --> 01:06:24.920
Dev: So, one major thing that most protocols don't currently do is auto-claiming of user rewards. The way these vaults work is you get a base API on the token shares that you get, and also additional rewards that are volatile tokens and non-stables. So our goal is to convert these into stablecoins as soon as possible in order to combat volatility.

303
01:06:24.920 --> 01:06:33.209
Dev: what we do is have WebSocket listeners stream plugs directly, and we… we listen for root-set events from those kind of… from the…

304
01:06:33.210 --> 01:06:52.030
Dev: reward distributed contracts so that we can immediately take actions on them. We also listen to the Mercury, because we need a proof in order to submit the claim for the rewards. And then we can batch claim these for all our users using our own wallet. We don't even need the user's wallet to claim

305
01:06:52.030 --> 01:06:58.089
Dev: to claim rewards for them. The rewards will obviously stream to their wallets, immediately.

306
01:06:58.090 --> 01:07:15.419
Dev: And I think the last step, is swapping rewards to stables. So we've been using solver aggregators like LiFi, Unison, and, 1inch, and Audi, and so on. I think we're working on this. I think this should be…

307
01:07:15.420 --> 01:07:24.849
Dev: out in a few weeks' time. But, yeah, we just reinvested. So your returns are always compounding as, as soon as it can be.

308
01:07:25.140 --> 01:07:35.749
Dev: This is the technical diagram for our claimer service. What we're doing is literally just listening to log events, and as soon as we detect it, we, we send it to the claimer.

309
01:07:36.240 --> 01:07:42.910
Dev: We send the request to the claimer contract, and the rewards are then streamed to the user's wallet.

310
01:07:42.910 --> 01:08:06.860
Dev: Lastly, we're currently working on CCTP cross-chain swaps. This enables us to have non-slippage deposits on other chains. Let's say the user has USDC on mainnet, but they want to invest on base boost, or vice versa, they can do this without any slippage, which I think is incredibly important. If a user deposits, let's say $5,000, if they even see

311
01:08:06.860 --> 01:08:14.460
Dev: for… $1,999.99 cents, they're going to lose their shit about where the money went, right? Without any…

312
01:08:14.690 --> 01:08:24.359
Dev: disclaimers, that doesn't make sense, to most of our users. And this, this, I think this approach will alleviate all of those issues, where if we have a…

313
01:08:24.529 --> 01:08:41.479
Dev: burn and mint on the source and destination chains, we'll get the exact amount of circles… circles token. And for non-circle tokens, we're thinking of using layer 0. That enables us, with hooks, after the

314
01:08:41.620 --> 01:08:46.540
Dev: After the mint has been, finished on the destination chain, and then we can…

315
01:08:47.100 --> 01:08:52.999
Dev: Concurrently deposit into the 4626 vault, directly.

316
01:08:53.240 --> 01:09:04.020
Dev: So yeah, I think to wrap up, our transaction flow is just the user action, and always the user action, as you can see in our, in our GitHub, is,

317
01:09:04.029 --> 01:09:04.389
Joshua Rudolf: Dev.

318
01:09:04.390 --> 01:09:08.330
Dev: I'm sorry, yeah, I'll grab one.

319
01:09:08.689 --> 01:09:21.420
Dev: Yeah. Yeah, our future roadmap includes cross-chain, and then, also smart rebalancing, non-4626 protocol integrations like Pendle, and, real-world assets as soon as we can.

320
01:09:21.720 --> 01:09:26.410
Dev: This is a brief demo. I'll just show half of it. So…

321
01:09:26.640 --> 01:09:38.789
Dev: Yeah, I'm already invested in it, and I want to withdraw from all these positions. It's as simple as just two clicks, and then you can see on the block scanner that it's already there.

322
01:09:40.040 --> 01:09:40.990
Dev: Yeah, okay.

323
01:09:43.410 --> 01:09:58.899
Dev: yeah, all these transactions were, and you can access this wallet as well, by the way, so that's nice. Yeah, I think that's it. Go visit axel.com, it's pretty fun. We have a mobile app coming soon, by the end of the month, hopefully. That's all. Thank you.

324
01:09:59.470 --> 01:10:00.200
Joshua Rudolf: Cool.

325
01:10:00.560 --> 01:10:04.029
Joshua Rudolf: Thanks, Deb. Last up, 7806.

326
01:10:06.850 --> 01:10:09.580
Han Chen: I said, Josh, I need to share the screen.

327
01:10:22.940 --> 01:10:25.539
Han Chen: Yeah, I believe everyone can see right now.

328
01:10:26.690 --> 01:10:43.599
Han Chen: Yeah, hi group, Einhan, I work at Circle, and, this proposal, 7806 is about a minimal intense entry smart contract account. It's a SCA standard, only Bill 47702 era, so it works with EOA.

329
01:10:43.690 --> 01:11:00.040
Han Chen: Well, first of all, just clear the terminology that the intent we are defining here is, like, a type of outcomes that the user want to achieve. It should be, like, pretty simple, unified, human-readable, which is kind of very important for user experience when they see

330
01:11:00.040 --> 01:11:17.139
Han Chen: When the user needs to understand what they're signing or what they're approving. And it should be execution agnostic, which means to achieve this outcome, the server or relayer can do whatever they want, but the intent layer will make sure that the outcome is always correct.

331
01:11:17.490 --> 01:11:30.410
Han Chen: And the motivation… we have been seeing intent in off-chain application a lot of times. Like, when you're taking Uber, you set up your current location and destination, and broadcast to the Uber network, and somebody will pick you up.

332
01:11:30.410 --> 01:11:43.549
Han Chen: and want to achieve similar user experience on-chain, we need to make sure that the intent is non-custodial, very important, and it's verifiable on-chain by anybody, so if I provide this signature that's from me, and only me

333
01:11:43.550 --> 01:11:44.530
Han Chen: Can sign it.

334
01:11:44.530 --> 01:11:54.619
Han Chen: And it can be easily converted to any prescriptive operations, basically the solidity, destination value core data, pair.

335
01:11:54.720 --> 01:12:07.110
Han Chen: And we want to change users to control or interact with their accounts through intents, and the account on-chain can correctly understand those intents and carry out the operations

336
01:12:07.210 --> 01:12:14.029
Han Chen: In a good way, yeah. And intents are, by nature, interoperable.

337
01:12:14.030 --> 01:12:27.490
Han Chen: Because it is like an abstract layer of the result a user wants, so we only keep the core elements for our users' demands. For example, taking the very common use case is token swapping.

338
01:12:27.520 --> 01:12:40.509
Han Chen: Basically, every token swap is just sending out a specific amount of token A, and taking in a specific amount of token B, and that's all. It actually applies to any chance, any applications, any token, any amount.

339
01:12:40.510 --> 01:12:48.049
Han Chen: You can swap with Uniswap, Curve, any on-channel protocols, but basically the user is just trying to achieve this intent.

340
01:12:48.120 --> 01:12:48.980
Han Chen: And…

341
01:12:49.490 --> 01:13:00.130
Han Chen: Yeah, intents are also, within single trend. Intents are atomic and can be matched directly without the need of any other smart contract to be engaged.

342
01:13:00.130 --> 01:13:12.330
Han Chen: For example, we have two swap intent. The first one, swapping out USDC for USDT. The second one, they want to swap out USDT for USDC. And as long as the gas fee

343
01:13:12.420 --> 01:13:29.810
Han Chen: can match with these two orders, or these two intents, we're actually having a deal. We don't need any, like, AMNs or other smart contract on-chain to keep to, trading for… for the intense submitters. We're just mashing them together directly.

344
01:13:29.840 --> 01:13:49.490
Han Chen: Because this step can be done off-chain in a very high, efficient way, it's pretty scalable, and with the intent defined in our 7806 standard, it doesn't limit it to… for you to have a sequence NANCE re-entrance attack. It can be… it can be,

345
01:13:49.890 --> 01:13:58.550
Han Chen: Even the intent can also be replayable. So, which means multiple intents can be executed in parallel for each user.

346
01:14:01.030 --> 01:14:02.420
Han Chen: And,

347
01:14:02.580 --> 01:14:16.200
Han Chen: Also, our 7806 SCA supports all the basic smart contract account functionalities, like gasless loan transsecution, badge loan transsecution, assets delegation. It's fully customizable and modular.

348
01:14:16.200 --> 01:14:23.380
Han Chen: And, we're building for 7702 because we think it's a huge milestone for, for intent.

349
01:14:23.410 --> 01:14:39.290
Han Chen: basically, fundamentally enable EOAs to verify their own intents, which is very important, because if you're dedicated this verification to another smart contract, it basically turns into an SCAL or another protocol that…

350
01:14:39.610 --> 01:14:52.430
Han Chen: That, like, it's just the traditional way of how, relayer scenes work on-chann. But with 7702, everybody can verify their own intent, so they can use their own standard, they can define their own way to

351
01:14:52.440 --> 01:15:00.929
Han Chen: Keep things secure for themselves, and also keep the intent layer, unified and interoperable across multiple accounts.

352
01:15:02.270 --> 01:15:10.740
Han Chen: We have a website, urc7806.io. Feel free to check. We also have a playground that…

353
01:15:10.740 --> 01:15:26.120
Han Chen: basically demo how to… how everything works from creating a wallet, to operating QC7806 to carry out on-chann operations. And then in the last step, you are able to execute a batch transaction using the token we just mean. Yeah.

354
01:15:26.180 --> 01:15:44.820
Han Chen: I'm running out of time, so I will not go into details about all the technical implementations and how it works, but just rest assured, everything's pretty simple. Our standard only defines two interfaces with three APIs, and that's all. We leave everything else for the developers to work on.

355
01:15:44.920 --> 01:15:51.410
Han Chen: And how people can, start trying with the standard and see what kind.

356
01:15:51.410 --> 01:16:09.310
Han Chen: how simple it is, how easy to use, and if everybody can get together to build an interoperable intent layer, I think it will resolve lots of gaps between different wallet providers, different applications, and definitely help a lot for cross-chain intent as well.

357
01:16:14.200 --> 01:16:19.420
Joshua Rudolf: Thank you, Han. I think you have a couple questions in the chat, and do you have a link to the Excalibral draw?

358
01:16:20.120 --> 01:16:22.439
Joshua Rudolf: Maybe you could share it in the Telegram later, if possible?

359
01:16:22.970 --> 01:16:25.020
Han Chen: Of course, I can just share it.

360
01:16:26.250 --> 01:16:28.309
Joshua Rudolf: And I think Ash had a question as well.

361
01:16:36.440 --> 01:16:43.059
Ash Ahmed: Yeah, I was just curious if there's, like, a Circle-specific use case that you guys had in mind, because this is pretty general and cool, but yeah, just curious.

362
01:16:44.350 --> 01:16:59.000
Han Chen: Yes, this is not specific, for Circle products or rates by, like, proposed by Circle. It's just, I, I come from, I come from Circle and work with lots of, Web2 customers.

363
01:16:59.040 --> 01:17:12.860
Han Chen: And you can feel that they… their, demand of using crypto is, like, they don't want to really know the technical detail about that, they want to move this liability to a relay or trustworthy partner.

364
01:17:12.860 --> 01:17:28.220
Han Chen: And in that case, right now, if you're thinking that all the CCTP stuff you just mentioned, and all the other interaction with USDC is still transaction-based, you need to know what you're actually doing. You're sending out this token to somebody else.

365
01:17:28.220 --> 01:17:43.890
Han Chen: and you're trading with Uniswap, you're trading with Curve. You don't have to, but it's good that if you understand how those contracts work. But if we can take this layer, abstract technical out, and only have user focusing on their intent.

366
01:17:43.910 --> 01:17:44.930
Joshua Rudolf: And…

367
01:17:45.340 --> 01:17:58.570
Han Chen: Yeah, and then it would be much easier for everybody to use those products, and the underlying contract protocol can switch while keeping the intent always the same. For example, the swap token intent, I don't think it would change

368
01:17:58.690 --> 01:18:13.180
Han Chen: Like, it doesn't need any modification, it would just work forever. If you're swapping two types of tokens, this is what you need. Unless ERC20 is broken, we'll introduce a new standard, but yeah, that's basically the idea here.

369
01:18:13.930 --> 01:18:16.520
Ash Ahmed: Good stuff. What's your, Telegram? I'd love to shoot you this.

370
01:18:17.340 --> 01:18:20.160
Han Chen: Yeah, yes, in the chat as well, yeah.

371
01:18:24.500 --> 01:18:26.060
Han Chen: Any last-minute questions?

372
01:18:30.550 --> 01:18:32.039
Han Chen: No, I think that's all.

373
01:18:32.360 --> 01:18:32.919
Joshua Rudolf: Thank you, hon.

374
01:18:32.920 --> 01:18:33.699
Han Chen: Thanks, Josh.

375
01:18:34.990 --> 01:18:38.020
Joshua Rudolf: And here's his telegram, oh, there you go.

376
01:18:38.190 --> 01:18:41.160
Joshua Rudolf: Cool. Alright, we can end it there. Thanks, everybody.

377
01:18:41.440 --> 01:18:43.409
Joshua Rudolf: Sorry, a little bit over. See you next time.

378
01:18:45.430 --> 01:18:46.200
Jim | LI.FI: Thank you.

