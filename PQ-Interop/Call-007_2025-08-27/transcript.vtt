WEBVTT

1
00:05:24.690 --> 00:05:25.760
KaydenML: Good morning.

2
00:05:29.080 --> 00:05:30.370
Shariq Naiyer: Good morning, Kenan.

3
00:05:37.230 --> 00:05:38.560
KaydenML: Good morning, Sharik.

4
00:05:39.310 --> 00:05:40.460
KaydenML: Good morning, Will.

5
00:05:44.580 --> 00:05:45.860
Will Corcoran: Morning, Al, how are you?

6
00:05:47.730 --> 00:05:49.450
KaydenML: Doing good?

7
00:05:50.390 --> 00:05:51.890
KaydenML: Good morning, Inuit.

8
00:05:54.160 --> 00:05:55.160
unnawut: Morning!

9
00:06:13.780 --> 00:06:14.730
Ladislaus: Hi, folks!

10
00:06:16.830 --> 00:06:17.790
Will Corcoran: Anyways, listen.

11
00:06:18.750 --> 00:06:28.549
Will Corcoran: I dropped the agenda in the chat, and… let's see here… I can share my screen.

12
00:06:29.540 --> 00:06:33.660
Will Corcoran: If it's helpful to go over the… Project Board?

13
00:06:34.950 --> 00:06:36.050
Will Corcoran: …

14
00:06:40.150 --> 00:06:40.990
Will Corcoran: So…

15
00:06:44.590 --> 00:06:49.010
Will Corcoran: Where do we want to dive in? … Designer.

16
00:06:49.430 --> 00:06:51.559
Will Corcoran: Oh, either of you have…

17
00:06:51.850 --> 00:06:56.480
Will Corcoran: updates on the, project board. I know you've been taking a look at it. There's…

18
00:06:56.790 --> 00:07:00.209
Will Corcoran: been a lot of work that's been merged. Tama, also.

19
00:07:01.870 --> 00:07:05.010
Will Corcoran: Do we just get an update on the specification?

20
00:07:06.900 --> 00:07:11.829
Gajinder Singh: Right, so I'll just begin with some, …

21
00:07:12.420 --> 00:07:23.060
Gajinder Singh: some of my views. So, our aim is that, by end of August, we are… we should be done on spec.

22
00:07:23.330 --> 00:07:27.190
Gajinder Singh: And O's initial container PR was merged.

23
00:07:27.330 --> 00:07:34.860
Gajinder Singh: And then, it is followed up by my straight transition function PR, which,

24
00:07:35.030 --> 00:07:40.110
Gajinder Singh: Which, on which O, and … …

25
00:07:40.220 --> 00:07:44.400
Gajinder Singh: and June and I, we basically had a discussion, and …

26
00:07:44.660 --> 00:07:50.209
Gajinder Singh: It is… it looks mostly good, but we will definitely, you know.

27
00:07:50.440 --> 00:08:08.780
Gajinder Singh: have a re-look. Basically, we'll iterate on it, and Toma, if you want to have a look at it, then we can… you can also have a look at it, and then maybe we can discuss it. There is some refinement that needs to be done in terms of some functions need to be defined.

28
00:08:08.900 --> 00:08:19.899
Gajinder Singh: That have been left out, but most… but 98% of it is covered, right? So… so… so you will be able to… able to, …

29
00:08:20.180 --> 00:08:26.280
Gajinder Singh: figure out the entire straight transition function. We can go through it if we want at this call.

30
00:08:27.820 --> 00:08:32.450
Gajinder Singh: And, it has, … chaining and 3SF.

31
00:08:32.620 --> 00:08:36.080
Gajinder Singh: As the features, one of the

32
00:08:36.580 --> 00:08:39.890
Gajinder Singh: Key points, so do we want to go over it right now?

33
00:08:42.350 --> 00:08:44.159
Thomas Coratger: Yeah, we can. Yeah.

34
00:08:45.580 --> 00:08:46.800
Gajinder Singh: Alright, so….

35
00:08:53.920 --> 00:09:01.900
Will Corcoran: And before you started, as you were giving that overview, before you went to… you're working on STF, what'd you mention O's working on?

36
00:09:02.920 --> 00:09:10.040
Gajinder Singh: Yeah, so… so basically, … I'm not sure what I was working on, but we basically discussed,

37
00:09:10.160 --> 00:09:18.629
Gajinder Singh: the SDF PR, and then I will be working on… further working on cons… … the FolkChoice PR, which, again, I will…

38
00:09:18.980 --> 00:09:23.810
Gajinder Singh: be discussing with O, having some calls over it, so that we can finalize that.

39
00:09:24.000 --> 00:09:34.359
Gajinder Singh: this is the plan, and on the Genesis tooling, what we realized while talking was that we actually don't need E12 generator, because

40
00:09:34.480 --> 00:09:46.999
Gajinder Singh: Generating Genesis state is quite simple from the config itself, so each of the clients can generate the Genesis state from the config. So what we actually need is Ethereum Genesis.

41
00:09:47.170 --> 00:10:01.220
Gajinder Singh: generator, which basically generates the client configs, and even on the client config, we'll generate just one kind of config, so that, you know, every other client can just consume it, because all the clients are starting from zero, so it doesn't make…

42
00:10:01.360 --> 00:10:11.030
Gajinder Singh: any sense to have client-specific configs. So we can just do one config, and that becomes a standard for all of the clients.

43
00:10:14.360 --> 00:10:18.519
Will Corcoran: Excellent. So, yeah, back to the SGF walkthrough, sounds great.

44
00:10:22.400 --> 00:10:29.699
Gajinder Singh: Yeah, so… so just let me then continue with the overview plan. So the plan is that

45
00:10:30.300 --> 00:10:42.530
Gajinder Singh: we have the tooling ready by 5th September in that sense, the Genesis tooling ready by 5th September, where we are able to generate the configs that we need.

46
00:10:42.720 --> 00:10:53.360
Gajinder Singh: And, in the meantime, if, someone can, I think Toma or O can, generate, can work on the Python code.

47
00:10:53.590 --> 00:10:58.060
Gajinder Singh: Then, if we have spec tests by 12 September.

48
00:10:58.360 --> 00:11:06.990
Gajinder Singh: then we can get ready for interop by 19 September, basically pass all the spec tests by 19 September.

49
00:11:07.370 --> 00:11:15.209
Gajinder Singh: So that… by 26th September, we… Can do a successful interop.

50
00:11:15.800 --> 00:11:19.339
Gajinder Singh: For DevNet Zero, and then, …

51
00:11:19.560 --> 00:11:27.260
Gajinder Singh: By 3rd October, we will… we should be able to have the tooling up by… up for…

52
00:11:27.720 --> 00:11:33.319
Gajinder Singh: DevNet one, and in that tooling as well, what we only need is that

53
00:11:33.700 --> 00:11:50.300
Gajinder Singh: a list of public-private key pairs for various validators, and again, we don't need the Genesis generator, because Genesis can be generated by the clients using those config files, so I will… I will think of

54
00:11:50.460 --> 00:11:54.789
Gajinder Singh: The public-private key pairs as config files, so…

55
00:11:54.940 --> 00:12:01.100
Gajinder Singh: So that is the deadline we have, and these are super strict deadlines, so that,

56
00:12:01.620 --> 00:12:05.060
Gajinder Singh: In the interop, we can actually try for…

57
00:12:05.460 --> 00:12:09.630
Gajinder Singh: actual client interop, and so 3rd September is also the…

58
00:12:10.030 --> 00:12:18.150
Gajinder Singh: deadline to, to basically implement, all the specs that we need for DevNet 1.

59
00:12:25.420 --> 00:12:34.440
Thomas Coratger: Yep, I will check that and let you know what I can do and what I cannot do, but I will definitely check that to start, …

60
00:12:34.680 --> 00:12:36.460
Thomas Coratger: implementing the Python stuff.

61
00:12:38.010 --> 00:12:46.670
Gajinder Singh: Right, cool. So with that, let's deep dive into this, STF spec.

62
00:12:51.130 --> 00:12:58.570
Gajinder Singh: All right, I can't share why the participant is sharing. Also, generally, you know, my…

63
00:12:59.310 --> 00:13:03.870
Gajinder Singh: Zoom dies when I try to share, so it would be better, …

64
00:13:04.240 --> 00:13:06.270
Gajinder Singh: If you can directly share wealth.

65
00:13:06.430 --> 00:13:07.090
Will Corcoran: Sure.

66
00:13:07.260 --> 00:13:08.940
Will Corcoran: Yeah, you want to drop the link? Okay.

67
00:13:08.960 --> 00:13:10.260
Gajinder Singh: Yep.

68
00:13:13.290 --> 00:13:14.909
Gajinder Singh: Yeah, we can go to files.

69
00:13:15.920 --> 00:13:21.230
Will Corcoran: Okay remind me, is my screen still actively shared? Yeah, it looks like it.

70
00:13:22.100 --> 00:13:24.890
Will Corcoran: So you said you have files changed, okay.

71
00:13:27.860 --> 00:13:33.160
Gajinder Singh: Right, so this is just the header that will generate, auto-generate. Let's go down.

72
00:13:37.420 --> 00:13:45.269
Gajinder Singh: Right, so what I have mentioned in the first section is what are the… what are the features that we are going for, if you can scroll a little bit up.

73
00:13:46.130 --> 00:13:48.400
Gajinder Singh: Right, so the features are chaining.

74
00:13:49.710 --> 00:13:52.600
Gajinder Singh: … So let's scroll down.

75
00:13:53.090 --> 00:14:06.979
Gajinder Singh: And then, 3SF Mini, justification and finalization. There will be, no, signatures, so basically it's empty signatures, there is no aggregation, there is round-robin proposals, and there are simplified validators.

76
00:14:07.110 --> 00:14:13.180
Gajinder Singh: So that, basically, proposal and voting is a trusted process.

77
00:14:13.190 --> 00:14:30.960
Gajinder Singh: Because there is… there are no signatures, and there is even no validator structure in the state as well. So there is no deposit activation, withdrawal, or slashing. So, actually, there is no validator cycle, and each validator has a weight of 1.

78
00:14:31.170 --> 00:14:33.240
Gajinder Singh: And, yup.

79
00:14:34.360 --> 00:14:38.919
Gajinder Singh: So, this is that the Genesis can be generated very easily.

80
00:14:39.400 --> 00:14:44.510
Gajinder Singh: So, if we go to the Genesis part, so generating genesis requires

81
00:14:44.580 --> 00:14:55.150
Gajinder Singh: just two config variables, which is genesisTime and num validators, and we have a very simplified Genesis generation function based on the lines of

82
00:14:55.220 --> 00:15:14.660
Gajinder Singh: How because Beacon Genesis is generated, we basically set the genesis time and num validators in the state, as well as set the latest block header to an empty block header, but with the body root of the hash tree root of empty block body, which is how we do it in the beacon as well.

83
00:15:15.710 --> 00:15:22.470
Gajinder Singh: And then the Genesis block is basically, you know, empty block with state routes set to the Genesis state.

84
00:15:22.950 --> 00:15:32.230
Gajinder Singh: Now we can go to the straight transition function, and the notable thing in the straight transition function is that we are validating signatures outside

85
00:15:32.240 --> 00:15:43.870
Gajinder Singh: Outside, so in the beacon straight transition, signature validation is inside the straight transition, but here we are getting a flag from outside the straight transition function that

86
00:15:44.030 --> 00:15:55.790
Gajinder Singh: whether the signatures are valid or not, but other things are similar to how beacon-stray transition works. So basically, we have first process slots, which basically make sure that

87
00:15:56.040 --> 00:16:03.089
Gajinder Singh: You are able, so we… we can, so we fast-forwarded state to the pre-slot of

88
00:16:03.660 --> 00:16:08.899
Gajinder Singh: pre-state of this particular slot, which is what process slots does, and then we process the block.

89
00:16:09.010 --> 00:16:17.610
Gajinder Singh: And the last step is basically validating that block straight root actually matches the straight root of the tree.

90
00:16:18.570 --> 00:16:25.829
Gajinder Singh: So, when we look at process slots, it's very similar to how Yes, Silas?

91
00:16:26.540 --> 00:16:30.800
Saulius Grigaitis | Grandine: Yeah, why the signature verification is outside?

92
00:16:32.520 --> 00:16:38.070
Gajinder Singh: Yeah, basically, the signature verification is right now outside for the reasons, …

93
00:16:38.200 --> 00:16:48.550
Gajinder Singh: So, first of all, we want state transition function to be light for the prover, so that, you know, there isn't much competition that is going on. And second.

94
00:16:48.720 --> 00:17:01.680
Gajinder Singh: so the signatures for… for the attestations, it will be an aggregated signature. And, so basically, we need to sort of figure out whether we can run it inside

95
00:17:01.800 --> 00:17:03.230
Gajinder Singh: the proverb itself?

96
00:17:03.670 --> 00:17:12.369
Gajinder Singh: that particular verification, because it itself would be, some sort of a ZKVM running to verify the signature.

97
00:17:12.970 --> 00:17:15.540
Gajinder Singh: So we need to figure that out… figure that part out.

98
00:17:15.940 --> 00:17:21.279
Gajinder Singh: And, and basically, we want to keep the straight transition function light.

99
00:17:21.420 --> 00:17:22.439
Gajinder Singh: In that manner.

100
00:17:23.300 --> 00:17:32.129
Gajinder Singh: Generally, the way clients also implement it is that, you know, they just take the batch signatures in the block, they batch it up, and then they verify it.

101
00:17:33.790 --> 00:17:40.510
Saulius Grigaitis | Grandine: Okay, so in some sense, it's kind of temporary outside, because it's still not sold.

102
00:17:43.250 --> 00:17:43.780
Gajinder Singh: Sorry.

103
00:17:43.780 --> 00:18:02.839
Saulius Grigaitis | Grandine: I mean, now it's temporary outside, because we just want to have a good proving time, right? And once it will be figured out how exactly the signature aggregation will be done, and how exactly the proving will be done, likely it will change.

104
00:18:04.560 --> 00:18:10.759
Gajinder Singh: it… we can come back on this, but in my opinion, I think we should, …

105
00:18:11.080 --> 00:18:15.029
Gajinder Singh: Just keep it outside the main state transition function, because…

106
00:18:15.240 --> 00:18:18.819
Gajinder Singh: to keep it lighter, but again, I don't have…

107
00:18:19.230 --> 00:18:37.700
Gajinder Singh: a very hard stance as of now, because I don't know that part totally fully, but especially for, blocks, signature validation, for example, you know, that this is now a signature hash verification that will happen.

108
00:18:37.870 --> 00:18:43.369
Gajinder Singh: Hash signature verification that will happen, and it might be computationally intensive.

109
00:18:43.510 --> 00:18:52.670
Gajinder Singh: So, whether it's good for ZKVM, whether it's light for ZKVM, or ZKVMs can do it in a vast manner that we can directly have it inside, …

110
00:18:53.010 --> 00:18:57.030
Gajinder Singh: I'm not sure about that, but yes, we can definitely come back on this.

111
00:19:02.360 --> 00:19:03.030
Saulius Grigaitis | Grandine: Thanks.

112
00:19:04.230 --> 00:19:04.870
Gajinder Singh: Cool.

113
00:19:05.750 --> 00:19:07.980
Will Corcoran: I think you're at the state route.

114
00:19:09.370 --> 00:19:26.740
Gajinder Singh: Yeah, so this straight route validation is also similar to how it happens in the beacon. Now, coming to process slots, so… so the notable thing is that we… we basically don't have any process epoch over here, because there is no epoch transition, so we just process

115
00:19:26.880 --> 00:19:31.660
Gajinder Singh: Each of the slots and move state slot forward, one by one.

116
00:19:31.810 --> 00:19:34.700
Gajinder Singh: Till we reach the pre-strate of the current block.

117
00:19:35.120 --> 00:19:41.830
Gajinder Singh: … So that is what is happening. Process slot is very similar to

118
00:19:42.080 --> 00:19:46.810
Gajinder Singh: How it happens in, … in the beacon, …

119
00:19:47.140 --> 00:20:03.510
Gajinder Singh: In the beacon consensus, so basically, if we have latest block had a, straight route as empty, so basically, we just fill it with the current… the current straight route, which is the start of

120
00:20:03.800 --> 00:20:05.919
Gajinder Singh: Which is a pre-state.

121
00:20:06.290 --> 00:20:09.900
Gajinder Singh: Oh… For this particular block.

122
00:20:11.590 --> 00:20:16.280
Gajinder Singh: And, basically, this helps us establishing. So…

123
00:20:16.600 --> 00:20:23.730
Gajinder Singh: So the next process is then we process the block, and in block, there are two things. We process the block header, and then we process the operations.

124
00:20:23.870 --> 00:20:30.609
Gajinder Singh: Again, in, processing operations, we have, actually processing of the attestation slash votes.

125
00:20:30.740 --> 00:20:39.640
Gajinder Singh: That is the only feature we have right now, and in process block header, we, for ex… we basically do similar things to…

126
00:20:39.650 --> 00:20:53.170
Gajinder Singh: how Beacon, processors do process block header, so they… you will notice that, to verify the proposal index, we are just, doing the round-robin verification that, you know.

127
00:20:53.350 --> 00:21:01.220
Gajinder Singh: Blog.slotmodulo state.config.numValidators, so that is… A notable change over here.

128
00:21:01.400 --> 00:21:13.089
Gajinder Singh: And then the next line is where we establish the chaining, that block.parent root is hashtag root of state.latestBlockHeader. So this basic… so this establishes the chaining.

129
00:21:13.270 --> 00:21:25.729
Gajinder Singh: And, coming to the 3SF-related changes. So, so here, in 3SF Mini, the Genesis happens at slot 1, but, we have…

130
00:21:25.790 --> 00:21:39.699
Gajinder Singh: CAP Genesis block at slot 0 itself, and block 1 is the first block. In 3SF Mini, block 2 is the first block. So basically, you know, we did some modifications to bring it back

131
00:21:39.790 --> 00:21:49.130
Gajinder Singh: to how we… how we do it, how we are used to right now. So if, so there is this special, treatment for that, if,

132
00:21:49.260 --> 00:21:55.560
Gajinder Singh: If the state was at Genesis state, then basically we update it as justified.

133
00:21:55.680 --> 00:22:06.180
Gajinder Singh: And let us finalize to the Genesis, Genesis route, which is block.parent route, because we have already established chaining at this point.

134
00:22:08.230 --> 00:22:12.130
Gajinder Singh: And, then what we do is, basically, we…

135
00:22:12.290 --> 00:22:18.289
Gajinder Singh: So, since the, now the parent, so now the voting can happen till the parent.

136
00:22:18.550 --> 00:22:26.369
Gajinder Singh: So we basically update historical block hashes and justified slots, so just, to basically, you know.

137
00:22:26.760 --> 00:22:35.539
Gajinder Singh: We push parent into historical block hashes, and justified slots, we either push true or false, depending upon

138
00:22:35.690 --> 00:22:42.619
Gajinder Singh: whether the payment is Genesis or not, because Genesis is always justified and finalized.

139
00:22:43.180 --> 00:22:49.610
Gajinder Singh: And then, again, just to, if there were any empty slots.

140
00:22:49.780 --> 00:22:57.300
Gajinder Singh: Between, … between the parent block and this particular block, then we basically add empty hashes

141
00:22:57.460 --> 00:23:13.980
Gajinder Singh: for those, for those empty slots in the historical block hash, and also push… push falls for… in that… in the justified slots, so that, to maintain the integrity of these two structures that we will use in 3SF Mini.

142
00:23:14.600 --> 00:23:22.139
Gajinder Singh: And, then the last bit is to update the latest block header, which is how we do it in Beacon Consensus.

143
00:23:24.410 --> 00:23:31.320
Gajinder Singh: Then we can move to process operations, which is where the main 3SF mini magic happens.

144
00:23:32.850 --> 00:23:34.620
Gajinder Singh: Please scroll down.

145
00:23:36.690 --> 00:23:46.810
Gajinder Singh: So, we… we process attestations, we process vote by vote. So, one thing to note is that, in 3SF Minis that, you know.

146
00:23:46.850 --> 00:23:56.779
Gajinder Singh: the state has flattened, object of justifications. So there is a justification map in 3SF Mini, which basically is a map,

147
00:23:56.860 --> 00:24:01.679
Gajinder Singh: Which is a map of, of the routes to…

148
00:24:01.860 --> 00:24:05.429
Gajinder Singh: The array of validators that have justified it.

149
00:24:05.600 --> 00:24:08.160
Gajinder Singh: Can you just scroll up, back up?

150
00:24:10.490 --> 00:24:23.790
Gajinder Singh: So, justifications is a map, from root to the number… to the validators that are… that has justified it, and basically, we… we go over the latest vote of each of the validators, and

151
00:24:23.840 --> 00:24:39.429
Gajinder Singh: see which routes they have justified, and then try to see whether something has been justified more than two-thirds… by the two-thirds of the validators, and we justify it, and then we try to finalize the source of it. So… so basically, then, this…

152
00:24:39.470 --> 00:24:45.589
Gajinder Singh: in… in the current state, which is SSD state, we have this flattened into, …

153
00:24:45.720 --> 00:24:51.689
Gajinder Singh: into two structures, which are justification routes and justification validators, I think.

154
00:24:51.860 --> 00:24:52.920
Gajinder Singh: But…

155
00:24:53.260 --> 00:25:01.630
Gajinder Singh: We reconstruct back an in-memory object over here, which is… which we… which we are saying are justifications, which map directly to…

156
00:25:01.680 --> 00:25:16.739
Gajinder Singh: the 3SF Mini justifications, and then there is this helper function, getJustification, that does that. So for, … so that is the only notable thing, which, is sort of a departure from 3SF Mini.

157
00:25:17.140 --> 00:25:20.839
Gajinder Singh: Then for each of the votes, we start processing it.

158
00:25:21.170 --> 00:25:38.960
Gajinder Singh: Here again, there is an additional condition that I added based upon Zim experimentation, so that if the target is already, already justified as well, then you just don't process that vote. But apart from that, these are all,

159
00:25:39.120 --> 00:25:44.120
Gajinder Singh: The similar… the rest of these conditions are similar. …

160
00:25:44.360 --> 00:25:48.690
Gajinder Singh: And these conditions are basically whether you want to process this water or not.

161
00:25:49.590 --> 00:25:51.530
Gajinder Singh: And, …

162
00:25:51.780 --> 00:25:59.989
Gajinder Singh: And if, for example, this is… and there is a vote that is not in justifications map, then you basically populate

163
00:26:00.550 --> 00:26:01.950
Gajinder Singh: That map.

164
00:26:02.090 --> 00:26:11.699
Gajinder Singh: with, some, false entries, so that, you know, it's like initialization. And coming to the next step, which is line 254,

165
00:26:12.000 --> 00:26:14.720
Gajinder Singh: Is where, basically.

166
00:26:15.120 --> 00:26:21.920
Gajinder Singh: If the validator is voting for some target route, you basically flag it to true in your justifications map.

167
00:26:22.320 --> 00:26:31.039
Gajinder Singh: And, then you count whether… how many, how many, validators are voting for that target route, and if…

168
00:26:31.150 --> 00:26:38.560
Gajinder Singh: two-thirds of the validators are voting for the target route. Basically, you justify… that… Target?

169
00:26:39.360 --> 00:26:43.420
Gajinder Singh: And, then you clear up your justifications map

170
00:26:43.630 --> 00:26:49.310
Gajinder Singh: Basically, because we… because justifications map get re-flat… re-flattened back to…

171
00:26:49.740 --> 00:26:53.370
Gajinder Singh: the SSD state, so you… you don't really want to…

172
00:26:53.550 --> 00:26:57.570
Gajinder Singh: Crack justifications for the blocks that have already been justified.

173
00:26:58.160 --> 00:27:05.010
Gajinder Singh: So we delete that, and then we try to see whether you can finalize the source, which is very similar to

174
00:27:05.330 --> 00:27:18.180
Gajinder Singh: Which is exactly how it happens in the 3SF Mini. And in the end, then basically, you know, you re-flatten back these justifications to the SSG structures in the state.

175
00:27:18.310 --> 00:27:32.050
Gajinder Singh: So, getJustification and setJustifications are the helper functions that we still need to define, and we'll fill it up, but rest of the straight transition function is done.

176
00:27:40.440 --> 00:27:56.690
Thomas Coratger: amazing, like, small questions, not about the content, because I listened to your presentation, and I will go back to the MD stuff to really understand everything by myself, to compare with what I have understood there, but…

177
00:27:56.760 --> 00:28:13.680
Thomas Coratger: First question, where are you, at the review process? Do you all clients agree on this, or is there some points where maybe there will be evolution and where you need to refine and…

178
00:28:14.120 --> 00:28:15.400
Thomas Coratger: Have an agreement.

179
00:28:15.520 --> 00:28:18.219
Thomas Coratger: And second question is, …

180
00:28:18.370 --> 00:28:26.949
Thomas Coratger: did you generate it? Did you generate this code using Python and already tested it, or you just wrote that into…

181
00:28:27.280 --> 00:28:28.870
Thomas Coratger: the MG stuff.

182
00:28:30.620 --> 00:28:45.549
Gajinder Singh: Yeah, so, with regard to modifications, I don't think there are any modifications that will be required. We'll just need to add the definitions for get justification and set justification, so that, you know, we have all the helper functions available.

183
00:28:45.750 --> 00:28:49.700
Gajinder Singh: So that, clients can then, …

184
00:28:50.130 --> 00:29:06.099
Gajinder Singh: code it up, in the best, form that… that is suitable to their, you know, client language. But, apart from that, I think, everything is good. What I will also do is, I will…

185
00:29:06.810 --> 00:29:11.970
Gajinder Singh: go and change a ZIM code on basis of this particular PR, and sort of…

186
00:29:12.210 --> 00:29:29.990
Gajinder Singh: re-verify that in our code that, you know, everything is working good, because I made some departures from how we implemented it in Zoom as well, so there are some slight departures, because I rearranged some bits over here, but what I will do is…

187
00:29:30.030 --> 00:29:33.100
Gajinder Singh: I'll go back and sort of also verify in Zoom.

188
00:29:33.380 --> 00:29:37.390
Gajinder Singh: The correctness of this code, and in that way, you know, we have

189
00:29:37.620 --> 00:29:43.459
Gajinder Singh: We will basically have, sort of, one verification, and maybe REAM team can also do it in the meantime.

190
00:29:43.720 --> 00:29:48.950
Gajinder Singh: The second thing… second bit about, Python, …

191
00:29:49.140 --> 00:29:55.909
Gajinder Singh: is that, yeah, so I basically put it together in the sense, but I have not verified that if this will…

192
00:29:56.340 --> 00:30:00.000
Gajinder Singh: if all the syntax… if there are no syntax errors in Python.

193
00:30:00.310 --> 00:30:06.390
Gajinder Singh: But mostly this should work out, and … Yo.

194
00:30:06.730 --> 00:30:12.689
Gajinder Singh: Oh, and June, basically, they… they will… they said that they would be helping me with,

195
00:30:12.920 --> 00:30:15.429
Gajinder Singh: the correctness of the Python.

196
00:30:16.800 --> 00:30:18.000
Gajinder Singh: Syntax, yeah.

197
00:30:21.570 --> 00:30:23.460
Thomas Coratger: Okay, understood. Thanks.

198
00:30:29.130 --> 00:30:31.800
Will Corcoran: Is there anything in containers to review, Azure?

199
00:30:33.680 --> 00:30:40.980
Gajinder Singh: Yeah, container is just this additional structure that was missing over there to add block header, but it's very straightforward.

200
00:30:46.440 --> 00:30:48.879
Will Corcoran: Very cool. That was great. I loved listening to this.

201
00:30:54.150 --> 00:30:59.950
Gajinder Singh: So now, the follow-up to this will be, the folk choice

202
00:31:00.260 --> 00:31:05.140
Gajinder Singh: That, me and O will sort of discuss and… finalize.

203
00:31:05.570 --> 00:31:21.319
Gajinder Singh: And then, I think, the spec-wise, definite zero spec will be done. In DevNet 1, in fact, the spec change would be quite small, because all we did… all we are… we would be adding on top of that would be…

204
00:31:21.470 --> 00:31:26.930
Gajinder Singh: Signatures, and there is more figuring out over there.

205
00:31:27.580 --> 00:31:34.539
Gajinder Singh: then an actual… then basically a very little change on the SDF itself, because, …

206
00:31:35.100 --> 00:31:49.320
Gajinder Singh: So where signature validation is where, you know, things will come up, and we'll introduce validators array in the state, and sort of maintain it a bit. But apart from that, basically, this will very simply translate to

207
00:31:49.550 --> 00:31:51.690
Gajinder Singh: Definite One spec as well.

208
00:31:53.300 --> 00:31:57.560
Will Corcoran: And you had a due date of September 5th for the DevNet spec?

209
00:32:00.930 --> 00:32:09.249
Gajinder Singh: Yeah, so yes, so we can do September 5th by 4 DevNet, one spec, if we can, …

210
00:32:10.030 --> 00:32:18.290
Gajinder Singh: So… so DevNet Zero spec is end of this month. For DevNet 1, we can have the due date of September 5th, so that, you know.

211
00:32:18.820 --> 00:32:25.689
Gajinder Singh: parallel things can be done. And for that, basically, if we can resolve a few questions, regarding

212
00:32:25.940 --> 00:32:30.360
Gajinder Singh: key types, I think that would be good.

213
00:32:30.840 --> 00:32:34.500
Gajinder Singh: So… so that is the only pending thing that I see over there.

214
00:32:34.830 --> 00:32:40.769
Gajinder Singh: Apart from the fact that, okay, you know, what are the exact bytes for signatures and for public key?

215
00:32:41.020 --> 00:32:46.029
Gajinder Singh: So… so those… those are the questions, I think, that are open-ended.

216
00:32:47.110 --> 00:32:48.130
Gajinder Singh: As of now.

217
00:32:49.150 --> 00:32:51.869
Will Corcoran: So, could… could you repeat the questions?

218
00:32:52.870 --> 00:32:53.960
Will Corcoran: the….

219
00:32:53.960 --> 00:32:54.430
Gajinder Singh: ….

220
00:32:54.430 --> 00:32:55.050
Will Corcoran: Public keyer.

221
00:32:55.050 --> 00:32:55.850
Gajinder Singh: Yeah, so…

222
00:32:56.520 --> 00:33:04.120
Gajinder Singh: So the questions, that are… so… so, basically, we need two key types over here, which is basically…

223
00:33:04.360 --> 00:33:15.450
Gajinder Singh: For… which we have also discussed in post-quantum group. So one key type is for attestation, and the other key type is for block signature. And, so…

224
00:33:15.630 --> 00:33:24.649
Gajinder Singh: So these are the two key types that we need. Now, whether we'll have… so what kind of scheme do we have to support these two key types, and going forward, maybe…

225
00:33:24.920 --> 00:33:36.730
Gajinder Singh: other key types that will come for signing other messages, like slashing, etc. So… so these are the… so this is one primary question, that needs to be resolved.

226
00:33:36.750 --> 00:33:47.459
Gajinder Singh: And the second question that, needs to be resolved is what are the exact bytes, because when we say it's 3 KB, so what is the exact byte number, that…

227
00:33:47.930 --> 00:33:59.520
Gajinder Singh: That we can calculate from the params that we have chosen, not only for signature, but also for, for example, public key, that will enroll in the state itself.

228
00:34:01.370 --> 00:34:11.330
Gajinder Singh: So, that was my second question in post-quantum groups, that if publicity for… so basically the root, the Merkel root of,

229
00:34:11.690 --> 00:34:14.819
Gajinder Singh: Of, the SIGH scheme.

230
00:34:14.929 --> 00:34:22.580
Gajinder Singh: So… so what is the size for it? If it's 8 field elements or 7 field elements, okay, we have over here.

231
00:34:25.159 --> 00:34:43.339
unnawut: Yeah, so maybe, maybe while we are on the screen, so this is the PR I just opened this afternoon, basically, changing the current, the current, current container specs, contain only bytes 32 for block signatures and… and vote signatures.

232
00:34:43.349 --> 00:34:57.759
unnawut: What I changed here is to make it more accurately represent, the… the actual signature size using the parameters that I think it was Thomas that, merged the specs in for XMSS.

233
00:34:57.759 --> 00:35:05.599
unnawut: But there's still quite a bit of difference here, so I kind of, like, simplified to just, like, 3 keys here, the path, randomness, and the hashes.

234
00:35:05.599 --> 00:35:17.279
unnawut: But if we go look into, like, the actual XMSS interface that Thomas merged, it's actually… the structure is, right there, right there, actually. The signature, class signature there.

235
00:35:17.280 --> 00:35:17.850
Will Corcoran: Gotcha.

236
00:35:18.090 --> 00:35:27.239
unnawut: Yeah, so the actual signature of, like, the actual structure of the path, the randomness of the ashes is actually a bit more complicated. You have a few inner…

237
00:35:27.240 --> 00:35:48.250
unnawut: inner keys inside these, like, paths and hashes. But I… I chose to omit this because, for depth.0, we are not actually implementing the signature anyway, so having something representing, like… I think this is, like, approximately close enough. I think there's a lot more to discuss about, like, how do we actually represent those

238
00:35:48.300 --> 00:35:55.690
unnawut: like, inner structure inside, like, something that's actually SSC, serializable.

239
00:35:55.990 --> 00:35:59.440
unnawut: So I think that's still to be discussed in the head one.

240
00:36:00.550 --> 00:36:05.780
Gajinder Singh: So, I have, sort of, feedback over here, in the sense that I would not want

241
00:36:06.000 --> 00:36:24.169
Gajinder Singh: a signature container over here, because as such, with regard to clients, basically, you know, this could just be some flat bytes, that can be dealt, and this serialization, deserialization can be dealt inside the signature library as well, because

242
00:36:24.420 --> 00:36:42.709
Gajinder Singh: then basically block signature, which is fixed amount of bytes, and then, aggregated signatures, which are variable amount of bytes. So, basically, the client does not really need to deal with them on the client level. And what we can do is, we can sort of have

243
00:36:42.920 --> 00:36:48.079
Gajinder Singh: basically a non-fixed signature size.

244
00:36:48.560 --> 00:36:58.590
Gajinder Singh: That way, basically, you know, we can just get away from thinking, what is the exact signature size do we need right now? We can say that, okay, you know, we can have a max list

245
00:36:58.780 --> 00:37:03.830
Gajinder Singh: byte list, over here, which basically says that, okay, max 4K byte list.

246
00:37:04.000 --> 00:37:05.890
Gajinder Singh: We can keep for signature.

247
00:37:19.800 --> 00:37:27.850
unnawut: So, Guy Jr.'s proposal is to just, like, maybe flatten the signature container entirely, right? And then maybe just use, like, a vector of…

248
00:37:28.320 --> 00:37:31.279
unnawut: Certain number of bytes, like, 4,000 bytes or something.

249
00:37:33.640 --> 00:37:36.360
unnawut: Is that the proposal?

250
00:37:39.380 --> 00:37:41.410
Gajinder Singh: Yep, that is a proposal.

251
00:37:42.500 --> 00:37:48.209
Gajinder Singh: Otherwise, we'll basically at least need to differentiate between block signature and the aggregated signature.

252
00:37:53.160 --> 00:38:05.669
unnawut: Yeah, I guess, like, for me, that's fine, like, because this is basically just mock signature anyway, so flattened, like, light vectors sounds fine to me. Easier to implement as well, yeah.

253
00:38:06.050 --> 00:38:13.040
unnawut: … I think there was someone else, who also chimed in.

254
00:38:14.230 --> 00:38:19.739
unnawut: I… Okay, maybe, maybe not.

255
00:38:22.340 --> 00:38:33.460
unnawut: So yeah, so this PR is still open in the LeanSpecs repo, so anyone wants to, like, add their thoughts in, feel free to, but I guess, like, I… yeah, I guess, like, a flattened…

256
00:38:33.580 --> 00:38:40.199
unnawut: byte vector is probably easier to implement just for DevNet 0, and then we can discuss the actual structure for DevNet1.

257
00:38:45.130 --> 00:38:46.270
Will Corcoran: Great.

258
00:38:46.270 --> 00:39:01.289
Gajinder Singh: I meant this for DevNet1 because what we were saying was that, can we free specs for DevNet1 by 5th September? And, basically, to do that, we can work for the PRs

259
00:39:01.520 --> 00:39:07.820
Gajinder Singh: on the first week of September for DevNet1 spec, because it's best to close out the spec early on.

260
00:39:07.940 --> 00:39:12.860
Gajinder Singh: And for that, you know, I think even for DevNet1, we should…

261
00:39:13.260 --> 00:39:18.070
Gajinder Singh: Go for, you know, flat bite as well, because client doesn't need to know

262
00:39:18.660 --> 00:39:28.369
Gajinder Singh: the actual internal structure of the signature. And it is good in the sense that, if, for example, signature scheme changes in some way, or the tree height changes in some way.

263
00:39:28.590 --> 00:39:33.689
Gajinder Singh: … Then, basically, client doesn't need to know anything about that.

264
00:39:41.250 --> 00:39:45.739
Will Corcoran: So Gadjinder, this is the last call before…

265
00:39:45.920 --> 00:39:54.450
Will Corcoran: the self-imposed DevNet Zero spec is due, 8.31. Are there any blockers that you want to discuss, or…

266
00:39:54.830 --> 00:39:58.250
Will Corcoran: or O, or anyone else, … There is a…

267
00:39:59.510 --> 00:40:03.750
Will Corcoran: Discussion topics or things that, you know, unknowns that need to be resolved.

268
00:40:05.810 --> 00:40:08.700
Gajinder Singh: Yeah, I think, for DemNet Zero.

269
00:40:08.830 --> 00:40:12.540
Gajinder Singh: There, I don't see any blockers. Oh, what do you think?

270
00:40:13.750 --> 00:40:18.999
unnawut: On the client implementation, I think we are good. …

271
00:40:19.420 --> 00:40:31.060
unnawut: I'm saying this without actually asking the team, but I guess, like, we're good. One of the concerns we had was around the infrastructure for running the DevNets.

272
00:40:31.100 --> 00:40:39.709
unnawut: I… I asked Guillaume yesterday, and it seems like he's taking care of that with ePandaOps, so, basically, like.

273
00:40:39.710 --> 00:40:52.140
unnawut: not doing anything at all, and I think the REAM team is basically just standing by. If there's any help that you'd like, feel free to let us know, but otherwise, like, we are not touching anything on the infrastructure side at all.

274
00:40:53.770 --> 00:40:58.780
Gajinder Singh: But you will say, to make sure that Rheem is Docker compatible.

275
00:40:59.180 --> 00:41:00.269
unnawut: Yeah, yeah, yeah, yeah, yeah.

276
00:41:05.430 --> 00:41:16.770
Guillaume: Yeah, I had a question regarding this, except I just, forgot… oh yeah, weren't you guys supposed to get, DORA to work?

277
00:41:18.710 --> 00:41:26.170
Guillaume: you guys being the RIM team, I got this impression, but if it's not the case, is somebody working on DORA?

278
00:41:28.880 --> 00:41:39.749
Jun: Actually, I was assigned to, handle DORA, but, I'm, not that much progress, is on, so…

279
00:41:39.870 --> 00:41:52.860
Jun: And I'm afraid that current DORA, structure, isn't fit well in our, lean DevNet structure, so, yeah, so I'd like to, …

280
00:41:52.970 --> 00:41:59.959
Jun: I'd like to suggest that, so do we really need DORA at PQ.0 right now?

281
00:42:03.950 --> 00:42:10.070
Gajinder Singh: I think we need at least something like Fort Morne, something like that, so we know that, …

282
00:42:11.130 --> 00:42:16.820
Gajinder Singh: basically, you know, what folks are in the DevNet, and whether The dev… whether, you know.

283
00:42:17.220 --> 00:42:21.060
Gajinder Singh: how many clients are agreeing or not? I think that would be…

284
00:42:21.790 --> 00:42:28.140
Gajinder Singh: Pretty amazing to have, if we can have that, and Fort Moon might be a very simple tool, consider to advertise.

285
00:42:30.370 --> 00:42:47.549
Guillaume: Yeah, Forkman could be… could do the… could be good enough for now. Yeah, this is… I mean, this is not surprising, what you're telling me, Dora is, is a beast. It's a… it's a great piece of software, but unfortunately, it's very… a lot of things are…

286
00:42:47.620 --> 00:43:03.760
Guillaume: beacon chain specific, and I had to deal with it with, with my vertical stuff, just adding a few things. It's, I mean, you have to find your way around, it's, once you know, it's not that hard, but it's, it's a bit, yeah, it's a bit overwhelming.

287
00:43:04.160 --> 00:43:08.879
Guillaume: Yeah, if we can just get Forkman to work, I think it's good enough.

288
00:43:10.450 --> 00:43:19.310
Guillaume: Good question, where is Forkman? I'm pretty sure that's, Holy Man who did this. Okay, if I, if I find it, I will send it to you after this call.

289
00:43:27.650 --> 00:43:42.959
Will Corcoran: Great. Yeah, there was a question earlier in the chat. Camille, you had noted a while back an interest in, having a client participate in the DevNet series. Just curious your current thinking on that, if you're planning to.

290
00:43:44.420 --> 00:43:57.919
Kamil Salakhiev: Yeah, we do plan to do this. Yeah, unfortunately, I cannot be super active, as it's basically just two people working on that right now. We're basically finishing up with some, lib2P stuff, so we just finished the QSIP sub integration.

291
00:43:58.020 --> 00:44:07.799
Kamil Salakhiev: And, yeah, integrating all of that stuff into the node itself. So, yeah, there will be basically Cosystem, SSG, and so on.

292
00:44:08.050 --> 00:44:11.210
Kamil Salakhiev: So, yeah, we plan to do this.

293
00:44:11.540 --> 00:44:15.819
Kamil Salakhiev: But, yeah, with… but resources are kind of limited, but yeah.

294
00:44:16.200 --> 00:44:18.229
Kamil Salakhiev: At the targets, it's still there.

295
00:44:18.800 --> 00:44:19.920
Kamil Salakhiev: To implement, yeah.

296
00:44:25.710 --> 00:44:41.039
Gajinder Singh: One question that I had, and I forgot to mention it anyway, was that when we take a hash tree root, or any of the sort of hashing in Poseidon 2, so we are expecting the output as 32 bytes, right?

297
00:44:41.180 --> 00:44:43.510
Gajinder Singh: Of any hashing function that we'll use.

298
00:44:45.090 --> 00:44:46.600
Gajinder Singh: Especially because I don't.

299
00:44:47.260 --> 00:44:48.469
Gajinder Singh: in SOZ.

300
00:45:00.160 --> 00:45:03.189
Gajinder Singh: Toma, I think maybe you might be able to answer this.

301
00:45:18.590 --> 00:45:21.009
Will Corcoran: Kamai, you're muted if you're responding.

302
00:45:21.280 --> 00:45:33.130
Thomas Coratger: Sorry, my screen's frozen. Your question where, like, if I… if the signature outputs are 32 bits, right? Can you repeat your question? Because my….

303
00:45:33.130 --> 00:45:43.280
Gajinder Singh: No, no, my question was that, in SSD, since we are replacing, SHA256 hasher by Poseidon 2, basically.

304
00:45:43.650 --> 00:45:48.210
Gajinder Singh: So… so the output of the hasher remains 32 bytes, right?

305
00:45:54.260 --> 00:45:57.229
Thomas Coratger: We need to check, because these are field elements.

306
00:45:59.020 --> 00:46:00.879
Thomas Coratger: at the output of Poseidon.

307
00:46:01.180 --> 00:46:15.129
Thomas Coratger: So, this is different from SHA. So, we need to check how to do this. I'm not exactly sure how to manage this, but everything in Poseidon are field elements, so basically Koalaber elements.

308
00:46:15.540 --> 00:46:20.460
Thomas Coratger: But, of course, then we can… Transform that into… into bytes.

309
00:46:23.910 --> 00:46:28.749
Gajinder Singh: Yeah, I think this is one of the open questions for DevNet Zero, I guess.

310
00:46:29.620 --> 00:46:30.939
Thomas Coratger: Yep, or….

311
00:46:31.410 --> 00:46:38.540
Gajinder Singh: Or do you think that we should move Poseidon 2 to DevNet 1 and just continue DevNet 0-ishah?

312
00:46:41.400 --> 00:46:50.460
Thomas Coratger: we can do this as well, this is… this is not a problem, like, in any case, like, SHA is also implemented for the signature as well, so…

313
00:46:51.220 --> 00:47:01.649
Thomas Coratger: we could even choose Shah for the signature. This is not a problem. The final choice would be Poseidon, but if this is a broker, then we can go to the Shah route.

314
00:47:04.850 --> 00:47:15.739
Gajinder Singh: Yeah, I guess for now, for SSG, we can just do short of 56, and … the reason to go to Poseidon for that would be to basically make the proving cycles faster.

315
00:47:15.850 --> 00:47:19.699
Gajinder Singh: But then that is something that we can tackle later on.

316
00:47:20.430 --> 00:47:23.019
Thomas Coratger: Exactly, yeah. This is your main objective.

317
00:47:32.120 --> 00:47:39.250
Gajinder Singh: Alright, so I'll just summarize that we have decided to use SHA-256 in SSZ.

318
00:47:39.400 --> 00:47:44.150
Gajinder Singh: Right now, and maybe we'll update it later on, and at some later dev net.

319
00:47:54.240 --> 00:47:55.260
Will Corcoran: Great.

320
00:47:56.110 --> 00:48:00.850
Will Corcoran: … I think that was all that I had on my agenda.

321
00:48:01.630 --> 00:48:04.130
Will Corcoran: Justin, I saw the…

322
00:48:04.510 --> 00:48:17.919
Will Corcoran: the call next Friday is on the multi-sig spec. Is there anything that you wanted to ask for from the group, or if you have everything that you need for that call?

323
00:48:20.500 --> 00:48:25.959
Justin Drake: Nope, I think we're good. I think it's mostly going to be Emil and Toma presenting.

324
00:48:26.420 --> 00:48:30.750
Justin Drake: And it's a fairly self-contained subspec, so all good.

325
00:48:31.400 --> 00:48:32.020
Will Corcoran: Cool.

326
00:48:32.720 --> 00:48:33.890
Will Corcoran: Gail?

327
00:48:35.430 --> 00:48:40.449
Guillaume: Yeah, I have two topics I would like to discuss, hopefully they're super fast.

328
00:48:40.640 --> 00:48:51.630
Guillaume: One of them is just a confirmation. So I talked to PK about the Genesis, PK, or Philip from, from eSpender Ops, about the Genesis generator.

329
00:48:51.870 --> 00:49:05.440
Guillaume: And he was just telling me, you know, I just need a number of… because it's round robin, I just need… I don't need the signatures, the signatures at all, I don't need a tool to dump.

330
00:49:05.560 --> 00:49:24.979
Guillaume: the signatures, I just need to know, the number of, the number of validators, and that will be good enough. Is that still… I just wanted to confirm that this is still the, the picture we have, like, this is still what we want to do for, for the…

331
00:49:25.150 --> 00:49:43.810
Guillaume: the definite zero, because if that's the case, then the tool is more or less ready, and there's no extra work for us to achieve. Yeah, can someone confirm this, or just point me to the right direction so that I can get that to work with Philip?

332
00:49:44.960 --> 00:49:54.339
Gajinder Singh: So, on this, me and O, we agreed that we don't even need a Genesis generator, in the sense that we don't need

333
00:49:54.760 --> 00:49:56.960
Gajinder Singh: Genesis as a Z file, because…

334
00:49:57.110 --> 00:50:12.140
Gajinder Singh: The two config variables that we need for Genesis are GenesisTime and numvalators, and that is something that we can just pick from the config and generate the Genesis on fly inside our clients as itself, so…

335
00:50:12.250 --> 00:50:17.120
Gajinder Singh: In that sense, we don't actually… Genesis Generator even for DevNet1 as well.

336
00:50:17.870 --> 00:50:18.849
Guillaume: Just to….

337
00:50:18.850 --> 00:50:23.560
Gajinder Singh: That's why… why do we even need Genesis Generator on Beacon Genesis? Because…

338
00:50:24.070 --> 00:50:28.909
Gajinder Singh: The Genesis itself is very deterministic and very config-based, so…

339
00:50:29.250 --> 00:50:33.679
Gajinder Singh: In that sense, we actually don't need a Genesis generator anywhere.

340
00:50:34.280 --> 00:50:39.340
Guillaume: Well, we kind of do in a whole kurtosis, system, to use kurtosis.

341
00:50:39.340 --> 00:50:56.499
Guillaume: But it can be just an empty file, or, you know, I mean, we don't have to… it can just be a binary that does nothing, that's fine. Yeah, I just wanted to confirm that we don't need to go through this process of taking in all the transactions to do the genesis, basically, but it seems to be the case, yeah.

342
00:50:56.950 --> 00:51:01.199
Guillaume: The second question is about Grafana, so I have a task.

343
00:51:01.330 --> 00:51:05.459
Guillaume: On my end to, like, like O said before.

344
00:51:05.930 --> 00:51:24.599
Guillaume: I have a task on, task on my side to, to deal with, well, to, to deal with this problem on, along with, with ETH Create Ops. I want to create an issue, so I already asked, people for their GitHub account, so that they can, the GitHub handle, so that they can be, given access.

345
00:51:24.600 --> 00:51:29.090
Guillaume: The question is that of the dashboard. So, from what I understand,

346
00:51:29.090 --> 00:51:39.750
Guillaume: they are… they are going to run the… or DevOps, actually, not ETH, but DevOps is going to run, the Grafana instances, we just need to connect to… connect to it.

347
00:51:40.210 --> 00:51:47.869
Guillaume: I just need to figure out if that thing that Mercy has done

348
00:51:47.890 --> 00:52:07.440
Guillaume: in our current repo is good enough for everybody. So there's a YML file, I'm sorry I'm on mobile, I can't copy-paste it, but, there's a YML file that, corresponds to the graph in a dashboard, and I would want to…

349
00:52:07.830 --> 00:52:22.499
Guillaume: give it to, ETH PrinterOps, or, sorry, to DevOps, actually, and, they can, they can actually, you know, they can run this dashboard. I just want to know if…

350
00:52:22.710 --> 00:52:32.260
Guillaume: this is something we, we have on, you know, just on the Zim side, or if, if Reem would also be interested in,

351
00:52:32.340 --> 00:52:35.319
Guillaume: in adding some things, so… yeah, I just…

352
00:52:35.370 --> 00:52:47.270
Guillaume: basically need Mercy and other people from Rheem to agree on the dashboard and tell me, that this is what, you know, this is what we want.

353
00:52:47.270 --> 00:52:56.260
Guillaume: And, yeah, right, Quadrivium. I haven't really been in contact with them, so if someone can send them my way, because there's also the…

354
00:52:56.260 --> 00:53:04.570
Guillaume: the question of building the image, the Docker image. So, I did this for, for Reem and Zim. Yeah.

355
00:53:04.920 --> 00:53:09.790
Guillaume: I don't have any contact that I can think of at Quadrivium, so… Yeah.

356
00:53:09.790 --> 00:53:14.660
Kamil Salakhiev: Yeah, I'm here, you can contact me, … yeah, it's… I don't know.

357
00:53:14.660 --> 00:53:15.230
Guillaume: ….

358
00:53:15.230 --> 00:53:16.940
Kamil Salakhiev: on Telegram.

359
00:53:17.460 --> 00:53:23.389
Guillaume: Yeah, actually, do you know how to find me? Because I have no idea how to… oh yeah, on the PQ test.

360
00:53:23.390 --> 00:53:23.850
Kamil Salakhiev: Yeah, okay.

361
00:53:23.850 --> 00:53:24.270
Guillaume: Earthlink.

362
00:53:24.270 --> 00:53:26.510
Kamil Salakhiev: I can, yeah, I'll ping you, I can find anything.

363
00:53:26.660 --> 00:53:46.300
Guillaume: Okay, excellent. Yeah, so I can also help with this, but… Right, so we have this, this format, this dashboard, that I don't want… that I don't want to manage inside the Zoom repository, so we can put it in a different repository if it's Zim-specific, but I think it would make sense to,

364
00:53:46.300 --> 00:53:50.060
Guillaume: To agree on the dashboard thing, and, and we could all, …

365
00:53:50.060 --> 00:54:01.540
Guillaume: yeah, I could go to DevOps and say, hey, this is what we need to build, add those people, run this instance, we're going to send data to it, and …

366
00:54:01.710 --> 00:54:03.880
Guillaume: Yeah, that would be, … soap.

367
00:54:04.280 --> 00:54:13.340
Guillaume: the ball is in every team's court to get back to me on this, so that we can, we can agree, and I can finally create the dashboards.

368
00:54:13.830 --> 00:54:17.069
Will Corcoran: And this is something we want in place for DevNet Zero, correct?

369
00:54:17.630 --> 00:54:23.779
Guillaume: Exactly. Well, and further DevNets, but yes, it's, it's specifically for DevNet Zero.

370
00:54:24.510 --> 00:54:25.550
Will Corcoran: Okay, great.

371
00:54:25.800 --> 00:54:33.779
Will Corcoran: … So, yeah, but… Excellent. I'll…

372
00:54:34.470 --> 00:54:38.500
Will Corcoran: add something to the project board. I don't know if anyone has…

373
00:54:39.250 --> 00:54:43.239
Will Corcoran: immediate thoughts that they want to add to Guillaume's request?

374
00:54:43.790 --> 00:54:47.269
Will Corcoran: Or if you can just go ahead and provide those YAMLs.

375
00:54:49.180 --> 00:54:52.530
unnawut: Yeah, so on the Grafana…

376
00:54:52.740 --> 00:55:16.499
unnawut: REAM has, like, we have our own template, dashboard template right now, but it's very minimal, like, it's only showing the head slots, justified slots, finalized slots, and some metrics, on, like, the time it takes to initialize a block, the time it takes to compute the state route, to process all the votes inside the block, and that's basically it.

377
00:55:16.800 --> 00:55:17.940
unnawut: …

378
00:55:18.840 --> 00:55:38.419
unnawut: So, I think we have some rough idea of what we want to track… what we want to track, but I guess, like, not so sure what's the best format. Like, if you already have, like, a template or something, or a YAML config, something for us to review, I'm happy to review those as well.

379
00:55:38.630 --> 00:55:40.160
Guillaume: I mean, to be fair….

380
00:55:40.160 --> 00:55:40.700
unnawut: So….

381
00:55:41.160 --> 00:55:53.070
Guillaume: Yeah, I'm also not sure what we have, but that's why I say, like, I would like to agree on this so that I can go and create one dashboard. Ultimately, we can have as many dashboards as clients, but it would be nice to be able to

382
00:55:53.140 --> 00:56:12.730
Guillaume: to check, I mean, I don't know, like, for, when we do, forks in, you know, in the EL land, we like to compare how the clients are behaving to make sure there's nothing funky going on with the fork, someone falling off the rails and doing this kind of things.

383
00:56:12.780 --> 00:56:27.830
Guillaume: So, yeah. I mean, okay, now there's an issue, we can, we can agree on what we want, we can, just pull that and see, you know, either the lowest common denominator, but at least get the infrastructure started so that we can,

384
00:56:27.910 --> 00:56:32.959
Guillaume: We can monitor what's going on during the testnet and see if something goes wrong.

385
00:56:34.920 --> 00:56:35.510
Will Corcoran: Great.

386
00:56:36.100 --> 00:56:38.300
Will Corcoran: … Yeah, if…

387
00:56:38.440 --> 00:56:43.469
Will Corcoran: We could kind of go through the rest of these and make sure that we have ownership.

388
00:56:43.980 --> 00:56:51.540
Will Corcoran: Or… the remaining DevNet Zero… critical path tasks, that'd be great.

389
00:56:52.000 --> 00:56:56.520
Will Corcoran: Oh, I think you sort of eyeballed that we're…

390
00:56:56.940 --> 00:57:01.160
Will Corcoran: you know, deficient on assignee needs, is there anything that jumps out at you, or…

391
00:57:01.590 --> 00:57:02.789
Will Corcoran: Do you kick us off?

392
00:57:05.930 --> 00:57:15.559
unnawut: Yeah, so actually, I assigned stuff that I am taking ownership of. The rest, I think, like, some of them probably can be close, right? The…

393
00:57:15.880 --> 00:57:19.359
unnawut: Do you want to do it Genesis state?

394
00:57:19.980 --> 00:57:23.180
unnawut: Oh, I'm not so sure, like, the number 7 there?

395
00:57:23.330 --> 00:57:33.410
Gajinder Singh: Genesis, state issues are mostly Zeeam, owned, but number seven, we… we decided with over that, we don't even need because,

396
00:57:33.570 --> 00:57:43.680
Gajinder Singh: this is just pure config, and clients will be able to just generate a Genesis on the fly. So we can, in fact, close Genesis, this particular…

397
00:57:47.230 --> 00:57:49.510
Gajinder Singh: to generate SSD Genesis.

398
00:57:50.000 --> 00:57:52.950
Gajinder Singh: Yes, so we… we basically need to…

399
00:57:53.180 --> 00:58:00.799
Gajinder Singh: figure out Ethereum Genesis Generator, which basically generates the config files that the clients will be able to use.

400
00:58:01.340 --> 00:58:14.159
Gajinder Singh: to, read the config, and, so there are 3… 3 files. I think they are… so these are the files, I'm not sure now. There are 3 or 4. So, one file is, the config file.

401
00:58:14.350 --> 00:58:19.429
Gajinder Singh: And the second file was Genesis SSD file, but we don't need it anymore.

402
00:58:19.540 --> 00:58:25.850
Gajinder Singh: And the third file I think we need is the peer ENR file.

403
00:58:26.500 --> 00:58:32.769
Gajinder Singh: And, I think this is PRDNRs. I think this is… this is what we need.

404
00:58:35.210 --> 00:58:39.669
Gajinder Singh: So that we can start, … start the clients.

405
00:58:40.260 --> 00:58:41.530
Gajinder Singh: in ketosis.

406
00:58:46.360 --> 00:58:54.130
Gajinder Singh: for DevNet 1, then… we'll have an additional step over here, which will be to generate, …

407
00:58:54.440 --> 00:58:59.610
Gajinder Singh: for example, 100, key pairs, which…

408
00:59:00.340 --> 00:59:03.130
Gajinder Singh: will be used to enroll them in Genesis.

409
00:59:05.280 --> 00:59:08.059
Gajinder Singh: But for DevNet0, that is what we need.

410
00:59:09.290 --> 00:59:10.910
Will Corcoran: Who… who can own this?

411
00:59:12.870 --> 00:59:16.400
Gajinder Singh: This is owned by Guillaume.

412
00:59:18.130 --> 00:59:18.720
Will Corcoran: Jill….

413
00:59:18.720 --> 00:59:20.250
Gajinder Singh: I just….

414
00:59:21.100 --> 00:59:22.390
Will Corcoran: Yeah, I mean, dude.

415
00:59:22.390 --> 00:59:22.970
Guillaume: Yeah.

416
00:59:23.190 --> 00:59:26.989
Guillaume: Yeah, technically it's PK, but yeah, I'm following that.

417
00:59:27.660 --> 00:59:28.980
Will Corcoran: Oh, okay, I'll note that.

418
00:59:38.640 --> 00:59:39.430
Will Corcoran: Okay.

419
00:59:39.710 --> 00:59:40.720
Will Corcoran: ….

420
00:59:42.870 --> 00:59:49.689
Gajinder Singh: And then the… Ethereum package for Kodosys is also owned by Zim. You can assign it to me.

421
00:59:58.680 --> 01:00:00.749
Will Corcoran: Or can set up the Docker Image Builder.

422
01:00:03.350 --> 01:00:06.669
Gajinder Singh: I think, Guillaume is already working on this.

423
01:00:09.040 --> 01:00:26.830
Guillaume: Yeah, it's more… I mean, it's done. It's done except for Quadrivium, but we're… we're looking… we're talking about this, so… Yeah, I think we could, we could close this, and, when, Quadrivium is ready to go, we will add it, it's just a… yeah, it's just a 5-minute flight.

424
01:00:28.450 --> 01:00:34.529
Gajinder Singh: Yeah, so one missing item over there is basically having the CLI to generate the

425
01:00:34.690 --> 01:00:38.710
Gajinder Singh: PQK pairs, so that is…

426
01:00:39.130 --> 01:00:41.650
Gajinder Singh: That is something that we also need to…

427
01:00:41.920 --> 01:00:44.379
Gajinder Singh: to add to Docker Image Builder as well.

428
01:00:57.580 --> 01:01:00.490
Will Corcoran: So I'll close that, or I'll consider it done for now.

429
01:01:01.920 --> 01:01:04.859
Will Corcoran: Plan the reference spec test.

430
01:01:05.330 --> 01:01:05.889
Will Corcoran: Sorry, man.

431
01:01:05.890 --> 01:01:09.650
unnawut: … You put the reference….

432
01:01:09.650 --> 01:01:12.839
Mercy Boma Naps-Nkari: the CLI, is it the same thing that I did?

433
01:01:18.000 --> 01:01:23.510
Mercy Boma Naps-Nkari: Sorry, Gijanda, I wanted to know, this CLI you're talking about, is it the same CLI thing wrapper that I did?

434
01:01:24.650 --> 01:01:31.599
Gajinder Singh: Yes, this is the same CLI which I asked to use, that, you know, generate 100 keys or something like that.

435
01:01:32.960 --> 01:01:40.810
Thomas Coratger: I have that also in mind about the CLI to discuss with Benedict. He's right now on holidays, but to see

436
01:01:41.520 --> 01:01:49.150
Thomas Coratger: as this is something that you will all need as a client, if this is something that we can add to the REST repo.

437
01:01:49.170 --> 01:02:05.209
Thomas Coratger: Of the signature, so that you can just call the CLI from there, and don't have to do that on your own. So, I will check with Benedict once he comes back from holidays. Anyway, I don't have merging rights on this repo, so I need him to check.

438
01:02:06.580 --> 01:02:08.770
Gajinder Singh: So I shouldn't…

439
01:02:08.910 --> 01:02:19.299
Gajinder Singh: client global, so that, you know, we can generate public keys to enroll in the Genesis state. So we need, as global as well as we might need some sort of

440
01:02:19.700 --> 01:02:29.259
Gajinder Singh: Programmatic invocation by the clients, where the clients would write… clients would want to generate private keys.

441
01:02:29.470 --> 01:02:34.179
Gajinder Singh: For some validators based on, you know, whatever is the starting seed.

442
01:02:34.540 --> 01:02:38.369
Gajinder Singh: So, I think both of the forms will be required.

443
01:02:39.510 --> 01:02:53.299
Parthasarathy Ramanujam: Gujan, I'm just wondering, would the key store, the EIP that we are working on, would that make sense here, or rather than having a CLI tool that would generate, this in plain text, which is likely to have issues later?

444
01:02:54.580 --> 01:03:04.959
Parthasarathy Ramanujam: I mean, unlike BLS keys, the key generation of post-quantum is quite time-consuming, and it would be quite expensive if keys are leaked, right? So….

445
01:03:07.660 --> 01:03:15.700
Gajinder Singh: Yeah, I… so, I'm assuming all of these keys start with some particular seat, which is what we will

446
01:03:16.160 --> 01:03:23.590
Gajinder Singh: Yeah. For example, and code in the BLI key store, right? So, in the key store, extended key store.

447
01:03:24.120 --> 01:03:34.039
Gajinder Singh: Yeah. That we basically coordinated on. But I think what we require for DevNet1 purposes is that,

448
01:03:34.190 --> 01:03:41.449
Gajinder Singh: A list of, keys that are gen… a list of public keys that are… that are generated,

449
01:03:41.610 --> 01:03:44.630
Gajinder Singh: For validators, and then, you know.

450
01:03:44.900 --> 01:03:53.130
Gajinder Singh: Either they are sort of referenced to a private, the secret directory, or to the… as well as to the seed.

451
01:03:53.320 --> 01:03:58.529
Gajinder Singh: That, the secret key, the seed that was used for the secret key generation.

452
01:03:58.640 --> 01:04:05.139
Gajinder Singh: So, I think, … That is… that is the only important information that we need right now.

453
01:04:05.570 --> 01:04:10.969
Gajinder Singh: both for Genesis purposes, as well as, you know, client basically reading up,

454
01:04:11.360 --> 01:04:22.840
Gajinder Singh: their assigned, validator IDs and keys, and basically then, you then, initializing their, …

455
01:04:23.040 --> 01:04:32.530
Gajinder Singh: key in memory using, using already pre-generated data file. The pre-generated secret, directory. So…

456
01:04:32.660 --> 01:04:37.790
Gajinder Singh: So I think this would work fine for now, but we should definitely

457
01:04:38.120 --> 01:04:43.959
Gajinder Singh: evolve it, to, to that particular keystore format.

458
01:04:45.440 --> 01:04:51.269
Parthasarathy Ramanujam: All right, let's take up this discussion on the Keystone EIP separately. This is fine for me. Thank you.

459
01:04:53.930 --> 01:04:54.650
Gajinder Singh: Super.

460
01:04:57.090 --> 01:05:04.960
Will Corcoran: It looks… I don't know, seems like the rest of the things that don't have owners right now are…

461
01:05:05.260 --> 01:05:06.690
Will Corcoran: Can be discussed next.

462
01:05:06.860 --> 01:05:10.790
Will Corcoran: Next week, after the spec is done, but…

463
01:05:11.080 --> 01:05:18.870
Will Corcoran: What… from the time that the spec is done to the time that we're launching DevNet Zero, what's the…

464
01:05:19.570 --> 01:05:23.119
Will Corcoran: Anticipated, you know, kind of float date.

465
01:05:23.440 --> 01:05:24.610
Will Corcoran: within there.

466
01:05:26.660 --> 01:05:31.880
Gajinder Singh: So, we were thinking that, you know, …

467
01:05:32.510 --> 01:05:37.579
Gajinder Singh: If the spec is done by end of this month, and…

468
01:05:38.310 --> 01:05:43.529
Gajinder Singh: if we can have… when can we have test cases built on it, I think that would sort of…

469
01:05:44.440 --> 01:05:51.410
Gajinder Singh: Be a critical milestone, because once we have the test cases, then we can check our clients against it.

470
01:05:51.820 --> 01:05:57.720
Will Corcoran: Changing our current, for example, Zim to the current DevNet Zero spec is not hard.

471
01:05:57.900 --> 01:05:59.389
Gajinder Singh: It can be done in a week.

472
01:05:59.890 --> 01:06:07.140
Gajinder Singh: So the question is that, maybe can… when can we get some reference test?

473
01:06:07.700 --> 01:06:15.169
Gajinder Singh: Because then we'll give one week for different tests, and then next week we can… Drive or interop.

474
01:06:17.660 --> 01:06:18.270
Will Corcoran: Great.

475
01:06:18.630 --> 01:06:22.200
Will Corcoran: And then the… Definitely.

476
01:06:22.890 --> 01:06:33.129
Will Corcoran: you know, I tried to create, at the start of this process, like, a ETH PandaOps-esque, DevNet spec, like, one-sheeter. Is this something that…

477
01:06:33.640 --> 01:06:44.339
Will Corcoran: we want to update, you know, going into the, you know, the end of the month, and try to maintain these from DevNet to DevNet? Is there a better process?

478
01:06:44.600 --> 01:06:50.689
Will Corcoran: To be able to capture, like, in a, you know, single index-like format, hey, this is…

479
01:06:51.120 --> 01:06:58.750
Will Corcoran: all the specs that were encapsulated in this DevNet, these are the tests, you know, the success criteria, so on and so forth.

480
01:07:08.070 --> 01:07:18.750
unnawut: I think we can trim a lot of these, for example, like, the top part there about, like, networking and gossip and stuff, I think that's already part of the lean specs.

481
01:07:18.750 --> 01:07:23.650
Will Corcoran: Okay. I guess there's a bit of, like, project management stuff that's, like, in the middle.

482
01:07:24.000 --> 01:07:28.480
unnawut: I think those parts can also become part of the board.

483
01:07:29.660 --> 01:07:30.960
unnawut: …

484
01:07:31.280 --> 01:07:37.259
unnawut: So, I guess overall, I think we can try to kind of, like, split these into their proper places, and…

485
01:07:37.520 --> 01:07:41.440
unnawut: … And closed this one down, I think.

486
01:07:42.290 --> 01:07:42.860
Will Corcoran: Okay.

487
01:07:45.950 --> 01:07:47.109
Will Corcoran: Sounds good.

488
01:07:50.220 --> 01:07:56.410
Will Corcoran: Alright, we're… A minute or two over. Any… Burning thoughts.

489
01:08:00.470 --> 01:08:11.470
Will Corcoran: Alright, great call. Yeah, Gasnender, I really like the format of walking through the spec. That helps me a lot. If people enjoy doing that, I would look forward to,

490
01:08:11.850 --> 01:08:26.360
Will Corcoran: You know, having a section or two that we go through each call, just to kind of help get everyone really familiarized with, not just the details, but, like, you know, the taxonomy of the spec, and, you know, what's where, and…

491
01:08:26.960 --> 01:08:29.180
Will Corcoran: Yeah, I thought it'd be great.

492
01:08:32.439 --> 01:08:33.399
Will Corcoran: Excellent.

493
01:08:33.490 --> 01:08:34.740
Shariq Naiyer: Amazing. See you all.

494
01:08:34.740 --> 01:08:35.370
Gajinder Singh: Yep.

495
01:08:37.420 --> 01:08:40.239
Ladislaus: Thanks, guys. Amazing.

496
01:08:40.720 --> 01:08:41.050
Shariq Naiyer: I mean?

