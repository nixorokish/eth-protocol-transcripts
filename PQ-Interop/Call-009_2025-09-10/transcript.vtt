WEBVTT

1
00:04:12.870 --> 00:04:13.840
Kamil Salakhiev: James.

2
00:04:16.790 --> 00:04:17.750
Kamil Salakhiev: Hey, everyone.

3
00:05:52.750 --> 00:05:55.150
Will Corcoran: I'll start just a minute or two.

4
00:06:58.360 --> 00:06:59.939
Will Corcoran: How's everyone doing?

5
00:07:02.650 --> 00:07:13.010
Will Corcoran: We've got… A number of things on the agenda. Let's see here… June,

6
00:07:13.230 --> 00:07:17.120
Will Corcoran: I just kind of, like, started grabbing some of the items from the comments, and…

7
00:07:17.280 --> 00:07:24.370
Will Corcoran: adding them to the… to the top of the agenda. I've got… this…

8
00:07:27.610 --> 00:07:29.939
Will Corcoran: the lane view.

9
00:07:31.270 --> 00:07:33.900
Will Corcoran: That you said is related to…

10
00:07:37.390 --> 00:07:38.459
Will Corcoran: That's pure.

11
00:07:38.760 --> 00:07:44.400
Will Corcoran: So… Yeah, I guess everyone, welcome to DQ Interop.

12
00:07:45.150 --> 00:07:48.349
Will Corcoran: We are just kind of wrapping up.

13
00:07:48.600 --> 00:07:50.940
Will Corcoran: the specs for DevNet Zero…

14
00:07:51.180 --> 00:07:57.579
Will Corcoran: Making our way towards specs for DevNet 1, hoping to have a live DevNet

15
00:07:57.710 --> 00:08:06.520
Will Corcoran: zero here in the near future. I think being… or sorry, June, we're gonna start off talking about LeanView,

16
00:08:06.770 --> 00:08:09.129
Will Corcoran: Yeah, walk us through it. What do you got here?

17
00:08:11.720 --> 00:08:14.030
Jun: So, can I share my screen?

18
00:08:14.540 --> 00:08:15.570
Will Corcoran: Yeah, go for it.

19
00:08:18.860 --> 00:08:27.660
Jun: So… Yeah, so… can you, see my screen as well?

20
00:08:29.550 --> 00:08:30.260
Will Corcoran: Yes.

21
00:08:30.940 --> 00:08:32.539
Mercy Boma Naps-Nkari: Can you zoom in a little bit?

22
00:08:33.299 --> 00:08:36.789
Jun: Okay, okay, so… Alright.

23
00:08:37.599 --> 00:08:53.479
Jun: Yeah, so I'm June from Ring Team, and I'm building a Rust client for upcoming PQ DevNets, and also I'm interested in building a tool, that can be helpful to devs and researchers.

24
00:08:53.669 --> 00:08:56.019
Jun: In this PQ intro calls.

25
00:08:56.109 --> 00:09:09.359
Jun: So, I, last few days, I spent some days, making some architecture and, how to integrate those things into a web app.

26
00:09:09.409 --> 00:09:23.229
Jun: called LeanView, so… and also for the naming, I'm also welcome to any feedback about this naming, and, you can DM me when you have some great idea.

27
00:09:23.779 --> 00:09:36.619
Jun: So, this tool is, so in this demo, I'd like to show the live app on the live network, which means I have to bootstrap,

28
00:09:36.819 --> 00:09:44.799
Jun: DevNet, for this, app, so… There is a… So, yep.

29
00:09:45.319 --> 00:09:56.409
Jun: Rim already supports, bootstrapping a DevNet from scratch, so, just running this kind of comment?

30
00:09:56.429 --> 00:10:07.919
Jun: this will run a node with four valid features on it, and it continues getting consensus, with 3SM mini consensus mechanism.

31
00:10:07.919 --> 00:10:18.159
Jun: So, there's lots of, things going on here, but I think they are well… going well, finalizing, justifying, etc.

32
00:10:18.179 --> 00:10:20.659
Jun: So, on this,

33
00:10:20.869 --> 00:10:38.369
Jun: node, there is an RP send point on this node, so this node can feed data to the web app. So, I'd like to also run a lean view app with this comment. So, here's the LeanView,

34
00:10:38.479 --> 00:10:57.979
Jun: project. So, it's basically a simple full-stack web app, consists of backend and front-end. And you can see the repository. Backend is written in Golang, and the front-end is written in React and TypeScript. And I'm gonna skip some details implementation, just showing what is going on right now.

35
00:10:58.049 --> 00:10:58.999
Jun: So…

36
00:10:59.339 --> 00:11:12.549
Jun: all those backend and front-end is Dockerized, so, which means I can just use Docker Compass to run a full-stack app, and there's lots of things going on here, so,

37
00:11:12.819 --> 00:11:28.029
Jun: one of the core components of backend is Indexer, which, continuously fetches, the data, every slot second. So, in this hour setting, it's, 4 seconds. So, currently, there is a…

38
00:11:28.299 --> 00:11:30.719
Jun: Page, so in my local host.

39
00:11:31.049 --> 00:11:32.289
Jun: Yup.

40
00:11:32.499 --> 00:11:48.329
Jun: this one. So, the front end is mostly built by AI, so you might be familiar with this kind of UI. So, I can, the design can be also improved, but, let me just focus on this functionality, so…

41
00:11:48.799 --> 00:12:05.429
Jun: The first part is more kind of live things. So, how does… how does the endpoint is, is working well or not? So, it includes some kind of, slot, the head slot information with the block number, with the block root.

42
00:12:05.429 --> 00:12:12.339
Jun: And it might not be healthy if the endpoint is not returning well.

43
00:12:12.339 --> 00:12:29.909
Jun: So, this kind of is a live thing, and the below thing is the table, so it's kind of a historical thing. So, the first part is inspired by the forecone, and the below part is inspired by any other blockchain explorer, like DORA or Etherscan.

44
00:12:29.909 --> 00:12:35.919
Jun: So, one thing I'd like to note is that, there, are…

45
00:12:35.979 --> 00:12:51.029
Jun: I'm aware of some additional features, that can be built upon this app. So, there's a database, indexer, and also some live, fetcher. So, if you have any,

46
00:12:51.189 --> 00:13:02.509
Jun: idea or feature request, you can just share or raise your opinion on the chat, or you can also DM me about the features. And I'm also… this is just a very, very basic

47
00:13:02.509 --> 00:13:15.209
Jun: dashboard, very, very basic explorer, but I'd like to add more features on my own, but I also need your help about the ideas in

48
00:13:15.469 --> 00:13:17.269
Jun: What kind of…

49
00:13:17.389 --> 00:13:27.619
Jun: things you want to see in this web app. So, yeah, that's it. I can, get some questions, if you have.

50
00:13:35.470 --> 00:13:37.140
Jun: Yep.

51
00:13:38.790 --> 00:13:41.159
Guillaume: Yeah, I was just going to ask,

52
00:13:41.620 --> 00:13:44.649
Guillaume: If you can… if you can hear me, I'm not sure, oh, yes.

53
00:13:44.650 --> 00:13:45.340
Jun: Yeah, I can hear you.

54
00:13:47.470 --> 00:14:04.029
Guillaume: Yeah, I mean, what do… what do you need from us, to also add us in, in this thing? So that's my first question. I think you already, I mean, Mercy has already been working on this, but I didn't quite follow. Sorry, the second question is, what happens when you have, like, let's say,

55
00:14:04.030 --> 00:14:08.250
Guillaume: 5,000 nodes on the… on the network. Maybe not 5,000, but 20,

56
00:14:08.250 --> 00:14:15.670
Guillaume: 20 nodes, like, isn't that getting too… over… overwhelming? Like, the first part, where you only have 3 clients at the moment.

57
00:14:16.320 --> 00:14:26.929
Jun: Yeah, so this is, so the first question was, the, the, what, what do I need for, you guys, right? So…

58
00:14:27.030 --> 00:14:41.769
Guillaume: Yeah, that, and also, because I think I understand it's based on the HTTP request, can we just mock, like, give you a first interface and, you know, answer, we don't know yet, what will happen, if that, if that occurs?

59
00:14:43.360 --> 00:15:05.640
Jun: Yeah, so I think this visualizing things can handle some crazy scenarios, because we might face some scenarios on that. So, I'm gonna add some features that can be also seen in any other blockchain, any other explorer, but

60
00:15:05.640 --> 00:15:12.289
Jun: I guess there are some features, specialized for this PQ DevNet.

61
00:15:12.290 --> 00:15:35.439
Jun: So, we don't have signature right now, but, at the PQ.1, we will have signature, and at the PQ.net 2, we will have aggregates, ends going on and on. So, I guess, I can think of those features, but, if you have any ideas, just, yeah, raise any opinions to me that I can add on.

62
00:15:35.440 --> 00:15:36.699
Jun: These features.

63
00:15:38.780 --> 00:15:40.890
Jun: Does that answer your question?

64
00:15:42.720 --> 00:16:00.949
Guillaume: Yeah, no, I just mean, like, you know, I just want to see Zim added to that row, so my question is just, like, can we just craft something very quickly so that at least we can be in there and see how far off we are from,

65
00:16:01.260 --> 00:16:05.269
Guillaume: Being fully functional in your, in the view.

66
00:16:05.740 --> 00:16:14.520
Jun: Yeah, so, it's… if you're familiar with, if PandaOps config, it's just like this one. So,

67
00:16:14.520 --> 00:16:26.889
Jun: just, I need one endpoint or several endpoints, that run zine node, which is, also compatible, of the RPC structures and response.

68
00:16:26.920 --> 00:16:30.090
Jun: So, yeah, I can just add these endpoints.

69
00:16:30.510 --> 00:16:37.269
Guillaume: Right, so that's my question. Like, we… currently, we just opened an issue to discuss how we would implement this. My question is.

70
00:16:37.270 --> 00:16:37.610
Jun: If we…

71
00:16:37.610 --> 00:16:42.179
Guillaume: create the… the endpoints, right, the HTTP endpoints.

72
00:16:44.280 --> 00:16:48.480
Guillaume: But they say, you know, like, they return an empty JSON payload.

73
00:16:48.790 --> 00:16:57.950
Guillaume: what should we start with, basically? What should we… what should we provide that's not going to take the whole thing down and, you know.

74
00:16:58.060 --> 00:17:02.469
Guillaume: We're not immediately ready, clearly, but,

75
00:17:02.580 --> 00:17:12.000
Guillaume: We're going to build up… we'll build it up over time, we just want to… to see if… what happens if, you know, we return, like, an empty result.

76
00:17:14.180 --> 00:17:20.700
Jun: Hmm… Alright, so if I understand your question correctly,

77
00:17:20.980 --> 00:17:31.940
Jun: So, your question is about, what if the OneNote returned, empty response on the request, right?

78
00:17:31.940 --> 00:17:32.860
Guillaume: Sure. Yeah.

79
00:17:34.080 --> 00:17:46.630
Jun: Yeah, so in that case, I guess, this explorer will determine that endpoint unhealthy. So,

80
00:17:46.950 --> 00:17:48.870
Jun: Yeah, that's… that's the logic.

81
00:17:57.970 --> 00:18:03.489
Jun: And so, and also, could you repeat the second question? I don't remember.

82
00:18:03.490 --> 00:18:09.249
Guillaume: Yeah, sure. The… like, you have cards for every… every node, and…

83
00:18:09.250 --> 00:18:09.780
Jun: Yeah, yeah.

84
00:18:09.780 --> 00:18:14.019
Guillaume: You only have 3, so it's fine, but what when you have 20?

85
00:18:15.310 --> 00:18:19.500
Jun: So, there's a… orchi up?

86
00:18:19.880 --> 00:18:25.950
Jun: This is the… is also built by, if Panda Ops. It's about

87
00:18:26.140 --> 00:18:29.499
Jun: fetching about, I don't know, 20 nodes, I guess?

88
00:18:29.560 --> 00:18:45.480
Jun: And they are using SATU as a data source, so it is quite optimized, but we don't have that kind of data source, right? So, I guess that needs more optimization, and also, I…

89
00:18:45.480 --> 00:19:01.899
Jun: added all the components, it's just one page, but I'm planning to separate this monitoring page in another page so that this request can not be too burdened to any other clients.

90
00:19:02.380 --> 00:19:12.429
Jun: So, yeah, the optimization is not yet, well done in this project, but it should be.

91
00:19:13.370 --> 00:19:27.229
Guillaume: Yeah, I mean, that's fine, you know, you're just starting a block explorer from scratch, it's a lot of work. All I'm saying is, yeah, I just want to see how we could make it more readable, that's all.

92
00:19:28.480 --> 00:19:29.719
Jun: Yep, thanks.

93
00:19:30.080 --> 00:19:31.230
Jun: Mercy?

94
00:19:32.160 --> 00:19:36.070
Mercy Boma Naps-Nkari: Yeah, I wanted to ask, the three endpoints you pointed out.

95
00:19:36.210 --> 00:19:44.730
Mercy Boma Naps-Nkari: For people, Devnazero, is it just the three endpoints that we need, or are we going to expand

96
00:19:45.080 --> 00:19:47.659
Mercy Boma Naps-Nkari: On that also.

97
00:19:49.010 --> 00:19:51.640
Jun: Yeah, so,

98
00:19:52.190 --> 00:20:10.909
Jun: So, so I, I put it 3 endpoints, including block, block header, and versions, but I guess, fetching a state will also be needed, I guess, because, that's what, that's what Explorer has.

99
00:20:11.330 --> 00:20:24.679
Jun: Yeah, I guess those four endpoints is enough for this phase, and if we have another feature request, we can add a new endpoint that can serve that data.

100
00:20:26.070 --> 00:20:26.830
Mercy Boma Naps-Nkari: Okay.

101
00:20:30.530 --> 00:20:38.890
Gajinder Singh: This looks great, but Joan, if we can add the fort moon kind of a thing, I think we'll be needing that, because…

102
00:20:39.000 --> 00:20:43.760
Gajinder Singh: If there are forks in the network, my question is, how will you figure it out over here?

103
00:20:44.670 --> 00:20:58.000
Jun: Yeah, that's a great question. So, ZATU has, Amex events on the forkare work thing, so that's what this 4K, works.

104
00:20:58.000 --> 00:21:06.229
Jun: by, receiving the data from SAT2. So, currently, those… there is no,

105
00:21:06.840 --> 00:21:21.139
Jun: UI for the handling those reorgs or fork, but that should definitely be in the dashboard. So, my… my nive thinking is about just,

106
00:21:21.350 --> 00:21:40.679
Jun: batching those endpoints and compare the, block header or something to determine the forks. So, I have to think of more, algorithm about this, fork things, because 3SF is another consensus, that

107
00:21:40.680 --> 00:21:42.779
Jun: I have to figure it out.

108
00:21:45.250 --> 00:21:54.560
Gajinder Singh: you might not need to figure it out, I think maybe just figuring out what the head of everyone is, because everyone will give you a head according to TSF.

109
00:21:54.880 --> 00:21:58.230
Gajinder Singh: Yep. So you might not need 3SF in the…

110
00:21:58.750 --> 00:22:00.669
Gajinder Singh: In this particular tool as such.

111
00:22:02.460 --> 00:22:04.219
Gajinder Singh: Yep, I understand.

112
00:22:05.030 --> 00:22:13.839
Gajinder Singh: So, we need these three APIs, I mean, even if, for example, there is… the version is not there, and what is version returning?

113
00:22:14.960 --> 00:22:16.300
Jun: Like this one.

114
00:22:20.110 --> 00:22:20.800
Gajinder Singh: Okay.

115
00:22:21.000 --> 00:22:24.919
Gajinder Singh: So, I mean, I don't see a big,

116
00:22:25.570 --> 00:22:30.770
Gajinder Singh: You know, issue in just adding blocks and headers, or states for that matter.

117
00:22:31.090 --> 00:22:33.209
Jun: As such, I mean.

118
00:22:33.210 --> 00:22:35.580
Gajinder Singh: We should be able to handle it.

119
00:22:36.100 --> 00:22:40.350
Gajinder Singh: In that sense, We should be able to come around on this.

120
00:22:42.890 --> 00:22:44.820
Jun: Yes.

121
00:22:45.100 --> 00:22:47.670
Jun: Could you repeat the last sentence?

122
00:22:49.560 --> 00:22:54.190
Gajinder Singh: I said, yeah, as such, Zoom should be able to come around on this and implement

123
00:22:54.520 --> 00:22:59.950
Gajinder Singh: Because we don't, see… Much, basically, you know.

124
00:23:03.030 --> 00:23:21.850
Jun: I can share some clean document about the definition of the endpoints that I'm using right now, but that can help for implementing the RPC, yeah. I can send, in the Zoom Telegram chat, maybe tomorrow or after this call.

125
00:23:23.620 --> 00:23:26.829
Gajinder Singh: Yep, I think that would be helpful for the team, for sure.

126
00:23:27.340 --> 00:23:28.300
Jun: Yep.

127
00:23:31.110 --> 00:23:32.560
Will Corcoran: Excellent. Thanks, Jen.

128
00:23:33.540 --> 00:23:45.200
Jun: Okay, so, I think, if you have any questions, you can raise, you can DM me, and yeah, that's it. I can stop my screen sharing right now.

129
00:23:47.880 --> 00:23:53.889
Will Corcoran: Real quick, so… You're also working on forking Dora?

130
00:23:55.260 --> 00:24:07.270
Jun: No, it's, as Fork in DORA might, have a lot of code change, I guess, because, there's, there's a totally different, consensus.

131
00:24:07.270 --> 00:24:15.279
Jun: using in those chains. So, actually, the app, what I showed, right before, is just,

132
00:24:15.350 --> 00:24:21.080
Jun: Act as just a… Role of Dora right now.

133
00:24:22.510 --> 00:24:23.760
Will Corcoran: Makes sense. Great.

134
00:24:25.440 --> 00:24:30.739
Will Corcoran: The next item that I put on the agenda, Guillaume,

135
00:24:31.900 --> 00:24:38.089
Will Corcoran: if you… I know that you opened, an issue with DevOps, and I think that they're, like, spinning up a…

136
00:24:39.050 --> 00:24:42.500
Will Corcoran: an instance of Grafana for this group.

137
00:24:43.200 --> 00:24:46.359
Will Corcoran: I don't know if there's any, like, context or update you could provide on that.

138
00:24:46.850 --> 00:25:01.510
Guillaume: There's a very short update, so yes, the instance exists. We even have, excuse me, we have a Victoria Metrics DP intake, which is the same thing as Prometheus. I mean, they should speak the same protocol, at least that's what I've been told.

139
00:25:02.420 --> 00:25:19.230
Guillaume: So that's done. I just need to test it and figure out if there are some issues, so I am yet to do this, but, yeah, you will have it by tomorrow at the latest. Well, okay. Unless there's a bug, you will have it by tomorrow at the latest.

140
00:25:20.040 --> 00:25:21.610
Will Corcoran: Perfect, I'm good.

141
00:25:23.440 --> 00:25:28.550
Will Corcoran: Next item… I'll drop in the chat… Tomah…

142
00:25:29.880 --> 00:25:35.290
Will Corcoran: You wanted to, sort of, provide an update on the Lean SSC?

143
00:25:46.560 --> 00:25:48.670
Will Corcoran: Your audio might not be working if you're speaking.

144
00:25:48.670 --> 00:25:49.550
Thomas Coratger: Yes.

145
00:25:49.550 --> 00:25:50.650
Will Corcoran: Oh, we're good.

146
00:25:50.650 --> 00:25:51.530
Thomas Coratger: This is good.

147
00:25:51.920 --> 00:25:52.530
Will Corcoran: Yep.

148
00:25:52.680 --> 00:26:01.180
Thomas Coratger: Yep. So, I… with Felipe, we started to work a bit on some lean SSE things.

149
00:26:01.520 --> 00:26:10.080
Thomas Coratger: Why? Because, for the SSD, we had, like, conflicts of types, and we had, like, only…

150
00:26:10.270 --> 00:26:17.139
Thomas Coratger: kind of hold the implementation, not maintain anymore one in Python by the…

151
00:26:17.480 --> 00:26:26.229
Thomas Coratger: By one of… whole team of the TVM Foundation, and one… another by an external contributor, Remackable.

152
00:26:26.470 --> 00:26:35.689
Thomas Coratger: also not… not maintained anymore, and we wanted, as discussed during the last lean consensus call, to,

153
00:26:36.240 --> 00:26:46.889
Thomas Coratger: to make things easier to do in Python using strong typing, pitonic stuff, pedantic, and all of the good principles of modern Python, so…

154
00:26:47.160 --> 00:26:50.259
Thomas Coratger: We started to work on that, this is almost finished.

155
00:26:50.890 --> 00:27:01.309
Thomas Coratger: And we are currently reviewing this. I will just share briefly my screen, just to show you, like, a brief view of what it is.

156
00:27:01.970 --> 00:27:08.360
Thomas Coratger: So… Basically, in the… Because of this.

157
00:27:09.010 --> 00:27:10.330
Thomas Coratger: In…

158
00:27:10.780 --> 00:27:27.060
Thomas Coratger: in the types, in the type systems that I have there, we have defined all of the… all of the types required to do the SSE, so Boolean types, or UINTs. This is maybe the… the simplest to… to understand.

159
00:27:27.290 --> 00:27:44.630
Thomas Coratger: And so we have defined that with everything clear, trying to use pedantic as much as possible, trying to use Clear method, modern Python. This is under review, and we have open sources, so we'll try to improve it with time.

160
00:27:44.650 --> 00:27:50.149
Thomas Coratger: And we have tried to implement also the SAZ in a very simple way.

161
00:27:50.210 --> 00:28:03.240
Thomas Coratger: Basically, the most important things are in this folder, SSE, and this is currently under review by Felipe, who will provide some new peers and some new insight into this.

162
00:28:03.390 --> 00:28:15.099
Thomas Coratger: But yeah, basically the goal was to renew a bit the ecosystem, because, the last thing that we had was remerkalized, so…

163
00:28:15.890 --> 00:28:29.220
Thomas Coratger: this one, and it was only maintained last year, so we wanted something a bit new and more adapted to the link concept, so we just started this small effort.

164
00:28:29.680 --> 00:28:39.899
Thomas Coratger: I worked on this a bit this weekend and a bit yesterday. That is almost finished, and yeah, Felipe is currently reviewing that.

165
00:28:39.990 --> 00:28:54.290
Thomas Coratger: I will then post that into the global lean consensus group that we have to see if we have external contributors who wants to contribute, or to share some Python tricks, or… yeah.

166
00:28:55.760 --> 00:28:56.970
Thomas Coratger: This is my point.

167
00:29:00.780 --> 00:29:08.960
Will Corcoran: There was a question in the chat from Gene. Do we need to use SHA-256 for hashing and SSZ Merkalization?

168
00:29:11.750 --> 00:29:14.410
Thomas Coratger: Yeah, for now, this is what we use, yeah.

169
00:29:15.200 --> 00:29:16.040
Thomas Coratger: Yeah.

170
00:29:23.490 --> 00:29:25.100
Will Corcoran: Excellent. Thanks, Tom.

171
00:29:34.860 --> 00:29:38.499
Will Corcoran: You wanted to provide an update, I'll drop in the chat.

172
00:29:38.890 --> 00:29:41.910
Will Corcoran: the Quadrivium client update.

173
00:29:45.050 --> 00:29:46.460
Kamil Salakhiev: Yeah, kayak.

174
00:29:46.970 --> 00:29:48.010
Will Corcoran: I like it. Yes.

175
00:29:48.900 --> 00:30:00.720
Kamil Salakhiev: Yeah, I can really quick, just explain what it is. So, yeah, we also just open-sourced our, DevNet client. It's, still lacks some features, but we are working hard to introduce them.

176
00:30:00.930 --> 00:30:03.980
Kamil Salakhiev: Yeah, overall, it's, yeah,

177
00:30:04.110 --> 00:30:13.050
Kamil Salakhiev: Yeah, DevNet client, written in C++, yeah, we use C++2P. I think, yeah, we resume the user as P2P, so we'll kind of have it.

178
00:30:13.470 --> 00:30:22.459
Kamil Salakhiev: Hopefully, yeah, we'll have some diversity there, yeah, once our client is fully implemented. But yeah, overall, we have block production ready,

179
00:30:23.980 --> 00:30:34.059
Kamil Salakhiev: Briefly short, yeah. So basically, here we have, like, one node produces blocks, and the next node is basically just synchronizes it. In theory, yeah, we should,

180
00:30:34.310 --> 00:30:44.749
Kamil Salakhiev: Give it a try, and maybe, yeah, conduct some interop, because, yeah, we have the gossip subtopics implemented for the block announcements, so…

181
00:30:44.980 --> 00:30:59.880
Kamil Salakhiev: But yeah, working hard on introducing 3SF and STF there. Yeah, also, I think Galamel was asking, like, about the Docker, last time, so yeah, it's not there yet, but yeah, it is also…

182
00:31:00.250 --> 00:31:04.470
Kamil Salakhiev: work in progress at the moment. So, yeah, Aro just wants to give some…

183
00:31:04.600 --> 00:31:08.020
Kamil Salakhiev: The update on this client. Yeah, thanks.

184
00:31:14.260 --> 00:31:15.490
Will Corcoran: Awesome. Thanks, Camille.

185
00:31:16.500 --> 00:31:23.500
Will Corcoran: Oh, it's great to see that coming together so quickly. And it'll be nice to…

186
00:31:23.760 --> 00:31:25.620
Will Corcoran: Have that ready to go for the interrupt.

187
00:31:26.260 --> 00:31:41.930
Kamil Salakhiev: Yeah, most of pieces, actually, they were not even implemented. Well, they were either ready already, or we just reused them. So, for example, SSG, we just took, from off-chain Labs, they had C++ implementation, although they were not supporting this for more than a year, so, yeah, we might actually face some…

188
00:31:42.310 --> 00:31:45.889
Kamil Salakhiev: Yeah, compatibility challenges there, but…

189
00:31:46.160 --> 00:31:49.159
Kamil Salakhiev: Yeah, that's what we need to figure out with Interop.

190
00:31:49.450 --> 00:31:50.609
Kamil Salakhiev: But yeah.

191
00:31:58.900 --> 00:32:01.949
Will Corcoran: Julene Alright.

192
00:32:01.950 --> 00:32:05.370
Kamil Salakhiev: If someone has a better name, as John said, yeah, we all say that.

193
00:32:05.710 --> 00:32:08.990
Kamil Salakhiev: Yeah, ready to accept it, consider it.

194
00:32:10.510 --> 00:32:27.250
Will Corcoran: I think… well, first of all, congrats, everyone, on a really successful, lean consensus call last Friday. Going into the call, we were having some conversations about the one-pager that I just dropped into the chat, where this is…

195
00:32:27.410 --> 00:32:33.610
Will Corcoran: Sort of where we're trying to summarize everything that's in the, PQ DevNet spec 0.

196
00:32:33.810 --> 00:32:40.710
Will Corcoran: or zero spec. And this is… sort of follows a design pattern that

197
00:32:41.620 --> 00:32:55.780
Will Corcoran: is used in the, you know, primary ACD, PandaOps, PM repo world, and I think that it would be great if we could sort of start to, consolidate all of the

198
00:32:55.780 --> 00:33:05.629
Will Corcoran: you know, update that with all of the functionality and spec PRs, and spec test versions that we're planning to include into DevNet Zero. I think

199
00:33:05.930 --> 00:33:07.470
Will Corcoran: Getting the first one.

200
00:33:08.770 --> 00:33:16.700
Will Corcoran: you know, sort of solidified, I'm happy to take the lead on it if people want to just direct me to,

201
00:33:17.290 --> 00:33:30.460
Will Corcoran: you know, all of the PRs and spec sections that are going to be included in the DevNet. Updating it moving forward should be, you know, relatively simple, just sort of tracking the incremental improvements.

202
00:33:30.590 --> 00:33:49.520
Will Corcoran: But I do think that if we go too far without capturing everything here, we'll end up regretting it, and it's gonna be more work in the future. So our future selves will thank us if we, take some time to either, like, talk through that right now, we can

203
00:33:49.720 --> 00:33:56.559
Will Corcoran: you know, I don't know the best way that we want to go about doing this. People can just submit PRs to update that,

204
00:33:56.790 --> 00:33:58.969
Will Corcoran: That markdown that's already been created.

205
00:33:59.480 --> 00:34:01.200
Will Corcoran: I don't know.

206
00:34:04.500 --> 00:34:09.720
Will Corcoran: Anyone from the client teams or active spec riders have any

207
00:34:10.070 --> 00:34:12.259
Will Corcoran: Thoughts on how to advance this?

208
00:34:24.860 --> 00:34:26.880
Will Corcoran: Catherineer, you're awfully quiet.

209
00:34:27.090 --> 00:34:28.359
Will Corcoran: I'm gonna call on you.

210
00:34:31.630 --> 00:34:32.409
Gajinder Singh: Yeah.

211
00:34:32.820 --> 00:34:37.430
Gajinder Singh: So, but what is… what is needed from us?

212
00:34:38.400 --> 00:34:44.989
Will Corcoran: Really, I think it's just a matter of getting links to all of the pertinent information

213
00:34:45.310 --> 00:34:51.619
Will Corcoran: Normally these DevNet 1, you know, single sheets cover all of the,

214
00:34:52.239 --> 00:35:03.309
Will Corcoran: it'll be a link to the current release of the spec, like, say, the consensus spec release. I don't think that we have releases bundled up yet.

215
00:35:03.360 --> 00:35:17.650
Will Corcoran: quite yet, so it'll just be links to the individual subspec sections. And then this is where we can start to track any active PRs. You know, normally it's EIPs and PRs, and

216
00:35:18.350 --> 00:35:25.060
Will Corcoran: you know, trying to get everything onto a single sheet so that you know what's included in that, DevNet.

217
00:35:25.350 --> 00:35:32.770
Will Corcoran: And then that's also where you'll track the, you know, sort of have the test scenarios that you want to include in the DevNet.

218
00:35:33.200 --> 00:35:36.669
Will Corcoran: And ultimately, you know.

219
00:35:37.440 --> 00:35:44.249
Will Corcoran: Document the, you know, the interoperability of all the clients, and if they're passing those tests successfully.

220
00:35:46.080 --> 00:35:51.969
Gajinder Singh: Right, right. So yes, I think this document makes quite a lot of sense with that.

221
00:35:52.600 --> 00:35:58.200
Gajinder Singh: Goal in mind, because this is, like, you know, anyone can come over here, and it would be a starting point.

222
00:35:58.350 --> 00:36:02.190
Gajinder Singh: To dig into what, is happening on test, or spec, or…

223
00:36:02.330 --> 00:36:06.299
Gajinder Singh: Any of the clients, clients that are participating in it?

224
00:36:07.950 --> 00:36:13.010
Gajinder Singh: So, yes, we'll be able to sort of link our branches and PRs through it.

225
00:36:13.180 --> 00:36:15.849
Gajinder Singh: As well as, the spec,

226
00:36:16.260 --> 00:36:22.209
Gajinder Singh: spec as well, and maybe also detail… I'll write basically a bit of detail of,

227
00:36:22.740 --> 00:36:30.120
Gajinder Singh: What is, what is the functionality… functionality that we are covering? That we already added in the…

228
00:36:31.080 --> 00:36:37.570
Gajinder Singh: added in the lean specs repo, but I guess we can extract Auto from there and put it over here, or…

229
00:36:37.690 --> 00:36:39.399
Gajinder Singh: Both the places can have it.

230
00:36:44.710 --> 00:36:45.760
Will Corcoran: Alright, perfect.

231
00:36:46.370 --> 00:36:54.050
Will Corcoran: Yeah, it's not the… not the top priority. Something I'm more than happy to track. I think it's just…

232
00:36:54.350 --> 00:37:00.100
Will Corcoran: wanting people to, like, have context on it before I start, reaching out, and,

233
00:37:00.580 --> 00:37:03.190
Will Corcoran: Trying to collect all the pertinent information, but…

234
00:37:03.500 --> 00:37:05.680
Will Corcoran: I can take this to the next level.

235
00:37:06.390 --> 00:37:11.520
Gajinder Singh: It will increase… it will definitely increasingly become quite important, because as we sort of…

236
00:37:11.960 --> 00:37:16.159
Gajinder Singh: get more and more towards interop, then all these things will sort of…

237
00:37:17.050 --> 00:37:20.200
Gajinder Singh: Be very pertinent to figure out what is going on.

238
00:37:21.250 --> 00:37:27.449
Will Corcoran: Yeah, yeah, and I'm happy to, like, update it week in and week out, so it… once it gets going.

239
00:37:27.550 --> 00:37:32.839
Will Corcoran: It'll be a nice, kind of, central hub for these calls and other things.

240
00:37:33.440 --> 00:37:39.829
Will Corcoran: Okay. Any… I guess… Last week, you know, we had sort of…

241
00:37:40.200 --> 00:37:44.160
Will Corcoran: felt like was a completion of DevNet Zero spec.

242
00:37:44.410 --> 00:37:49.030
Will Corcoran: Can someone provide an update on the status of…

243
00:37:49.390 --> 00:37:57.000
Will Corcoran: I don't know, I feel like maybe we're working towards a DevNet 1 spec and launching DevNet 0.

244
00:37:59.230 --> 00:38:12.439
Gajinder Singh: Yeah, so I can sort of give the status with regard to what's happening in Zoom, as well as what is happening in the Genesis generation. But, I think Phil, I think PK,

245
00:38:12.600 --> 00:38:18.849
Gajinder Singh: So sort of basically, put together a Genesis generator that would churn out the files.

246
00:38:19.170 --> 00:38:25.280
Gajinder Singh: that we need, he would… although we don't need Genesis, SSD,

247
00:38:25.480 --> 00:38:35.859
Gajinder Singh: But it would still generate it so that clients can verify, or clients can directly read that Genesis SSD and sort of have less of a cross-client issue.

248
00:38:36.130 --> 00:38:46.530
Gajinder Singh: And if there is an issue, that will pop up quite easily. So, so that part is ready. Zeeam, as such, is…

249
00:38:46.760 --> 00:38:49.520
Gajinder Singh: quite near to definite,

250
00:38:49.760 --> 00:39:03.379
Gajinder Singh: zero spec implementation. We are done with FolkChoice, and some of the changes that was… that were… that were introduced in the container and straight transition function that I just need to port back, and

251
00:39:03.770 --> 00:39:14.279
Gajinder Singh: So hopefully, by end of this week, we will be ready, and we'll be ready to sort of, consume, PK's Genesis file.

252
00:39:14.620 --> 00:39:29.950
Gajinder Singh: and, sort of start our local, and in, us, in, process or local DevNet with, our own client, and then if, then when Reem is ready with it.

253
00:39:30.110 --> 00:39:41.170
Gajinder Singh: then we can, interrupt, try interop on the local machine itself. But I think before we try and interrupt, we would basically need some of,

254
00:39:41.510 --> 00:39:45.480
Gajinder Singh: Some of the test cases, we need to pass some of the test cases, because…

255
00:39:46.380 --> 00:39:51.500
Gajinder Singh: A lot of interop issues would be… you know,

256
00:39:51.790 --> 00:39:57.599
Gajinder Singh: pre-handled that way, and we would probably have a smooth interrupt. We decided that

257
00:39:58.070 --> 00:40:02.530
Gajinder Singh: I think in this week's call, week's call in Zoom,

258
00:40:02.650 --> 00:40:15.730
Gajinder Singh: PK, and we have to basically take a call, whether we want Kurtosis, kurtosis as a tool, because Kurtosis right now has a lot of other things. It spins up execution clients, and

259
00:40:16.240 --> 00:40:20.040
Gajinder Singh: So, so there is a whole lot of stuff, and there is a whole lot of tooling that

260
00:40:20.410 --> 00:40:23.419
Gajinder Singh: Or a whole load of functionality code that we don't need.

261
00:40:23.560 --> 00:40:28.480
Gajinder Singh: And, we basically… it will be better to start as an independent package.

262
00:40:28.610 --> 00:40:35.369
Gajinder Singh: But, I don't even think that we sort of need that. We have a quite simplistic way of

263
00:40:35.910 --> 00:40:42.320
Gajinder Singh: starting up the clients, and that Genesis generation is also not really a big deal, so…

264
00:40:42.720 --> 00:40:49.679
Gajinder Singh: So I think… Maybe we can have a small shell tool that can spin up clients.

265
00:40:50.690 --> 00:40:58.580
Gajinder Singh: at least to begin with, in the meantime, getting cotuses ready. So, getting katosis ready will take 2 to 3 weeks in the least.

266
00:40:58.700 --> 00:41:01.960
Gajinder Singh: And we don't want it to sort of,

267
00:41:02.300 --> 00:41:10.990
Gajinder Singh: Delay us, and delay our interop, so we'll figure out a way to interrupt without ketosis, but in the meantime.

268
00:41:11.150 --> 00:41:16.289
Gajinder Singh: we'll get ketosis ready so that, we can finally hop onto Katrosis for that matter.

269
00:41:21.550 --> 00:41:22.480
Gajinder Singh: Yajin.

270
00:41:23.460 --> 00:41:27.009
Jun: Yeah, so maybe Rim can also,

271
00:41:27.080 --> 00:41:38.040
Jun: provide some updates on it. So, O and Cassandra and me, take some… several calls, about the lean chain spec.

272
00:41:38.040 --> 00:41:55.019
Jun: So, I think, we three are all, quite aligned, on the same page. So, in the RIM side, we already implemented most of the… updated the specs. So, what I…

273
00:41:55.020 --> 00:42:17.639
Jun: what I have showed… shown on the very first part of this call is running the network with the latest spec. So, I guess, in… in the RIM side, the spec… spec… implementing spec is almost done, but one of the concerns is the optimization. So, it's like memory optimization, or

274
00:42:17.640 --> 00:42:33.530
Jun: any other DB integration, so we are, working on this, so I guess, we can finish this in, in early next week? I don't know, but, that can be feasible.

275
00:42:33.530 --> 00:42:40.679
Jun: And also, I'm… I agree with Kazinder's last sentences that, as Curtis says.

276
00:42:40.680 --> 00:42:54.380
Jun: needs some time to be prepared. We need some, method to run this network in locomotion, so I guess Docker Compose can be a great, tool for running,

277
00:42:54.430 --> 00:43:00.029
Jun: separate, node in one machine, so…

278
00:43:00.770 --> 00:43:04.569
Jun: Yeah, so, I guess, yep.

279
00:43:04.570 --> 00:43:17.729
Gajinder Singh: Just… just right over here, so the kind of tool that I was talking was, definitely, we'll use Docker images, but I had something like a Load Start Quick Start when I was working for Load Start, where you can basically, you know, use the tool to spin up,

280
00:43:18.140 --> 00:43:21.990
Gajinder Singh: a dev network, and, through, through basically, you know.

281
00:43:22.180 --> 00:43:37.150
Gajinder Singh: it will generate the Genesis and then start the network. So we have that kind of a shell tool, and I think we can adopt that over here to spin up the nodes. But yes, definitely spin up all the nodes in Docker so that

282
00:43:37.660 --> 00:43:43.160
Gajinder Singh: It is an easy way to get the network going for anyone who wants to start it.

283
00:43:43.650 --> 00:43:55.479
Jun: Yeah, so I'd like to suggest to, make a schedule of that kind of local interrupt things using the image from each team.

284
00:43:55.750 --> 00:44:00.980
Jun: As, if we are ready. So, I think,

285
00:44:01.090 --> 00:44:06.530
Jun: Could you have any idea of this timeline before this, the full interop?

286
00:44:09.820 --> 00:44:15.789
Gajinder Singh: I think that is… this is something that we should start trying next week.

287
00:44:17.340 --> 00:44:22.559
Gajinder Singh: So, I mean, I'm hoping that we'll be able to start,

288
00:44:23.220 --> 00:44:28.710
Gajinder Singh: at least figuring out the interop between Reem and Zayn next week. That is…

289
00:44:29.560 --> 00:44:31.170
Gajinder Singh: That is my hope and aim.

290
00:44:32.720 --> 00:44:50.019
Jun: Yeah, so, and I also noticed that, we both have some CLI tools to generate ENR, to be more specific, the CCP key for the network. That means we can just feed the boot, the ENR addresses as the boot nodes.

291
00:44:50.020 --> 00:44:56.839
Jun: for each node that can also be handled in some script in a Docker compose.

292
00:44:56.840 --> 00:45:04.699
Gajinder Singh: So that… that tool is… that, data will be available through, PK's generator, so we don't have to worry.

293
00:45:04.700 --> 00:45:05.140
Jun: Good morning.

294
00:45:05.520 --> 00:45:11.630
Gajinder Singh: So, Piki… so I'll share, I think… is Piki on the call? I'm not sure.

295
00:45:13.820 --> 00:45:15.090
Will Corcoran: I don't believe so.

296
00:45:16.060 --> 00:45:17.199
Gajinder Singh: Yeah, so basically, he…

297
00:45:17.310 --> 00:45:28.899
Gajinder Singh: he did some work, and he provided some output to where, you know, we had a discussion on this on Zoom call last Friday, and we basically

298
00:45:29.080 --> 00:45:35.310
Gajinder Singh: Figured this out, that, okay, you know, this is the minimum files, or the structure that we need.

299
00:45:35.450 --> 00:45:47.339
Gajinder Singh: And which also included, secret keys, for the nodes, for the node, P2P, as well as, the ENR,

300
00:45:47.500 --> 00:45:55.420
Gajinder Singh: generation and assignment. So… so all that thing should be worked out. What we just need to do is basically

301
00:45:55.700 --> 00:46:03.800
Gajinder Singh: have a shell tool that generates it, and then is able to start Zoom or Ream Nord.

302
00:46:03.990 --> 00:46:09.410
Gajinder Singh: To read, those config files, and then basically the interop happens.

303
00:46:10.760 --> 00:46:12.639
Jun: Alright, so, after.

304
00:46:14.510 --> 00:46:16.790
Gajinder Singh: We can also add lean weight.

305
00:46:17.400 --> 00:46:20.599
Gajinder Singh: We can also add LeanView to APR, that would be pretty interesting.

306
00:46:22.200 --> 00:46:27.710
Jun: Yeah, for sure. So, if you have some… oh, yeah, S, Camel?

307
00:46:28.670 --> 00:46:29.600
Jun: You can go…

308
00:46:29.600 --> 00:46:44.970
Kamil Salakhiev: No, I just wanted to add that, yeah, how we plan to approach spinning up a network is, basically, from day one, we want to be kind of shadow compatible. If you know, this is kind of the framework that allows to replace some system calls and basically have

309
00:46:44.970 --> 00:46:54.579
Kamil Salakhiev: discrete event simulation for the networking. The disadvantage of that is that it's not very convenient to use it together with Grafana.

310
00:46:54.690 --> 00:47:02.789
Kamil Salakhiev: As simulation kind of happens faster than in real time. Basically, we can simulate, basically, hours of simulation in several minutes.

311
00:47:02.840 --> 00:47:19.709
Kamil Salakhiev: Well, it depends on the complexity and number of EIPers in the network, but yeah, that just could be one approach to do this. There are some restrictions, like, for example, to be compatible with Shadow, it doesn't support IPv6 addresses, and

312
00:47:19.860 --> 00:47:23.210
Kamil Salakhiev: some other restrictions, I believe, but…

313
00:47:23.540 --> 00:47:29.489
Kamil Salakhiev: Yeah, yeah, it would be interesting once we have all clients ready just to spin up.

314
00:47:29.520 --> 00:47:45.280
Kamil Salakhiev: the network using shadow, because we can also kind of restrict, for example, the bandwidth between nodes, set latency between them, all of that stuff. So, yeah, if needed, yeah, we have some experience working with that, so yeah, we can help with this.

315
00:47:45.510 --> 00:47:50.589
Kamil Salakhiev: That's probably a kind of alternative to kurtosis, rather. Well, not…

316
00:47:50.830 --> 00:47:54.659
Kamil Salakhiev: No, the other way around. It's not like the direct…

317
00:47:54.810 --> 00:48:00.470
Kamil Salakhiev: alternative to Curtosis, but, yeah, it could be convenient to just spin up a network, yeah.

318
00:48:02.780 --> 00:48:09.899
Gajinder Singh: Yeah, I think that would be awesome to have, where basically you can control the bandwidth, or the resource allocation to the nodes, and

319
00:48:11.290 --> 00:48:18.689
Gajinder Singh: But that is also possible in Kubernetes, but yeah, I think that is…

320
00:48:19.230 --> 00:48:22.290
Gajinder Singh: All another tool to handle and…

321
00:48:22.800 --> 00:48:28.909
Gajinder Singh: We… I have good experience with that, but yes, things can be a little bit painful in that.

322
00:48:41.320 --> 00:48:45.110
Gajinder Singh: So yeah, I think for the next week, we can just try to…

323
00:48:45.390 --> 00:48:50.390
Gajinder Singh: do these things. Try to drive on an interop using very basic or rudimentary things.

324
00:48:50.610 --> 00:48:57.160
Gajinder Singh: And then, as we gradually mature, we'll figure out what other tooling, we can use

325
00:48:57.300 --> 00:48:59.969
Gajinder Singh: To basically simulate the scenarios that we want.

326
00:49:00.360 --> 00:49:03.499
Gajinder Singh: Including what Camel suggested.

327
00:49:08.670 --> 00:49:09.330
Will Corcoran: Sounds good.

328
00:49:11.410 --> 00:49:14.890
Will Corcoran: Yeah, seems like we're kind of getting through some of these.

329
00:49:15.400 --> 00:49:20.180
Will Corcoran: Early growing pains, and… Hitting our stride.

330
00:49:20.960 --> 00:49:28.659
Will Corcoran: Are there any other… Topics that people would like to cover, anywhere you're blocked, need a review.

331
00:49:29.510 --> 00:49:33.430
Will Corcoran: Something that benefits from us all being Together.

332
00:49:35.410 --> 00:49:52.050
Jun: Just one question to Cassander about our spec. So, currently, one PR is open right now, and can we just assume that this PR will be merged and also, apply to our codebase right now?

333
00:49:52.990 --> 00:49:55.090
Gajinder Singh: The fork choice one.

334
00:49:55.460 --> 00:49:56.070
Jun: Yes.

335
00:49:56.620 --> 00:50:02.019
Gajinder Singh: Yes, yes. So, I just basically, you know, I just want to reconfirm everything.

336
00:50:02.250 --> 00:50:10.450
Gajinder Singh: And, try to see that, that everything is in order in the PR. As such, as such, conceptually, the PR is…

337
00:50:10.940 --> 00:50:11.920
Gajinder Singh: good.

338
00:50:12.300 --> 00:50:18.649
Gajinder Singh: I just want to recheck all the small details and, get the syntax properly done.

339
00:50:19.290 --> 00:50:27.740
Gajinder Singh: And as well as basically getting it implemented, and so in Zoom, we have already implemented it, so basically a confirmation.

340
00:50:28.090 --> 00:50:32.080
Gajinder Singh: I was also waiting for a confirmation, in implementation that,

341
00:50:32.370 --> 00:50:36.650
Gajinder Singh: whatever is proposed is all good. So there are a few changes that I mentioned in the…

342
00:50:37.170 --> 00:50:40.880
Gajinder Singh: In our channel that we are coordinating for the specs.

343
00:50:41.140 --> 00:50:49.999
Gajinder Singh: that there are a few minor changes that I would like to introduce, and basically we'll discuss it over the next 2-3 days, but as such.

344
00:50:50.160 --> 00:50:53.389
Gajinder Singh: It is sort of an abstraction and does not really change

345
00:50:53.670 --> 00:50:56.740
Gajinder Singh: the technical content of the PR.

346
00:50:58.100 --> 00:51:13.719
Jun: Okay, so I think, that PR can be merged, I don't know, the Friday or something, so… so that we can, see in the master branch about the… the latest spec of the

347
00:51:13.910 --> 00:51:15.489
Jun: He could have not chained.

348
00:51:15.760 --> 00:51:20.120
Gajinder Singh: Yes, let's try to aim it March by Friday here.

349
00:51:32.230 --> 00:51:33.080
Will Corcoran: Fantastic.

350
00:51:34.830 --> 00:51:36.390
Will Corcoran: Anyone else?

351
00:51:38.520 --> 00:51:40.009
Will Corcoran: See some new faces?

352
00:51:40.140 --> 00:51:45.980
Will Corcoran: Welcome. Excited to see the call, sort of growing in intention.

353
00:51:46.480 --> 00:51:52.280
Will Corcoran: Yeah, I think we're… Let's dirt.

354
00:51:52.440 --> 00:51:55.139
Will Corcoran: Turn some heads here soon.

355
00:52:00.320 --> 00:52:01.260
Will Corcoran: Alright.

356
00:52:01.450 --> 00:52:04.519
Will Corcoran: I will see you guys online.

357
00:52:06.040 --> 00:52:07.060
Will Corcoran: Have a good day.

358
00:52:07.340 --> 00:52:08.480
Shariq Naiyer: Have a good one, guys.

359
00:52:08.570 --> 00:52:09.180
Thomas Coratger: Nice.

360
00:52:09.560 --> 00:52:10.269
Justin Drake: Thanks for having a good.

