WEBVTT

1
00:01:23.670 --> 00:01:24.630
thomasthiery: Hey! Hey!

2
00:01:25.860 --> 00:01:26.600
Akash | ECH: Okay.

3
00:01:27.540 --> 00:01:28.380
thomasthiery: How are you?

4
00:01:29.890 --> 00:01:31.849
Akash | ECH: I'm fine. What about you?

5
00:01:33.070 --> 00:01:35.059
thomasthiery: All good, all good, thanks.

6
00:01:41.990 --> 00:01:44.780
Akash | ECH: Let's do some sound check.

7
00:01:44.990 --> 00:01:46.910
Akash | ECH: Could you please pick something.

8
00:01:47.320 --> 00:01:47.889
thomasthiery: Yeah.

9
00:01:48.460 --> 00:01:49.280
thomasthiery: Hello. Hello.

10
00:01:49.790 --> 00:01:51.620
Akash | ECH: Yeah, it's working.

11
00:01:51.620 --> 00:01:52.150
thomasthiery: Okay. Nice.

12
00:01:52.150 --> 00:01:58.220
Akash | ECH: I'm helping with the stream today. So let me know whenever you are ready, so I can switch this time.

13
00:01:58.400 --> 00:01:59.650
thomasthiery: Okay. Sounds good.

14
00:02:00.260 --> 00:02:00.840
Akash | ECH: Yeah.

15
00:05:38.640 --> 00:05:43.739
thomasthiery: Hi, everyone. It's wait one or 2Â min. And then we can start.

16
00:06:54.700 --> 00:07:00.639
thomasthiery: Okay, maybe we can just go ahead. I think it's gonna be a short one, anyways.

17
00:07:01.823 --> 00:07:06.980
thomasthiery: I don't have that many updates on the research side of things. I would say,

18
00:07:09.570 --> 00:07:14.979
thomasthiery: yeah, maybe I can just give an impression of where I think fossil is in terms of

19
00:07:15.410 --> 00:07:21.950
thomasthiery: positioning relative to Glamsterdam and the inclusion there.

20
00:07:24.390 --> 00:07:33.380
thomasthiery: yeah, so I I feel like there has been quite a lot of conversation around slot restructuring or slot shortening.

21
00:07:34.480 --> 00:07:41.480
thomasthiery: And the Tfdr is that fossil is like in basically compatible with both.

22
00:07:43.340 --> 00:07:44.869
thomasthiery: I think in terms of

23
00:07:46.320 --> 00:07:53.139
thomasthiery: yeah, practicality would be very hard to combine for so with something like shorter slot times, if

24
00:07:53.280 --> 00:07:59.627
thomasthiery: my understanding is correct, because shorter start times is quite a big undertaking

25
00:08:00.430 --> 00:08:11.149
thomasthiery: and might require to also like reach out to a lot of different actors throughout the space, so it wouldn't like necessarily like fit, too. Well, in terms of

26
00:08:11.500 --> 00:08:15.889
thomasthiery: yeah, complexity and time needed to implement both.

27
00:08:17.370 --> 00:08:21.299
thomasthiery: I think there is a different. That's a bit of a different argument for

28
00:08:22.376 --> 00:08:33.589
thomasthiery: for the situation in which 1st all is combined with the slot restructuring eaps like, you know, it could be Pbs. It could be delayed. Execution could be.

29
00:08:33.780 --> 00:08:41.009
thomasthiery: Yeah, probably one of the 2. I think there, there might be a bit more space for fossil to also

30
00:08:41.270 --> 00:08:46.250
thomasthiery: sort of like fitting in the in the same form. But

31
00:08:46.490 --> 00:08:49.440
thomasthiery: let's let's see how it it goes.

32
00:08:49.690 --> 00:09:04.139
thomasthiery: The official sort of deadline for proposing headliners for Glamsterdam is now over, and now, I think, like the period of like discussions around.

33
00:09:04.670 --> 00:09:16.646
thomasthiery: You know what should go into glimpse to them as a headliner, and maybe like, not as a headliner, is supposed to really kick start now.

34
00:09:18.016 --> 00:09:22.473
thomasthiery: so yeah, just small update on this.

35
00:09:23.290 --> 00:09:25.689
thomasthiery: I do encourage you to like

36
00:09:26.623 --> 00:09:32.310
thomasthiery: well, we're not that many in the call, but like, if you do, have, you know

37
00:09:33.250 --> 00:09:36.780
thomasthiery: thoughts or like opinions on

38
00:09:37.430 --> 00:09:45.799
thomasthiery: whether fossil fits with like start restructuring or start shortening eips. If you think

39
00:09:45.930 --> 00:09:58.510
thomasthiery: there is like some urgency around fossil being included. In Glamsterdam rather than later on. Please just like, speak up and and and maybe like.

40
00:09:59.200 --> 00:10:03.235
thomasthiery: talk about it. Yeah.

41
00:10:04.300 --> 00:10:16.249
thomasthiery: yeah. As I said earlier, I think there is not much controversy around fossil being important. But there is a lot of different opinions on whether fossil should be included like

42
00:10:16.480 --> 00:10:20.550
thomasthiery: in Glamsterdam. I think that's like the most contentious world.

43
00:10:20.810 --> 00:10:26.780
thomasthiery: So, yeah, that was just a small update. Does anyone have questions on? The

44
00:10:27.240 --> 00:10:32.259
thomasthiery: more I I guess, like, high level for conclusion topic.

45
00:10:41.030 --> 00:10:48.720
thomasthiery: okay, if not, let's get into yeah, implementation updates, maybe. Do you want to

46
00:10:48.830 --> 00:10:52.580
thomasthiery: share what you just added in the chat.

47
00:10:52.580 --> 00:11:01.300
Mehdi Aouadi: Yeah, sure. Yeah. I was referring to the we have 2 spec. Prs raised by Jihoon, and there is a discussion on there.

48
00:11:01.420 --> 00:11:08.119
Mehdi Aouadi: I guess we can discuss that. So basically, the consensus spec one is about.

49
00:11:08.400 --> 00:11:14.549
Mehdi Aouadi: how should we handle the inclusion list? Because initially, we put them in the store.

50
00:11:15.010 --> 00:11:21.080
Mehdi Aouadi: and then we decided to do some changes. And it looks like we didn't reach consensus there.

51
00:11:21.610 --> 00:11:25.347
Mehdi Aouadi: Oh, yeah, I know Mikhail has

52
00:11:26.300 --> 00:11:30.720
Mehdi Aouadi: a different different view on that. So maybe we can discuss that.

53
00:11:31.720 --> 00:11:36.130
thomasthiery: Yeah, for sure. So what are the 2 main options?

54
00:11:38.170 --> 00:11:49.829
Mehdi Aouadi: So basically, initially, we, we put the inclusion list in the store, and we spec that. But now we have a new Pr to to remove that from the store, and

55
00:11:50.480 --> 00:11:58.279
Mehdi Aouadi: as far if I'm not correct, the last change was to introduce an inclusion list store.

56
00:11:59.210 --> 00:12:08.439
Mehdi Aouadi: and I don't know if everybody agrees on that. So yeah, I, to be honest, I don't have a strong opinion. I

57
00:12:09.540 --> 00:12:19.590
Mehdi Aouadi: in Teku. I've implemented it the the way it was initially, which means I put the inclusion list in the store. I know other clients implemented it differently.

58
00:12:20.210 --> 00:12:27.070
Mehdi Aouadi: but I think we we need to to make a decision on that point.

59
00:12:30.050 --> 00:12:35.009
thomasthiery: Okay, yeah, that sounds good. Does anyone have strong opinions then on.

60
00:12:35.230 --> 00:12:40.329
thomasthiery: So I guess it's like putting putting it in like a general sort of like generic store

61
00:12:41.049 --> 00:12:47.339
thomasthiery: versus creating a new store that is specific for inclusion list. Isn't. Is that right?

62
00:12:48.220 --> 00:12:50.609
Mehdi Aouadi: Yeah, we can summarize it that way.

63
00:12:50.850 --> 00:12:51.460
thomasthiery: Okay.

64
00:13:01.600 --> 00:13:05.539
thomasthiery: yeah. If you have thoughts me, Kyle.

65
00:13:07.840 --> 00:13:14.809
Mikhail Kalinin: Yeah, I I'm sorry if there is a noise in my background. I was just going to speak about the spec.

66
00:13:15.642 --> 00:13:21.749
Mikhail Kalinin: And yeah, if it's probably makes sense to do after implementation updates.

67
00:13:26.231 --> 00:13:27.740
Justin Traglia: What do you mean? Account.

68
00:13:29.530 --> 00:13:33.530
Mikhail Kalinin: I mean, are we doing implementation updates? Now.

69
00:13:36.550 --> 00:13:41.340
thomasthiery: Let's dive in that's like that's part of the implementation.

70
00:13:41.710 --> 00:13:42.080
Mikhail Kalinin: Okay.

71
00:13:42.080 --> 00:13:52.860
Mehdi Aouadi: Yeah, there aren't really implementation detail. We, we're basically since few weeks. Now, we are working on the improving the spec. And so yeah, I think we can dive in directly.

72
00:13:54.500 --> 00:13:57.820
Mikhail Kalinin: Okay. So I don't have a

73
00:13:58.260 --> 00:14:06.050
Mikhail Kalinin: a strong opinion about whether it should be inclusion list or a separate thing to the focture store or not.

74
00:14:06.250 --> 00:14:13.179
Mikhail Kalinin: What I was going to speak about is the the State transition, and

75
00:14:13.650 --> 00:14:20.299
Mikhail Kalinin: actually specifying how Cl and El are communicated in the State transition function.

76
00:14:21.150 --> 00:14:32.939
Mikhail Kalinin: I think that historically, and it makes a lot of sense to me. We've been trying to abstract away from the particular cl communication mechanism.

77
00:14:33.300 --> 00:14:38.400
Mikhail Kalinin: and we have a separate spec for it, which is the engine api specification?

78
00:14:39.622 --> 00:14:51.730
Mikhail Kalinin: So I think it is. From that standpoint it doesn't make sense to to actually put the way the Acl and Dl communicates it to a state transition.

79
00:14:52.170 --> 00:14:58.060
Mikhail Kalinin: which is basically what the current Pr suggests to do.

80
00:14:59.105 --> 00:15:11.490
Mikhail Kalinin: So I think that. Yeah, my point is basically that including list satisfiability doesn't have anything to relate it directly to the State transition itself.

81
00:15:11.600 --> 00:15:18.000
Mikhail Kalinin: So the result of the State transition will not be affected by whether El is satisfied or not.

82
00:15:18.500 --> 00:15:25.659
Mikhail Kalinin: And I think it's yeah. It should be a separate separated from the State transition.

83
00:15:25.870 --> 00:15:28.150
Mikhail Kalinin: and we can do it in like

84
00:15:28.310 --> 00:15:42.120
Mikhail Kalinin: when if we if we want, if we don't want to introduce a separate call to the execution engine to the spec. We can just abstract this check away by introducing an abstract function

85
00:15:42.380 --> 00:15:51.170
Mikhail Kalinin: similar to retrieve blobs, retrieve data blobs as we have today we can just introduce something like is inclusion least satisfied.

86
00:15:51.530 --> 00:15:58.849
Mikhail Kalinin: and pass a payrolled something like that. And the poke choice I mean.

87
00:15:58.970 --> 00:16:01.520
Mikhail Kalinin: and poke choice in their own block handler.

88
00:16:02.000 --> 00:16:04.759
Mikhail Kalinin: So this is kind of like my line of thoughts.

89
00:16:06.378 --> 00:16:13.080
Justin Traglia: I guess the problem with that, though, is that it kind of leaves the spec a bit ambiguous? No, or would this be defined elsewhere.

90
00:16:14.000 --> 00:16:15.450
Justin Traglia: like very clearly.

91
00:16:16.487 --> 00:16:22.199
Mikhail Kalinin: It. It leaves this back abstract. Yes, you're correct. No, it's not going to be defined anywhere else.

92
00:16:26.920 --> 00:16:28.000
Justin Traglia: Yeah, that's tough.

93
00:16:29.350 --> 00:16:30.110
Mikhail Kalinin: Why?

94
00:16:32.240 --> 00:16:35.294
Justin Traglia: I mean, it's not exactly simple. Is it like it?

95
00:16:36.160 --> 00:16:43.340
Justin Traglia: It would be beneficial to spec this out. So that's not like an unknown, or what's it?

96
00:16:43.340 --> 00:16:47.330
Mikhail Kalinin: You don't have to. What? What exactly do you want to spec out.

97
00:16:50.760 --> 00:16:54.550
Justin Traglia: The interaction between the yield and the cl essentially.

98
00:16:55.640 --> 00:16:56.000
Mikhail Kalinin: But.

99
00:16:56.000 --> 00:16:59.298
Justin Traglia: Like the inclusion was satisfy or like

100
00:17:02.470 --> 00:17:03.840
Justin Traglia: I don't know. I guess.

101
00:17:04.821 --> 00:17:14.179
Mikhail Kalinin: Consensus spec is about the specification of the consensus layer protocol. It's not about the Clel communication.

102
00:17:14.999 --> 00:17:23.539
Mikhail Kalinin: We have a separate spec for that, because we have a particular Cl communication mechanism, which is the engine Api that we use today.

103
00:17:24.159 --> 00:17:25.039
Mikhail Kalinin: So

104
00:17:26.159 --> 00:17:34.639
Mikhail Kalinin: I don't think it makes sense to put these communication into this pack and enshrine the particular way of communicating this to this pack.

105
00:17:38.378 --> 00:17:43.600
Justin Traglia: What exactly are you proposing? We remove from the Pr like a.

106
00:17:45.840 --> 00:17:51.200
Mikhail Kalinin: Yeah, I idea. Ideally, we should keep state transition untouched

107
00:17:52.290 --> 00:17:57.150
Mikhail Kalinin: because it's not changed. It's it's not affected by the inclusion list check.

108
00:17:57.900 --> 00:18:08.849
Mikhail Kalinin: If there is a strong push for enshrined in the elcl communication to Center State Transition. Then, I think we should remove this function and pass the

109
00:18:09.060 --> 00:18:14.659
Mikhail Kalinin: or maybe not, I mean like not, not not remove, but replace clear of it.

110
00:18:15.000 --> 00:18:19.830
Justin Traglia: Yeah, to be clear. Which function are you talking about? Are you talking about? Get inclusion list transactions?

111
00:18:20.320 --> 00:18:22.880
Mikhail Kalinin: No, I'm talking about State transition itself.

112
00:18:24.710 --> 00:18:39.290
Mikhail Kalinin: It. It's it's almost. It's almost a function now. Almost. Because, yeah, anyway. So it's a function now. And yeah, we should pass ya inclusion lists into it. Explicitly.

113
00:18:44.620 --> 00:18:47.979
Justin Traglia: Specifically which function. Sorry. I guess I'm just confused at this point.

114
00:18:49.970 --> 00:18:50.740
Mikhail Kalinin: So we have.

115
00:18:50.740 --> 00:18:52.120
Justin Traglia: Unblock? Yeah, or.

116
00:18:52.120 --> 00:18:55.609
Mikhail Kalinin: No, we have a state transition in the Pr.

117
00:18:56.240 --> 00:19:02.520
Mikhail Kalinin: It has access to inclusion list store. It reads inclusion list from that store right?

118
00:19:03.930 --> 00:19:07.730
Mikhail Kalinin: And then do does, and then passes them to El.

119
00:19:10.950 --> 00:19:21.660
Mikhail Kalinin: The then then the state transition does not do anything about the result of el satisfiability check right.

120
00:19:24.080 --> 00:19:25.229
Justin Traglia: I do not know.

121
00:19:26.580 --> 00:19:30.139
Jihoon: You mean in the spec or in the actual implementation.

122
00:19:30.590 --> 00:19:32.220
Mikhail Kalinin: Admin in this back.

123
00:19:32.680 --> 00:19:35.550
Jihoon: In the spec it checks. If it return any error.

124
00:19:37.100 --> 00:19:43.869
Mikhail Kalinin: But then this check is not surface to any other part of the spec right.

125
00:19:46.340 --> 00:19:47.319
Jihoon: What do you mean?

126
00:19:49.350 --> 00:19:53.489
Mikhail Kalinin: I mean that the result this step is used. Maybe I'm confused, you know.

127
00:19:55.120 --> 00:19:58.359
Jihoon: So if it's return any error, then it.

128
00:19:58.360 --> 00:19:58.950
Mikhail Kalinin: Yeah.

129
00:19:58.950 --> 00:20:05.929
Jihoon: The Cl. Tries to reorget, and that happens in unblock functions.

130
00:20:07.800 --> 00:20:15.879
Mikhail Kalinin: Right. But the spec does not say anything about how this information is passed from the State transition to the on block right?

131
00:20:16.370 --> 00:20:17.530
Mikhail Kalinin: Or it does.

132
00:20:18.280 --> 00:20:19.570
Jihoon: It does it

133
00:20:20.310 --> 00:20:28.280
Jihoon: it? It wraps the state transition in the try catch, and if it's it tries to catch, if it returns

134
00:20:28.550 --> 00:20:31.379
Jihoon: invalid inclusion, list, error.

135
00:20:34.320 --> 00:20:35.349
Mikhail Kalinin: Oh, I see!

136
00:20:40.240 --> 00:20:44.830
Jihoon: So I think this is a question about what is the right level of abstraction

137
00:20:44.940 --> 00:20:52.180
Jihoon: so like for other people who are not familiar with this discussion. Let me add some.

138
00:20:53.590 --> 00:20:58.210
Jihoon: yeah, thank you, Maddie. Let me add some share some context.

139
00:20:58.410 --> 00:20:58.955
Jihoon: So

140
00:21:01.109 --> 00:21:13.580
Jihoon: so what? I wanna ask people here, and maybe other devs, especially Cl. Devs, is about like what would be the best way to write the AI validation in the Cl. Spec.

141
00:21:13.990 --> 00:21:21.680
Jihoon: The actual client implementation is the Cl. Passes the Ils when calling the new payload engine Api.

142
00:21:21.930 --> 00:21:39.330
Jihoon: and that the el validates. If the given payload satisfies the ir constraints after transaction, execution and before withdrawal processing. So this is not a post state. This is some kind of a state in between.

143
00:21:39.450 --> 00:21:46.490
Jihoon: like an intermediary state during the State transition. This is because of some some possible edge case.

144
00:21:46.600 --> 00:21:54.570
Jihoon: So, anyway, and if it fails to satisfy il constraints, the El returns an error, and then Cl goes for its parent.

145
00:21:54.690 --> 00:21:57.630
Jihoon: So in the spec. Currently it is.

146
00:21:58.770 --> 00:22:11.630
Jihoon: this part corresponds to process execution, payload in state transition function. And currently, this is how the Pr is written at the moment. But the feedback is

147
00:22:11.700 --> 00:22:33.219
Jihoon: from the sales perspective, as Mika said, the El State is out of concern. So instead of modifying process execution, payload function to pass ielt in the new payload call if I understood correctly, and then we just use like an abstract call, for example, is inclusively satisfied

148
00:22:33.830 --> 00:22:39.949
Jihoon: in on block function, and if the result is false, then Cl. Tries to reorg it.

149
00:22:40.090 --> 00:23:03.239
Jihoon: And my question is, what if, like this deviates from the actual implementation more than we want. So of course, we want good abstraction. But, like, I think the question is, how much do we tolerate the deviation from the actual implementation. And this is also related to whether we want to use work, choice store, or inclusively store. Because.

150
00:23:05.520 --> 00:23:07.799
Jihoon: the reason why I

151
00:23:08.310 --> 00:23:22.900
Jihoon: didn't try to include put the inclusion list in store is one. It is not a general purpose storage and second in my mind in the spec we want to use

152
00:23:23.632 --> 00:23:27.989
Jihoon: process execution payload function to pass iels.

153
00:23:28.360 --> 00:23:46.450
Jihoon: And this is happening on the beacon chain layer, not forkli store layer. So if you put iels in the forktory store, then the beacon chain should have an access to forktory store, and this changes like whole lot of function signatures. And this is too invasive.

154
00:23:46.610 --> 00:24:11.459
Jihoon: And looking at other example, like Blob, also affects on fork choice algorithm. But we don't put it in fork choice store. We use abstract function call to retrieve blob data. So that's that's why I removed it from fork choice store. But there was another comment, that it's looks like a little bit of under

155
00:24:11.900 --> 00:24:22.750
Jihoon: specification. So that's why I included in colossually store. And what it does is just basically specifying how that kind of a in colossually store

156
00:24:23.361 --> 00:24:31.389
Jihoon: behaves when it received inclusion list, and it is also used in the process execution payload

157
00:24:31.670 --> 00:24:36.879
Jihoon: function when it tries to fetch the incorrectly and pass it to the El.

158
00:24:37.800 --> 00:24:47.680
Jihoon: So to summarize like, I think we have, like 3 options. One is going with the current implementation

159
00:24:48.331 --> 00:24:58.710
Jihoon: the second is just like what mi mika suggested. We just remove all the changes in the State transition and use the

160
00:24:59.808 --> 00:25:11.999
Jihoon: Is inclusively satisfied. Abstract engine Api call in unblock, and the 3rd option is, we just pass iels in the new payload call, as is today.

161
00:25:12.160 --> 00:25:16.610
Jihoon: but instead of checking it like, if state transition returns an error.

162
00:25:16.800 --> 00:25:25.900
Jihoon: or we just use the abstract function which is is inclusively satisfied to fetch the result from the El.

163
00:25:26.650 --> 00:25:31.450
Jihoon: So, yeah, this is how I view it. But maybe we

164
00:25:32.000 --> 00:25:38.180
Jihoon: might not able to reach to consensus, because well, we don't have enough dev, I guess.

165
00:25:38.630 --> 00:25:39.880
Jihoon: But yeah.

166
00:25:53.680 --> 00:26:01.990
thomasthiery: Okay, does anyone have an opinion about this? What you guys, I mean, Justin, maybe

167
00:26:03.940 --> 00:26:11.930
Justin Traglia: And I was just thinking that the latter 2 options we wouldn't be wouldn't be able to do as much testing correct for inclusion lists

168
00:26:13.070 --> 00:26:15.009
Justin Traglia: like, if it's an abstract function.

169
00:26:16.841 --> 00:26:23.899
Jihoon: I think we need to monkey patch it. And it would be possible. But yeah, so currently, what I,

170
00:26:24.290 --> 00:26:36.360
Jihoon: what I've done in my local change is we didn't have inclusively stored. So we just retrieve in colossal list transactions.

171
00:26:37.105 --> 00:26:46.079
Jihoon: But I think I we can monkey patch inclusionally store as well. So yeah, so it's it's, I think it's just a matter of decision. So.

172
00:26:46.790 --> 00:26:51.689
Justin Traglia: I'm not sure how that we I'm not sure how we would do that, for, like the reference tests, though.

173
00:26:51.840 --> 00:26:58.409
Justin Traglia: like we would have to ask clients to monkey Patch to right if I'm understanding that correctly.

174
00:27:00.181 --> 00:27:10.100
Jihoon: Do you remember how we monkey patch test blobs because they also use a retrieve blob and proof as a monkey patch function.

175
00:27:11.460 --> 00:27:15.070
Justin Traglia: Yeah, I don't know. I don't. I just don't think we have tests for that, or I don't remember.

176
00:27:16.440 --> 00:27:17.810
Jihoon: Right.

177
00:27:19.070 --> 00:27:22.380
Justin Traglia: Or we just I don't know. I don't remember. Sorry.

178
00:27:23.995 --> 00:27:34.510
Jihoon: No worries. I also don't remember. Maybe we can just add the testing format to yield inclusion list so that client can consume that testing vectors.

179
00:27:38.410 --> 00:27:39.400
Justin Traglia: Yeah, maybe.

180
00:27:42.120 --> 00:27:42.690
Jihoon: Yep.

181
00:27:43.491 --> 00:27:47.679
Justin Traglia: I'll I'll just say that I don't really have a strong opinion on any of this

182
00:27:48.690 --> 00:27:54.229
Justin Traglia: whatever simple and well spec or like. Clearly spec.

183
00:28:02.320 --> 00:28:07.920
thomasthiery: Yeah, well, I'm not a dev. But I I do think like in some ways

184
00:28:08.880 --> 00:28:15.910
thomasthiery: I do introduce a new primitive on the protocol like

185
00:28:16.490 --> 00:28:23.789
thomasthiery: it. It doesn't really exist now that, like some actors, constrain others, especially like

186
00:28:23.980 --> 00:28:26.279
thomasthiery: that, the Cl. Sort of like

187
00:28:26.830 --> 00:28:31.819
thomasthiery: for choice is affected by a very ill.

188
00:28:32.240 --> 00:28:37.959
thomasthiery: He had heavy sort of feature of having transactions included in a block or not.

189
00:28:39.190 --> 00:28:47.140
thomasthiery: so it makes sense that it. It will break some of the super clean abstraction we are trying to keep in some ways.

190
00:28:50.500 --> 00:28:52.879
thomasthiery: I don't think there is like any

191
00:28:53.070 --> 00:29:02.689
thomasthiery: fundamental way around that, just because it's it's very core to the proposal. Right? Like this sort of like interaction between the Cl and Dl is.

192
00:29:03.646 --> 00:29:10.320
thomasthiery: is really yeah. Call to to what fossil is, and what inclusion lists are.

193
00:29:10.864 --> 00:29:13.965
thomasthiery: So now, if the I don't know if, like

194
00:29:14.630 --> 00:29:19.890
thomasthiery: there is a clean, simple way to do that. Great.

195
00:29:20.429 --> 00:29:33.699
thomasthiery: If there is one way that allows for more testing than others, or maybe tend to lean that way just because we will need quite a lot of of testing for for fossil, I think.

196
00:29:36.362 --> 00:29:42.810
thomasthiery: yeah, but it I mean it. It does feel like a an implementation sort of like

197
00:29:43.850 --> 00:29:51.260
thomasthiery: choice that is not like extremely. There is going to be like very hard to motivate strongly.

198
00:29:51.450 --> 00:29:52.960
thomasthiery: So

199
00:29:57.430 --> 00:30:03.246
thomasthiery: do you have other like sort of I mean, you said you didn't have strong opinions, but like

200
00:30:04.460 --> 00:30:09.789
thomasthiery: did your opinion sort of evolve? Or do you still think the same, Miguel.

201
00:30:12.740 --> 00:30:14.740
Mikhail Kalinin: On the testing side.

202
00:30:15.670 --> 00:30:16.890
Mikhail Kalinin: I think that

203
00:30:17.795 --> 00:30:24.600
Mikhail Kalinin: we can only expect so we're we're speaking about consensus layer testing rep tests.

204
00:30:24.880 --> 00:30:27.179
Mikhail Kalinin: So the there are 2 possible

205
00:30:29.020 --> 00:30:35.309
Mikhail Kalinin: there are 2 possible outcomes of the El satisfaction. Check it, either satisfied or not.

206
00:30:35.790 --> 00:30:41.419
Mikhail Kalinin: I think we cannot go beyond this level of abstraction, anyway.

207
00:30:42.850 --> 00:30:49.640
Mikhail Kalinin: and we'll just have to yield this in the and respect us.

208
00:30:53.100 --> 00:30:57.310
Mikhail Kalinin: and with the high level of abstraction

209
00:30:57.820 --> 00:31:01.680
Mikhail Kalinin: from the Clel communication. It's it's possible.

210
00:31:06.660 --> 00:31:13.679
Jihoon: I don't have any strong opinion on using the abstract function is inclusionally satisfied.

211
00:31:16.290 --> 00:31:19.589
Jihoon: But I have an opinion

212
00:31:20.040 --> 00:31:25.849
Jihoon: that if we were to use new payload call to pass the Ils.

213
00:31:26.140 --> 00:31:32.900
Jihoon: then the Cs back is better to specify it in that way.

214
00:31:33.830 --> 00:31:42.880
Jihoon: So I'm okay. If we don't check. If the State transition function call returns an error or not, if give us

215
00:31:43.070 --> 00:31:44.760
Jihoon: better abstraction.

216
00:31:45.220 --> 00:31:49.970
Jihoon: But the engine Api call, I mean the new payload call.

217
00:31:50.130 --> 00:31:57.480
Jihoon: It's better to follow the actual implementation, but I think

218
00:31:58.020 --> 00:32:00.189
Jihoon: it would be the Cl. Devs who

219
00:32:00.881 --> 00:32:03.039
Jihoon: can make a better decision.

220
00:32:04.560 --> 00:32:11.489
Mikhail Kalinin: Yeah. But if we do this, introduce this dependence into this pack, then the State transition function should have

221
00:32:11.740 --> 00:32:15.570
Mikhail Kalinin: should get the inclusion list from from somewhere, right.

222
00:32:18.620 --> 00:32:26.309
Jihoon: Yes, and isn't it the same if we were to just use is inclusionally satisfied function. Only

223
00:32:28.768 --> 00:32:34.450
Jihoon: you mean, like you, yeah, you want to put inclusion list in the broke choice, and then just pass it.

224
00:32:36.590 --> 00:32:40.326
Mikhail Kalinin: Yeah, I'm I'm just saying that if we want

225
00:32:41.090 --> 00:32:48.509
Mikhail Kalinin: So my opinion is that if we want for some reason to make inclusion list a part of notifying your payload call.

226
00:32:48.820 --> 00:32:53.600
Mikhail Kalinin: then it should rather be explicitly passed to the State transition.

227
00:32:54.120 --> 00:32:59.920
Mikhail Kalinin: and the result of these check should be explicitly returned by the State transition function.

228
00:33:00.940 --> 00:33:07.850
Mikhail Kalinin: not by an error like it is done today because it's too pythonic, but by some

229
00:33:09.216 --> 00:33:12.689
Mikhail Kalinin: protocol logic rather than some python logic.

230
00:33:13.880 --> 00:33:23.829
Mikhail Kalinin: So it's like state transition becomes a new function, which is actually 2 state transition and check inclusion dissatisfiability.

231
00:33:24.420 --> 00:33:29.839
Mikhail Kalinin: It accepts inclusion lists explicitly as a parameter, and it also returns a

232
00:33:29.960 --> 00:33:36.760
Mikhail Kalinin: not only the modified state as it is as it does today, but also returns the result of the English, and least check.

233
00:33:37.610 --> 00:33:42.470
Mikhail Kalinin: then this check can be used as is now in the Pr. By the unblock.

234
00:33:43.080 --> 00:33:46.319
Mikhail Kalinin: But I disagree with this.

235
00:33:46.966 --> 00:33:50.563
Mikhail Kalinin: Let's let's find it this way. But if there is a strong push

236
00:33:51.610 --> 00:33:54.250
Mikhail Kalinin: for you know, pass and el

237
00:33:55.168 --> 00:34:00.259
Mikhail Kalinin: to notify new payload in the consensus layers fact, and we can do it this way.

238
00:34:01.800 --> 00:34:05.099
thomasthiery: Okay. Okay. So you, if I understand correctly.

239
00:34:05.430 --> 00:34:08.159
thomasthiery: one of the pushback is also on how?

240
00:34:08.719 --> 00:34:16.629
thomasthiery: Oh, the inclusion? Yeah, I mean, I I think I agree with the general idea of

241
00:34:17.400 --> 00:34:19.680
thomasthiery: not trying to sort of

242
00:34:20.120 --> 00:34:26.449
thomasthiery: make it implicit. That is, it is like modifying the folk choice in in some way like, because it

243
00:34:26.790 --> 00:34:36.880
thomasthiery: effectively effectively is and I don't. I don't really have a problem with like having, you know.

244
00:34:37.380 --> 00:34:42.790
thomasthiery: the Il satisfiability as a an explicit input

245
00:34:43.889 --> 00:34:47.440
thomasthiery: into the folk choice function.

246
00:34:49.030 --> 00:34:54.319
thomasthiery: and also that, like the sort of like vote or not, vote is conditioned by whether the

247
00:34:54.440 --> 00:34:57.219
thomasthiery: Il condition is satisfied.

248
00:34:58.750 --> 00:35:04.412
thomasthiery: Yeah, I wouldn't mind having that. Instead of just that arrow popping up.

249
00:35:05.840 --> 00:35:17.119
thomasthiery: I'm I'm wondering whether all like other people have opinions on this. But like at at least intuitively, I I see why it's maybe a bit nicer to have it explicitly defined.

250
00:35:18.780 --> 00:35:31.020
Jihoon: I mean, if we explicitly try to change 10 transition function that we have to change all the function signatures from State transition down to process

251
00:35:31.410 --> 00:35:47.540
Jihoon: execution payload. And I think that's invasive changes. And looking at how clients are implemented, they don't. They use their own way to cache in collision list and fetch it somehow. They don't change state transition functions.

252
00:35:49.100 --> 00:35:54.110
thomasthiery: Okay? So you think it's, it's base. Basically, it's better to contain

253
00:35:54.610 --> 00:35:59.619
thomasthiery: the validity of the payload on the El side. And so

254
00:36:02.900 --> 00:36:07.160
thomasthiery: all the Cl. Has to know is whether the the payload is.

255
00:36:07.350 --> 00:36:09.810
thomasthiery: It's sort of like returns a narrow or not.

256
00:36:13.540 --> 00:36:25.150
Jihoon: Rather than changing all the you know state transition related functions, because that is how it is implemented. And for me I may be biased because I

257
00:36:25.480 --> 00:36:33.490
Jihoon: I know how, for the Cl and el are implemented. So for me, that's much easier to read and comprehend.

258
00:36:33.610 --> 00:36:43.140
Jihoon: But I also understand that there is another separate spec, for you know the specific communication. So we want to use that abstraction.

259
00:36:43.250 --> 00:36:45.479
Jihoon: So yeah, but like

260
00:36:45.600 --> 00:36:53.709
Jihoon: I, my, I'm of the opinion that making it explicit is, is a bit too invasive.

261
00:36:54.330 --> 00:36:58.959
thomasthiery: Yeah, okay, I see. Right?

262
00:36:59.180 --> 00:37:00.420
thomasthiery: And then.

263
00:37:01.640 --> 00:37:10.309
thomasthiery: yeah, I mean, if it do, if it introduces a lot of complexity on the Cl side of things, because you actually do need to change a lot of things for

264
00:37:10.885 --> 00:37:14.540
thomasthiery: if you want to explicitly change the fog choice, then

265
00:37:15.150 --> 00:37:19.940
thomasthiery: yeah, maybe I go back on what I was saying before, I I feel like.

266
00:37:21.050 --> 00:37:23.519
thomasthiery: yeah, maybe we need to balance like

267
00:37:26.360 --> 00:37:35.470
thomasthiery: simplicity of implementing the the actual thing we want to implement and and

268
00:37:35.640 --> 00:37:45.840
thomasthiery: the conceptual abstraction of what it actually does. Because I agree like that. Yeah, conceptually like, it does actually change the folk choice like we can't.

269
00:37:46.020 --> 00:37:49.220
thomasthiery: We can't really go around that. But

270
00:37:49.850 --> 00:37:55.100
thomasthiery: if it makes it much easier to constrain changes

271
00:37:55.540 --> 00:38:02.309
thomasthiery: to the El in terms of like payload, and whether it's like it's valid, basically or not.

272
00:38:03.930 --> 00:38:14.079
thomasthiery: rather than having to to change like the whole State transaction function. And and whether or like 2 vote or not for a block. I feel like I would be leaning that way.

273
00:38:14.320 --> 00:38:20.890
thomasthiery: But yeah, it's

274
00:38:24.750 --> 00:38:30.170
thomasthiery: It's hard for me to comment too much on it also because I I feel like I've been talking a lot, but I don't.

275
00:38:30.340 --> 00:38:33.899
thomasthiery: Usually I'm not to call them so.

276
00:38:37.550 --> 00:38:43.339
Jihoon: Maybe I can, you know. Try to summarize all the discussions we had here, and then

277
00:38:44.570 --> 00:38:45.870
Jihoon: I can't.

278
00:38:46.260 --> 00:38:52.569
Jihoon: I can leave that as a comment in the Pr so that everyone can take a look into it.

279
00:38:52.920 --> 00:39:02.700
Jihoon: And I don't think we have to make a decision today. So we can invite more core devs to take a look into it and then provide some feedback.

280
00:39:03.839 --> 00:39:09.030
Jihoon: Yeah. So like, I'm also okay with, like avoiding the

281
00:39:10.180 --> 00:39:16.919
Jihoon: if the State transition returns on error or not because it I feel like that somehow.

282
00:39:17.810 --> 00:39:21.709
Jihoon: mixing the clnel communication

283
00:39:22.550 --> 00:39:32.939
Jihoon: too much. But like, yeah, I think we are just circling back to the same question, like, What is what kind of what is the right level of abstraction we want?

284
00:39:34.120 --> 00:39:38.459
Jihoon: But I guess we are liking up Cl. Devs here. But yes, Mikhail.

285
00:39:41.440 --> 00:39:50.990
Mikhail Kalinin: Yeah, I just wanted to add, maybe this is kind of like, summarize my thoughts on it.

286
00:39:51.360 --> 00:39:57.069
Mikhail Kalinin: for today I agree that we should not make any decision may not make any decision. Today

287
00:39:57.350 --> 00:39:58.539
Mikhail Kalinin: we have time.

288
00:39:58.760 --> 00:40:01.760
Mikhail Kalinin: I just wanted to emphasize that

289
00:40:02.010 --> 00:40:07.339
Mikhail Kalinin: if we think that this check should be explicit.

290
00:40:07.930 --> 00:40:16.319
Mikhail Kalinin: The inclusion list is explicitly passed as a parameter. The result is explicitly returned by the State transition function.

291
00:40:16.900 --> 00:40:24.590
Mikhail Kalinin: and we are thinking that this is going to be an invasive change, then we should think that

292
00:40:24.880 --> 00:40:29.909
Mikhail Kalinin: is the implicit way of doing it also invasive.

293
00:40:30.240 --> 00:40:38.280
Mikhail Kalinin: Why, why can't we just change the semantics of the State transition. It's not only the interface, the interface is easy to to change.

294
00:40:39.240 --> 00:40:46.600
Mikhail Kalinin: but it's only the. It's also the semantics of the function. So we add one more semantics to to the State transition

295
00:40:46.810 --> 00:40:49.709
Mikhail Kalinin: in this pack, which is from the spec standpoint.

296
00:40:50.617 --> 00:40:57.540
Mikhail Kalinin: It's not. It's not good, and should be justified very well to my opinion.

297
00:40:58.610 --> 00:41:00.790
Mikhail Kalinin: so that that's just it.

298
00:41:06.750 --> 00:41:13.059
thomasthiery: Yeah, can you like? Just so, I'm I'm sure I'm I understand what you're saying is like.

299
00:41:13.390 --> 00:41:18.640
thomasthiery: yeah, if we imagine we contain like

300
00:41:19.170 --> 00:41:25.100
thomasthiery: the the issue of having to change the whole 4 choice function by just

301
00:41:25.590 --> 00:41:37.339
thomasthiery: like conceptually, on like returning an error of like saying, the payload is is valid or is invalid. And so it's like, basically, you either

302
00:41:37.530 --> 00:41:54.640
thomasthiery: explicitly add a con like a a parameter, and like another sort of input to the for choice function, or you add an invalidity condition to the payload on the Es side.

303
00:41:55.351 --> 00:42:01.460
thomasthiery: And you're saying both are like in invasive

304
00:42:04.310 --> 00:42:15.609
thomasthiery: Is that is that what you're saying is like, basically you you I mean, you still have differences in terms of how how hard it's gonna be to implement on the both on the Cl. And es. I know.

305
00:42:16.470 --> 00:42:23.119
Mikhail Kalinin: No, I'm just. Yeah. I'm saying that. If we can't for some reason make this check explicit

306
00:42:23.250 --> 00:42:26.710
Mikhail Kalinin: in the State transition, not in the folk choice in the State transition.

307
00:42:26.710 --> 00:42:27.000
thomasthiery: Yeah.

308
00:42:27.290 --> 00:42:33.430
Mikhail Kalinin: And and the reason is that it is invasive. So we we should.

309
00:42:33.550 --> 00:42:38.940
Mikhail Kalinin: I don't see the difference between implicitly doing it and explicitly doing the same thing.

310
00:42:39.360 --> 00:42:51.189
Mikhail Kalinin: So, but explicit is explicitly doing it. Just, you know, highlights us that these changes in ways I'm just trying to try to explain why, I think it's a you know.

311
00:42:51.370 --> 00:42:58.040
Mikhail Kalinin: it's it's a wrong way to modify state transition. In this case. We know that these changes like

312
00:42:58.903 --> 00:42:59.890
Mikhail Kalinin: you know.

313
00:43:01.454 --> 00:43:11.930
Mikhail Kalinin: Yeah, because it's too invasive for me. It's it's too invasive. It's very invasive for the State transition to have some specifics about how Cl and Dl communicate.

314
00:43:13.420 --> 00:43:25.929
Jihoon: Yeah, I get what you mean. But I have a 1 question for you. So whether we change function signatures or not, if we decide to use new payload engine. Api call to pass the Ils.

315
00:43:26.670 --> 00:43:30.679
Jihoon: Do you still think that we should not specify in the spec.

316
00:43:33.030 --> 00:43:39.515
Mikhail Kalinin: Oh, I I think with that we should make it explicit, like a path to aisle, to state transition, and return the

317
00:43:40.340 --> 00:43:48.880
Mikhail Kalinin: not the error, not by doing doing it, by handling the error, by catching the error because it it becomes a spec, right? So it becomes a

318
00:43:50.000 --> 00:43:53.419
Mikhail Kalinin: a logic, a spec logic. So it should be written in a

319
00:43:53.950 --> 00:44:06.619
Mikhail Kalinin: not not in the python way, you know, but it should rather be written in this pack logic way, so like a more I don't know. I I probably don't know right words to how to express this.

320
00:44:12.290 --> 00:44:13.060
thomasthiery: Okay.

321
00:44:13.360 --> 00:44:21.500
thomasthiery: yeah. Well, I I feel like there are 2 things. But correct me if I'm wrong, one is you are saying that it is a complex

322
00:44:21.970 --> 00:44:29.410
thomasthiery: change, that is, and whether it's explicit and implicit, like it actually does change the folk choice.

323
00:44:29.640 --> 00:44:35.300
thomasthiery: I mean, I think that's true. But like. I think, most of people that have been working on for solar like

324
00:44:35.740 --> 00:44:40.810
thomasthiery: Ready, probably assuming that it's worth adding this

325
00:44:41.170 --> 00:45:08.250
thomasthiery: complexity and change to the protocol because it it gives a lot. So I think there is a trade off there that I mean, yeah. You know, every like most protocol upgrades will bring some added complexity. And then, if the trade off is like in the favor of but that added complexity will actually give us something we really care about. Then it's it's probably worth doing.

326
00:45:08.778 --> 00:45:12.130
thomasthiery: And then the the second very different

327
00:45:12.220 --> 00:45:19.119
thomasthiery: thing you're saying is like you don't like the pythonic way of expressing of like, just like a.

328
00:45:19.420 --> 00:45:25.850
thomasthiery: you know, having like a an error expressed to oh.

329
00:45:27.150 --> 00:45:43.770
thomasthiery: to like surface. The fact that the payload didn't satisfy the inclusion list. And that's yeah. I mean, that's very. That's 2 very, very different questions to me. I think the second one

330
00:45:44.551 --> 00:45:56.169
thomasthiery: is worth maybe trying to express it in in a different way. For the 1st one, if it's just more general comment about like it actually brings some complexity into the protocol.

331
00:45:56.797 --> 00:46:02.909
thomasthiery: And you're not sure it always the benefits of having fossil. In the 1st place.

332
00:46:03.503 --> 00:46:07.749
thomasthiery: Yeah, we we can definitely have that discussion. But it's it's a very different one.

333
00:46:09.870 --> 00:46:16.989
Mikhail Kalinin: Yeah. And and the 3rd concern is that we are going to introduce something

334
00:46:17.460 --> 00:46:23.739
Mikhail Kalinin: to the State transition function that does not have anything to deal with the the State transition itself.

335
00:46:24.090 --> 00:46:27.920
Mikhail Kalinin: I mean, it does not affect the result of the State transition function.

336
00:46:28.520 --> 00:46:33.920
Mikhail Kalinin: And that's the problem. So we are just adding an additional semantics to this function.

337
00:46:35.880 --> 00:46:38.659
Mikhail Kalinin: There are, there are actually 2 functions in one.

338
00:46:38.980 --> 00:46:45.170
Mikhail Kalinin: This is how this spec works today. This one, my other concern.

339
00:46:45.530 --> 00:46:55.030
Mikhail Kalinin: Yeah. But I think, yeah, let's just stop here. And probably if anyone yeah, if

340
00:46:55.490 --> 00:47:03.200
Mikhail Kalinin: if if this discussion will be relevant we can continue next time, or you know it's sometime after.

341
00:47:03.990 --> 00:47:06.414
thomasthiery: Yeah, sounds good. Okay,

342
00:47:07.660 --> 00:47:11.179
thomasthiery: And if we can also ask, like, the opinion of

343
00:47:11.992 --> 00:47:21.169
thomasthiery: some other people, I guess. Yeah, if I mean Jiho. And you said you were okay to do that if we can summarize things and

344
00:47:21.500 --> 00:47:24.740
thomasthiery: maybe post it in the Pr. But also like post it on the

345
00:47:24.970 --> 00:47:37.450
thomasthiery: Il or like inclusion list discord chat. So people can have a look and sort of like comment on this, I think, might be useful to just have a bit more visibility on this.

346
00:47:41.168 --> 00:47:43.760
thomasthiery: yeah. Does that sound good?

347
00:47:45.970 --> 00:47:52.696
Jihoon: Yeah, I can. I'm just happy that just like use this time to

348
00:47:53.800 --> 00:47:56.749
Jihoon: Bring our thoughts on the table, and

349
00:47:57.060 --> 00:48:01.189
Jihoon: let's see, like, what kind of options are ahead of us.

350
00:48:01.360 --> 00:48:04.780
Jihoon: And yeah, I can, of course, like, share the

351
00:48:07.240 --> 00:48:12.300
Jihoon: oh, no, no, no. I really appreciate your feedback. And yeah, please, just yeah.

352
00:48:12.800 --> 00:48:16.184
Jihoon: And yeah, thank you for your providing feedback. And

353
00:48:17.269 --> 00:48:36.239
Jihoon: Let me share the summarize in the in the discord. Maybe. So that if my summarize is wrong or off, then please just leave a comment there, so we can have a better summarized. Be a summary before, you know, asking other core devs for or feedback.

354
00:48:36.520 --> 00:48:37.720
Jihoon: So yeah.

355
00:48:40.470 --> 00:48:43.830
thomasthiery: Yeah. Sounds great. Cool.

356
00:48:45.026 --> 00:48:54.110
thomasthiery: Okay. So are there on other like items that people wanted to talk about other than than this.

357
00:48:55.210 --> 00:49:00.950
Jihoon: Actually I have. It's a it's a short one So

358
00:49:01.060 --> 00:49:06.260
Jihoon: in the beginning Mehdi shared 2 prs. One is a Cl spec, and the other is a

359
00:49:06.440 --> 00:49:08.850
Jihoon: exigent Api spec,

360
00:49:10.900 --> 00:49:11.820
Jihoon: So

361
00:49:12.910 --> 00:49:20.109
Jihoon: in the execution. Api spec, I'd like to change, to use fork choice updated instead of update payload include

362
00:49:20.240 --> 00:49:31.489
Jihoon: inclusion list. It's because inclusion list are part of payload building process, and it seems there is no strong objection to overloading

363
00:49:31.590 --> 00:49:36.580
Jihoon: payload attributes. So I've been asking people about like

364
00:49:36.760 --> 00:50:02.550
Jihoon: what would be better engine Api last week. And then this is the conclusion that I got so and so using forecast updated seems semantically better. The Cl can call for choice, updated, for example, at the beginning of the slot with without inclusion list, and then it can call it again with enclosure list after the proposals. Inclusion list cut off.

365
00:50:03.300 --> 00:50:08.433
Jihoon: And right, I'm sorry. Keep just using our time. But lastly,

366
00:50:09.510 --> 00:50:33.410
Jihoon: this is also because feedback. I think we should introduce Il broadcast deadline at 12 seconds into the slot to avoid split view by Il equivocation. So let's consider this scenario. A proposer proposes a block at 12 seconds into the into the slot, and the block doesn't satisfy some. Il.

367
00:50:33.540 --> 00:50:38.410
Jihoon: then 50% of our testers vote for his parent.

368
00:50:38.970 --> 00:50:53.239
Jihoon: But some Il committee equivocates that il, and let's say the rest of our testers recognize this equivocation and exclude that il during il validation. So they vote for that block.

369
00:50:53.560 --> 00:51:21.150
Jihoon: So although this is this might be a rare edge case. Introducing il broadcast deadline at 12 seconds into the slot will avoid this tester, split view before and after their attestation. Because we do not reevaluate il validation, even if we have il equipation after a tester finish their attestation.

370
00:51:21.990 --> 00:51:22.730
thomasthiery: Right?

371
00:51:22.990 --> 00:51:28.900
thomasthiery: Okay? And you're saying we don't have an explicit date like sort of like deadline at 12 seconds. Now, right.

372
00:51:29.760 --> 00:51:31.880
Jihoon: We don't have it, do we?

373
00:51:31.880 --> 00:51:34.279
thomasthiery: No, I don't think we do. Yeah, you're you're right.

374
00:51:34.420 --> 00:51:38.559
thomasthiery: Yeah, yeah, okay, yeah. So just adding.

375
00:51:38.840 --> 00:51:43.442
thomasthiery: Yeah, that that actually sounds good.

376
00:51:44.590 --> 00:51:51.649
thomasthiery: But maybe good to also write it down. So more people can give input. It does make sense to me, like.

377
00:51:52.200 --> 00:51:56.560
thomasthiery: yeah, we should have a sort of like end timer.

378
00:51:58.950 --> 00:52:11.225
thomasthiery: But yeah, if you have a chance to just write down like in it doesn't have to be like sort of like fleshed out just like the give you like, write down the idea, and so we can just

379
00:52:12.206 --> 00:52:16.840
thomasthiery: add it to the spec. Then I think that would be quite useful.

380
00:52:18.490 --> 00:52:25.070
Jihoon: Right that let me share that summaries of 2 thing. By tomorrow.

381
00:52:25.560 --> 00:52:27.068
thomasthiery: Yeah, yeah, no, that sounds good.

382
00:52:28.370 --> 00:52:34.430
thomasthiery: Great. Okay, no. Thanks for sharing. That's that's useful.

383
00:52:35.910 --> 00:52:44.369
thomasthiery: okay, maybe a more general high level comment to finish is like, I think it's nice to

384
00:52:44.930 --> 00:52:47.450
thomasthiery: like, really sort of hash down

385
00:52:47.620 --> 00:52:55.869
thomasthiery: implementation details and sort of like, discuss exactly how the the spec should should look like. But

386
00:52:56.200 --> 00:53:04.979
thomasthiery: I feel like it's gonna be done anyways when or if let's say fossil gets Cfid.

387
00:53:07.040 --> 00:53:27.380
thomasthiery: One thing that I sort of graphed in in some chat. So it's it's a bit informal, I think. But is that there might be some like additional constraints on eips if they don't come with like specs spec tests. So I think it would be important to also sort of like.

388
00:53:28.500 --> 00:53:41.219
thomasthiery: have some doesn't have to be exhaustive. It doesn't have to, you know, cover all the crazy, weird edge cases. But I think it would be nice to also sort of push on this soonish? Because.

389
00:53:41.380 --> 00:53:47.009
thomasthiery: yeah, we are like, basically in the middle of like of discussions around whether or to

390
00:53:47.370 --> 00:53:50.780
thomasthiery: to include Efs or not.

391
00:53:51.347 --> 00:53:54.770
thomasthiery: So if that is a factor, I think

392
00:53:55.411 --> 00:54:00.469
thomasthiery: it, it would be nice to have like spectest and sort of like be ahead of the curve.

393
00:54:00.770 --> 00:54:02.419
thomasthiery: although I don't know.

394
00:54:02.420 --> 00:54:10.130
Justin Traglia: We are just to be clear. We are publishing spec tests, reference tests for fossil eip, 7, 8 0, 5, correct.

395
00:54:12.100 --> 00:54:14.559
thomasthiery: Well, wait what? Olive.

396
00:54:15.316 --> 00:54:17.770
Justin Traglia: There are. I mean, it's mostly like the

397
00:54:18.630 --> 00:54:25.640
Justin Traglia: the standard suite of tests to be clear that I don't believe there are any specific like inclusion list tests. Yet.

398
00:54:25.640 --> 00:54:33.220
thomasthiery: Yeah. Okay, yeah. Okay, nice. Okay. Good. Good to know. Yeah. I I had in mind, like the sort of like, yeah, trying to test. Some

399
00:54:33.320 --> 00:54:43.929
thomasthiery: even basics test around like inclusion this per se of, or what can happen? Or I don't know, you know, equivocation and stuff like this? Or

400
00:54:44.050 --> 00:54:46.280
thomasthiery: do we have time to propagate?

401
00:54:47.350 --> 00:54:53.260
thomasthiery: Different objects in time? Are the deadlines set correctly? All of these questions are like.

402
00:54:53.460 --> 00:55:05.309
thomasthiery: I think there are like we we got also, like some really big margins. So I think we are all safe. But like, yeah, just saying, it would be nice to sort of have some tests run around that specifically, but.

403
00:55:05.510 --> 00:55:07.980
Justin Traglia: Alright, I agree, and that'll be

404
00:55:08.090 --> 00:55:10.759
Justin Traglia: quite a lot, I thought. That's fine.

405
00:55:11.210 --> 00:55:11.840
thomasthiery: Yeah.

406
00:55:12.571 --> 00:55:28.729
thomasthiery: okay, cool. And yeah, that being said, I think, like some other uips like, are not even close to being even like spect, or defined or specified. So we I we shouldn't like

407
00:55:29.150 --> 00:55:32.325
thomasthiery: take these 2 crazily.

408
00:55:34.570 --> 00:55:40.329
thomasthiery: I don't think it would be like a super hard requirement, but just like sort of like, nice to keep in mind. Yeah, Jeremy.

409
00:55:42.000 --> 00:55:56.855
Jihoon: Right. So I just wanted to ask you about how much coverage test coverage we want, because we, our spec is changing so, and that affects on how the spec test should be written.

410
00:55:57.470 --> 00:56:04.639
Jihoon: But I can write tests that are not affected by the changing spec. And would it be okay.

411
00:56:04.910 --> 00:56:28.200
thomasthiery: Yeah, I think we should start by having this test in in any case. Like, maybe it's a good way to think about it. I think, like 2, maybe dimensions are important. The one is like, do we want to test like very obvious failure cases like we don't want to necessarily get into like the super weird edge cases now, and like, we want to test

412
00:56:28.970 --> 00:56:35.089
thomasthiery: things that are less likely to change given like the spec considerations.

413
00:56:35.606 --> 00:56:44.389
thomasthiery: Yeah, if we can have some tests that fit well with those 2 dimensions, I think that would be good enough. So yeah.

414
00:56:45.650 --> 00:57:07.720
Jihoon: Okay? So I think the test we can have today would be something not related to the changing part which would be which is related related to Inclusion List Committee and that kind of stuff. And since we are currently discussing where to put inclusion list, and so on, so that can, that part cannot be

415
00:57:07.870 --> 00:57:10.640
Jihoon: tested. Unfortunately.

416
00:57:12.090 --> 00:57:12.880
thomasthiery: Yeah, okay.

417
00:57:12.880 --> 00:57:13.210
Jihoon: Because.

418
00:57:15.140 --> 00:57:18.780
thomasthiery: Yeah, yeah, we can. We can start with that. I think it's fine.

419
00:57:20.346 --> 00:57:41.029
thomasthiery: I I just don't want yeah, I just don't want to like block things, because the spec might change like I feel like. In any case, the spec will probably change like once a lot of people look at it and like, try to implement it in in and like, try to actually work on it very seriously

420
00:57:41.380 --> 00:57:43.060
thomasthiery: for like future folks.

421
00:57:44.030 --> 00:57:51.800
thomasthiery: But yeah, let's let's definitely start with like this. That wouldn't be affected by this. And and we can just like check back in a couple of weeks or something.

422
00:57:55.210 --> 00:58:07.939
Jihoon: Yeah, sounds great. So I will just unload the spec test that I already made, and I will just move on to the El Spec test. While we are discussing the Cl. Spec.

423
00:58:08.720 --> 00:58:09.970
thomasthiery: Okay? Awesome.

424
00:58:10.400 --> 00:58:12.059
thomasthiery: Yeah, that sounds great. Thanks.

425
00:58:13.359 --> 00:58:17.319
thomasthiery: Cool. Anything else from anyone else.

426
00:58:22.040 --> 00:58:29.160
thomasthiery: Okay, well, thanks a lot for coming. And see you all. Online.

427
00:58:29.270 --> 00:58:30.250
thomasthiery: Bye-bye.

428
00:58:31.440 --> 00:58:32.270
Justin Traglia: Bye, everyone.

429
00:58:33.020 --> 00:58:33.790
Mehdi Aouadi: Mate.

