WEBVTT

1
00:05:15.700 --> 00:05:16.590
thomasthiery: Hello!

2
00:05:18.390 --> 00:05:20.290
Pooja Ranjan: Hey, Thomas, hey, everyone.

3
00:05:22.900 --> 00:05:23.870
Justin Traglia: Hello!

4
00:05:28.670 --> 00:05:29.390
Jihoon: Hello!

5
00:07:08.360 --> 00:07:13.189
thomasthiery: A a, maybe. Let's wait for one more minute before we start.

6
00:07:45.760 --> 00:07:49.760
thomasthiery: Okay, thanks. Everyone for joining.

7
00:07:54.340 --> 00:08:01.300
thomasthiery: Great thanks. Yeah. Thanks for joining. This is also breakout number 12.

8
00:08:02.207 --> 00:08:08.330
thomasthiery: Yeah, I don't think I have tons of updates on the research side.

9
00:08:08.460 --> 00:08:14.569
thomasthiery: It was mostly around planning the fossil session for Berlin.

10
00:08:15.140 --> 00:08:18.970
thomasthiery: Here is a little

11
00:08:19.460 --> 00:08:25.400
thomasthiery: note I made with the with the speakers and what we're gonna talk about when we are there.

12
00:08:25.690 --> 00:08:29.430
thomasthiery: So I think it's gonna be quite excited. And we

13
00:08:30.324 --> 00:08:33.640
thomasthiery: we have lots to to talk about. So

14
00:08:35.600 --> 00:08:40.010
thomasthiery: yeah, stay tuned for that, I think. We will

15
00:08:40.470 --> 00:08:52.409
thomasthiery: discuss both like fossil as a candidate for Glamsterdam. I think there is a big question around the urgency of fossil and

16
00:08:53.071 --> 00:09:04.239
thomasthiery: maybe I encourage you to do something about that. How much of a priority fossil is compared to scanning vips?

17
00:09:04.390 --> 00:09:10.939
thomasthiery: I think this has been like a big question these days. So if you have opinions, or if you

18
00:09:11.774 --> 00:09:17.630
thomasthiery: have thought about this, yeah, reach out or or feel free to sort of like.

19
00:09:19.660 --> 00:09:22.029
thomasthiery: talk to me about it or anyone else.

20
00:09:23.860 --> 00:09:27.859
thomasthiery: And yeah. And then we have like talks about like.

21
00:09:28.300 --> 00:09:42.010
thomasthiery: you know, more like of the research on Zk fossil and statelessness and fossil sort of like interactions with other proposals and upgrades, which is always sort of nice to explore.

22
00:09:44.192 --> 00:09:48.090
thomasthiery: yeah. And that's basically it for me.

23
00:09:49.005 --> 00:09:50.195
thomasthiery: I do.

24
00:09:51.090 --> 00:10:01.180
thomasthiery: We do have a presentation today. And I thought we worked on together. But she's been doing most of the well by far.

25
00:10:01.737 --> 00:10:07.169
thomasthiery: So I'm very thankful for you to give that presentation, and I think

26
00:10:07.280 --> 00:10:09.679
thomasthiery: we're gonna start with this already.

27
00:10:13.790 --> 00:10:19.390
Aikaterini-Panagiota Stouka: Thank you, Thomas. Maybe maybe. Should I share my screen now, or we should wait.

28
00:10:20.110 --> 00:10:22.009
thomasthiery: Yeah, yeah, you can just share your screen.

29
00:10:22.620 --> 00:10:28.399
Aikaterini-Panagiota Stouka: Thanks. Hello, everyone! Let me just give me 1 10 seconds to share my screen.

30
00:11:11.480 --> 00:11:13.480
Aikaterini-Panagiota Stouka: Hey? Can you see my screen now?

31
00:11:14.980 --> 00:11:15.610
thomasthiery: Yes.

32
00:11:15.950 --> 00:11:19.260
Aikaterini-Panagiota Stouka: Oh, great, great! Hello, everyone! I'm Katharina.

33
00:11:19.260 --> 00:11:23.389
thomasthiery: Can you just click on the slideshow mode? Maybe.

34
00:11:23.390 --> 00:11:32.069
Aikaterini-Panagiota Stouka: A it is in a slight so mode. I don't know if so should I? What.

35
00:11:32.070 --> 00:11:33.630
thomasthiery: Whole window.

36
00:11:33.940 --> 00:11:36.500
Aikaterini-Panagiota Stouka: Okay, let me see if I can minimize this.

37
00:11:40.890 --> 00:11:46.349
Aikaterini-Panagiota Stouka: You don't see you see the whole window? You don't see the the slide.

38
00:11:46.850 --> 00:11:49.740
thomasthiery: I mean we see it, but like we don't see it full screen.

39
00:11:51.120 --> 00:11:52.799
Aikaterini-Panagiota Stouka: Okay, let me sew.

40
00:11:54.280 --> 00:11:54.819
Aikaterini-Panagiota Stouka: Hmm.

41
00:11:58.650 --> 00:12:09.189
Aikaterini-Panagiota Stouka: okay, let me see, because it is slide so in my window. But maybe in the sharing mode it's not. Maybe I will better share my so my whole screen, maybe this works better

42
00:12:09.810 --> 00:12:12.339
Aikaterini-Panagiota Stouka: let's do that yeah, yeah.

43
00:12:44.160 --> 00:12:53.390
Aikaterini-Panagiota Stouka: sorry, give me a give me, one, second, because, like, there is a a synchronization problem with the Google slides. I think this was the problem.

44
00:12:56.226 --> 00:12:58.460
Aikaterini-Panagiota Stouka: Give me one second, please.

45
00:13:37.830 --> 00:13:42.770
Aikaterini-Panagiota Stouka: Sorry for that. There were some connection problems, but I think now it has been fixed.

46
00:13:43.030 --> 00:13:44.480
Aikaterini-Panagiota Stouka: Let me see.

47
00:13:48.070 --> 00:13:49.530
Aikaterini-Panagiota Stouka: Oh, it's again!

48
00:13:50.120 --> 00:13:52.410
Aikaterini-Panagiota Stouka: Oh, I think it's fixed now.

49
00:13:53.260 --> 00:13:55.079
Aikaterini-Panagiota Stouka: Can you see now my screen.

50
00:13:55.080 --> 00:13:55.880
thomasthiery: It's perfect.

51
00:13:55.880 --> 00:14:00.849
Aikaterini-Panagiota Stouka: Great great. There were some connection problem today. But I think now it's it's fine.

52
00:14:01.090 --> 00:14:20.849
Aikaterini-Panagiota Stouka: great! Hello, everyone. So I'm Katharina. I'm working in. Never mind, and this is a very recent joint work with Julian Ma. And Thomas Thierry, and we uploaded very recently to Archive, and at the end of the slides at the end of the presentation. I have also the QR. Code.

53
00:14:21.020 --> 00:14:29.799
Aikaterini-Panagiota Stouka: This is the title of the paper, just a small legal disclaimer that it's not any type of recommendation or advice this presentation.

54
00:14:30.390 --> 00:14:51.599
Aikaterini-Panagiota Stouka: And let's 1st discuss a very high level, which was the objective of this work. So in this work we propose 2 concrete payment mechanisms for fossil that enhance the sensorship, resistance. Other bribery attacks during the presentation. We will explain what exactly this means.

55
00:14:51.700 --> 00:14:58.409
Aikaterini-Panagiota Stouka: and also we would like to retain some good incentive properties of the current ethereum fee mechanism.

56
00:14:58.710 --> 00:15:15.660
Aikaterini-Panagiota Stouka: and in order to prove our statements formally to prove exactly what censorship resistance we have, and what incentive properties we generalized existing literature and specifically timorev cadence model in the transaction fee mechanism, design.

57
00:15:17.050 --> 00:15:42.820
Aikaterini-Panagiota Stouka: Before I start to discuss the bribery attack. I will just give a small overview of the 1st protocol, you already know. But just to highlight, what is the honest behavior so like just a brief overview of what all the other parties do when everybody behaves honestly.

58
00:15:43.438 --> 00:15:48.449
Aikaterini-Panagiota Stouka: And later we will see, like the difference what like happens, other bribing attacks.

59
00:15:48.790 --> 00:16:03.489
Aikaterini-Panagiota Stouka: So, as you already know, in fossil, we have users that submit their transactions to the main pool and the Inclusion List Committee, which is different. It's elected in every slot, and it's different

60
00:16:03.770 --> 00:16:28.869
Aikaterini-Panagiota Stouka: 2 transactions from the Mempool, and they put them in their inclusion list one list per member. They broadcast this inclusion list to the validators and to the attestors, and later the builder. The person who will construct the blog will see the inclusion list and create their block.

61
00:16:29.300 --> 00:16:40.749
Aikaterini-Panagiota Stouka: and this block has to respect some requirements, and if these requirements are not met, the attestors later can reject the block.

62
00:16:41.060 --> 00:16:49.740
Aikaterini-Panagiota Stouka: I. So the requirements say that the builder should include the inclusion list, if there is space.

63
00:16:50.030 --> 00:17:01.030
Aikaterini-Panagiota Stouka: but there are some cases when they can omit them. So, for example, if we are under congestion, meaning that there is not enough space for all the transactions in the main pool

64
00:17:01.370 --> 00:17:05.800
Aikaterini-Panagiota Stouka: the builder has can create a full block.

65
00:17:06.109 --> 00:17:09.920
Aikaterini-Panagiota Stouka: omit the inclusion list, and this block will be valid.

66
00:17:10.339 --> 00:17:12.130
Aikaterini-Panagiota Stouka: And also

67
00:17:12.589 --> 00:17:22.450
Aikaterini-Panagiota Stouka: it's important to recall that in order to to avoid Mef. Transaction in Inclusion List, the Inclusion List

68
00:17:22.630 --> 00:17:35.630
Aikaterini-Panagiota Stouka: are executed at the end of the block. So, like the blockbut user has the option to put other transactions in the top of the block and put the inclusion list, but at the end.

69
00:17:36.210 --> 00:17:44.239
Aikaterini-Panagiota Stouka: So this means that if in the top of the block there is a transaction that drains a center's balance

70
00:17:44.620 --> 00:17:47.190
Aikaterini-Panagiota Stouka: from the other transactions in inclusion list.

71
00:17:47.310 --> 00:17:55.629
Aikaterini-Panagiota Stouka: then this transaction could invalidate them. But an honest user could never create such transactions.

72
00:17:56.150 --> 00:18:02.039
Aikaterini-Panagiota Stouka: So this is the honest behavior, so like, if if everybody like behaves honestly.

73
00:18:02.910 --> 00:18:15.899
Aikaterini-Panagiota Stouka: And now we will see what happened when we have bribing attacks. We generalize the data tool and we discuss several types of bribing attacks, but the simplest one is the following.

74
00:18:16.200 --> 00:18:36.430
Aikaterini-Panagiota Stouka: we assume that there is an entity who is malicious, like just wants to censor to pay and censor a transaction, a target transaction, and this entity is willing to pay money to the includers and or the block producer to censor a transaction.

75
00:18:37.260 --> 00:18:48.060
Aikaterini-Panagiota Stouka: And this can be very simple. For example, they say that I will give you this. They say, to the include their sort of the block producer, that they will give them money if they just omit this transaction.

76
00:18:48.230 --> 00:18:59.060
Aikaterini-Panagiota Stouka: or they can tell them more complicated rules, for example, that okay, they will pay them only if the attack is successful, and all the parties

77
00:18:59.520 --> 00:19:14.380
Aikaterini-Panagiota Stouka: omit the transaction. But for our presentation we can just assume that the briber is an entity that pays the includer. So the block producer when they, censor or otherwise, omit

78
00:19:14.500 --> 00:19:25.950
Aikaterini-Panagiota Stouka: the target transaction from the inclusion list, or like the block. So this is for the purpose of this presentation. This will be a briber.

79
00:19:27.050 --> 00:19:32.060
Aikaterini-Panagiota Stouka: and if we have this external entity now we will discuss

80
00:19:32.190 --> 00:19:43.470
Aikaterini-Panagiota Stouka: what like maybe some possible deviation a block producer could do. If the bribe was very high.

81
00:19:44.050 --> 00:20:01.480
Aikaterini-Panagiota Stouka: So, for example, in these attacks the block producer would like to take the bribe and omit the transaction, but on the other side. They are afraid of their block being rejected by attesters, because

82
00:20:01.690 --> 00:20:03.660
Aikaterini-Panagiota Stouka: if the target transaction

83
00:20:04.080 --> 00:20:26.489
Aikaterini-Panagiota Stouka: is in an inclusion list, then the and the block producer, we are not under congestion, which means that the block has empty space. The block producer cannot just like ignore the transaction, because okay, they will take the bribe, but, like the the block, will be invalid, so like they will lose their holy rewards.

84
00:20:26.510 --> 00:20:43.989
Aikaterini-Panagiota Stouka: So the block user could make some other like things to take the bribe, but make the block valid. One example is that they could just create transaction for them, originated from from themselves

85
00:20:44.800 --> 00:20:49.570
Aikaterini-Panagiota Stouka: them in the block to make it full, and like to pretend that there is congestion

86
00:20:49.640 --> 00:21:06.910
Aikaterini-Panagiota Stouka: every time, like we we call this transaction fake because they are not originated from the users, but like they are real transaction. When we say fake, we mean that they don't use as transactions. They are like originated from the block producer for an attack, but

87
00:21:06.910 --> 00:21:25.230
Aikaterini-Panagiota Stouka: if we see them and they are valid transactions. So this is one thing that the block producer can do. Of course this has a cost, because, like the block producer, to put all these transactions in the block, they have to pay the burning fee for all these transactions, which means that, like that the bribe should be high enough

88
00:21:25.420 --> 00:21:32.210
Aikaterini-Panagiota Stouka: in order to make them be in this like to follow this axiom.

89
00:21:32.950 --> 00:21:38.790
Aikaterini-Panagiota Stouka: but, like this is one thing that a deviant block producer could do.

90
00:21:39.000 --> 00:21:52.629
Aikaterini-Panagiota Stouka: Another deviant strategy that a block producer may may attempt is the following, and they try to spam menpool

91
00:21:53.160 --> 00:21:56.199
Aikaterini-Panagiota Stouka: in order to make includers

92
00:21:56.330 --> 00:22:22.530
Aikaterini-Panagiota Stouka: prefer their transactions and ignore the target transaction. So somehow they try to create many, many transactions. So includers select the transactions for the blockbut user because it has higher fee or whatever, and they don't put the target transaction there. So the blockbut user does not have to respect this transaction. They can ignore it and take the bribe.

93
00:22:22.650 --> 00:22:44.340
Aikaterini-Panagiota Stouka: Of course this has again a huge cost, because, like all this transaction, if they make it to the inclusion list later, they have to be in the block, and again, the block producer has to pay the burning fee and the same thing. But however, the block producer has an advantage that has the top of the block. This means

94
00:22:44.570 --> 00:23:07.830
Aikaterini-Panagiota Stouka: that they could create one single transaction that drains the balance of the center of the other transactions and make them invalid. So this means that now he can omit them and not pay the bank fee. So what the Bluecode user achieve is that the spam inclusion list.

95
00:23:07.990 --> 00:23:24.679
Aikaterini-Panagiota Stouka: A target transaction which is about to be censored does not make it an inclusion list. The user ignores it takes the bribe, and on the other side has not to respect their own fake transactions, because now they are invalidated by a new transaction.

96
00:23:24.810 --> 00:23:53.059
Aikaterini-Panagiota Stouka: So this is like something. This is a deviant strategy, and in our case what we do is we were setting a payment mechanism that make this deviant strategy more costly, which means that a briber would need higher bribe like in order to make a block user do this. So like we were setting, how like we could make this more expensive for the briber.

97
00:23:53.230 --> 00:23:55.330
Aikaterini-Panagiota Stouka: But before we see him.

98
00:23:55.530 --> 00:24:14.430
Aikaterini-Panagiota Stouka: what like? Why, this is more expensive, how can be more expensive? And continue? We will just make a summary of what we discussed, and see like now, how the fossil protocol is, when, like the parties, are not honest, they do also other things, so summarizing

99
00:24:14.660 --> 00:24:40.610
Aikaterini-Panagiota Stouka: in the 1st phase. All the parties, users includeers and block producers send transactions to the main pool. The transactions that come from includers or block producers are called fake, and here we take into account also deviant strategies from the block producer, where they try to spam the main pool. So like, in the 1st phase, we have, like this main pool that has transactions from everybody

100
00:24:41.000 --> 00:24:49.170
Aikaterini-Panagiota Stouka: in the next phase, includeers again, like can select transactions from the maple, but also they can put their own transactions.

101
00:24:49.490 --> 00:24:59.119
Aikaterini-Panagiota Stouka: Maybe if this gives them some regard or whatever, but they are allowed to do so to put their own transaction there.

102
00:24:59.820 --> 00:25:25.610
Aikaterini-Panagiota Stouka: and finally, the block producer see the inclusion list, and they can put transaction from the map from the inclusion list, but also they have the option to put their own transaction which are called fake again, and they can put them in the blog. So now this is not like the honest, the status, because honest, includes a block producer have the target goal to just put transactions from a user, it's like

103
00:25:26.070 --> 00:25:37.060
Aikaterini-Panagiota Stouka: a cover strategies where, like, some parties may want to create their own transactions to to if they are under a bribing like attempt.

104
00:25:37.170 --> 00:25:43.079
Aikaterini-Panagiota Stouka: So this is the summary of how like the protocol will look if like there were bribery.

105
00:25:44.290 --> 00:25:48.260
Aikaterini-Panagiota Stouka: and as we discussed before, and

106
00:25:48.390 --> 00:26:01.119
Aikaterini-Panagiota Stouka: we have shown that when there is no pedestrian, which means like that, the block is not full, we have seen that the minimum bribe.

107
00:26:01.240 --> 00:26:10.070
Aikaterini-Panagiota Stouka: We have proved that the minimum bribe a briber needs to censor a transaction is the sum

108
00:26:10.640 --> 00:26:13.780
Aikaterini-Panagiota Stouka: of 2 components. One is the

109
00:26:14.040 --> 00:26:17.469
Aikaterini-Panagiota Stouka: fee of the transaction that they want to censor.

110
00:26:17.740 --> 00:26:26.349
Aikaterini-Panagiota Stouka: because, like, if the block producer ignores it, they will not take this fee, of course, and the other is the cost of the attack we described before.

111
00:26:26.350 --> 00:26:51.450
Aikaterini-Panagiota Stouka: because, like the block producer, in order to be able to censor this transaction without, have their block rejected, they should perform the attack we discussed, which is like spamming the main pool, and later invalidate their own transaction with a single transaction, and pay for this attack, so like in order for the briber. To make a bribing a successful attack, they need to pay both the block producer fee

112
00:26:51.500 --> 00:27:04.470
Aikaterini-Panagiota Stouka: and to give a briber higher of the cost of this action that the block user needs to do in order to ignore the transaction without having an invalid block.

113
00:27:04.640 --> 00:27:09.680
Aikaterini-Panagiota Stouka: And the interesting thing is that we? We have shown that.

114
00:27:10.110 --> 00:27:20.990
Aikaterini-Panagiota Stouka: And when, like the when we are in Pbs, which means like that, the builder is not 100% sure that they will be elected

115
00:27:21.240 --> 00:27:27.069
Aikaterini-Panagiota Stouka: in these cases when we are not also under congestion, then it happens that

116
00:27:27.430 --> 00:27:40.399
Aikaterini-Panagiota Stouka: the higher the fee, if you have a fee for the includers also, not for the blood producer only, but also for the includers. This can make the cost of the bribing attack higher.

117
00:27:40.580 --> 00:27:56.140
Aikaterini-Panagiota Stouka: This means, like that the higher the fee of a vulnerable transaction for the includers, the more difficult is for the briber to censor this transaction.

118
00:27:57.010 --> 00:28:05.810
Aikaterini-Panagiota Stouka: and an intuition behind this is that if the if the builder is not sure that they will be elected

119
00:28:06.030 --> 00:28:23.770
Aikaterini-Panagiota Stouka: and they have spammed the main pool, maybe if they don't get elected, they cannot invalidate these transactions. These transactions can end up to the block, and they have to pay for them like to pay the burning fee to burn the includer fee. And this thing so like this means that

120
00:28:24.110 --> 00:28:36.499
Aikaterini-Panagiota Stouka: when we have an includer fee, this axion is more risky for the builder, and it has more expected cost, which means that drivers are more difficult.

121
00:28:36.750 --> 00:28:38.569
Aikaterini-Panagiota Stouka: and for these reasons

122
00:28:38.910 --> 00:28:50.399
Aikaterini-Panagiota Stouka: we investigated payment mechanisms that don't give a fee, not only to the block producer to the builder, but they also give some fee to the includers.

123
00:28:51.160 --> 00:28:55.659
Aikaterini-Panagiota Stouka: and we ended up with 2 mechanisms.

124
00:28:55.900 --> 00:29:03.290
Aikaterini-Panagiota Stouka: and both of them satisfy 2 incentive properties of the current fee mechanism

125
00:29:03.390 --> 00:29:14.579
Aikaterini-Panagiota Stouka: and and have an increase in the cost of bribing attacks. But they have some trade-offs like. We will see what these trade-offs are.

126
00:29:14.970 --> 00:29:35.060
Aikaterini-Panagiota Stouka: But first, st let's explain which are this payment mechanism at the very high level. So in the paper you can see exactly like the which is the payment mechanism, the structure of the fee, and how this changes the current fee mechanism and this thing. But for the presentation we keep it high level, like just to give the intuition.

127
00:29:36.230 --> 00:29:40.269
Aikaterini-Panagiota Stouka: And so the 1st payment mechanism is called dabby.

128
00:29:40.540 --> 00:29:45.949
Aikaterini-Panagiota Stouka: And the reason is that we, the user, sets

129
00:29:46.060 --> 00:29:57.130
Aikaterini-Panagiota Stouka: 2 type of fees, one fees for the block producer as it is now in ethereum, and the other refers to the includers.

130
00:29:58.410 --> 00:30:01.790
Aikaterini-Panagiota Stouka: This is the general characteristic of the payment mechanism.

131
00:30:02.190 --> 00:30:14.009
Aikaterini-Panagiota Stouka: and and again and again the fee will be paid only if the transaction make it to the block. So like it's the same thing as the current mechanism.

132
00:30:14.270 --> 00:30:28.510
Aikaterini-Panagiota Stouka: And here we have to determine how the includer fee will be shared inside the committee. Because, okay, the user says, I will give 10

133
00:30:28.960 --> 00:30:50.289
Aikaterini-Panagiota Stouka: very high level. It's not exactly structure of the fee. But okay, say, I will give maximum 10 to the block producer and 11 to to include the committee. And now we have to see how this fee is served inside the committee. So the way it's served inside the committee is the following.

134
00:30:50.703 --> 00:31:15.109
Aikaterini-Panagiota Stouka: we will. We will have assumed that the Includer Committee is assigned a random order. So every includer, when it's elected, it's selected with a random order. So we assume that the committee, every committee member when it's elected, it's elected with a priority so like it has a random number between one and the number of the members.

135
00:31:15.370 --> 00:31:38.749
Aikaterini-Panagiota Stouka: So like the fee, the whole includer fee will go to the member with the best order, who put the transaction in the inclusion list. So if 4 includers put the transaction in the inclusion list. The includer fee will go to the includer with the best order, and of course this order is random. It's not some specific and the same like in every.

136
00:31:38.820 --> 00:31:52.520
Aikaterini-Panagiota Stouka: in every slot. So this is. And actually, it's quite simple, because the difference with the current ethereum mechanism is that there is an extra fee which is for the includers, and this fee goes to the includer with the best order

137
00:31:52.690 --> 00:31:58.140
Aikaterini-Panagiota Stouka: that includes this transaction in the inclusion list. And this is the mechanism.

138
00:31:59.260 --> 00:32:12.720
Aikaterini-Panagiota Stouka: the other mechanism. It's exactly the same. So like it has again the same way that the fee shared inside the committee. And this thing. The only difference is that

139
00:32:12.720 --> 00:32:36.889
Aikaterini-Panagiota Stouka: the user sets a single fee, one fee, and the system determines the fraction that goes to the Includer committee and to the block producer. So the only difference is that now the the user sets a single fee and does not control the fraction of the fee that goes to the block producer and the includer. This is done by the system, and it's the same for all the transaction.

140
00:32:36.890 --> 00:32:52.769
Aikaterini-Panagiota Stouka: So like this is the difference. Otherwise the 2 payment mechanisms are the same. They have an includer fee. The fee inside the committee is shared in the same way. It's everything the same between them.

141
00:32:53.980 --> 00:33:15.460
Aikaterini-Panagiota Stouka: And here we have, like we discussed the trade-offs, and it's both of them have proved that they satisfy properties, as you see, if you are familiar with a rough gardens model this incentive properties. But what happened is that the single mechanism

142
00:33:15.620 --> 00:33:28.750
Aikaterini-Panagiota Stouka: is has the advantage that is simpler, because, like the user doesn't do something extra sets again one fee and waits for the system to to make the splitting between the includer and the proposer.

143
00:33:28.870 --> 00:33:54.969
Aikaterini-Panagiota Stouka: But on the other side the double mechanism is a little more. The user needs to set an extra fee, which means it does something extra, but on the other way. It gives, like the freedom to the user, to select the fraction that wants to go to the includers if they want to give something to the Includer, or they don't want to give anything to the Includer. And this thing. And this is an advantage, because we have seen that

144
00:33:55.060 --> 00:33:57.849
Aikaterini-Panagiota Stouka: we can achieve better sensorship, resistance

145
00:33:57.900 --> 00:34:16.659
Aikaterini-Panagiota Stouka: depending on the characteristic of the transaction, so like, for example, depending on the whole field of transaction. So it is not that there is an ideal splitting that the system can do in every transaction. With tailored splitting we can achieve a little better censorship resistant.

146
00:34:16.659 --> 00:34:38.159
Aikaterini-Panagiota Stouka: But so this is the trade-off single is simpler because there is one fee that the system does the splitting on the other side. It's less simple in the sense that the user selects another fee, but otherwise it has more freedom for the user to set a fee that like it's the best, like for the accessory resistant.

147
00:34:38.560 --> 00:35:04.910
Aikaterini-Panagiota Stouka: And these are like the 2 mechanisms that we propose in the paper you can see like you have. You can see, we explain, exactly like, how much bribe a briber needs. In order like to create a bribing attack. We explain how they satisfy the incentive properties. You can see, like the formal proofs in the paper, but this is the high level overview.

148
00:35:04.920 --> 00:35:13.890
Aikaterini-Panagiota Stouka: And finally, the final part of our work was that we identified a class of mechanism that

149
00:35:14.000 --> 00:35:23.010
Aikaterini-Panagiota Stouka: are not ideal like for our case. So, for example, because they create some problem in congestion.

150
00:35:23.460 --> 00:35:29.560
Aikaterini-Panagiota Stouka: And one example, it's like a payment mechanism that does the following.

151
00:35:29.700 --> 00:35:40.880
Aikaterini-Panagiota Stouka: And if a transaction is included in both in a block and in an inclusion list, then

152
00:35:41.060 --> 00:35:46.850
Aikaterini-Panagiota Stouka: the whole fee. It goes to the includer, because, like this, transaction is an inclusion list.

153
00:35:47.370 --> 00:35:54.600
Aikaterini-Panagiota Stouka: If a transaction is not an inclusion is only the block, the whole fee goes to the block producer.

154
00:35:54.960 --> 00:35:57.879
Aikaterini-Panagiota Stouka: And this is a bad idea, right? Because

155
00:35:58.110 --> 00:36:27.150
Aikaterini-Panagiota Stouka: and if there is congestion, the block producer will always ignore all the transactions from Inclusion list, because, like they can do due to congestion, they'll have other transactions to select, and they don't get any fee for from this transaction, so we cannot, they will not. The block user will not like select them. So, like in general, we have proved that when we're under congestion, a mechanism that

156
00:36:27.380 --> 00:36:39.630
Aikaterini-Panagiota Stouka: give always a record to the block producer are better compared to mechanism that give the whole fee to the includers.

157
00:36:39.980 --> 00:36:46.959
Aikaterini-Panagiota Stouka: So like this is a general. This was like something, a negative result that we found for another type of mechanism.

158
00:36:47.180 --> 00:37:07.360
Aikaterini-Panagiota Stouka: And just to summarize like which are the key takeaways that we discussed is that we we saw that includer fees. If, like transaction has a fee for the includers. This can increase the cost of censorship, other bribing attacks.

159
00:37:07.540 --> 00:37:13.029
Aikaterini-Panagiota Stouka: Thus, for this reason, we propose 2 mechanisms that involve includer phase.

160
00:37:13.390 --> 00:37:29.640
Aikaterini-Panagiota Stouka: The 1st mechanism is called double, and the user sets 2 types of fees, one for the includers and one for the blocked user. And the second type is called single, and the user sets a single fee, but the fee is the fraction that goes to the includer is determined by the system.

161
00:37:29.640 --> 00:37:52.349
Aikaterini-Panagiota Stouka: and both these mechanisms satisfy 2 good properties, like of ethereum mechanism properties. But they have some trade offs like the single is simpler, because there is one thing, but the double gives more freedom to the users to set, like their own fraction that they want to go to the includers. So like this is like

162
00:37:52.350 --> 00:37:55.990
Aikaterini-Panagiota Stouka: the main, the main takeaways.

163
00:37:57.460 --> 00:38:14.249
Aikaterini-Panagiota Stouka: Thank you for your time. Also, you can see here, like in the QR. Code, you can see the paper and like, I'm happy, like to discuss any questions or like, if you would like to elaborate on any slide, or talk more about a topic. Thank you.

164
00:38:17.150 --> 00:38:23.560
thomasthiery: Thanks a lot. Thanks a lot for the presentation that was great. Does anyone have questions.

165
00:38:31.560 --> 00:38:37.670
Marc: Yeah. Well, thanks for the presentation. It's very interesting. I just had a question about

166
00:38:38.020 --> 00:38:53.129
Marc: the way that the include a fee is distributed. So why is it just done on this ordering rather than splitting? So if multiple includers include the same transaction, why need give it to the top? Ranked one.

167
00:38:54.680 --> 00:39:19.809
Aikaterini-Panagiota Stouka: Yeah. Yeah. Good question. Actually, this, the advantage of this of this splitting is not to split like equally to all the member is that if there is, if there is nobody in the committee assume that nobody in the committee has included one transaction.

168
00:39:20.000 --> 00:39:34.579
Aikaterini-Panagiota Stouka: one person of the committee, if they see if, for example, we assume that they could see that this transaction is no inclusion list. If they take this transaction in their inclusion list, they will take the whole fee

169
00:39:34.960 --> 00:39:55.580
Aikaterini-Panagiota Stouka: they will so like, what happens is that, like they they will, they will take the whole fee so like they have the advantage that they will not share this fee with others. And so let me say so. What happened is that the the included with the highest order.

170
00:39:55.580 --> 00:40:21.739
Aikaterini-Panagiota Stouka: when they include this transaction, they will take the whole includer fee, which means that bribing is more expensive, because now the briber needs to give more to this person, and needs to give the whole includer fee at least, and some extra stuff to make them ignore this transaction. If, like the figure splitting among 10 members.

171
00:40:21.740 --> 00:40:35.870
Aikaterini-Panagiota Stouka: then every includer will take 1 10th of the fee, and they could deviate even with a bribe which is like 1 10th of the transaction fees.

172
00:40:36.000 --> 00:41:01.780
Aikaterini-Panagiota Stouka: So somehow like this goes also with other mechanism that they give, like the whole fee to some in some cases like to the includer, is that we want the when an includer omits a transaction to lose the whole fee, not to lose 1 10th

173
00:41:01.780 --> 00:41:07.399
Aikaterini-Panagiota Stouka: of the includer fee. I don't know if does make sense to you, or like.

174
00:41:07.400 --> 00:41:10.909
Marc: Yeah, but generally, I'm not sure that.

175
00:41:11.140 --> 00:41:29.289
Marc: So you're saying so. You knew that all of the other includers had includes included something, but generally I'm not sure that you could know that right, because you're kind of constructing. I guess you're observing which aisles are being gossiped. But then you'd have an incentive to wait and see everyone else's inclusion list first.st

176
00:41:29.450 --> 00:41:50.680
Aikaterini-Panagiota Stouka: Yeah. Yeah. Good point. Actually, I have to correct, because I was thinking, when we have an order, a good point, you don't need, you need to know only your order. You don't need like to know what the other inclusion includeers have included, because what happened is that the advantage of the order, as you say, is, that

177
00:41:50.680 --> 00:42:18.389
Aikaterini-Panagiota Stouka: if I am the person with the best order, I know that if I put this transaction I will take the whole fee, even if other 10 people do the same, I have priority. So somehow, if you know the size of the inclusion list, only this the maximum size, and you know your order, and assume that all the other people are rational, which means that they will select the transactions with the highest includer fee you can compute on your own

178
00:42:18.510 --> 00:42:44.549
Aikaterini-Panagiota Stouka: which transaction will be taken. So, for example, if I am person with Order 3, I will know that the 1st person with the best order, will take the best transactions, so like I will. Don't make an attempt to put this in my inclusion list, because even if I put them. I will not take any fee, the other have priority. I will put the next available transaction. So the advantage of the order is that you can predict

179
00:42:44.550 --> 00:43:06.719
Aikaterini-Panagiota Stouka: what the other will do without actually see their inclusion list. You imagine that a person will select the best includeer fees the transaction with the best includer fees that match their order. So, for example, if if

180
00:43:06.770 --> 00:43:09.140
Aikaterini-Panagiota Stouka: an inclusion list has size 10,

181
00:43:09.330 --> 00:43:19.459
Aikaterini-Panagiota Stouka: the person with order, one will select the 10 transaction with the best fee, the person with order. 2 will select

182
00:43:19.700 --> 00:43:30.570
Aikaterini-Panagiota Stouka: the transaction, not the best transaction in terms of fee, but beginning of 11th until to end it so somehow, if a person knows their order.

183
00:43:30.780 --> 00:43:51.369
Aikaterini-Panagiota Stouka: they can, they can somehow make order the fee according to the includer fees, and select the part that belongs to them somehow, and if all are rational like they will have. This is the best they can do, like for a to maximize their profits. If it makes sense.

184
00:43:53.730 --> 00:43:57.429
Marc: Yeah, I think it makes sense, but I guess it does kind of break

185
00:43:57.700 --> 00:44:10.180
Marc: the property we have that, you know, you have, like a 1 of N honesty assumption. So now you can sort of map. Say, if you're the 3rd ranked, you know these are this range of transactions I'm estimating

186
00:44:11.560 --> 00:44:18.609
Marc: are are going to be like if everyone else chooses rationally. Yeah, sorry. I'm what I'm saying is like

187
00:44:18.790 --> 00:44:27.140
Marc: before we have this. You know, you can have multiple included, you'd have to bribe, whereas now there's just one and it also assumes that everyone's gonna

188
00:44:27.310 --> 00:44:29.310
Marc: follow the same strategy

189
00:44:29.750 --> 00:44:40.260
Marc: and like, I'm just not completely sure that the the most rational behavior necessarily is to assume that everyone's gonna do that, or that someone might follow a different strategy.

190
00:44:40.573 --> 00:45:00.580
Marc: or or the you know, if if this is the fee that's associated with the transaction that include a tip that might be, you know, other incentives outside to someone's, you know, so you can know that this is going to go to the rank 3rd person, right? So you can just bribe them. You don't have to worry about anyone else. Does that make sense.

191
00:45:00.580 --> 00:45:21.210
Aikaterini-Panagiota Stouka: Yeah, actually, yeah, yeah, sure. So what we do is again, like, if the other persons are not rational, then you may like ignore some transaction that could could give you like some fee, because, like, if I say, Okay, I have ordered 2, so I will not select the highest fee transaction, because

192
00:45:21.210 --> 00:45:49.680
Aikaterini-Panagiota Stouka: person with order one will do. If the person with order one doesn't do this, it's a pity, because they could take this transaction because of the bribing. But what happened is that in our model we compute what happens at an equilibrium so like, of course, in the equilibrium, we assume that all the other. Do this, the indicated strategy, and what you see, what you do so like. It is this equilibrium assumption, but also we take into account bribings.

193
00:45:49.710 --> 00:46:07.590
Aikaterini-Panagiota Stouka: So of course, there is the assumption that okay assume that all are rational. This is the rational things to do. But the good thing is that we capture bribing in this rational behavior. We don't think that they are rational ignoring bribes.

194
00:46:07.590 --> 00:46:21.360
Aikaterini-Panagiota Stouka: We, the proofs we do is that we think that the other people are rational, and they take bribes, and also we have in our model. We take into account that you may not be sued

195
00:46:21.360 --> 00:46:38.069
Aikaterini-Panagiota Stouka: about. If the other person takes or not bribe. So somehow we make the roof agnostic that, like I am, I don't know like if the other people take or not bribe. But again, what is my behavior in an equilibrium? So somehow we.

196
00:46:38.070 --> 00:46:46.149
Aikaterini-Panagiota Stouka: we assume that all the rational people it is this rational assumption, of course, which is an assumption right that they are rational.

197
00:46:46.150 --> 00:47:10.819
Aikaterini-Panagiota Stouka: but we don't consider them that they don't take bribe. We say, Okay, they are rational, but they may take bribe, which means that if the bribe is high enough, they may censor, and also we take into account that every person is not sure about the bribe of the other. They cannot know if they are bribed, so somehow we do something like Bayesian mass equilibrium, where you don't know exactly

198
00:47:10.870 --> 00:47:38.320
Aikaterini-Panagiota Stouka: which is the other player. But you have some beliefs. You believe like that with 50% like they take a bribe or not. So like on one side, it is the assumption of rationality, as you say, which is an assumption, because we consider them rational. But on the other side we don't consider them rational without bribe. We leave the thing that they may take, bribe and censor the transaction. So this is like what we take into account.

199
00:47:40.000 --> 00:47:47.530
Marc: Yeah, thank you. I need to read through. It sounds interesting. But just one more thing I'm thinking about with this is, you know, we're only considering.

200
00:47:47.780 --> 00:48:09.210
Marc: you know, rational as responding to bribes. But what if the include is actually trying to get their own transaction included? Then they might have an incentive to pretend that they're gonna accept the bribe so that the person the briber doesn't bribe other people. It's actually they're gonna put it in their inclusion list, anyway, to get their own transaction included. So I mean, so they might have this other incentive as well.

201
00:48:10.029 --> 00:48:11.300
Aikaterini-Panagiota Stouka: Actually, I bet.

202
00:48:11.300 --> 00:48:35.260
thomasthiery: Sorry. I I think I'm gonna have to sort of like, get it here, just to make sure we have time for like the implementation updates. But if you if you guys can, you either follow up in the chat or or later, that would be great time. I hate to do this, but I want to make sure. At least we get like 15 min. For, like the implementation sort of updates.

203
00:48:35.730 --> 00:48:38.730
Aikaterini-Panagiota Stouka: So can I say in the text? Right? I can.

204
00:48:39.030 --> 00:48:39.740
thomasthiery: Yes, yes.

205
00:48:39.740 --> 00:48:41.310
Aikaterini-Panagiota Stouka: Yeah. Great Marco.

206
00:48:41.310 --> 00:48:42.390
Aikaterini-Panagiota Stouka: Thanks. Great, thank you.

207
00:48:42.390 --> 00:48:46.826
thomasthiery: Thanks a lot. And thanks again for the presentation.

208
00:48:48.310 --> 00:48:55.420
thomasthiery: yeah, I I do want to hear about things that have been happening on the

209
00:48:56.055 --> 00:49:04.900
thomasthiery: implementation side of things. I I did see quite a lot of things in the discord channel. So if anyone wants to share updates, that would be great.

210
00:49:17.113 --> 00:49:23.916
jacob k: I could start so it looks like we got the changes to the IP merge, which is, which is great.

211
00:49:25.090 --> 00:49:29.629
jacob k: I have a Pr on the execution. Specs for

212
00:49:30.945 --> 00:49:36.054
jacob k: yeah, essentially, just adding, adding a branch

213
00:49:36.970 --> 00:49:43.260
jacob k: with the fossil IP, and then based on that, also have a branch of the execution spec test

214
00:49:45.640 --> 00:49:48.729
jacob k: which I don't have a pr open for yet.

215
00:49:49.302 --> 00:49:53.227
jacob k: Although I can. If that makes the discussion easier.

216
00:49:54.540 --> 00:50:03.729
jacob k: would be nice if at least the all clients could verify. They can generate the test fixtures and consume them. Right now, and these are

217
00:50:05.192 --> 00:50:12.120
jacob k: marked as engine test, only. So they generate hive

218
00:50:12.547 --> 00:50:18.829
jacob k: fixtures. At least, that's what they're called. And execution spec test documentation.

219
00:50:21.710 --> 00:50:28.240
jacob k: But yeah, that's it's mainly mainly the update and then, yeah, I think I'll change the

220
00:50:28.730 --> 00:50:34.833
jacob k: implementation in the execution. Specs. Pr to to not

221
00:50:35.800 --> 00:50:38.510
jacob k: attempt to execute each transaction, but to

222
00:50:39.331 --> 00:50:43.400
jacob k: kind of statically verify these transactions.

223
00:50:44.018 --> 00:50:47.090
jacob k: But yeah, that's that's mainly it.

224
00:50:48.420 --> 00:50:59.960
thomasthiery: Nice. Yeah, thanks. That that's awesome. And so you say, what would help now is having el clients sort of like, try and generate this from what you made.

225
00:51:01.670 --> 00:51:05.470
jacob k: To try to generate them, and and also consume them.

226
00:51:05.850 --> 00:51:08.790
thomasthiery: Okay. Okay.

227
00:51:09.020 --> 00:51:09.680
thomasthiery: Yeah. Sorry.

228
00:51:09.680 --> 00:51:18.577
jacob k: I imagine. Oh, sorry. Yeah, I imagine they would be familiar, or at least likely to be familiar with that execution spec test, but

229
00:51:19.510 --> 00:51:24.019
jacob k: If not, there's some documentation on how to consume the test.

230
00:51:25.400 --> 00:51:29.100
thomasthiery: Nice. And so that would be

231
00:51:31.340 --> 00:51:42.610
thomasthiery: because, yeah, I mean, so far you've been working on the rep side of things. And and Jehoon has been working on the get side of things. And then Mark has been working on on this online. But I,

232
00:51:43.501 --> 00:51:50.280
thomasthiery: so you need, we need input, from, get and read people or

233
00:51:50.860 --> 00:51:58.529
thomasthiery: can you and Jihoon start testing things like, What's the? Or is it just like something.

234
00:52:01.401 --> 00:52:06.800
jacob k: No, it doesn't have to necessarily be. Klein does. But the definitely

235
00:52:06.980 --> 00:52:13.789
jacob k: been spending less like, I haven't really spent much time on the the rath code base in it

236
00:52:15.130 --> 00:52:21.429
jacob k: in a while. So, you have to someone that's more actively working on the Yale implementation than

237
00:52:24.390 --> 00:52:27.779
thomasthiery: Nice. Okay, yeah, that's great. That makes sense.

238
00:52:30.850 --> 00:52:32.059
thomasthiery: Thanks. A lot.

239
00:52:34.582 --> 00:52:37.230
thomasthiery: Any other updates.

240
00:52:39.290 --> 00:52:46.490
Jihoon: Yeah, I think I can go next. I I opened a draft Pr to. I just suspects there was a feedback. That

241
00:52:47.070 --> 00:52:58.840
Jihoon: why we have such changes is unclear. So I left detailed reasons behind the change. Please be aware that the work is not finished yet, so elect several

242
00:52:59.582 --> 00:53:05.579
Jihoon: tests, and so on. And I'm planning to get back to it. After the volume interrupt.

243
00:53:06.170 --> 00:53:12.770
Jihoon: I also reached out to Lighthouse. I was told that it was just low priority so far.

244
00:53:13.350 --> 00:53:21.129
Jihoon: so I did some debugging to help them out a little bit. But of course there are some more work to be done to get the interrupt work.

245
00:53:21.861 --> 00:53:24.880
Jihoon: Yeah, that's it all. From my end.

246
00:53:27.110 --> 00:53:29.595
thomasthiery: Great that made that makes sense.

247
00:53:30.560 --> 00:53:35.949
thomasthiery: I don't remember who was working on unforced from the light lighthouse side. Do you know.

248
00:53:37.410 --> 00:53:40.760
Jihoon: 8 10, I believe.

249
00:53:41.368 --> 00:53:42.839
thomasthiery: Yes, yes. Okay, perfect.

250
00:53:43.010 --> 00:53:44.229
thomasthiery: Okay. Yeah. Sounds good.

251
00:53:44.600 --> 00:53:45.820
thomasthiery: Great, thanks. A lot.

252
00:53:48.850 --> 00:53:56.769
thomasthiery: Nice mark. I remember you maybe wanted to touch on things about the IP as well.

253
00:53:59.777 --> 00:54:09.419
Marc: Yeah. So I have an another Pr open, which, hopefully, people can take a look at which is right to the inclusion list building.

254
00:54:10.700 --> 00:54:14.768
Marc: and specifically adding a flag so that

255
00:54:16.090 --> 00:54:30.819
Marc: that that is passed to the inclusion list builders. That gives them like a unique id that they can use and this helps to kind of control the amount of overlap between different inclusion lists.

256
00:54:32.720 --> 00:54:53.970
Marc: yeah, the the kind of reason. I think this is important is so we kind of have this like, slow path. Oh, yeah, sorry. I'll send a link to the Pr in a second. Yeah. So we have sort of like this. This slow inclusion path? Which is where, say your transactions been pending for a while.

257
00:54:55.510 --> 00:55:12.230
Marc: then eventually, like, it will be given high schools by the builders, because they'll see it's been pending for a while, and then hopefully, lots of them will try and include it. But that doesn't necessarily give you very quick inclusion. So I think can help. Here is if you have some like randomness.

258
00:55:12.360 --> 00:55:14.330
Marc: Then.

259
00:55:14.670 --> 00:55:25.270
Marc: essentially, even if you know your transactions only just been sent. So it's not obvious that it's going to be censored. Yet you might get randomly picked by an inclusion list builder.

260
00:55:25.809 --> 00:55:37.000
Marc: So yeah, I think this generally helps to increase the kind of throughput of the inclusion list by and and the speed of of inclusion. Is the kind of motivation.

261
00:55:41.570 --> 00:55:49.189
thomasthiery: Great. Yeah, thanks. Thanks. A lot would be nice if people can. Take a look at the Pr, I think

262
00:55:49.730 --> 00:55:56.339
thomasthiery: generally makes sense. It's also things we've talked about before. But I think, yeah, some of them

263
00:55:56.883 --> 00:56:04.030
thomasthiery: or nice to add in the IP to guide how Yale clients ultimately want to

264
00:56:04.910 --> 00:56:09.500
thomasthiery: build the the inclusion lists according to what they.

265
00:56:09.920 --> 00:56:15.409
thomasthiery: the criteria they sort of like value most. I think it. Yeah. It provides like good guidelines.

266
00:56:19.490 --> 00:56:28.320
thomasthiery: Okay, great. And then I remember seeing things about transaction, visualization and metrics.

267
00:56:29.920 --> 00:56:34.560
thomasthiery: Are there any updates there, or like any other from any other clients?

268
00:56:36.140 --> 00:56:43.529
Katya Riazantseva: Yeah, I just shared the draft. VR about metrics. If you are interested to look at.

269
00:56:44.220 --> 00:56:52.190
Katya Riazantseva: it's beacon metrics. Yeah, I hope to update it. During the Berlin

270
00:56:52.830 --> 00:56:55.780
Katya Riazantseva: interrupt, because I'm a little bit outdated.

271
00:56:55.900 --> 00:57:03.500
Katya Riazantseva: was busy with pure das? So yeah, I hope to to discuss them in Berlin as well.

272
00:57:03.990 --> 00:57:10.190
Katya Riazantseva: But you can just take a look and decide if you, if you need any specific metrics.

273
00:57:11.900 --> 00:57:14.390
Katya Riazantseva: so that would be great to hear from you.

274
00:57:15.070 --> 00:57:16.439
thomasthiery: Yeah, it was great.

275
00:57:18.160 --> 00:57:22.189
thomasthiery: Yeah, thanks for watching. I'll definitely take a you look. And if any

276
00:57:22.610 --> 00:57:29.969
thomasthiery: other people want to take a look as well. I think that's useful to sort of like. Agree on the set of metrics. That would be nice to track.

277
00:57:31.220 --> 00:57:37.909
Katya Riazantseva: Yeah. And also good news that we now have execution. Metrics, specs, repo.

278
00:57:38.380 --> 00:57:43.480
Katya Riazantseva: If Jahom has any ideas which metrics should be standardized.

279
00:57:44.200 --> 00:57:47.440
Katya Riazantseva: Yeah, that that will be also great to share.

280
00:57:53.220 --> 00:58:00.630
Katya Riazantseva: Because we have a nice results about this standardization. It's it's much, much easier to

281
00:58:00.790 --> 00:58:09.309
Katya Riazantseva: to test the interrupt which is, which is we are now doing on pure das, so

282
00:58:09.610 --> 00:58:11.959
Katya Riazantseva: who will definitely benefit from it?

283
00:58:14.398 --> 00:58:16.230
thomasthiery: Yeah, very, very helpful.

284
00:58:21.140 --> 00:58:29.290
thomasthiery: Great. And I, yeah, I remember you shared that in the in the discord channel in case. So if anyone wants to take a look

285
00:58:31.530 --> 00:58:34.020
thomasthiery: any other updates.

286
00:58:49.770 --> 00:58:55.479
thomasthiery: Okay? If not. Thanks. Everyone for joining the session.

287
00:58:55.981 --> 00:59:02.239
thomasthiery: And yeah, I'm looking forward to see some of you in person in in Berlin.

288
00:59:02.460 --> 00:59:08.310
thomasthiery: and see you soon. Bye-bye.

289
00:59:09.680 --> 00:59:11.159
Aikaterini-Panagiota Stouka: Thank you. Bye. Thank you.

290
00:59:11.160 --> 00:59:12.240
Aikaterini-Panagiota Stouka: Goodbye.

291
00:59:14.250 --> 00:59:15.149
Julian Ma: Thanks, very.

